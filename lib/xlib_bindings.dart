// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<XkbKeyAliasPtr> XkbAddGeomKeyAlias(
    ffi.Pointer<_XkbGeometry> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XkbAddGeomKeyAlias ??=
        _dylib.lookupFunction<_c_XkbAddGeomKeyAlias, _dart_XkbAddGeomKeyAlias>(
            'XkbAddGeomKeyAlias');
    return _XkbAddGeomKeyAlias(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAddGeomKeyAlias _XkbAddGeomKeyAlias;

  ffi.Pointer<XkbColorPtr> XkbAddGeomColor(
    ffi.Pointer<_XkbGeometry> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XkbAddGeomColor ??=
        _dylib.lookupFunction<_c_XkbAddGeomColor, _dart_XkbAddGeomColor>(
            'XkbAddGeomColor');
    return _XkbAddGeomColor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAddGeomColor _XkbAddGeomColor;

  ffi.Pointer<XkbOutlinePtr> XkbAddGeomOutline(
    ffi.Pointer<XkbShapePtr> arg0,
    int arg1,
  ) {
    _XkbAddGeomOutline ??=
        _dylib.lookupFunction<_c_XkbAddGeomOutline, _dart_XkbAddGeomOutline>(
            'XkbAddGeomOutline');
    return _XkbAddGeomOutline(
      arg0,
      arg1,
    );
  }

  _dart_XkbAddGeomOutline _XkbAddGeomOutline;

  ffi.Pointer<XkbShapePtr> XkbAddGeomShape(
    ffi.Pointer<_XkbGeometry> arg0,
    int Atom,
    int arg2,
  ) {
    _XkbAddGeomShape ??=
        _dylib.lookupFunction<_c_XkbAddGeomShape, _dart_XkbAddGeomShape>(
            'XkbAddGeomShape');
    return _XkbAddGeomShape(
      arg0,
      Atom,
      arg2,
    );
  }

  _dart_XkbAddGeomShape _XkbAddGeomShape;

  ffi.Pointer<XkbKeyPtr> XkbAddGeomKey(
    ffi.Pointer<XkbRowPtr> arg0,
  ) {
    _XkbAddGeomKey ??= _dylib
        .lookupFunction<_c_XkbAddGeomKey, _dart_XkbAddGeomKey>('XkbAddGeomKey');
    return _XkbAddGeomKey(
      arg0,
    );
  }

  _dart_XkbAddGeomKey _XkbAddGeomKey;

  ffi.Pointer<XkbRowPtr> XkbAddGeomRow(
    ffi.Pointer<XkbSectionPtr> arg0,
    int arg1,
  ) {
    _XkbAddGeomRow ??= _dylib
        .lookupFunction<_c_XkbAddGeomRow, _dart_XkbAddGeomRow>('XkbAddGeomRow');
    return _XkbAddGeomRow(
      arg0,
      arg1,
    );
  }

  _dart_XkbAddGeomRow _XkbAddGeomRow;

  ffi.Pointer<XkbSectionPtr> XkbAddGeomSection(
    ffi.Pointer<_XkbGeometry> arg0,
    int Atom,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbAddGeomSection ??=
        _dylib.lookupFunction<_c_XkbAddGeomSection, _dart_XkbAddGeomSection>(
            'XkbAddGeomSection');
    return _XkbAddGeomSection(
      arg0,
      Atom,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbAddGeomSection _XkbAddGeomSection;

  ffi.Pointer<XkbOverlayPtr> XkbAddGeomOverlay(
    ffi.Pointer<XkbSectionPtr> arg0,
    int Atom,
    int arg2,
  ) {
    _XkbAddGeomOverlay ??=
        _dylib.lookupFunction<_c_XkbAddGeomOverlay, _dart_XkbAddGeomOverlay>(
            'XkbAddGeomOverlay');
    return _XkbAddGeomOverlay(
      arg0,
      Atom,
      arg2,
    );
  }

  _dart_XkbAddGeomOverlay _XkbAddGeomOverlay;

  ffi.Pointer<XkbOverlayRowPtr> XkbAddGeomOverlayRow(
    ffi.Pointer<XkbOverlayPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbAddGeomOverlayRow ??= _dylib.lookupFunction<_c_XkbAddGeomOverlayRow,
        _dart_XkbAddGeomOverlayRow>('XkbAddGeomOverlayRow');
    return _XkbAddGeomOverlayRow(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAddGeomOverlayRow _XkbAddGeomOverlayRow;

  ffi.Pointer<XkbOverlayKeyPtr> XkbAddGeomOverlayKey(
    ffi.Pointer<XkbOverlayPtr> arg0,
    ffi.Pointer<XkbOverlayRowPtr> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _XkbAddGeomOverlayKey ??= _dylib.lookupFunction<_c_XkbAddGeomOverlayKey,
        _dart_XkbAddGeomOverlayKey>('XkbAddGeomOverlayKey');
    return _XkbAddGeomOverlayKey(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbAddGeomOverlayKey _XkbAddGeomOverlayKey;

  void XkbFreeGeomKeyAliases(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomKeyAliases ??= _dylib.lookupFunction<_c_XkbFreeGeomKeyAliases,
        _dart_XkbFreeGeomKeyAliases>('XkbFreeGeomKeyAliases');
    return _XkbFreeGeomKeyAliases(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomKeyAliases _XkbFreeGeomKeyAliases;

  void XkbFreeGeomColors(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomColors ??=
        _dylib.lookupFunction<_c_XkbFreeGeomColors, _dart_XkbFreeGeomColors>(
            'XkbFreeGeomColors');
    return _XkbFreeGeomColors(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomColors _XkbFreeGeomColors;

  void XkbFreeGeomProperties(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomProperties ??= _dylib.lookupFunction<_c_XkbFreeGeomProperties,
        _dart_XkbFreeGeomProperties>('XkbFreeGeomProperties');
    return _XkbFreeGeomProperties(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomProperties _XkbFreeGeomProperties;

  void XkbFreeGeomOverlayKeys(
    ffi.Pointer<XkbOverlayRowPtr> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomOverlayKeys ??= _dylib.lookupFunction<_c_XkbFreeGeomOverlayKeys,
        _dart_XkbFreeGeomOverlayKeys>('XkbFreeGeomOverlayKeys');
    return _XkbFreeGeomOverlayKeys(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomOverlayKeys _XkbFreeGeomOverlayKeys;

  void XkbFreeGeomOverlayRows(
    ffi.Pointer<XkbOverlayPtr> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomOverlayRows ??= _dylib.lookupFunction<_c_XkbFreeGeomOverlayRows,
        _dart_XkbFreeGeomOverlayRows>('XkbFreeGeomOverlayRows');
    return _XkbFreeGeomOverlayRows(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomOverlayRows _XkbFreeGeomOverlayRows;

  void XkbFreeGeomOverlays(
    ffi.Pointer<XkbSectionPtr> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomOverlays ??= _dylib.lookupFunction<_c_XkbFreeGeomOverlays,
        _dart_XkbFreeGeomOverlays>('XkbFreeGeomOverlays');
    return _XkbFreeGeomOverlays(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomOverlays _XkbFreeGeomOverlays;

  void XkbFreeGeomKeys(
    ffi.Pointer<XkbRowPtr> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomKeys ??=
        _dylib.lookupFunction<_c_XkbFreeGeomKeys, _dart_XkbFreeGeomKeys>(
            'XkbFreeGeomKeys');
    return _XkbFreeGeomKeys(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomKeys _XkbFreeGeomKeys;

  void XkbFreeGeomRows(
    ffi.Pointer<XkbSectionPtr> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomRows ??=
        _dylib.lookupFunction<_c_XkbFreeGeomRows, _dart_XkbFreeGeomRows>(
            'XkbFreeGeomRows');
    return _XkbFreeGeomRows(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomRows _XkbFreeGeomRows;

  void XkbFreeGeomSections(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomSections ??= _dylib.lookupFunction<_c_XkbFreeGeomSections,
        _dart_XkbFreeGeomSections>('XkbFreeGeomSections');
    return _XkbFreeGeomSections(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomSections _XkbFreeGeomSections;

  void XkbFreeGeomPoints(
    ffi.Pointer<XkbOutlinePtr> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomPoints ??=
        _dylib.lookupFunction<_c_XkbFreeGeomPoints, _dart_XkbFreeGeomPoints>(
            'XkbFreeGeomPoints');
    return _XkbFreeGeomPoints(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomPoints _XkbFreeGeomPoints;

  void XkbFreeGeomOutlines(
    ffi.Pointer<XkbShapePtr> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomOutlines ??= _dylib.lookupFunction<_c_XkbFreeGeomOutlines,
        _dart_XkbFreeGeomOutlines>('XkbFreeGeomOutlines');
    return _XkbFreeGeomOutlines(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomOutlines _XkbFreeGeomOutlines;

  void XkbFreeGeomShapes(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
    int arg2,
    int Bool,
  ) {
    _XkbFreeGeomShapes ??=
        _dylib.lookupFunction<_c_XkbFreeGeomShapes, _dart_XkbFreeGeomShapes>(
            'XkbFreeGeomShapes');
    return _XkbFreeGeomShapes(
      arg0,
      arg1,
      arg2,
      Bool,
    );
  }

  _dart_XkbFreeGeomShapes _XkbFreeGeomShapes;

  void XkbFreeGeometry(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
    int Bool,
  ) {
    _XkbFreeGeometry ??=
        _dylib.lookupFunction<_c_XkbFreeGeometry, _dart_XkbFreeGeometry>(
            'XkbFreeGeometry');
    return _XkbFreeGeometry(
      arg0,
      arg1,
      Bool,
    );
  }

  _dart_XkbFreeGeometry _XkbFreeGeometry;

  int XkbAllocGeomProps(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
  ) {
    _XkbAllocGeomProps ??=
        _dylib.lookupFunction<_c_XkbAllocGeomProps, _dart_XkbAllocGeomProps>(
            'XkbAllocGeomProps');
    return _XkbAllocGeomProps(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomProps _XkbAllocGeomProps;

  int XkbAllocGeomKeyAliases(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
  ) {
    _XkbAllocGeomKeyAliases ??= _dylib.lookupFunction<_c_XkbAllocGeomKeyAliases,
        _dart_XkbAllocGeomKeyAliases>('XkbAllocGeomKeyAliases');
    return _XkbAllocGeomKeyAliases(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomKeyAliases _XkbAllocGeomKeyAliases;

  int XkbAllocGeomColors(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
  ) {
    _XkbAllocGeomColors ??=
        _dylib.lookupFunction<_c_XkbAllocGeomColors, _dart_XkbAllocGeomColors>(
            'XkbAllocGeomColors');
    return _XkbAllocGeomColors(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomColors _XkbAllocGeomColors;

  int XkbAllocGeomShapes(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
  ) {
    _XkbAllocGeomShapes ??=
        _dylib.lookupFunction<_c_XkbAllocGeomShapes, _dart_XkbAllocGeomShapes>(
            'XkbAllocGeomShapes');
    return _XkbAllocGeomShapes(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomShapes _XkbAllocGeomShapes;

  int XkbAllocGeomSections(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
  ) {
    _XkbAllocGeomSections ??= _dylib.lookupFunction<_c_XkbAllocGeomSections,
        _dart_XkbAllocGeomSections>('XkbAllocGeomSections');
    return _XkbAllocGeomSections(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomSections _XkbAllocGeomSections;

  int XkbAllocGeomOverlays(
    ffi.Pointer<XkbSectionPtr> arg0,
    int arg1,
  ) {
    _XkbAllocGeomOverlays ??= _dylib.lookupFunction<_c_XkbAllocGeomOverlays,
        _dart_XkbAllocGeomOverlays>('XkbAllocGeomOverlays');
    return _XkbAllocGeomOverlays(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomOverlays _XkbAllocGeomOverlays;

  int XkbAllocGeomOverlayRows(
    ffi.Pointer<XkbOverlayPtr> arg0,
    int arg1,
  ) {
    _XkbAllocGeomOverlayRows ??= _dylib.lookupFunction<
        _c_XkbAllocGeomOverlayRows,
        _dart_XkbAllocGeomOverlayRows>('XkbAllocGeomOverlayRows');
    return _XkbAllocGeomOverlayRows(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomOverlayRows _XkbAllocGeomOverlayRows;

  int XkbAllocGeomOverlayKeys(
    ffi.Pointer<XkbOverlayRowPtr> arg0,
    int arg1,
  ) {
    _XkbAllocGeomOverlayKeys ??= _dylib.lookupFunction<
        _c_XkbAllocGeomOverlayKeys,
        _dart_XkbAllocGeomOverlayKeys>('XkbAllocGeomOverlayKeys');
    return _XkbAllocGeomOverlayKeys(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomOverlayKeys _XkbAllocGeomOverlayKeys;

  int XkbAllocGeomDoodads(
    ffi.Pointer<_XkbGeometry> arg0,
    int arg1,
  ) {
    _XkbAllocGeomDoodads ??= _dylib.lookupFunction<_c_XkbAllocGeomDoodads,
        _dart_XkbAllocGeomDoodads>('XkbAllocGeomDoodads');
    return _XkbAllocGeomDoodads(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomDoodads _XkbAllocGeomDoodads;

  int XkbAllocGeomSectionDoodads(
    ffi.Pointer<XkbSectionPtr> arg0,
    int arg1,
  ) {
    _XkbAllocGeomSectionDoodads ??= _dylib.lookupFunction<
        _c_XkbAllocGeomSectionDoodads,
        _dart_XkbAllocGeomSectionDoodads>('XkbAllocGeomSectionDoodads');
    return _XkbAllocGeomSectionDoodads(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomSectionDoodads _XkbAllocGeomSectionDoodads;

  int XkbAllocGeomOutlines(
    ffi.Pointer<XkbShapePtr> arg0,
    int arg1,
  ) {
    _XkbAllocGeomOutlines ??= _dylib.lookupFunction<_c_XkbAllocGeomOutlines,
        _dart_XkbAllocGeomOutlines>('XkbAllocGeomOutlines');
    return _XkbAllocGeomOutlines(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomOutlines _XkbAllocGeomOutlines;

  int XkbAllocGeomRows(
    ffi.Pointer<XkbSectionPtr> arg0,
    int arg1,
  ) {
    _XkbAllocGeomRows ??=
        _dylib.lookupFunction<_c_XkbAllocGeomRows, _dart_XkbAllocGeomRows>(
            'XkbAllocGeomRows');
    return _XkbAllocGeomRows(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomRows _XkbAllocGeomRows;

  int XkbAllocGeomPoints(
    ffi.Pointer<XkbOutlinePtr> arg0,
    int arg1,
  ) {
    _XkbAllocGeomPoints ??=
        _dylib.lookupFunction<_c_XkbAllocGeomPoints, _dart_XkbAllocGeomPoints>(
            'XkbAllocGeomPoints');
    return _XkbAllocGeomPoints(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomPoints _XkbAllocGeomPoints;

  int XkbAllocGeomKeys(
    ffi.Pointer<XkbRowPtr> arg0,
    int arg1,
  ) {
    _XkbAllocGeomKeys ??=
        _dylib.lookupFunction<_c_XkbAllocGeomKeys, _dart_XkbAllocGeomKeys>(
            'XkbAllocGeomKeys');
    return _XkbAllocGeomKeys(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeomKeys _XkbAllocGeomKeys;

  int XkbAllocGeometry(
    ffi.Pointer<XkbDescPtr> arg0,
    ffi.Pointer<XkbGeometrySizesPtr> arg1,
  ) {
    _XkbAllocGeometry ??=
        _dylib.lookupFunction<_c_XkbAllocGeometry, _dart_XkbAllocGeometry>(
            'XkbAllocGeometry');
    return _XkbAllocGeometry(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocGeometry _XkbAllocGeometry;

  int XkbSetGeometry(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
    ffi.Pointer<_XkbGeometry> arg2,
  ) {
    _XkbSetGeometry ??=
        _dylib.lookupFunction<_c_XkbSetGeometry, _dart_XkbSetGeometry>(
            'XkbSetGeometry');
    return _XkbSetGeometry(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbSetGeometry _XkbSetGeometry;

  int XkbComputeShapeTop(
    ffi.Pointer<XkbShapePtr> arg0,
    ffi.Pointer<XkbBoundsPtr> arg1,
  ) {
    _XkbComputeShapeTop ??=
        _dylib.lookupFunction<_c_XkbComputeShapeTop, _dart_XkbComputeShapeTop>(
            'XkbComputeShapeTop');
    return _XkbComputeShapeTop(
      arg0,
      arg1,
    );
  }

  _dart_XkbComputeShapeTop _XkbComputeShapeTop;

  int XkbComputeShapeBounds(
    ffi.Pointer<XkbShapePtr> arg0,
  ) {
    _XkbComputeShapeBounds ??= _dylib.lookupFunction<_c_XkbComputeShapeBounds,
        _dart_XkbComputeShapeBounds>('XkbComputeShapeBounds');
    return _XkbComputeShapeBounds(
      arg0,
    );
  }

  _dart_XkbComputeShapeBounds _XkbComputeShapeBounds;

  int XkbComputeRowBounds(
    ffi.Pointer<_XkbGeometry> arg0,
    ffi.Pointer<XkbSectionPtr> arg1,
    ffi.Pointer<XkbRowPtr> arg2,
  ) {
    _XkbComputeRowBounds ??= _dylib.lookupFunction<_c_XkbComputeRowBounds,
        _dart_XkbComputeRowBounds>('XkbComputeRowBounds');
    return _XkbComputeRowBounds(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbComputeRowBounds _XkbComputeRowBounds;

  int XkbComputeSectionBounds(
    ffi.Pointer<_XkbGeometry> arg0,
    ffi.Pointer<XkbSectionPtr> arg1,
  ) {
    _XkbComputeSectionBounds ??= _dylib.lookupFunction<
        _c_XkbComputeSectionBounds,
        _dart_XkbComputeSectionBounds>('XkbComputeSectionBounds');
    return _XkbComputeSectionBounds(
      arg0,
      arg1,
    );
  }

  _dart_XkbComputeSectionBounds _XkbComputeSectionBounds;

  ffi.Pointer<ffi.Int8> XkbFindOverlayForKey(
    ffi.Pointer<_XkbGeometry> arg0,
    ffi.Pointer<XkbSectionPtr> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XkbFindOverlayForKey ??= _dylib.lookupFunction<_c_XkbFindOverlayForKey,
        _dart_XkbFindOverlayForKey>('XkbFindOverlayForKey');
    return _XkbFindOverlayForKey(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbFindOverlayForKey _XkbFindOverlayForKey;

  int XkbGetGeometry(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<XkbDescPtr> arg1,
  ) {
    _XkbGetGeometry ??=
        _dylib.lookupFunction<_c_XkbGetGeometry, _dart_XkbGetGeometry>(
            'XkbGetGeometry');
    return _XkbGetGeometry(
      arg0,
      arg1,
    );
  }

  _dart_XkbGetGeometry _XkbGetGeometry;

  int XkbGetNamedGeometry(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<XkbDescPtr> arg1,
    int Atom,
  ) {
    _XkbGetNamedGeometry ??= _dylib.lookupFunction<_c_XkbGetNamedGeometry,
        _dart_XkbGetNamedGeometry>('XkbGetNamedGeometry');
    return _XkbGetNamedGeometry(
      arg0,
      arg1,
      Atom,
    );
  }

  _dart_XkbGetNamedGeometry _XkbGetNamedGeometry;

  int _XGetScanlinePad(
    ffi.Pointer<ffi.Int32> dpy,
    int depth,
  ) {
    __XGetScanlinePad ??=
        _dylib.lookupFunction<_c__XGetScanlinePad, _dart__XGetScanlinePad>(
            '_XGetScanlinePad');
    return __XGetScanlinePad(
      dpy,
      depth,
    );
  }

  _dart__XGetScanlinePad __XGetScanlinePad;

  int _XGetBitsPerPixel(
    ffi.Pointer<ffi.Int32> dpy,
    int depth,
  ) {
    __XGetBitsPerPixel ??=
        _dylib.lookupFunction<_c__XGetBitsPerPixel, _dart__XGetBitsPerPixel>(
            '_XGetBitsPerPixel');
    return __XGetBitsPerPixel(
      dpy,
      depth,
    );
  }

  _dart__XGetBitsPerPixel __XGetBitsPerPixel;

  int _XSetImage(
    ffi.Pointer<ffi.Int32> srcimg,
    ffi.Pointer<ffi.Int32> dstimg,
    int x,
    int y,
  ) {
    __XSetImage ??=
        _dylib.lookupFunction<_c__XSetImage, _dart__XSetImage>('_XSetImage');
    return __XSetImage(
      srcimg,
      dstimg,
      x,
      y,
    );
  }

  _dart__XSetImage __XSetImage;

  int _XReverse_Bytes(
    ffi.Pointer<ffi.Uint8> bpt,
    int nb,
  ) {
    __XReverse_Bytes ??=
        _dylib.lookupFunction<_c__XReverse_Bytes, _dart__XReverse_Bytes>(
            '_XReverse_Bytes');
    return __XReverse_Bytes(
      bpt,
      nb,
    );
  }

  _dart__XReverse_Bytes __XReverse_Bytes;

  void _XInitImageFuncPtrs(
    ffi.Pointer<ffi.Int32> image,
  ) {
    __XInitImageFuncPtrs ??= _dylib.lookupFunction<_c__XInitImageFuncPtrs,
        _dart__XInitImageFuncPtrs>('_XInitImageFuncPtrs');
    return __XInitImageFuncPtrs(
      image,
    );
  }

  _dart__XInitImageFuncPtrs __XInitImageFuncPtrs;

  int __bswap_16(
    int __bsx,
  ) {
    ___bswap_16 ??=
        _dylib.lookupFunction<_c___bswap_16, _dart___bswap_16>('__bswap_16');
    return ___bswap_16(
      __bsx,
    );
  }

  _dart___bswap_16 ___bswap_16;

  int __bswap_32(
    int __bsx,
  ) {
    ___bswap_32 ??=
        _dylib.lookupFunction<_c___bswap_32, _dart___bswap_32>('__bswap_32');
    return ___bswap_32(
      __bsx,
    );
  }

  _dart___bswap_32 ___bswap_32;

  int __bswap_64(
    int __bsx,
  ) {
    ___bswap_64 ??=
        _dylib.lookupFunction<_c___bswap_64, _dart___bswap_64>('__bswap_64');
    return ___bswap_64(
      __bsx,
    );
  }

  _dart___bswap_64 ___bswap_64;

  int __uint16_identity(
    int __x,
  ) {
    ___uint16_identity ??=
        _dylib.lookupFunction<_c___uint16_identity, _dart___uint16_identity>(
            '__uint16_identity');
    return ___uint16_identity(
      __x,
    );
  }

  _dart___uint16_identity ___uint16_identity;

  int __uint32_identity(
    int __x,
  ) {
    ___uint32_identity ??=
        _dylib.lookupFunction<_c___uint32_identity, _dart___uint32_identity>(
            '__uint32_identity');
    return ___uint32_identity(
      __x,
    );
  }

  _dart___uint32_identity ___uint32_identity;

  int __uint64_identity(
    int __x,
  ) {
    ___uint64_identity ??=
        _dylib.lookupFunction<_c___uint64_identity, _dart___uint64_identity>(
            '__uint64_identity');
    return ___uint64_identity(
      __x,
    );
  }

  _dart___uint64_identity ___uint64_identity;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    _select ??= _dylib.lookupFunction<_c_select, _dart_select>('select');
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  _dart_select _select;

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    _pselect ??= _dylib.lookupFunction<_c_pselect, _dart_pselect>('pselect');
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  _dart_pselect _pselect;

  int _Xmblen(
    ffi.Pointer<ffi.Int8> str,
    int len,
  ) {
    __Xmblen ??= _dylib.lookupFunction<_c__Xmblen, _dart__Xmblen>('_Xmblen');
    return __Xmblen(
      str,
      len,
    );
  }

  _dart__Xmblen __Xmblen;

  ffi.Pointer<XFontStruct> XLoadQueryFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XLoadQueryFont ??=
        _dylib.lookupFunction<_c_XLoadQueryFont, _dart_XLoadQueryFont>(
            'XLoadQueryFont');
    return _XLoadQueryFont(
      arg0,
      arg1,
    );
  }

  _dart_XLoadQueryFont _XLoadQueryFont;

  ffi.Pointer<XFontStruct> XQueryFont(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XQueryFont_1 ??=
        _dylib.lookupFunction<_c_XQueryFont, _dart_XQueryFont>('XQueryFont');
    return _XQueryFont_1(
      arg0,
      arg1,
    );
  }

  _dart_XQueryFont _XQueryFont_1;

  ffi.Pointer<XTimeCoord> XGetMotionEvents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XGetMotionEvents ??=
        _dylib.lookupFunction<_c_XGetMotionEvents, _dart_XGetMotionEvents>(
            'XGetMotionEvents');
    return _XGetMotionEvents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XGetMotionEvents _XGetMotionEvents;

  ffi.Pointer<XModifierKeymap> XDeleteModifiermapEntry(
    ffi.Pointer<XModifierKeymap> arg0,
    int arg1,
    int arg2,
  ) {
    _XDeleteModifiermapEntry ??= _dylib.lookupFunction<
        _c_XDeleteModifiermapEntry,
        _dart_XDeleteModifiermapEntry>('XDeleteModifiermapEntry');
    return _XDeleteModifiermapEntry(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDeleteModifiermapEntry _XDeleteModifiermapEntry;

  ffi.Pointer<XModifierKeymap> XGetModifierMapping(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XGetModifierMapping ??= _dylib.lookupFunction<_c_XGetModifierMapping,
        _dart_XGetModifierMapping>('XGetModifierMapping');
    return _XGetModifierMapping(
      arg0,
    );
  }

  _dart_XGetModifierMapping _XGetModifierMapping;

  ffi.Pointer<XModifierKeymap> XInsertModifiermapEntry(
    ffi.Pointer<XModifierKeymap> arg0,
    int arg1,
    int arg2,
  ) {
    _XInsertModifiermapEntry ??= _dylib.lookupFunction<
        _c_XInsertModifiermapEntry,
        _dart_XInsertModifiermapEntry>('XInsertModifiermapEntry');
    return _XInsertModifiermapEntry(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XInsertModifiermapEntry _XInsertModifiermapEntry;

  ffi.Pointer<XModifierKeymap> XNewModifiermap(
    int arg0,
  ) {
    _XNewModifiermap ??=
        _dylib.lookupFunction<_c_XNewModifiermap, _dart_XNewModifiermap>(
            'XNewModifiermap');
    return _XNewModifiermap(
      arg0,
    );
  }

  _dart_XNewModifiermap _XNewModifiermap;

  ffi.Pointer<XImage> XCreateImage(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<Visual> arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int8> arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    _XCreateImage ??= _dylib
        .lookupFunction<_c_XCreateImage, _dart_XCreateImage>('XCreateImage');
    return _XCreateImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  _dart_XCreateImage _XCreateImage;

  int XInitImage(
    ffi.Pointer<XImage> arg0,
  ) {
    _XInitImage ??=
        _dylib.lookupFunction<_c_XInitImage, _dart_XInitImage>('XInitImage');
    return _XInitImage(
      arg0,
    );
  }

  _dart_XInitImage _XInitImage;

  ffi.Pointer<XImage> XGetImage(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
  ) {
    _XGetImage ??=
        _dylib.lookupFunction<_c_XGetImage, _dart_XGetImage>('XGetImage');
    return _XGetImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XGetImage _XGetImage;

  ffi.Pointer<XImage> XGetSubImage(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<XImage> arg8,
    int arg9,
    int arg10,
  ) {
    _XGetSubImage ??= _dylib
        .lookupFunction<_c_XGetSubImage, _dart_XGetSubImage>('XGetSubImage');
    return _XGetSubImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  _dart_XGetSubImage _XGetSubImage;

  ffi.Pointer<_XDisplay> XOpenDisplay(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XOpenDisplay ??= _dylib
        .lookupFunction<_c_XOpenDisplay, _dart_XOpenDisplay>('XOpenDisplay');
    return _XOpenDisplay(
      arg0,
    );
  }

  _dart_XOpenDisplay _XOpenDisplay;

  void XrmInitialize() {
    _XrmInitialize ??= _dylib
        .lookupFunction<_c_XrmInitialize, _dart_XrmInitialize>('XrmInitialize');
    return _XrmInitialize();
  }

  _dart_XrmInitialize _XrmInitialize;

  ffi.Pointer<ffi.Int8> XFetchBytes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XFetchBytes ??=
        _dylib.lookupFunction<_c_XFetchBytes, _dart_XFetchBytes>('XFetchBytes');
    return _XFetchBytes(
      arg0,
      arg1,
    );
  }

  _dart_XFetchBytes _XFetchBytes;

  ffi.Pointer<ffi.Int8> XFetchBuffer(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    _XFetchBuffer ??= _dylib
        .lookupFunction<_c_XFetchBuffer, _dart_XFetchBuffer>('XFetchBuffer');
    return _XFetchBuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XFetchBuffer _XFetchBuffer;

  ffi.Pointer<ffi.Int8> XGetAtomName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XGetAtomName_1 ??= _dylib
        .lookupFunction<_c_XGetAtomName, _dart_XGetAtomName>('XGetAtomName');
    return _XGetAtomName_1(
      arg0,
      arg1,
    );
  }

  _dart_XGetAtomName _XGetAtomName_1;

  int XGetAtomNames(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ) {
    _XGetAtomNames ??= _dylib
        .lookupFunction<_c_XGetAtomNames, _dart_XGetAtomNames>('XGetAtomNames');
    return _XGetAtomNames(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetAtomNames _XGetAtomNames;

  ffi.Pointer<ffi.Int8> XGetDefault(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XGetDefault ??=
        _dylib.lookupFunction<_c_XGetDefault, _dart_XGetDefault>('XGetDefault');
    return _XGetDefault(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetDefault _XGetDefault;

  ffi.Pointer<ffi.Int8> XDisplayName(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XDisplayName ??= _dylib
        .lookupFunction<_c_XDisplayName, _dart_XDisplayName>('XDisplayName');
    return _XDisplayName(
      arg0,
    );
  }

  _dart_XDisplayName _XDisplayName;

  ffi.Pointer<ffi.Int8> XKeysymToString(
    int arg0,
  ) {
    _XKeysymToString ??=
        _dylib.lookupFunction<_c_XKeysymToString, _dart_XKeysymToString>(
            'XKeysymToString');
    return _XKeysymToString(
      arg0,
    );
  }

  _dart_XKeysymToString _XKeysymToString;

  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> XSynchronize(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XSynchronize ??= _dylib
        .lookupFunction<_c_XSynchronize, _dart_XSynchronize>('XSynchronize');
    return _XSynchronize(
      arg0,
      arg1,
    );
  }

  _dart_XSynchronize _XSynchronize;

  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> XSetAfterFunction(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> arg1,
  ) {
    _XSetAfterFunction ??=
        _dylib.lookupFunction<_c_XSetAfterFunction, _dart_XSetAfterFunction>(
            'XSetAfterFunction');
    return _XSetAfterFunction(
      arg0,
      arg1,
    );
  }

  _dart_XSetAfterFunction _XSetAfterFunction;

  int XInternAtom(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XInternAtom_1 ??=
        _dylib.lookupFunction<_c_XInternAtom, _dart_XInternAtom>('XInternAtom');
    return _XInternAtom_1(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XInternAtom _XInternAtom_1;

  int XInternAtoms(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
  ) {
    _XInternAtoms ??= _dylib
        .lookupFunction<_c_XInternAtoms, _dart_XInternAtoms>('XInternAtoms');
    return _XInternAtoms(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XInternAtoms _XInternAtoms;

  int XCopyColormapAndFree(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XCopyColormapAndFree ??= _dylib.lookupFunction<_c_XCopyColormapAndFree,
        _dart_XCopyColormapAndFree>('XCopyColormapAndFree');
    return _XCopyColormapAndFree(
      arg0,
      arg1,
    );
  }

  _dart_XCopyColormapAndFree _XCopyColormapAndFree;

  int XCreateColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<Visual> arg2,
    int arg3,
  ) {
    _XCreateColormap ??=
        _dylib.lookupFunction<_c_XCreateColormap, _dart_XCreateColormap>(
            'XCreateColormap');
    return _XCreateColormap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XCreateColormap _XCreateColormap;

  int XCreatePixmapCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
    int arg5,
    int arg6,
  ) {
    _XCreatePixmapCursor ??= _dylib.lookupFunction<_c_XCreatePixmapCursor,
        _dart_XCreatePixmapCursor>('XCreatePixmapCursor');
    return _XCreatePixmapCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XCreatePixmapCursor _XCreatePixmapCursor;

  int XCreateGlyphCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XColor> arg5,
    ffi.Pointer<XColor> arg6,
  ) {
    _XCreateGlyphCursor ??=
        _dylib.lookupFunction<_c_XCreateGlyphCursor, _dart_XCreateGlyphCursor>(
            'XCreateGlyphCursor');
    return _XCreateGlyphCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XCreateGlyphCursor _XCreateGlyphCursor;

  int XCreateFontCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XCreateFontCursor ??=
        _dylib.lookupFunction<_c_XCreateFontCursor, _dart_XCreateFontCursor>(
            'XCreateFontCursor');
    return _XCreateFontCursor(
      arg0,
      arg1,
    );
  }

  _dart_XCreateFontCursor _XCreateFontCursor;

  int XLoadFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XLoadFont ??=
        _dylib.lookupFunction<_c_XLoadFont, _dart_XLoadFont>('XLoadFont');
    return _XLoadFont(
      arg0,
      arg1,
    );
  }

  _dart_XLoadFont _XLoadFont;

  ffi.Pointer<_XGC> XCreateGC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    _XCreateGC ??=
        _dylib.lookupFunction<_c_XCreateGC, _dart_XCreateGC>('XCreateGC');
    return _XCreateGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XCreateGC _XCreateGC;

  int XGContextFromGC(
    ffi.Pointer<_XGC> arg0,
  ) {
    _XGContextFromGC ??=
        _dylib.lookupFunction<_c_XGContextFromGC, _dart_XGContextFromGC>(
            'XGContextFromGC');
    return _XGContextFromGC(
      arg0,
    );
  }

  _dart_XGContextFromGC _XGContextFromGC;

  void XFlushGC(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
  ) {
    _XFlushGC ??=
        _dylib.lookupFunction<_c_XFlushGC, _dart_XFlushGC>('XFlushGC');
    return _XFlushGC(
      arg0,
      arg1,
    );
  }

  _dart_XFlushGC _XFlushGC;

  int XCreatePixmap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XCreatePixmap ??= _dylib
        .lookupFunction<_c_XCreatePixmap, _dart_XCreatePixmap>('XCreatePixmap');
    return _XCreatePixmap(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XCreatePixmap _XCreatePixmap;

  int XCreateBitmapFromData(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    int arg4,
  ) {
    _XCreateBitmapFromData ??= _dylib.lookupFunction<_c_XCreateBitmapFromData,
        _dart_XCreateBitmapFromData>('XCreateBitmapFromData');
    return _XCreateBitmapFromData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XCreateBitmapFromData _XCreateBitmapFromData;

  int XCreatePixmapFromBitmapData(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
  ) {
    _XCreatePixmapFromBitmapData ??= _dylib.lookupFunction<
        _c_XCreatePixmapFromBitmapData,
        _dart_XCreatePixmapFromBitmapData>('XCreatePixmapFromBitmapData');
    return _XCreatePixmapFromBitmapData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XCreatePixmapFromBitmapData _XCreatePixmapFromBitmapData;

  int XCreateSimpleWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XCreateSimpleWindow ??= _dylib.lookupFunction<_c_XCreateSimpleWindow,
        _dart_XCreateSimpleWindow>('XCreateSimpleWindow');
    return _XCreateSimpleWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XCreateSimpleWindow _XCreateSimpleWindow;

  int XGetSelectionOwner(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XGetSelectionOwner ??=
        _dylib.lookupFunction<_c_XGetSelectionOwner, _dart_XGetSelectionOwner>(
            'XGetSelectionOwner');
    return _XGetSelectionOwner(
      arg0,
      arg1,
    );
  }

  _dart_XGetSelectionOwner _XGetSelectionOwner;

  int XCreateWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    ffi.Pointer<Visual> arg9,
    int arg10,
    ffi.Pointer<XSetWindowAttributes> arg11,
  ) {
    _XCreateWindow ??= _dylib
        .lookupFunction<_c_XCreateWindow, _dart_XCreateWindow>('XCreateWindow');
    return _XCreateWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  _dart_XCreateWindow _XCreateWindow;

  ffi.Pointer<ffi.Uint64> XListInstalledColormaps(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XListInstalledColormaps ??= _dylib.lookupFunction<
        _c_XListInstalledColormaps,
        _dart_XListInstalledColormaps>('XListInstalledColormaps');
    return _XListInstalledColormaps(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XListInstalledColormaps _XListInstalledColormaps;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> XListFonts(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XListFonts ??=
        _dylib.lookupFunction<_c_XListFonts, _dart_XListFonts>('XListFonts');
    return _XListFonts(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XListFonts _XListFonts;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> XListFontsWithInfo(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Pointer<XFontStruct>> arg4,
  ) {
    _XListFontsWithInfo ??=
        _dylib.lookupFunction<_c_XListFontsWithInfo, _dart_XListFontsWithInfo>(
            'XListFontsWithInfo');
    return _XListFontsWithInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XListFontsWithInfo _XListFontsWithInfo;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> XGetFontPath(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XGetFontPath ??= _dylib
        .lookupFunction<_c_XGetFontPath, _dart_XGetFontPath>('XGetFontPath');
    return _XGetFontPath(
      arg0,
      arg1,
    );
  }

  _dart_XGetFontPath _XGetFontPath;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> XListExtensions(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XListExtensions ??=
        _dylib.lookupFunction<_c_XListExtensions, _dart_XListExtensions>(
            'XListExtensions');
    return _XListExtensions(
      arg0,
      arg1,
    );
  }

  _dart_XListExtensions _XListExtensions;

  ffi.Pointer<ffi.Uint64> XListProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XListProperties ??=
        _dylib.lookupFunction<_c_XListProperties, _dart_XListProperties>(
            'XListProperties');
    return _XListProperties(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XListProperties _XListProperties;

  ffi.Pointer<XHostAddress> XListHosts(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XListHosts ??=
        _dylib.lookupFunction<_c_XListHosts, _dart_XListHosts>('XListHosts');
    return _XListHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XListHosts _XListHosts;

  int XKeycodeToKeysym(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XKeycodeToKeysym_1 ??=
        _dylib.lookupFunction<_c_XKeycodeToKeysym, _dart_XKeycodeToKeysym>(
            'XKeycodeToKeysym');
    return _XKeycodeToKeysym_1(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XKeycodeToKeysym _XKeycodeToKeysym_1;

  int XLookupKeysym(
    ffi.Pointer<XKeyEvent> arg0,
    int arg1,
  ) {
    _XLookupKeysym_1 ??= _dylib
        .lookupFunction<_c_XLookupKeysym, _dart_XLookupKeysym>('XLookupKeysym');
    return _XLookupKeysym_1(
      arg0,
      arg1,
    );
  }

  _dart_XLookupKeysym _XLookupKeysym_1;

  ffi.Pointer<ffi.Uint64> XGetKeyboardMapping(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetKeyboardMapping ??= _dylib.lookupFunction<_c_XGetKeyboardMapping,
        _dart_XGetKeyboardMapping>('XGetKeyboardMapping');
    return _XGetKeyboardMapping(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetKeyboardMapping _XGetKeyboardMapping;

  int XStringToKeysym(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XStringToKeysym ??=
        _dylib.lookupFunction<_c_XStringToKeysym, _dart_XStringToKeysym>(
            'XStringToKeysym');
    return _XStringToKeysym(
      arg0,
    );
  }

  _dart_XStringToKeysym _XStringToKeysym;

  int XMaxRequestSize(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XMaxRequestSize ??=
        _dylib.lookupFunction<_c_XMaxRequestSize, _dart_XMaxRequestSize>(
            'XMaxRequestSize');
    return _XMaxRequestSize(
      arg0,
    );
  }

  _dart_XMaxRequestSize _XMaxRequestSize;

  int XExtendedMaxRequestSize(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XExtendedMaxRequestSize ??= _dylib.lookupFunction<
        _c_XExtendedMaxRequestSize,
        _dart_XExtendedMaxRequestSize>('XExtendedMaxRequestSize');
    return _XExtendedMaxRequestSize(
      arg0,
    );
  }

  _dart_XExtendedMaxRequestSize _XExtendedMaxRequestSize;

  ffi.Pointer<ffi.Int8> XResourceManagerString(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XResourceManagerString ??= _dylib.lookupFunction<_c_XResourceManagerString,
        _dart_XResourceManagerString>('XResourceManagerString');
    return _XResourceManagerString(
      arg0,
    );
  }

  _dart_XResourceManagerString _XResourceManagerString;

  ffi.Pointer<ffi.Int8> XScreenResourceString(
    ffi.Pointer<Screen> arg0,
  ) {
    _XScreenResourceString ??= _dylib.lookupFunction<_c_XScreenResourceString,
        _dart_XScreenResourceString>('XScreenResourceString');
    return _XScreenResourceString(
      arg0,
    );
  }

  _dart_XScreenResourceString _XScreenResourceString;

  int XDisplayMotionBufferSize(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDisplayMotionBufferSize ??= _dylib.lookupFunction<
        _c_XDisplayMotionBufferSize,
        _dart_XDisplayMotionBufferSize>('XDisplayMotionBufferSize');
    return _XDisplayMotionBufferSize(
      arg0,
    );
  }

  _dart_XDisplayMotionBufferSize _XDisplayMotionBufferSize;

  int XVisualIDFromVisual(
    ffi.Pointer<Visual> arg0,
  ) {
    _XVisualIDFromVisual ??= _dylib.lookupFunction<_c_XVisualIDFromVisual,
        _dart_XVisualIDFromVisual>('XVisualIDFromVisual');
    return _XVisualIDFromVisual(
      arg0,
    );
  }

  _dart_XVisualIDFromVisual _XVisualIDFromVisual;

  int XInitThreads() {
    _XInitThreads ??= _dylib
        .lookupFunction<_c_XInitThreads, _dart_XInitThreads>('XInitThreads');
    return _XInitThreads();
  }

  _dart_XInitThreads _XInitThreads;

  void XLockDisplay(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XLockDisplay ??= _dylib
        .lookupFunction<_c_XLockDisplay, _dart_XLockDisplay>('XLockDisplay');
    return _XLockDisplay(
      arg0,
    );
  }

  _dart_XLockDisplay _XLockDisplay;

  void XUnlockDisplay(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XUnlockDisplay ??=
        _dylib.lookupFunction<_c_XUnlockDisplay, _dart_XUnlockDisplay>(
            'XUnlockDisplay');
    return _XUnlockDisplay(
      arg0,
    );
  }

  _dart_XUnlockDisplay _XUnlockDisplay;

  ffi.Pointer<XExtCodes> XInitExtension(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XInitExtension ??=
        _dylib.lookupFunction<_c_XInitExtension, _dart_XInitExtension>(
            'XInitExtension');
    return _XInitExtension(
      arg0,
      arg1,
    );
  }

  _dart_XInitExtension _XInitExtension;

  ffi.Pointer<XExtCodes> XAddExtension(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XAddExtension ??= _dylib
        .lookupFunction<_c_XAddExtension, _dart_XAddExtension>('XAddExtension');
    return _XAddExtension(
      arg0,
    );
  }

  _dart_XAddExtension _XAddExtension;

  ffi.Pointer<XExtData> XFindOnExtensionList(
    ffi.Pointer<ffi.Pointer<XExtData>> arg0,
    int arg1,
  ) {
    _XFindOnExtensionList ??= _dylib.lookupFunction<_c_XFindOnExtensionList,
        _dart_XFindOnExtensionList>('XFindOnExtensionList');
    return _XFindOnExtensionList(
      arg0,
      arg1,
    );
  }

  _dart_XFindOnExtensionList _XFindOnExtensionList;

  int XRootWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XRootWindow ??=
        _dylib.lookupFunction<_c_XRootWindow, _dart_XRootWindow>('XRootWindow');
    return _XRootWindow(
      arg0,
      arg1,
    );
  }

  _dart_XRootWindow _XRootWindow;

  int XDefaultRootWindow(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDefaultRootWindow ??=
        _dylib.lookupFunction<_c_XDefaultRootWindow, _dart_XDefaultRootWindow>(
            'XDefaultRootWindow');
    return _XDefaultRootWindow(
      arg0,
    );
  }

  _dart_XDefaultRootWindow _XDefaultRootWindow;

  int XRootWindowOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XRootWindowOfScreen ??= _dylib.lookupFunction<_c_XRootWindowOfScreen,
        _dart_XRootWindowOfScreen>('XRootWindowOfScreen');
    return _XRootWindowOfScreen(
      arg0,
    );
  }

  _dart_XRootWindowOfScreen _XRootWindowOfScreen;

  ffi.Pointer<Visual> XDefaultVisual(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDefaultVisual ??=
        _dylib.lookupFunction<_c_XDefaultVisual, _dart_XDefaultVisual>(
            'XDefaultVisual');
    return _XDefaultVisual(
      arg0,
      arg1,
    );
  }

  _dart_XDefaultVisual _XDefaultVisual;

  ffi.Pointer<Visual> XDefaultVisualOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDefaultVisualOfScreen ??= _dylib.lookupFunction<_c_XDefaultVisualOfScreen,
        _dart_XDefaultVisualOfScreen>('XDefaultVisualOfScreen');
    return _XDefaultVisualOfScreen(
      arg0,
    );
  }

  _dart_XDefaultVisualOfScreen _XDefaultVisualOfScreen;

  ffi.Pointer<_XGC> XDefaultGC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDefaultGC ??=
        _dylib.lookupFunction<_c_XDefaultGC, _dart_XDefaultGC>('XDefaultGC');
    return _XDefaultGC(
      arg0,
      arg1,
    );
  }

  _dart_XDefaultGC _XDefaultGC;

  ffi.Pointer<_XGC> XDefaultGCOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDefaultGCOfScreen ??=
        _dylib.lookupFunction<_c_XDefaultGCOfScreen, _dart_XDefaultGCOfScreen>(
            'XDefaultGCOfScreen');
    return _XDefaultGCOfScreen(
      arg0,
    );
  }

  _dart_XDefaultGCOfScreen _XDefaultGCOfScreen;

  int XBlackPixel(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XBlackPixel ??=
        _dylib.lookupFunction<_c_XBlackPixel, _dart_XBlackPixel>('XBlackPixel');
    return _XBlackPixel(
      arg0,
      arg1,
    );
  }

  _dart_XBlackPixel _XBlackPixel;

  int XWhitePixel(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XWhitePixel ??=
        _dylib.lookupFunction<_c_XWhitePixel, _dart_XWhitePixel>('XWhitePixel');
    return _XWhitePixel(
      arg0,
      arg1,
    );
  }

  _dart_XWhitePixel _XWhitePixel;

  int XAllPlanes() {
    _XAllPlanes ??=
        _dylib.lookupFunction<_c_XAllPlanes, _dart_XAllPlanes>('XAllPlanes');
    return _XAllPlanes();
  }

  _dart_XAllPlanes _XAllPlanes;

  int XBlackPixelOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XBlackPixelOfScreen ??= _dylib.lookupFunction<_c_XBlackPixelOfScreen,
        _dart_XBlackPixelOfScreen>('XBlackPixelOfScreen');
    return _XBlackPixelOfScreen(
      arg0,
    );
  }

  _dart_XBlackPixelOfScreen _XBlackPixelOfScreen;

  int XWhitePixelOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XWhitePixelOfScreen ??= _dylib.lookupFunction<_c_XWhitePixelOfScreen,
        _dart_XWhitePixelOfScreen>('XWhitePixelOfScreen');
    return _XWhitePixelOfScreen(
      arg0,
    );
  }

  _dart_XWhitePixelOfScreen _XWhitePixelOfScreen;

  int XNextRequest(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XNextRequest_1 ??= _dylib
        .lookupFunction<_c_XNextRequest, _dart_XNextRequest>('XNextRequest');
    return _XNextRequest_1(
      arg0,
    );
  }

  _dart_XNextRequest _XNextRequest_1;

  int XLastKnownRequestProcessed(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XLastKnownRequestProcessed ??= _dylib.lookupFunction<
        _c_XLastKnownRequestProcessed,
        _dart_XLastKnownRequestProcessed>('XLastKnownRequestProcessed');
    return _XLastKnownRequestProcessed(
      arg0,
    );
  }

  _dart_XLastKnownRequestProcessed _XLastKnownRequestProcessed;

  ffi.Pointer<ffi.Int8> XServerVendor(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XServerVendor ??= _dylib
        .lookupFunction<_c_XServerVendor, _dart_XServerVendor>('XServerVendor');
    return _XServerVendor(
      arg0,
    );
  }

  _dart_XServerVendor _XServerVendor;

  ffi.Pointer<ffi.Int8> XDisplayString(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDisplayString ??=
        _dylib.lookupFunction<_c_XDisplayString, _dart_XDisplayString>(
            'XDisplayString');
    return _XDisplayString(
      arg0,
    );
  }

  _dart_XDisplayString _XDisplayString;

  int XDefaultColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDefaultColormap ??=
        _dylib.lookupFunction<_c_XDefaultColormap, _dart_XDefaultColormap>(
            'XDefaultColormap');
    return _XDefaultColormap(
      arg0,
      arg1,
    );
  }

  _dart_XDefaultColormap _XDefaultColormap;

  int XDefaultColormapOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDefaultColormapOfScreen ??= _dylib.lookupFunction<
        _c_XDefaultColormapOfScreen,
        _dart_XDefaultColormapOfScreen>('XDefaultColormapOfScreen');
    return _XDefaultColormapOfScreen(
      arg0,
    );
  }

  _dart_XDefaultColormapOfScreen _XDefaultColormapOfScreen;

  ffi.Pointer<_XDisplay> XDisplayOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDisplayOfScreen ??=
        _dylib.lookupFunction<_c_XDisplayOfScreen, _dart_XDisplayOfScreen>(
            'XDisplayOfScreen');
    return _XDisplayOfScreen(
      arg0,
    );
  }

  _dart_XDisplayOfScreen _XDisplayOfScreen;

  ffi.Pointer<Screen> XScreenOfDisplay(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XScreenOfDisplay ??=
        _dylib.lookupFunction<_c_XScreenOfDisplay, _dart_XScreenOfDisplay>(
            'XScreenOfDisplay');
    return _XScreenOfDisplay(
      arg0,
      arg1,
    );
  }

  _dart_XScreenOfDisplay _XScreenOfDisplay;

  ffi.Pointer<Screen> XDefaultScreenOfDisplay(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDefaultScreenOfDisplay ??= _dylib.lookupFunction<
        _c_XDefaultScreenOfDisplay,
        _dart_XDefaultScreenOfDisplay>('XDefaultScreenOfDisplay');
    return _XDefaultScreenOfDisplay(
      arg0,
    );
  }

  _dart_XDefaultScreenOfDisplay _XDefaultScreenOfDisplay;

  int XEventMaskOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XEventMaskOfScreen ??=
        _dylib.lookupFunction<_c_XEventMaskOfScreen, _dart_XEventMaskOfScreen>(
            'XEventMaskOfScreen');
    return _XEventMaskOfScreen(
      arg0,
    );
  }

  _dart_XEventMaskOfScreen _XEventMaskOfScreen;

  int XScreenNumberOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XScreenNumberOfScreen ??= _dylib.lookupFunction<_c_XScreenNumberOfScreen,
        _dart_XScreenNumberOfScreen>('XScreenNumberOfScreen');
    return _XScreenNumberOfScreen(
      arg0,
    );
  }

  _dart_XScreenNumberOfScreen _XScreenNumberOfScreen;

  ffi.Pointer<ffi.NativeFunction<XErrorHandler>> XSetErrorHandler(
    ffi.Pointer<ffi.NativeFunction<XErrorHandler>> arg0,
  ) {
    _XSetErrorHandler ??=
        _dylib.lookupFunction<_c_XSetErrorHandler, _dart_XSetErrorHandler>(
            'XSetErrorHandler');
    return _XSetErrorHandler(
      arg0,
    );
  }

  _dart_XSetErrorHandler _XSetErrorHandler;

  ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> XSetIOErrorHandler(
    ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> arg0,
  ) {
    _XSetIOErrorHandler ??=
        _dylib.lookupFunction<_c_XSetIOErrorHandler, _dart_XSetIOErrorHandler>(
            'XSetIOErrorHandler');
    return _XSetIOErrorHandler(
      arg0,
    );
  }

  _dart_XSetIOErrorHandler _XSetIOErrorHandler;

  ffi.Pointer<XPixmapFormatValues> XListPixmapFormats(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XListPixmapFormats ??=
        _dylib.lookupFunction<_c_XListPixmapFormats, _dart_XListPixmapFormats>(
            'XListPixmapFormats');
    return _XListPixmapFormats(
      arg0,
      arg1,
    );
  }

  _dart_XListPixmapFormats _XListPixmapFormats;

  ffi.Pointer<ffi.Int32> XListDepths(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XListDepths ??=
        _dylib.lookupFunction<_c_XListDepths, _dart_XListDepths>('XListDepths');
    return _XListDepths(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XListDepths _XListDepths;

  int XReconfigureWMWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XWindowChanges> arg4,
  ) {
    _XReconfigureWMWindow ??= _dylib.lookupFunction<_c_XReconfigureWMWindow,
        _dart_XReconfigureWMWindow>('XReconfigureWMWindow');
    return _XReconfigureWMWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XReconfigureWMWindow _XReconfigureWMWindow;

  int XGetWMProtocols(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetWMProtocols ??=
        _dylib.lookupFunction<_c_XGetWMProtocols, _dart_XGetWMProtocols>(
            'XGetWMProtocols');
    return _XGetWMProtocols(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetWMProtocols _XGetWMProtocols;

  int XSetWMProtocols(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
  ) {
    _XSetWMProtocols ??=
        _dylib.lookupFunction<_c_XSetWMProtocols, _dart_XSetWMProtocols>(
            'XSetWMProtocols');
    return _XSetWMProtocols(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetWMProtocols _XSetWMProtocols;

  int XIconifyWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XIconifyWindow ??=
        _dylib.lookupFunction<_c_XIconifyWindow, _dart_XIconifyWindow>(
            'XIconifyWindow');
    return _XIconifyWindow(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XIconifyWindow _XIconifyWindow;

  int XWithdrawWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XWithdrawWindow ??=
        _dylib.lookupFunction<_c_XWithdrawWindow, _dart_XWithdrawWindow>(
            'XWithdrawWindow');
    return _XWithdrawWindow(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XWithdrawWindow _XWithdrawWindow;

  int XGetCommand(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetCommand ??=
        _dylib.lookupFunction<_c_XGetCommand, _dart_XGetCommand>('XGetCommand');
    return _XGetCommand(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetCommand _XGetCommand;

  int XGetWMColormapWindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetWMColormapWindows ??= _dylib.lookupFunction<_c_XGetWMColormapWindows,
        _dart_XGetWMColormapWindows>('XGetWMColormapWindows');
    return _XGetWMColormapWindows(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetWMColormapWindows _XGetWMColormapWindows;

  int XSetWMColormapWindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
  ) {
    _XSetWMColormapWindows ??= _dylib.lookupFunction<_c_XSetWMColormapWindows,
        _dart_XSetWMColormapWindows>('XSetWMColormapWindows');
    return _XSetWMColormapWindows(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetWMColormapWindows _XSetWMColormapWindows;

  void XFreeStringList(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    _XFreeStringList ??=
        _dylib.lookupFunction<_c_XFreeStringList, _dart_XFreeStringList>(
            'XFreeStringList');
    return _XFreeStringList(
      arg0,
    );
  }

  _dart_XFreeStringList _XFreeStringList;

  int XSetTransientForHint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetTransientForHint ??= _dylib.lookupFunction<_c_XSetTransientForHint,
        _dart_XSetTransientForHint>('XSetTransientForHint');
    return _XSetTransientForHint(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetTransientForHint _XSetTransientForHint;

  int XActivateScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XActivateScreenSaver ??= _dylib.lookupFunction<_c_XActivateScreenSaver,
        _dart_XActivateScreenSaver>('XActivateScreenSaver');
    return _XActivateScreenSaver(
      arg0,
    );
  }

  _dart_XActivateScreenSaver _XActivateScreenSaver;

  int XAddHost(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XHostAddress> arg1,
  ) {
    _XAddHost ??=
        _dylib.lookupFunction<_c_XAddHost, _dart_XAddHost>('XAddHost');
    return _XAddHost(
      arg0,
      arg1,
    );
  }

  _dart_XAddHost _XAddHost;

  int XAddHosts(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XHostAddress> arg1,
    int arg2,
  ) {
    _XAddHosts ??=
        _dylib.lookupFunction<_c_XAddHosts, _dart_XAddHosts>('XAddHosts');
    return _XAddHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XAddHosts _XAddHosts;

  int XAddToExtensionList(
    ffi.Pointer<ffi.Pointer<XExtData>> arg0,
    ffi.Pointer<XExtData> arg1,
  ) {
    _XAddToExtensionList ??= _dylib.lookupFunction<_c_XAddToExtensionList,
        _dart_XAddToExtensionList>('XAddToExtensionList');
    return _XAddToExtensionList(
      arg0,
      arg1,
    );
  }

  _dart_XAddToExtensionList _XAddToExtensionList;

  int XAddToSaveSet(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XAddToSaveSet ??= _dylib
        .lookupFunction<_c_XAddToSaveSet, _dart_XAddToSaveSet>('XAddToSaveSet');
    return _XAddToSaveSet(
      arg0,
      arg1,
    );
  }

  _dart_XAddToSaveSet _XAddToSaveSet;

  int XAllocColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    _XAllocColor ??=
        _dylib.lookupFunction<_c_XAllocColor, _dart_XAllocColor>('XAllocColor');
    return _XAllocColor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XAllocColor _XAllocColor;

  int XAllocColorCells(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    int arg4,
    ffi.Pointer<ffi.Uint64> arg5,
    int arg6,
  ) {
    _XAllocColorCells ??=
        _dylib.lookupFunction<_c_XAllocColorCells, _dart_XAllocColorCells>(
            'XAllocColorCells');
    return _XAllocColorCells(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XAllocColorCells _XAllocColorCells;

  int XAllocColorPlanes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<ffi.Uint64> arg8,
    ffi.Pointer<ffi.Uint64> arg9,
    ffi.Pointer<ffi.Uint64> arg10,
  ) {
    _XAllocColorPlanes ??=
        _dylib.lookupFunction<_c_XAllocColorPlanes, _dart_XAllocColorPlanes>(
            'XAllocColorPlanes');
    return _XAllocColorPlanes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  _dart_XAllocColorPlanes _XAllocColorPlanes;

  int XAllocNamedColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
  ) {
    _XAllocNamedColor ??=
        _dylib.lookupFunction<_c_XAllocNamedColor, _dart_XAllocNamedColor>(
            'XAllocNamedColor');
    return _XAllocNamedColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XAllocNamedColor _XAllocNamedColor;

  int XAllowEvents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XAllowEvents ??= _dylib
        .lookupFunction<_c_XAllowEvents, _dart_XAllowEvents>('XAllowEvents');
    return _XAllowEvents(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XAllowEvents _XAllowEvents;

  int XAutoRepeatOff(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XAutoRepeatOff ??=
        _dylib.lookupFunction<_c_XAutoRepeatOff, _dart_XAutoRepeatOff>(
            'XAutoRepeatOff');
    return _XAutoRepeatOff(
      arg0,
    );
  }

  _dart_XAutoRepeatOff _XAutoRepeatOff;

  int XAutoRepeatOn(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XAutoRepeatOn ??= _dylib
        .lookupFunction<_c_XAutoRepeatOn, _dart_XAutoRepeatOn>('XAutoRepeatOn');
    return _XAutoRepeatOn(
      arg0,
    );
  }

  _dart_XAutoRepeatOn _XAutoRepeatOn;

  int XBell(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XBell ??= _dylib.lookupFunction<_c_XBell, _dart_XBell>('XBell');
    return _XBell(
      arg0,
      arg1,
    );
  }

  _dart_XBell _XBell;

  int XBitmapBitOrder(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XBitmapBitOrder ??=
        _dylib.lookupFunction<_c_XBitmapBitOrder, _dart_XBitmapBitOrder>(
            'XBitmapBitOrder');
    return _XBitmapBitOrder(
      arg0,
    );
  }

  _dart_XBitmapBitOrder _XBitmapBitOrder;

  int XBitmapPad(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XBitmapPad ??=
        _dylib.lookupFunction<_c_XBitmapPad, _dart_XBitmapPad>('XBitmapPad');
    return _XBitmapPad(
      arg0,
    );
  }

  _dart_XBitmapPad _XBitmapPad;

  int XBitmapUnit(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XBitmapUnit ??=
        _dylib.lookupFunction<_c_XBitmapUnit, _dart_XBitmapUnit>('XBitmapUnit');
    return _XBitmapUnit(
      arg0,
    );
  }

  _dart_XBitmapUnit _XBitmapUnit;

  int XCellsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XCellsOfScreen ??=
        _dylib.lookupFunction<_c_XCellsOfScreen, _dart_XCellsOfScreen>(
            'XCellsOfScreen');
    return _XCellsOfScreen(
      arg0,
    );
  }

  _dart_XCellsOfScreen _XCellsOfScreen;

  int XChangeActivePointerGrab(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XChangeActivePointerGrab ??= _dylib.lookupFunction<
        _c_XChangeActivePointerGrab,
        _dart_XChangeActivePointerGrab>('XChangeActivePointerGrab');
    return _XChangeActivePointerGrab(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XChangeActivePointerGrab _XChangeActivePointerGrab;

  int XChangeGC(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    _XChangeGC ??=
        _dylib.lookupFunction<_c_XChangeGC, _dart_XChangeGC>('XChangeGC');
    return _XChangeGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XChangeGC _XChangeGC;

  int XChangeKeyboardControl(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XKeyboardControl> arg2,
  ) {
    _XChangeKeyboardControl ??= _dylib.lookupFunction<_c_XChangeKeyboardControl,
        _dart_XChangeKeyboardControl>('XChangeKeyboardControl');
    return _XChangeKeyboardControl(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XChangeKeyboardControl _XChangeKeyboardControl;

  int XChangeKeyboardMapping(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    int arg4,
  ) {
    _XChangeKeyboardMapping ??= _dylib.lookupFunction<_c_XChangeKeyboardMapping,
        _dart_XChangeKeyboardMapping>('XChangeKeyboardMapping');
    return _XChangeKeyboardMapping(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XChangeKeyboardMapping _XChangeKeyboardMapping;

  int XChangePointerControl(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XChangePointerControl ??= _dylib.lookupFunction<_c_XChangePointerControl,
        _dart_XChangePointerControl>('XChangePointerControl');
    return _XChangePointerControl(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XChangePointerControl _XChangePointerControl;

  int XChangeProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Uint8> arg6,
    int arg7,
  ) {
    _XChangeProperty ??=
        _dylib.lookupFunction<_c_XChangeProperty, _dart_XChangeProperty>(
            'XChangeProperty');
    return _XChangeProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XChangeProperty _XChangeProperty;

  int XChangeSaveSet(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XChangeSaveSet ??=
        _dylib.lookupFunction<_c_XChangeSaveSet, _dart_XChangeSaveSet>(
            'XChangeSaveSet');
    return _XChangeSaveSet(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XChangeSaveSet _XChangeSaveSet;

  int XChangeWindowAttributes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XSetWindowAttributes> arg3,
  ) {
    _XChangeWindowAttributes ??= _dylib.lookupFunction<
        _c_XChangeWindowAttributes,
        _dart_XChangeWindowAttributes>('XChangeWindowAttributes');
    return _XChangeWindowAttributes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XChangeWindowAttributes _XChangeWindowAttributes;

  int XCirculateSubwindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XCirculateSubwindows ??= _dylib.lookupFunction<_c_XCirculateSubwindows,
        _dart_XCirculateSubwindows>('XCirculateSubwindows');
    return _XCirculateSubwindows(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XCirculateSubwindows _XCirculateSubwindows;

  int XCirculateSubwindowsDown(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XCirculateSubwindowsDown ??= _dylib.lookupFunction<
        _c_XCirculateSubwindowsDown,
        _dart_XCirculateSubwindowsDown>('XCirculateSubwindowsDown');
    return _XCirculateSubwindowsDown(
      arg0,
      arg1,
    );
  }

  _dart_XCirculateSubwindowsDown _XCirculateSubwindowsDown;

  int XCirculateSubwindowsUp(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XCirculateSubwindowsUp ??= _dylib.lookupFunction<_c_XCirculateSubwindowsUp,
        _dart_XCirculateSubwindowsUp>('XCirculateSubwindowsUp');
    return _XCirculateSubwindowsUp(
      arg0,
      arg1,
    );
  }

  _dart_XCirculateSubwindowsUp _XCirculateSubwindowsUp;

  int XClearArea(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XClearArea ??=
        _dylib.lookupFunction<_c_XClearArea, _dart_XClearArea>('XClearArea');
    return _XClearArea(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XClearArea _XClearArea;

  int XClearWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XClearWindow ??= _dylib
        .lookupFunction<_c_XClearWindow, _dart_XClearWindow>('XClearWindow');
    return _XClearWindow(
      arg0,
      arg1,
    );
  }

  _dart_XClearWindow _XClearWindow;

  int XCloseDisplay(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XCloseDisplay ??= _dylib
        .lookupFunction<_c_XCloseDisplay, _dart_XCloseDisplay>('XCloseDisplay');
    return _XCloseDisplay(
      arg0,
    );
  }

  _dart_XCloseDisplay _XCloseDisplay;

  int XConfigureWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XWindowChanges> arg3,
  ) {
    _XConfigureWindow ??=
        _dylib.lookupFunction<_c_XConfigureWindow, _dart_XConfigureWindow>(
            'XConfigureWindow');
    return _XConfigureWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XConfigureWindow _XConfigureWindow;

  int XConnectionNumber(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XConnectionNumber ??=
        _dylib.lookupFunction<_c_XConnectionNumber, _dart_XConnectionNumber>(
            'XConnectionNumber');
    return _XConnectionNumber(
      arg0,
    );
  }

  _dart_XConnectionNumber _XConnectionNumber;

  int XConvertSelection(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XConvertSelection ??=
        _dylib.lookupFunction<_c_XConvertSelection, _dart_XConvertSelection>(
            'XConvertSelection');
    return _XConvertSelection(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XConvertSelection _XConvertSelection;

  int XCopyArea(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    _XCopyArea ??=
        _dylib.lookupFunction<_c_XCopyArea, _dart_XCopyArea>('XCopyArea');
    return _XCopyArea(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  _dart_XCopyArea _XCopyArea;

  int XCopyGC(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    ffi.Pointer<_XGC> arg3,
  ) {
    _XCopyGC ??= _dylib.lookupFunction<_c_XCopyGC, _dart_XCopyGC>('XCopyGC');
    return _XCopyGC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XCopyGC _XCopyGC;

  int XCopyPlane(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
    int arg10,
  ) {
    _XCopyPlane ??=
        _dylib.lookupFunction<_c_XCopyPlane, _dart_XCopyPlane>('XCopyPlane');
    return _XCopyPlane(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  _dart_XCopyPlane _XCopyPlane;

  int XDefaultDepth(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDefaultDepth ??= _dylib
        .lookupFunction<_c_XDefaultDepth, _dart_XDefaultDepth>('XDefaultDepth');
    return _XDefaultDepth(
      arg0,
      arg1,
    );
  }

  _dart_XDefaultDepth _XDefaultDepth;

  int XDefaultDepthOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDefaultDepthOfScreen ??= _dylib.lookupFunction<_c_XDefaultDepthOfScreen,
        _dart_XDefaultDepthOfScreen>('XDefaultDepthOfScreen');
    return _XDefaultDepthOfScreen(
      arg0,
    );
  }

  _dart_XDefaultDepthOfScreen _XDefaultDepthOfScreen;

  int XDefaultScreen(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDefaultScreen ??=
        _dylib.lookupFunction<_c_XDefaultScreen, _dart_XDefaultScreen>(
            'XDefaultScreen');
    return _XDefaultScreen(
      arg0,
    );
  }

  _dart_XDefaultScreen _XDefaultScreen;

  int XDefineCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XDefineCursor ??= _dylib
        .lookupFunction<_c_XDefineCursor, _dart_XDefineCursor>('XDefineCursor');
    return _XDefineCursor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDefineCursor _XDefineCursor;

  int XDeleteProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XDeleteProperty ??=
        _dylib.lookupFunction<_c_XDeleteProperty, _dart_XDeleteProperty>(
            'XDeleteProperty');
    return _XDeleteProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDeleteProperty _XDeleteProperty;

  int XDestroyWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDestroyWindow ??=
        _dylib.lookupFunction<_c_XDestroyWindow, _dart_XDestroyWindow>(
            'XDestroyWindow');
    return _XDestroyWindow(
      arg0,
      arg1,
    );
  }

  _dart_XDestroyWindow _XDestroyWindow;

  int XDestroySubwindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDestroySubwindows ??=
        _dylib.lookupFunction<_c_XDestroySubwindows, _dart_XDestroySubwindows>(
            'XDestroySubwindows');
    return _XDestroySubwindows(
      arg0,
      arg1,
    );
  }

  _dart_XDestroySubwindows _XDestroySubwindows;

  int XDoesBackingStore(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDoesBackingStore ??=
        _dylib.lookupFunction<_c_XDoesBackingStore, _dart_XDoesBackingStore>(
            'XDoesBackingStore');
    return _XDoesBackingStore(
      arg0,
    );
  }

  _dart_XDoesBackingStore _XDoesBackingStore;

  int XDoesSaveUnders(
    ffi.Pointer<Screen> arg0,
  ) {
    _XDoesSaveUnders ??=
        _dylib.lookupFunction<_c_XDoesSaveUnders, _dart_XDoesSaveUnders>(
            'XDoesSaveUnders');
    return _XDoesSaveUnders(
      arg0,
    );
  }

  _dart_XDoesSaveUnders _XDoesSaveUnders;

  int XDisableAccessControl(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XDisableAccessControl ??= _dylib.lookupFunction<_c_XDisableAccessControl,
        _dart_XDisableAccessControl>('XDisableAccessControl');
    return _XDisableAccessControl(
      arg0,
    );
  }

  _dart_XDisableAccessControl _XDisableAccessControl;

  int XDisplayCells(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayCells ??= _dylib
        .lookupFunction<_c_XDisplayCells, _dart_XDisplayCells>('XDisplayCells');
    return _XDisplayCells(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayCells _XDisplayCells;

  int XDisplayHeight(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayHeight ??=
        _dylib.lookupFunction<_c_XDisplayHeight, _dart_XDisplayHeight>(
            'XDisplayHeight');
    return _XDisplayHeight(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayHeight _XDisplayHeight;

  int XDisplayHeightMM(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayHeightMM ??=
        _dylib.lookupFunction<_c_XDisplayHeightMM, _dart_XDisplayHeightMM>(
            'XDisplayHeightMM');
    return _XDisplayHeightMM(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayHeightMM _XDisplayHeightMM;

  int XDisplayKeycodes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XDisplayKeycodes ??=
        _dylib.lookupFunction<_c_XDisplayKeycodes, _dart_XDisplayKeycodes>(
            'XDisplayKeycodes');
    return _XDisplayKeycodes(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDisplayKeycodes _XDisplayKeycodes;

  int XDisplayPlanes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayPlanes ??=
        _dylib.lookupFunction<_c_XDisplayPlanes, _dart_XDisplayPlanes>(
            'XDisplayPlanes');
    return _XDisplayPlanes(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayPlanes _XDisplayPlanes;

  int XDisplayWidth(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayWidth ??= _dylib
        .lookupFunction<_c_XDisplayWidth, _dart_XDisplayWidth>('XDisplayWidth');
    return _XDisplayWidth(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayWidth _XDisplayWidth;

  int XDisplayWidthMM(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XDisplayWidthMM ??=
        _dylib.lookupFunction<_c_XDisplayWidthMM, _dart_XDisplayWidthMM>(
            'XDisplayWidthMM');
    return _XDisplayWidthMM(
      arg0,
      arg1,
    );
  }

  _dart_XDisplayWidthMM _XDisplayWidthMM;

  int XDrawArc(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XDrawArc ??=
        _dylib.lookupFunction<_c_XDrawArc, _dart_XDrawArc>('XDrawArc');
    return _XDrawArc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XDrawArc _XDrawArc;

  int XDrawArcs(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XArc> arg3,
    int arg4,
  ) {
    _XDrawArcs ??=
        _dylib.lookupFunction<_c_XDrawArcs, _dart_XDrawArcs>('XDrawArcs');
    return _XDrawArcs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XDrawArcs _XDrawArcs;

  int XDrawImageString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int8> arg5,
    int arg6,
  ) {
    _XDrawImageString ??=
        _dylib.lookupFunction<_c_XDrawImageString, _dart_XDrawImageString>(
            'XDrawImageString');
    return _XDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawImageString _XDrawImageString;

  int XDrawImageString16(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XChar2b> arg5,
    int arg6,
  ) {
    _XDrawImageString16 ??=
        _dylib.lookupFunction<_c_XDrawImageString16, _dart_XDrawImageString16>(
            'XDrawImageString16');
    return _XDrawImageString16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawImageString16 _XDrawImageString16;

  int XDrawLine(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XDrawLine ??=
        _dylib.lookupFunction<_c_XDrawLine, _dart_XDrawLine>('XDrawLine');
    return _XDrawLine(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawLine _XDrawLine;

  int XDrawLines(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
  ) {
    _XDrawLines ??=
        _dylib.lookupFunction<_c_XDrawLines, _dart_XDrawLines>('XDrawLines');
    return _XDrawLines(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XDrawLines _XDrawLines;

  int XDrawPoint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
  ) {
    _XDrawPoint ??=
        _dylib.lookupFunction<_c_XDrawPoint, _dart_XDrawPoint>('XDrawPoint');
    return _XDrawPoint(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XDrawPoint _XDrawPoint;

  int XDrawPoints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
  ) {
    _XDrawPoints ??=
        _dylib.lookupFunction<_c_XDrawPoints, _dart_XDrawPoints>('XDrawPoints');
    return _XDrawPoints(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XDrawPoints _XDrawPoints;

  int XDrawRectangle(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XDrawRectangle ??=
        _dylib.lookupFunction<_c_XDrawRectangle, _dart_XDrawRectangle>(
            'XDrawRectangle');
    return _XDrawRectangle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawRectangle _XDrawRectangle;

  int XDrawRectangles(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XRectangle> arg3,
    int arg4,
  ) {
    _XDrawRectangles ??=
        _dylib.lookupFunction<_c_XDrawRectangles, _dart_XDrawRectangles>(
            'XDrawRectangles');
    return _XDrawRectangles(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XDrawRectangles _XDrawRectangles;

  int XDrawSegments(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XSegment> arg3,
    int arg4,
  ) {
    _XDrawSegments ??= _dylib
        .lookupFunction<_c_XDrawSegments, _dart_XDrawSegments>('XDrawSegments');
    return _XDrawSegments(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XDrawSegments _XDrawSegments;

  int XDrawString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int8> arg5,
    int arg6,
  ) {
    _XDrawString ??=
        _dylib.lookupFunction<_c_XDrawString, _dart_XDrawString>('XDrawString');
    return _XDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawString _XDrawString;

  int XDrawString16(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XChar2b> arg5,
    int arg6,
  ) {
    _XDrawString16 ??= _dylib
        .lookupFunction<_c_XDrawString16, _dart_XDrawString16>('XDrawString16');
    return _XDrawString16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawString16 _XDrawString16;

  int XDrawText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextItem> arg5,
    int arg6,
  ) {
    _XDrawText ??=
        _dylib.lookupFunction<_c_XDrawText, _dart_XDrawText>('XDrawText');
    return _XDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawText _XDrawText;

  int XDrawText16(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextItem16> arg5,
    int arg6,
  ) {
    _XDrawText16 ??=
        _dylib.lookupFunction<_c_XDrawText16, _dart_XDrawText16>('XDrawText16');
    return _XDrawText16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XDrawText16 _XDrawText16;

  int XEnableAccessControl(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XEnableAccessControl ??= _dylib.lookupFunction<_c_XEnableAccessControl,
        _dart_XEnableAccessControl>('XEnableAccessControl');
    return _XEnableAccessControl(
      arg0,
    );
  }

  _dart_XEnableAccessControl _XEnableAccessControl;

  int XEventsQueued(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XEventsQueued_1 ??= _dylib
        .lookupFunction<_c_XEventsQueued, _dart_XEventsQueued>('XEventsQueued');
    return _XEventsQueued_1(
      arg0,
      arg1,
    );
  }

  _dart_XEventsQueued _XEventsQueued_1;

  int XFetchName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    _XFetchName ??=
        _dylib.lookupFunction<_c_XFetchName, _dart_XFetchName>('XFetchName');
    return _XFetchName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XFetchName _XFetchName;

  int XFillArc(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XFillArc ??=
        _dylib.lookupFunction<_c_XFillArc, _dart_XFillArc>('XFillArc');
    return _XFillArc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XFillArc _XFillArc;

  int XFillArcs(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XArc> arg3,
    int arg4,
  ) {
    _XFillArcs ??=
        _dylib.lookupFunction<_c_XFillArcs, _dart_XFillArcs>('XFillArcs');
    return _XFillArcs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XFillArcs _XFillArcs;

  int XFillPolygon(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XPoint> arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XFillPolygon ??= _dylib
        .lookupFunction<_c_XFillPolygon, _dart_XFillPolygon>('XFillPolygon');
    return _XFillPolygon(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XFillPolygon _XFillPolygon;

  int XFillRectangle(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XFillRectangle ??=
        _dylib.lookupFunction<_c_XFillRectangle, _dart_XFillRectangle>(
            'XFillRectangle');
    return _XFillRectangle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XFillRectangle _XFillRectangle;

  int XFillRectangles(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XRectangle> arg3,
    int arg4,
  ) {
    _XFillRectangles ??=
        _dylib.lookupFunction<_c_XFillRectangles, _dart_XFillRectangles>(
            'XFillRectangles');
    return _XFillRectangles(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XFillRectangles _XFillRectangles;

  int XFlush(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XFlush_1 ??= _dylib.lookupFunction<_c_XFlush, _dart_XFlush>('XFlush');
    return _XFlush_1(
      arg0,
    );
  }

  _dart_XFlush _XFlush_1;

  int XForceScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XForceScreenSaver ??=
        _dylib.lookupFunction<_c_XForceScreenSaver, _dart_XForceScreenSaver>(
            'XForceScreenSaver');
    return _XForceScreenSaver(
      arg0,
      arg1,
    );
  }

  _dart_XForceScreenSaver _XForceScreenSaver;

  int XFree(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _XFree ??= _dylib.lookupFunction<_c_XFree, _dart_XFree>('XFree');
    return _XFree(
      arg0,
    );
  }

  _dart_XFree _XFree;

  int XFreeColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XFreeColormap ??= _dylib
        .lookupFunction<_c_XFreeColormap, _dart_XFreeColormap>('XFreeColormap');
    return _XFreeColormap(
      arg0,
      arg1,
    );
  }

  _dart_XFreeColormap _XFreeColormap;

  int XFreeColors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    int arg4,
  ) {
    _XFreeColors ??=
        _dylib.lookupFunction<_c_XFreeColors, _dart_XFreeColors>('XFreeColors');
    return _XFreeColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XFreeColors _XFreeColors;

  int XFreeCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XFreeCursor ??=
        _dylib.lookupFunction<_c_XFreeCursor, _dart_XFreeCursor>('XFreeCursor');
    return _XFreeCursor(
      arg0,
      arg1,
    );
  }

  _dart_XFreeCursor _XFreeCursor;

  int XFreeExtensionList(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    _XFreeExtensionList ??=
        _dylib.lookupFunction<_c_XFreeExtensionList, _dart_XFreeExtensionList>(
            'XFreeExtensionList');
    return _XFreeExtensionList(
      arg0,
    );
  }

  _dart_XFreeExtensionList _XFreeExtensionList;

  int XFreeFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XFontStruct> arg1,
  ) {
    _XFreeFont ??=
        _dylib.lookupFunction<_c_XFreeFont, _dart_XFreeFont>('XFreeFont');
    return _XFreeFont(
      arg0,
      arg1,
    );
  }

  _dart_XFreeFont _XFreeFont;

  int XFreeFontInfo(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<XFontStruct> arg1,
    int arg2,
  ) {
    _XFreeFontInfo ??= _dylib
        .lookupFunction<_c_XFreeFontInfo, _dart_XFreeFontInfo>('XFreeFontInfo');
    return _XFreeFontInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XFreeFontInfo _XFreeFontInfo;

  int XFreeFontNames(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    _XFreeFontNames ??=
        _dylib.lookupFunction<_c_XFreeFontNames, _dart_XFreeFontNames>(
            'XFreeFontNames');
    return _XFreeFontNames(
      arg0,
    );
  }

  _dart_XFreeFontNames _XFreeFontNames;

  int XFreeFontPath(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    _XFreeFontPath ??= _dylib
        .lookupFunction<_c_XFreeFontPath, _dart_XFreeFontPath>('XFreeFontPath');
    return _XFreeFontPath(
      arg0,
    );
  }

  _dart_XFreeFontPath _XFreeFontPath;

  int XFreeGC(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
  ) {
    _XFreeGC ??= _dylib.lookupFunction<_c_XFreeGC, _dart_XFreeGC>('XFreeGC');
    return _XFreeGC(
      arg0,
      arg1,
    );
  }

  _dart_XFreeGC _XFreeGC;

  int XFreeModifiermap(
    ffi.Pointer<XModifierKeymap> arg0,
  ) {
    _XFreeModifiermap ??=
        _dylib.lookupFunction<_c_XFreeModifiermap, _dart_XFreeModifiermap>(
            'XFreeModifiermap');
    return _XFreeModifiermap(
      arg0,
    );
  }

  _dart_XFreeModifiermap _XFreeModifiermap;

  int XFreePixmap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XFreePixmap ??=
        _dylib.lookupFunction<_c_XFreePixmap, _dart_XFreePixmap>('XFreePixmap');
    return _XFreePixmap(
      arg0,
      arg1,
    );
  }

  _dart_XFreePixmap _XFreePixmap;

  int XGeometry(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    ffi.Pointer<ffi.Int32> arg9,
    ffi.Pointer<ffi.Int32> arg10,
    ffi.Pointer<ffi.Int32> arg11,
    ffi.Pointer<ffi.Int32> arg12,
  ) {
    _XGeometry ??=
        _dylib.lookupFunction<_c_XGeometry, _dart_XGeometry>('XGeometry');
    return _XGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
      arg12,
    );
  }

  _dart_XGeometry _XGeometry;

  int XGetErrorDatabaseText(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int8> arg4,
    int arg5,
  ) {
    _XGetErrorDatabaseText ??= _dylib.lookupFunction<_c_XGetErrorDatabaseText,
        _dart_XGetErrorDatabaseText>('XGetErrorDatabaseText');
    return _XGetErrorDatabaseText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XGetErrorDatabaseText _XGetErrorDatabaseText;

  int XGetErrorText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
  ) {
    _XGetErrorText ??= _dylib
        .lookupFunction<_c_XGetErrorText, _dart_XGetErrorText>('XGetErrorText');
    return _XGetErrorText(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetErrorText _XGetErrorText;

  int XGetFontProperty(
    ffi.Pointer<XFontStruct> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _XGetFontProperty ??=
        _dylib.lookupFunction<_c_XGetFontProperty, _dart_XGetFontProperty>(
            'XGetFontProperty');
    return _XGetFontProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetFontProperty _XGetFontProperty;

  int XGetGCValues(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    ffi.Pointer<XGCValues> arg3,
  ) {
    _XGetGCValues ??= _dylib
        .lookupFunction<_c_XGetGCValues, _dart_XGetGCValues>('XGetGCValues');
    return _XGetGCValues(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetGCValues _XGetGCValues;

  int XGetGeometry(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
    ffi.Pointer<ffi.Uint32> arg6,
    ffi.Pointer<ffi.Uint32> arg7,
    ffi.Pointer<ffi.Uint32> arg8,
  ) {
    _XGetGeometry ??= _dylib
        .lookupFunction<_c_XGetGeometry, _dart_XGetGeometry>('XGetGeometry');
    return _XGetGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XGetGeometry _XGetGeometry;

  int XGetIconName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    _XGetIconName ??= _dylib
        .lookupFunction<_c_XGetIconName, _dart_XGetIconName>('XGetIconName');
    return _XGetIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetIconName _XGetIconName;

  int XGetInputFocus(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XGetInputFocus ??=
        _dylib.lookupFunction<_c_XGetInputFocus, _dart_XGetInputFocus>(
            'XGetInputFocus');
    return _XGetInputFocus(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetInputFocus _XGetInputFocus;

  int XGetKeyboardControl(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XKeyboardState> arg1,
  ) {
    _XGetKeyboardControl ??= _dylib.lookupFunction<_c_XGetKeyboardControl,
        _dart_XGetKeyboardControl>('XGetKeyboardControl');
    return _XGetKeyboardControl(
      arg0,
      arg1,
    );
  }

  _dart_XGetKeyboardControl _XGetKeyboardControl;

  int XGetPointerControl(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetPointerControl ??=
        _dylib.lookupFunction<_c_XGetPointerControl, _dart_XGetPointerControl>(
            'XGetPointerControl');
    return _XGetPointerControl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetPointerControl _XGetPointerControl;

  int XGetPointerMapping(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int arg2,
  ) {
    _XGetPointerMapping ??=
        _dylib.lookupFunction<_c_XGetPointerMapping, _dart_XGetPointerMapping>(
            'XGetPointerMapping');
    return _XGetPointerMapping(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetPointerMapping _XGetPointerMapping;

  int XGetScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XGetScreenSaver ??=
        _dylib.lookupFunction<_c_XGetScreenSaver, _dart_XGetScreenSaver>(
            'XGetScreenSaver');
    return _XGetScreenSaver(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XGetScreenSaver _XGetScreenSaver;

  int XGetTransientForHint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _XGetTransientForHint ??= _dylib.lookupFunction<_c_XGetTransientForHint,
        _dart_XGetTransientForHint>('XGetTransientForHint');
    return _XGetTransientForHint(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetTransientForHint _XGetTransientForHint;

  int XGetWindowProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    ffi.Pointer<ffi.Uint64> arg7,
    ffi.Pointer<ffi.Int32> arg8,
    ffi.Pointer<ffi.Uint64> arg9,
    ffi.Pointer<ffi.Uint64> arg10,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg11,
  ) {
    _XGetWindowProperty ??=
        _dylib.lookupFunction<_c_XGetWindowProperty, _dart_XGetWindowProperty>(
            'XGetWindowProperty');
    return _XGetWindowProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  _dart_XGetWindowProperty _XGetWindowProperty;

  int XGetWindowAttributes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XWindowAttributes> arg2,
  ) {
    _XGetWindowAttributes_1 ??= _dylib.lookupFunction<_c_XGetWindowAttributes,
        _dart_XGetWindowAttributes>('XGetWindowAttributes');
    return _XGetWindowAttributes_1(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetWindowAttributes _XGetWindowAttributes_1;

  int XGrabButton(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    _XGrabButton ??=
        _dylib.lookupFunction<_c_XGrabButton, _dart_XGrabButton>('XGrabButton');
    return _XGrabButton(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  _dart_XGrabButton _XGrabButton;

  int XGrabKey(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XGrabKey ??=
        _dylib.lookupFunction<_c_XGrabKey, _dart_XGrabKey>('XGrabKey');
    return _XGrabKey(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XGrabKey _XGrabKey;

  int XGrabKeyboard(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XGrabKeyboard ??= _dylib
        .lookupFunction<_c_XGrabKeyboard, _dart_XGrabKeyboard>('XGrabKeyboard');
    return _XGrabKeyboard(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XGrabKeyboard _XGrabKeyboard;

  int XGrabPointer(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XGrabPointer ??= _dylib
        .lookupFunction<_c_XGrabPointer, _dart_XGrabPointer>('XGrabPointer');
    return _XGrabPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XGrabPointer _XGrabPointer;

  int XGrabServer(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XGrabServer ??=
        _dylib.lookupFunction<_c_XGrabServer, _dart_XGrabServer>('XGrabServer');
    return _XGrabServer(
      arg0,
    );
  }

  _dart_XGrabServer _XGrabServer;

  int XHeightMMOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XHeightMMOfScreen ??=
        _dylib.lookupFunction<_c_XHeightMMOfScreen, _dart_XHeightMMOfScreen>(
            'XHeightMMOfScreen');
    return _XHeightMMOfScreen(
      arg0,
    );
  }

  _dart_XHeightMMOfScreen _XHeightMMOfScreen;

  int XHeightOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XHeightOfScreen ??=
        _dylib.lookupFunction<_c_XHeightOfScreen, _dart_XHeightOfScreen>(
            'XHeightOfScreen');
    return _XHeightOfScreen(
      arg0,
    );
  }

  _dart_XHeightOfScreen _XHeightOfScreen;

  int XImageByteOrder(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XImageByteOrder ??=
        _dylib.lookupFunction<_c_XImageByteOrder, _dart_XImageByteOrder>(
            'XImageByteOrder');
    return _XImageByteOrder(
      arg0,
    );
  }

  _dart_XImageByteOrder _XImageByteOrder;

  int XInstallColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XInstallColormap ??=
        _dylib.lookupFunction<_c_XInstallColormap, _dart_XInstallColormap>(
            'XInstallColormap');
    return _XInstallColormap(
      arg0,
      arg1,
    );
  }

  _dart_XInstallColormap _XInstallColormap;

  int XKeysymToKeycode(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XKeysymToKeycode_1 ??=
        _dylib.lookupFunction<_c_XKeysymToKeycode, _dart_XKeysymToKeycode>(
            'XKeysymToKeycode');
    return _XKeysymToKeycode_1(
      arg0,
      arg1,
    );
  }

  _dart_XKeysymToKeycode _XKeysymToKeycode_1;

  int XKillClient(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XKillClient ??=
        _dylib.lookupFunction<_c_XKillClient, _dart_XKillClient>('XKillClient');
    return _XKillClient(
      arg0,
      arg1,
    );
  }

  _dart_XKillClient _XKillClient;

  int XLookupColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XColor> arg3,
    ffi.Pointer<XColor> arg4,
  ) {
    _XLookupColor ??= _dylib
        .lookupFunction<_c_XLookupColor, _dart_XLookupColor>('XLookupColor');
    return _XLookupColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XLookupColor _XLookupColor;

  int XLowerWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XLowerWindow ??= _dylib
        .lookupFunction<_c_XLowerWindow, _dart_XLowerWindow>('XLowerWindow');
    return _XLowerWindow(
      arg0,
      arg1,
    );
  }

  _dart_XLowerWindow _XLowerWindow;

  int XMapRaised(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XMapRaised ??=
        _dylib.lookupFunction<_c_XMapRaised, _dart_XMapRaised>('XMapRaised');
    return _XMapRaised(
      arg0,
      arg1,
    );
  }

  _dart_XMapRaised _XMapRaised;

  int XMapSubwindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XMapSubwindows ??=
        _dylib.lookupFunction<_c_XMapSubwindows, _dart_XMapSubwindows>(
            'XMapSubwindows');
    return _XMapSubwindows(
      arg0,
      arg1,
    );
  }

  _dart_XMapSubwindows _XMapSubwindows;

  int XMapWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XMapWindow ??=
        _dylib.lookupFunction<_c_XMapWindow, _dart_XMapWindow>('XMapWindow');
    return _XMapWindow(
      arg0,
      arg1,
    );
  }

  _dart_XMapWindow _XMapWindow;

  int XMaxCmapsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XMaxCmapsOfScreen ??=
        _dylib.lookupFunction<_c_XMaxCmapsOfScreen, _dart_XMaxCmapsOfScreen>(
            'XMaxCmapsOfScreen');
    return _XMaxCmapsOfScreen(
      arg0,
    );
  }

  _dart_XMaxCmapsOfScreen _XMaxCmapsOfScreen;

  int XMinCmapsOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XMinCmapsOfScreen ??=
        _dylib.lookupFunction<_c_XMinCmapsOfScreen, _dart_XMinCmapsOfScreen>(
            'XMinCmapsOfScreen');
    return _XMinCmapsOfScreen(
      arg0,
    );
  }

  _dart_XMinCmapsOfScreen _XMinCmapsOfScreen;

  int XMoveResizeWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XMoveResizeWindow ??=
        _dylib.lookupFunction<_c_XMoveResizeWindow, _dart_XMoveResizeWindow>(
            'XMoveResizeWindow');
    return _XMoveResizeWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XMoveResizeWindow _XMoveResizeWindow;

  int XMoveWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XMoveWindow ??=
        _dylib.lookupFunction<_c_XMoveWindow, _dart_XMoveWindow>('XMoveWindow');
    return _XMoveWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XMoveWindow _XMoveWindow;

  int XNoOp(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XNoOp ??= _dylib.lookupFunction<_c_XNoOp, _dart_XNoOp>('XNoOp');
    return _XNoOp(
      arg0,
    );
  }

  _dart_XNoOp _XNoOp;

  int XParseColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XColor> arg3,
  ) {
    _XParseColor ??=
        _dylib.lookupFunction<_c_XParseColor, _dart_XParseColor>('XParseColor');
    return _XParseColor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XParseColor _XParseColor;

  int XParseGeometry(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Uint32> arg3,
    ffi.Pointer<ffi.Uint32> arg4,
  ) {
    _XParseGeometry ??=
        _dylib.lookupFunction<_c_XParseGeometry, _dart_XParseGeometry>(
            'XParseGeometry');
    return _XParseGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XParseGeometry _XParseGeometry;

  int XPending(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XPending ??=
        _dylib.lookupFunction<_c_XPending, _dart_XPending>('XPending');
    return _XPending(
      arg0,
    );
  }

  _dart_XPending _XPending;

  int XPlanesOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XPlanesOfScreen ??=
        _dylib.lookupFunction<_c_XPlanesOfScreen, _dart_XPlanesOfScreen>(
            'XPlanesOfScreen');
    return _XPlanesOfScreen(
      arg0,
    );
  }

  _dart_XPlanesOfScreen _XPlanesOfScreen;

  int XProtocolRevision(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XProtocolRevision ??=
        _dylib.lookupFunction<_c_XProtocolRevision, _dart_XProtocolRevision>(
            'XProtocolRevision');
    return _XProtocolRevision(
      arg0,
    );
  }

  _dart_XProtocolRevision _XProtocolRevision;

  int XProtocolVersion(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XProtocolVersion ??=
        _dylib.lookupFunction<_c_XProtocolVersion, _dart_XProtocolVersion>(
            'XProtocolVersion');
    return _XProtocolVersion(
      arg0,
    );
  }

  _dart_XProtocolVersion _XProtocolVersion;

  int XPutImage(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    ffi.Pointer<XImage> arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
    int arg9,
  ) {
    _XPutImage ??=
        _dylib.lookupFunction<_c_XPutImage, _dart_XPutImage>('XPutImage');
    return _XPutImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
    );
  }

  _dart_XPutImage _XPutImage;

  int XQLength(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XQLength ??=
        _dylib.lookupFunction<_c_XQLength, _dart_XQLength>('XQLength');
    return _XQLength(
      arg0,
    );
  }

  _dart_XQLength _XQLength;

  int XQueryBestCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _XQueryBestCursor ??=
        _dylib.lookupFunction<_c_XQueryBestCursor, _dart_XQueryBestCursor>(
            'XQueryBestCursor');
    return _XQueryBestCursor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XQueryBestCursor _XQueryBestCursor;

  int XQueryBestSize(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Uint32> arg5,
    ffi.Pointer<ffi.Uint32> arg6,
  ) {
    _XQueryBestSize ??=
        _dylib.lookupFunction<_c_XQueryBestSize, _dart_XQueryBestSize>(
            'XQueryBestSize');
    return _XQueryBestSize(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XQueryBestSize _XQueryBestSize;

  int XQueryBestStipple(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _XQueryBestStipple ??=
        _dylib.lookupFunction<_c_XQueryBestStipple, _dart_XQueryBestStipple>(
            'XQueryBestStipple');
    return _XQueryBestStipple(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XQueryBestStipple _XQueryBestStipple;

  int XQueryBestTile(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _XQueryBestTile ??=
        _dylib.lookupFunction<_c_XQueryBestTile, _dart_XQueryBestTile>(
            'XQueryBestTile');
    return _XQueryBestTile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XQueryBestTile _XQueryBestTile;

  int XQueryColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    _XQueryColor ??=
        _dylib.lookupFunction<_c_XQueryColor, _dart_XQueryColor>('XQueryColor');
    return _XQueryColor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XQueryColor _XQueryColor;

  int XQueryColors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    int arg3,
  ) {
    _XQueryColors_1 ??= _dylib
        .lookupFunction<_c_XQueryColors, _dart_XQueryColors>('XQueryColors');
    return _XQueryColors_1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XQueryColors _XQueryColors_1;

  int XQueryExtension(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XQueryExtension ??=
        _dylib.lookupFunction<_c_XQueryExtension, _dart_XQueryExtension>(
            'XQueryExtension');
    return _XQueryExtension(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XQueryExtension _XQueryExtension;

  int XQueryKeymap(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XQueryKeymap ??= _dylib
        .lookupFunction<_c_XQueryKeymap, _dart_XQueryKeymap>('XQueryKeymap');
    return _XQueryKeymap(
      arg0,
      arg1,
    );
  }

  _dart_XQueryKeymap _XQueryKeymap;

  int XQueryPointer(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<ffi.Int32> arg7,
    ffi.Pointer<ffi.Uint32> arg8,
  ) {
    _XQueryPointer ??= _dylib
        .lookupFunction<_c_XQueryPointer, _dart_XQueryPointer>('XQueryPointer');
    return _XQueryPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XQueryPointer _XQueryPointer;

  int XQueryTextExtents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XCharStruct> arg7,
  ) {
    _XQueryTextExtents ??=
        _dylib.lookupFunction<_c_XQueryTextExtents, _dart_XQueryTextExtents>(
            'XQueryTextExtents');
    return _XQueryTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XQueryTextExtents _XQueryTextExtents;

  int XQueryTextExtents16(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XChar2b> arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XCharStruct> arg7,
  ) {
    _XQueryTextExtents16 ??= _dylib.lookupFunction<_c_XQueryTextExtents16,
        _dart_XQueryTextExtents16>('XQueryTextExtents16');
    return _XQueryTextExtents16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XQueryTextExtents16 _XQueryTextExtents16;

  int XQueryTree(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _XQueryTree ??=
        _dylib.lookupFunction<_c_XQueryTree, _dart_XQueryTree>('XQueryTree');
    return _XQueryTree(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XQueryTree _XQueryTree;

  int XRaiseWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XRaiseWindow ??= _dylib
        .lookupFunction<_c_XRaiseWindow, _dart_XRaiseWindow>('XRaiseWindow');
    return _XRaiseWindow(
      arg0,
      arg1,
    );
  }

  _dart_XRaiseWindow _XRaiseWindow;

  int XReadBitmapFile(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Uint32> arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint64> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<ffi.Int32> arg7,
  ) {
    _XReadBitmapFile ??=
        _dylib.lookupFunction<_c_XReadBitmapFile, _dart_XReadBitmapFile>(
            'XReadBitmapFile');
    return _XReadBitmapFile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XReadBitmapFile _XReadBitmapFile;

  int XReadBitmapFileData(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XReadBitmapFileData ??= _dylib.lookupFunction<_c_XReadBitmapFileData,
        _dart_XReadBitmapFileData>('XReadBitmapFileData');
    return _XReadBitmapFileData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XReadBitmapFileData _XReadBitmapFileData;

  int XRebindKeysym(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint8> arg4,
    int arg5,
  ) {
    _XRebindKeysym ??= _dylib
        .lookupFunction<_c_XRebindKeysym, _dart_XRebindKeysym>('XRebindKeysym');
    return _XRebindKeysym(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XRebindKeysym _XRebindKeysym;

  int XRecolorCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    ffi.Pointer<XColor> arg3,
  ) {
    _XRecolorCursor ??=
        _dylib.lookupFunction<_c_XRecolorCursor, _dart_XRecolorCursor>(
            'XRecolorCursor');
    return _XRecolorCursor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XRecolorCursor _XRecolorCursor;

  int XRefreshKeyboardMapping(
    ffi.Pointer<XMappingEvent> arg0,
  ) {
    _XRefreshKeyboardMapping_1 ??= _dylib.lookupFunction<
        _c_XRefreshKeyboardMapping,
        _dart_XRefreshKeyboardMapping>('XRefreshKeyboardMapping');
    return _XRefreshKeyboardMapping_1(
      arg0,
    );
  }

  _dart_XRefreshKeyboardMapping _XRefreshKeyboardMapping_1;

  int XRemoveFromSaveSet(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XRemoveFromSaveSet ??=
        _dylib.lookupFunction<_c_XRemoveFromSaveSet, _dart_XRemoveFromSaveSet>(
            'XRemoveFromSaveSet');
    return _XRemoveFromSaveSet(
      arg0,
      arg1,
    );
  }

  _dart_XRemoveFromSaveSet _XRemoveFromSaveSet;

  int XRemoveHost(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XHostAddress> arg1,
  ) {
    _XRemoveHost ??=
        _dylib.lookupFunction<_c_XRemoveHost, _dart_XRemoveHost>('XRemoveHost');
    return _XRemoveHost(
      arg0,
      arg1,
    );
  }

  _dart_XRemoveHost _XRemoveHost;

  int XRemoveHosts(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XHostAddress> arg1,
    int arg2,
  ) {
    _XRemoveHosts ??= _dylib
        .lookupFunction<_c_XRemoveHosts, _dart_XRemoveHosts>('XRemoveHosts');
    return _XRemoveHosts(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XRemoveHosts _XRemoveHosts;

  int XReparentWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XReparentWindow ??=
        _dylib.lookupFunction<_c_XReparentWindow, _dart_XReparentWindow>(
            'XReparentWindow');
    return _XReparentWindow(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XReparentWindow _XReparentWindow;

  int XResetScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XResetScreenSaver ??=
        _dylib.lookupFunction<_c_XResetScreenSaver, _dart_XResetScreenSaver>(
            'XResetScreenSaver');
    return _XResetScreenSaver(
      arg0,
    );
  }

  _dart_XResetScreenSaver _XResetScreenSaver;

  int XResizeWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XResizeWindow ??= _dylib
        .lookupFunction<_c_XResizeWindow, _dart_XResizeWindow>('XResizeWindow');
    return _XResizeWindow(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XResizeWindow _XResizeWindow;

  int XRestackWindows(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
  ) {
    _XRestackWindows ??=
        _dylib.lookupFunction<_c_XRestackWindows, _dart_XRestackWindows>(
            'XRestackWindows');
    return _XRestackWindows(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XRestackWindows _XRestackWindows;

  int XRotateBuffers(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XRotateBuffers ??=
        _dylib.lookupFunction<_c_XRotateBuffers, _dart_XRotateBuffers>(
            'XRotateBuffers');
    return _XRotateBuffers(
      arg0,
      arg1,
    );
  }

  _dart_XRotateBuffers _XRotateBuffers;

  int XRotateWindowProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    int arg4,
  ) {
    _XRotateWindowProperties ??= _dylib.lookupFunction<
        _c_XRotateWindowProperties,
        _dart_XRotateWindowProperties>('XRotateWindowProperties');
    return _XRotateWindowProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XRotateWindowProperties _XRotateWindowProperties;

  int XScreenCount(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XScreenCount ??= _dylib
        .lookupFunction<_c_XScreenCount, _dart_XScreenCount>('XScreenCount');
    return _XScreenCount(
      arg0,
    );
  }

  _dart_XScreenCount _XScreenCount;

  int XSelectInput(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSelectInput ??= _dylib
        .lookupFunction<_c_XSelectInput, _dart_XSelectInput>('XSelectInput');
    return _XSelectInput(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSelectInput _XSelectInput;

  int XSetAccessControl(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XSetAccessControl ??=
        _dylib.lookupFunction<_c_XSetAccessControl, _dart_XSetAccessControl>(
            'XSetAccessControl');
    return _XSetAccessControl(
      arg0,
      arg1,
    );
  }

  _dart_XSetAccessControl _XSetAccessControl;

  int XSetArcMode(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetArcMode ??=
        _dylib.lookupFunction<_c_XSetArcMode, _dart_XSetArcMode>('XSetArcMode');
    return _XSetArcMode(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetArcMode _XSetArcMode;

  int XSetBackground(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetBackground ??=
        _dylib.lookupFunction<_c_XSetBackground, _dart_XSetBackground>(
            'XSetBackground');
    return _XSetBackground(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetBackground _XSetBackground;

  int XSetClipMask(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetClipMask ??= _dylib
        .lookupFunction<_c_XSetClipMask, _dart_XSetClipMask>('XSetClipMask');
    return _XSetClipMask(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetClipMask _XSetClipMask;

  int XSetClipOrigin(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
  ) {
    _XSetClipOrigin ??=
        _dylib.lookupFunction<_c_XSetClipOrigin, _dart_XSetClipOrigin>(
            'XSetClipOrigin');
    return _XSetClipOrigin(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetClipOrigin _XSetClipOrigin;

  int XSetClipRectangles(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    int arg6,
  ) {
    _XSetClipRectangles_1 ??=
        _dylib.lookupFunction<_c_XSetClipRectangles, _dart_XSetClipRectangles>(
            'XSetClipRectangles');
    return _XSetClipRectangles_1(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XSetClipRectangles _XSetClipRectangles_1;

  int XSetCloseDownMode(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XSetCloseDownMode ??=
        _dylib.lookupFunction<_c_XSetCloseDownMode, _dart_XSetCloseDownMode>(
            'XSetCloseDownMode');
    return _XSetCloseDownMode(
      arg0,
      arg1,
    );
  }

  _dart_XSetCloseDownMode _XSetCloseDownMode;

  int XSetCommand(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
    int arg3,
  ) {
    _XSetCommand ??=
        _dylib.lookupFunction<_c_XSetCommand, _dart_XSetCommand>('XSetCommand');
    return _XSetCommand(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetCommand _XSetCommand;

  int XSetDashes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
  ) {
    _XSetDashes ??=
        _dylib.lookupFunction<_c_XSetDashes, _dart_XSetDashes>('XSetDashes');
    return _XSetDashes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XSetDashes _XSetDashes;

  int XSetFillRule(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetFillRule ??= _dylib
        .lookupFunction<_c_XSetFillRule, _dart_XSetFillRule>('XSetFillRule');
    return _XSetFillRule(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFillRule _XSetFillRule;

  int XSetFillStyle(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetFillStyle ??= _dylib
        .lookupFunction<_c_XSetFillStyle, _dart_XSetFillStyle>('XSetFillStyle');
    return _XSetFillStyle(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFillStyle _XSetFillStyle;

  int XSetFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetFont ??=
        _dylib.lookupFunction<_c_XSetFont, _dart_XSetFont>('XSetFont');
    return _XSetFont(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFont _XSetFont;

  int XSetFontPath(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
  ) {
    _XSetFontPath ??= _dylib
        .lookupFunction<_c_XSetFontPath, _dart_XSetFontPath>('XSetFontPath');
    return _XSetFontPath(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFontPath _XSetFontPath;

  int XSetForeground(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetForeground ??=
        _dylib.lookupFunction<_c_XSetForeground, _dart_XSetForeground>(
            'XSetForeground');
    return _XSetForeground(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetForeground _XSetForeground;

  int XSetFunction(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetFunction ??= _dylib
        .lookupFunction<_c_XSetFunction, _dart_XSetFunction>('XSetFunction');
    return _XSetFunction(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetFunction _XSetFunction;

  int XSetGraphicsExposures(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetGraphicsExposures ??= _dylib.lookupFunction<_c_XSetGraphicsExposures,
        _dart_XSetGraphicsExposures>('XSetGraphicsExposures');
    return _XSetGraphicsExposures(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetGraphicsExposures _XSetGraphicsExposures;

  int XSetIconName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XSetIconName ??= _dylib
        .lookupFunction<_c_XSetIconName, _dart_XSetIconName>('XSetIconName');
    return _XSetIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetIconName _XSetIconName;

  int XSetInputFocus(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XSetInputFocus ??=
        _dylib.lookupFunction<_c_XSetInputFocus, _dart_XSetInputFocus>(
            'XSetInputFocus');
    return _XSetInputFocus(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetInputFocus _XSetInputFocus;

  int XSetLineAttributes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XSetLineAttributes ??=
        _dylib.lookupFunction<_c_XSetLineAttributes, _dart_XSetLineAttributes>(
            'XSetLineAttributes');
    return _XSetLineAttributes(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XSetLineAttributes _XSetLineAttributes;

  int XSetModifierMapping(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XModifierKeymap> arg1,
  ) {
    _XSetModifierMapping ??= _dylib.lookupFunction<_c_XSetModifierMapping,
        _dart_XSetModifierMapping>('XSetModifierMapping');
    return _XSetModifierMapping(
      arg0,
      arg1,
    );
  }

  _dart_XSetModifierMapping _XSetModifierMapping;

  int XSetPlaneMask(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetPlaneMask ??= _dylib
        .lookupFunction<_c_XSetPlaneMask, _dart_XSetPlaneMask>('XSetPlaneMask');
    return _XSetPlaneMask(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetPlaneMask _XSetPlaneMask;

  int XSetPointerMapping(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
    int arg2,
  ) {
    _XSetPointerMapping ??=
        _dylib.lookupFunction<_c_XSetPointerMapping, _dart_XSetPointerMapping>(
            'XSetPointerMapping');
    return _XSetPointerMapping(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetPointerMapping _XSetPointerMapping;

  int XSetScreenSaver(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XSetScreenSaver ??=
        _dylib.lookupFunction<_c_XSetScreenSaver, _dart_XSetScreenSaver>(
            'XSetScreenSaver');
    return _XSetScreenSaver(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XSetScreenSaver _XSetScreenSaver;

  int XSetSelectionOwner(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XSetSelectionOwner ??=
        _dylib.lookupFunction<_c_XSetSelectionOwner, _dart_XSetSelectionOwner>(
            'XSetSelectionOwner');
    return _XSetSelectionOwner(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetSelectionOwner _XSetSelectionOwner;

  int XSetState(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XSetState ??=
        _dylib.lookupFunction<_c_XSetState, _dart_XSetState>('XSetState');
    return _XSetState(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XSetState _XSetState;

  int XSetStipple(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetStipple ??=
        _dylib.lookupFunction<_c_XSetStipple, _dart_XSetStipple>('XSetStipple');
    return _XSetStipple(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetStipple _XSetStipple;

  int XSetSubwindowMode(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetSubwindowMode ??=
        _dylib.lookupFunction<_c_XSetSubwindowMode, _dart_XSetSubwindowMode>(
            'XSetSubwindowMode');
    return _XSetSubwindowMode(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetSubwindowMode _XSetSubwindowMode;

  int XSetTSOrigin(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
    int arg3,
  ) {
    _XSetTSOrigin ??= _dylib
        .lookupFunction<_c_XSetTSOrigin, _dart_XSetTSOrigin>('XSetTSOrigin');
    return _XSetTSOrigin(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetTSOrigin _XSetTSOrigin;

  int XSetTile(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    int arg2,
  ) {
    _XSetTile ??=
        _dylib.lookupFunction<_c_XSetTile, _dart_XSetTile>('XSetTile');
    return _XSetTile(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetTile _XSetTile;

  int XSetWindowBackground(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBackground ??= _dylib.lookupFunction<_c_XSetWindowBackground,
        _dart_XSetWindowBackground>('XSetWindowBackground');
    return _XSetWindowBackground(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBackground _XSetWindowBackground;

  int XSetWindowBackgroundPixmap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBackgroundPixmap ??= _dylib.lookupFunction<
        _c_XSetWindowBackgroundPixmap,
        _dart_XSetWindowBackgroundPixmap>('XSetWindowBackgroundPixmap');
    return _XSetWindowBackgroundPixmap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBackgroundPixmap _XSetWindowBackgroundPixmap;

  int XSetWindowBorder(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBorder ??=
        _dylib.lookupFunction<_c_XSetWindowBorder, _dart_XSetWindowBorder>(
            'XSetWindowBorder');
    return _XSetWindowBorder(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBorder _XSetWindowBorder;

  int XSetWindowBorderPixmap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBorderPixmap ??= _dylib.lookupFunction<_c_XSetWindowBorderPixmap,
        _dart_XSetWindowBorderPixmap>('XSetWindowBorderPixmap');
    return _XSetWindowBorderPixmap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBorderPixmap _XSetWindowBorderPixmap;

  int XSetWindowBorderWidth(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowBorderWidth ??= _dylib.lookupFunction<_c_XSetWindowBorderWidth,
        _dart_XSetWindowBorderWidth>('XSetWindowBorderWidth');
    return _XSetWindowBorderWidth(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowBorderWidth _XSetWindowBorderWidth;

  int XSetWindowColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XSetWindowColormap ??=
        _dylib.lookupFunction<_c_XSetWindowColormap, _dart_XSetWindowColormap>(
            'XSetWindowColormap');
    return _XSetWindowColormap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWindowColormap _XSetWindowColormap;

  int XStoreBuffer(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    _XStoreBuffer ??= _dylib
        .lookupFunction<_c_XStoreBuffer, _dart_XStoreBuffer>('XStoreBuffer');
    return _XStoreBuffer(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XStoreBuffer _XStoreBuffer;

  int XStoreBytes(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XStoreBytes ??=
        _dylib.lookupFunction<_c_XStoreBytes, _dart_XStoreBytes>('XStoreBytes');
    return _XStoreBytes(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XStoreBytes _XStoreBytes;

  int XStoreColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
  ) {
    _XStoreColor ??=
        _dylib.lookupFunction<_c_XStoreColor, _dart_XStoreColor>('XStoreColor');
    return _XStoreColor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XStoreColor _XStoreColor;

  int XStoreColors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XColor> arg2,
    int arg3,
  ) {
    _XStoreColors ??= _dylib
        .lookupFunction<_c_XStoreColors, _dart_XStoreColors>('XStoreColors');
    return _XStoreColors(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XStoreColors _XStoreColors;

  int XStoreName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XStoreName ??=
        _dylib.lookupFunction<_c_XStoreName, _dart_XStoreName>('XStoreName');
    return _XStoreName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XStoreName _XStoreName;

  int XStoreNamedColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    int arg4,
  ) {
    _XStoreNamedColor ??=
        _dylib.lookupFunction<_c_XStoreNamedColor, _dart_XStoreNamedColor>(
            'XStoreNamedColor');
    return _XStoreNamedColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XStoreNamedColor _XStoreNamedColor;

  int XSync(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XSync ??= _dylib.lookupFunction<_c_XSync, _dart_XSync>('XSync');
    return _XSync(
      arg0,
      arg1,
    );
  }

  _dart_XSync _XSync;

  int XTextExtents(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<XCharStruct> arg6,
  ) {
    _XTextExtents ??= _dylib
        .lookupFunction<_c_XTextExtents, _dart_XTextExtents>('XTextExtents');
    return _XTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XTextExtents _XTextExtents;

  int XTextExtents16(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<XChar2b> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<XCharStruct> arg6,
  ) {
    _XTextExtents16 ??=
        _dylib.lookupFunction<_c_XTextExtents16, _dart_XTextExtents16>(
            'XTextExtents16');
    return _XTextExtents16(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XTextExtents16 _XTextExtents16;

  int XTextWidth(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XTextWidth ??=
        _dylib.lookupFunction<_c_XTextWidth, _dart_XTextWidth>('XTextWidth');
    return _XTextWidth(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XTextWidth _XTextWidth;

  int XTextWidth16(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<XChar2b> arg1,
    int arg2,
  ) {
    _XTextWidth16 ??= _dylib
        .lookupFunction<_c_XTextWidth16, _dart_XTextWidth16>('XTextWidth16');
    return _XTextWidth16(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XTextWidth16 _XTextWidth16;

  int XTranslateCoordinates(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<ffi.Uint64> arg7,
  ) {
    _XTranslateCoordinates ??= _dylib.lookupFunction<_c_XTranslateCoordinates,
        _dart_XTranslateCoordinates>('XTranslateCoordinates');
    return _XTranslateCoordinates(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XTranslateCoordinates _XTranslateCoordinates;

  int XUndefineCursor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUndefineCursor ??=
        _dylib.lookupFunction<_c_XUndefineCursor, _dart_XUndefineCursor>(
            'XUndefineCursor');
    return _XUndefineCursor(
      arg0,
      arg1,
    );
  }

  _dart_XUndefineCursor _XUndefineCursor;

  int XUngrabButton(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XUngrabButton ??= _dylib
        .lookupFunction<_c_XUngrabButton, _dart_XUngrabButton>('XUngrabButton');
    return _XUngrabButton(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XUngrabButton _XUngrabButton;

  int XUngrabKey(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XUngrabKey ??=
        _dylib.lookupFunction<_c_XUngrabKey, _dart_XUngrabKey>('XUngrabKey');
    return _XUngrabKey(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XUngrabKey _XUngrabKey;

  int XUngrabKeyboard(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUngrabKeyboard ??=
        _dylib.lookupFunction<_c_XUngrabKeyboard, _dart_XUngrabKeyboard>(
            'XUngrabKeyboard');
    return _XUngrabKeyboard(
      arg0,
      arg1,
    );
  }

  _dart_XUngrabKeyboard _XUngrabKeyboard;

  int XUngrabPointer(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUngrabPointer ??=
        _dylib.lookupFunction<_c_XUngrabPointer, _dart_XUngrabPointer>(
            'XUngrabPointer');
    return _XUngrabPointer(
      arg0,
      arg1,
    );
  }

  _dart_XUngrabPointer _XUngrabPointer;

  int XUngrabServer(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XUngrabServer ??= _dylib
        .lookupFunction<_c_XUngrabServer, _dart_XUngrabServer>('XUngrabServer');
    return _XUngrabServer(
      arg0,
    );
  }

  _dart_XUngrabServer _XUngrabServer;

  int XUninstallColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUninstallColormap ??=
        _dylib.lookupFunction<_c_XUninstallColormap, _dart_XUninstallColormap>(
            'XUninstallColormap');
    return _XUninstallColormap(
      arg0,
      arg1,
    );
  }

  _dart_XUninstallColormap _XUninstallColormap;

  int XUnloadFont(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUnloadFont ??=
        _dylib.lookupFunction<_c_XUnloadFont, _dart_XUnloadFont>('XUnloadFont');
    return _XUnloadFont(
      arg0,
      arg1,
    );
  }

  _dart_XUnloadFont _XUnloadFont;

  int XUnmapSubwindows(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUnmapSubwindows ??=
        _dylib.lookupFunction<_c_XUnmapSubwindows, _dart_XUnmapSubwindows>(
            'XUnmapSubwindows');
    return _XUnmapSubwindows(
      arg0,
      arg1,
    );
  }

  _dart_XUnmapSubwindows _XUnmapSubwindows;

  int XUnmapWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XUnmapWindow ??= _dylib
        .lookupFunction<_c_XUnmapWindow, _dart_XUnmapWindow>('XUnmapWindow');
    return _XUnmapWindow(
      arg0,
      arg1,
    );
  }

  _dart_XUnmapWindow _XUnmapWindow;

  int XVendorRelease(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XVendorRelease ??=
        _dylib.lookupFunction<_c_XVendorRelease, _dart_XVendorRelease>(
            'XVendorRelease');
    return _XVendorRelease(
      arg0,
    );
  }

  _dart_XVendorRelease _XVendorRelease;

  int XWarpPointer(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    int arg8,
  ) {
    _XWarpPointer ??= _dylib
        .lookupFunction<_c_XWarpPointer, _dart_XWarpPointer>('XWarpPointer');
    return _XWarpPointer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XWarpPointer _XWarpPointer;

  int XWidthMMOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XWidthMMOfScreen ??=
        _dylib.lookupFunction<_c_XWidthMMOfScreen, _dart_XWidthMMOfScreen>(
            'XWidthMMOfScreen');
    return _XWidthMMOfScreen(
      arg0,
    );
  }

  _dart_XWidthMMOfScreen _XWidthMMOfScreen;

  int XWidthOfScreen(
    ffi.Pointer<Screen> arg0,
  ) {
    _XWidthOfScreen ??=
        _dylib.lookupFunction<_c_XWidthOfScreen, _dart_XWidthOfScreen>(
            'XWidthOfScreen');
    return _XWidthOfScreen(
      arg0,
    );
  }

  _dart_XWidthOfScreen _XWidthOfScreen;

  int XWriteBitmapFile(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XWriteBitmapFile ??=
        _dylib.lookupFunction<_c_XWriteBitmapFile, _dart_XWriteBitmapFile>(
            'XWriteBitmapFile');
    return _XWriteBitmapFile(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XWriteBitmapFile _XWriteBitmapFile;

  int XSupportsLocale() {
    _XSupportsLocale ??=
        _dylib.lookupFunction<_c_XSupportsLocale, _dart_XSupportsLocale>(
            'XSupportsLocale');
    return _XSupportsLocale();
  }

  _dart_XSupportsLocale _XSupportsLocale;

  ffi.Pointer<ffi.Int8> XSetLocaleModifiers(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XSetLocaleModifiers ??= _dylib.lookupFunction<_c_XSetLocaleModifiers,
        _dart_XSetLocaleModifiers>('XSetLocaleModifiers');
    return _XSetLocaleModifiers(
      arg0,
    );
  }

  _dart_XSetLocaleModifiers _XSetLocaleModifiers;

  ffi.Pointer<_XOM> XOpenOM(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _XOpenOM ??= _dylib.lookupFunction<_c_XOpenOM, _dart_XOpenOM>('XOpenOM');
    return _XOpenOM(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XOpenOM _XOpenOM;

  int XCloseOM(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XCloseOM ??=
        _dylib.lookupFunction<_c_XCloseOM, _dart_XCloseOM>('XCloseOM');
    return _XCloseOM(
      arg0,
    );
  }

  _dart_XCloseOM _XCloseOM;

  ffi.Pointer<ffi.Int8> XSetOMValues(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XSetOMValues ??= _dylib
        .lookupFunction<_c_XSetOMValues, _dart_XSetOMValues>('XSetOMValues');
    return _XSetOMValues(
      arg0,
    );
  }

  _dart_XSetOMValues _XSetOMValues;

  ffi.Pointer<ffi.Int8> XGetOMValues(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XGetOMValues ??= _dylib
        .lookupFunction<_c_XGetOMValues, _dart_XGetOMValues>('XGetOMValues');
    return _XGetOMValues(
      arg0,
    );
  }

  _dart_XGetOMValues _XGetOMValues;

  ffi.Pointer<_XDisplay> XDisplayOfOM(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XDisplayOfOM ??= _dylib
        .lookupFunction<_c_XDisplayOfOM, _dart_XDisplayOfOM>('XDisplayOfOM');
    return _XDisplayOfOM(
      arg0,
    );
  }

  _dart_XDisplayOfOM _XDisplayOfOM;

  ffi.Pointer<ffi.Int8> XLocaleOfOM(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XLocaleOfOM ??=
        _dylib.lookupFunction<_c_XLocaleOfOM, _dart_XLocaleOfOM>('XLocaleOfOM');
    return _XLocaleOfOM(
      arg0,
    );
  }

  _dart_XLocaleOfOM _XLocaleOfOM;

  ffi.Pointer<_XOC> XCreateOC(
    ffi.Pointer<_XOM> arg0,
  ) {
    _XCreateOC ??=
        _dylib.lookupFunction<_c_XCreateOC, _dart_XCreateOC>('XCreateOC');
    return _XCreateOC(
      arg0,
    );
  }

  _dart_XCreateOC _XCreateOC;

  void XDestroyOC(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XDestroyOC ??=
        _dylib.lookupFunction<_c_XDestroyOC, _dart_XDestroyOC>('XDestroyOC');
    return _XDestroyOC(
      arg0,
    );
  }

  _dart_XDestroyOC _XDestroyOC;

  ffi.Pointer<_XOM> XOMOfOC(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XOMOfOC ??= _dylib.lookupFunction<_c_XOMOfOC, _dart_XOMOfOC>('XOMOfOC');
    return _XOMOfOC(
      arg0,
    );
  }

  _dart_XOMOfOC _XOMOfOC;

  ffi.Pointer<ffi.Int8> XSetOCValues(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XSetOCValues ??= _dylib
        .lookupFunction<_c_XSetOCValues, _dart_XSetOCValues>('XSetOCValues');
    return _XSetOCValues(
      arg0,
    );
  }

  _dart_XSetOCValues _XSetOCValues;

  ffi.Pointer<ffi.Int8> XGetOCValues(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XGetOCValues ??= _dylib
        .lookupFunction<_c_XGetOCValues, _dart_XGetOCValues>('XGetOCValues');
    return _XGetOCValues(
      arg0,
    );
  }

  _dart_XGetOCValues _XGetOCValues;

  ffi.Pointer<_XOC> XCreateFontSet(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  ) {
    _XCreateFontSet ??=
        _dylib.lookupFunction<_c_XCreateFontSet, _dart_XCreateFontSet>(
            'XCreateFontSet');
    return _XCreateFontSet(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XCreateFontSet _XCreateFontSet;

  void XFreeFontSet(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XOC> arg1,
  ) {
    _XFreeFontSet ??= _dylib
        .lookupFunction<_c_XFreeFontSet, _dart_XFreeFontSet>('XFreeFontSet');
    return _XFreeFontSet(
      arg0,
      arg1,
    );
  }

  _dart_XFreeFontSet _XFreeFontSet;

  int XFontsOfFontSet(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ) {
    _XFontsOfFontSet ??=
        _dylib.lookupFunction<_c_XFontsOfFontSet, _dart_XFontsOfFontSet>(
            'XFontsOfFontSet');
    return _XFontsOfFontSet(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XFontsOfFontSet _XFontsOfFontSet;

  ffi.Pointer<ffi.Int8> XBaseFontNameListOfFontSet(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XBaseFontNameListOfFontSet ??= _dylib.lookupFunction<
        _c_XBaseFontNameListOfFontSet,
        _dart_XBaseFontNameListOfFontSet>('XBaseFontNameListOfFontSet');
    return _XBaseFontNameListOfFontSet(
      arg0,
    );
  }

  _dart_XBaseFontNameListOfFontSet _XBaseFontNameListOfFontSet;

  ffi.Pointer<ffi.Int8> XLocaleOfFontSet(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XLocaleOfFontSet ??=
        _dylib.lookupFunction<_c_XLocaleOfFontSet, _dart_XLocaleOfFontSet>(
            'XLocaleOfFontSet');
    return _XLocaleOfFontSet(
      arg0,
    );
  }

  _dart_XLocaleOfFontSet _XLocaleOfFontSet;

  int XContextDependentDrawing(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XContextDependentDrawing ??= _dylib.lookupFunction<
        _c_XContextDependentDrawing,
        _dart_XContextDependentDrawing>('XContextDependentDrawing');
    return _XContextDependentDrawing(
      arg0,
    );
  }

  _dart_XContextDependentDrawing _XContextDependentDrawing;

  int XDirectionalDependentDrawing(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XDirectionalDependentDrawing ??= _dylib.lookupFunction<
        _c_XDirectionalDependentDrawing,
        _dart_XDirectionalDependentDrawing>('XDirectionalDependentDrawing');
    return _XDirectionalDependentDrawing(
      arg0,
    );
  }

  _dart_XDirectionalDependentDrawing _XDirectionalDependentDrawing;

  int XContextualDrawing(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XContextualDrawing ??=
        _dylib.lookupFunction<_c_XContextualDrawing, _dart_XContextualDrawing>(
            'XContextualDrawing');
    return _XContextualDrawing(
      arg0,
    );
  }

  _dart_XContextualDrawing _XContextualDrawing;

  ffi.Pointer<XFontSetExtents> XExtentsOfFontSet(
    ffi.Pointer<_XOC> arg0,
  ) {
    _XExtentsOfFontSet ??=
        _dylib.lookupFunction<_c_XExtentsOfFontSet, _dart_XExtentsOfFontSet>(
            'XExtentsOfFontSet');
    return _XExtentsOfFontSet(
      arg0,
    );
  }

  _dart_XExtentsOfFontSet _XExtentsOfFontSet;

  int XmbTextEscapement(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _XmbTextEscapement ??=
        _dylib.lookupFunction<_c_XmbTextEscapement, _dart_XmbTextEscapement>(
            'XmbTextEscapement');
    return _XmbTextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XmbTextEscapement _XmbTextEscapement;

  int XwcTextEscapement(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    _XwcTextEscapement ??=
        _dylib.lookupFunction<_c_XwcTextEscapement, _dart_XwcTextEscapement>(
            'XwcTextEscapement');
    return _XwcTextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XwcTextEscapement _XwcTextEscapement;

  int Xutf8TextEscapement(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _Xutf8TextEscapement ??= _dylib.lookupFunction<_c_Xutf8TextEscapement,
        _dart_Xutf8TextEscapement>('Xutf8TextEscapement');
    return _Xutf8TextEscapement(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_Xutf8TextEscapement _Xutf8TextEscapement;

  int XmbTextExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    _XmbTextExtents ??=
        _dylib.lookupFunction<_c_XmbTextExtents, _dart_XmbTextExtents>(
            'XmbTextExtents');
    return _XmbTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XmbTextExtents _XmbTextExtents;

  int XwcTextExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    _XwcTextExtents ??=
        _dylib.lookupFunction<_c_XwcTextExtents, _dart_XwcTextExtents>(
            'XwcTextExtents');
    return _XwcTextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XwcTextExtents _XwcTextExtents;

  int Xutf8TextExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
  ) {
    _Xutf8TextExtents ??=
        _dylib.lookupFunction<_c_Xutf8TextExtents, _dart_Xutf8TextExtents>(
            'Xutf8TextExtents');
    return _Xutf8TextExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_Xutf8TextExtents _Xutf8TextExtents;

  int XmbTextPerCharExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    _XmbTextPerCharExtents ??= _dylib.lookupFunction<_c_XmbTextPerCharExtents,
        _dart_XmbTextPerCharExtents>('XmbTextPerCharExtents');
    return _XmbTextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XmbTextPerCharExtents _XmbTextPerCharExtents;

  int XwcTextPerCharExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    _XwcTextPerCharExtents ??= _dylib.lookupFunction<_c_XwcTextPerCharExtents,
        _dart_XwcTextPerCharExtents>('XwcTextPerCharExtents');
    return _XwcTextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XwcTextPerCharExtents _XwcTextPerCharExtents;

  int Xutf8TextPerCharExtents(
    ffi.Pointer<_XOC> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<XRectangle> arg3,
    ffi.Pointer<XRectangle> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XRectangle> arg7,
    ffi.Pointer<XRectangle> arg8,
  ) {
    _Xutf8TextPerCharExtents ??= _dylib.lookupFunction<
        _c_Xutf8TextPerCharExtents,
        _dart_Xutf8TextPerCharExtents>('Xutf8TextPerCharExtents');
    return _Xutf8TextPerCharExtents(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_Xutf8TextPerCharExtents _Xutf8TextPerCharExtents;

  void XmbDrawText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XmbTextItem> arg5,
    int arg6,
  ) {
    _XmbDrawText ??=
        _dylib.lookupFunction<_c_XmbDrawText, _dart_XmbDrawText>('XmbDrawText');
    return _XmbDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XmbDrawText _XmbDrawText;

  void XwcDrawText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XwcTextItem> arg5,
    int arg6,
  ) {
    _XwcDrawText ??=
        _dylib.lookupFunction<_c_XwcDrawText, _dart_XwcDrawText>('XwcDrawText');
    return _XwcDrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XwcDrawText _XwcDrawText;

  void Xutf8DrawText(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XGC> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XmbTextItem> arg5,
    int arg6,
  ) {
    _Xutf8DrawText ??= _dylib
        .lookupFunction<_c_Xutf8DrawText, _dart_Xutf8DrawText>('Xutf8DrawText');
    return _Xutf8DrawText(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_Xutf8DrawText _Xutf8DrawText;

  void XmbDrawString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    _XmbDrawString ??= _dylib
        .lookupFunction<_c_XmbDrawString, _dart_XmbDrawString>('XmbDrawString');
    return _XmbDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XmbDrawString _XmbDrawString;

  void XwcDrawString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    int arg7,
  ) {
    _XwcDrawString ??= _dylib
        .lookupFunction<_c_XwcDrawString, _dart_XwcDrawString>('XwcDrawString');
    return _XwcDrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XwcDrawString _XwcDrawString;

  void Xutf8DrawString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    _Xutf8DrawString ??=
        _dylib.lookupFunction<_c_Xutf8DrawString, _dart_Xutf8DrawString>(
            'Xutf8DrawString');
    return _Xutf8DrawString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_Xutf8DrawString _Xutf8DrawString;

  void XmbDrawImageString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    _XmbDrawImageString ??=
        _dylib.lookupFunction<_c_XmbDrawImageString, _dart_XmbDrawImageString>(
            'XmbDrawImageString');
    return _XmbDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XmbDrawImageString _XmbDrawImageString;

  void XwcDrawImageString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
    int arg7,
  ) {
    _XwcDrawImageString ??=
        _dylib.lookupFunction<_c_XwcDrawImageString, _dart_XwcDrawImageString>(
            'XwcDrawImageString');
    return _XwcDrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XwcDrawImageString _XwcDrawImageString;

  void Xutf8DrawImageString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<_XOC> arg2,
    ffi.Pointer<_XGC> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Int8> arg6,
    int arg7,
  ) {
    _Xutf8DrawImageString ??= _dylib.lookupFunction<_c_Xutf8DrawImageString,
        _dart_Xutf8DrawImageString>('Xutf8DrawImageString');
    return _Xutf8DrawImageString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_Xutf8DrawImageString _Xutf8DrawImageString;

  ffi.Pointer<_XIM> XOpenIM(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _XOpenIM ??= _dylib.lookupFunction<_c_XOpenIM, _dart_XOpenIM>('XOpenIM');
    return _XOpenIM(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XOpenIM _XOpenIM;

  int XCloseIM(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XCloseIM ??=
        _dylib.lookupFunction<_c_XCloseIM, _dart_XCloseIM>('XCloseIM');
    return _XCloseIM(
      arg0,
    );
  }

  _dart_XCloseIM _XCloseIM;

  ffi.Pointer<ffi.Int8> XGetIMValues(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XGetIMValues ??= _dylib
        .lookupFunction<_c_XGetIMValues, _dart_XGetIMValues>('XGetIMValues');
    return _XGetIMValues(
      arg0,
    );
  }

  _dart_XGetIMValues _XGetIMValues;

  ffi.Pointer<ffi.Int8> XSetIMValues(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XSetIMValues ??= _dylib
        .lookupFunction<_c_XSetIMValues, _dart_XSetIMValues>('XSetIMValues');
    return _XSetIMValues(
      arg0,
    );
  }

  _dart_XSetIMValues _XSetIMValues;

  ffi.Pointer<_XDisplay> XDisplayOfIM(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XDisplayOfIM ??= _dylib
        .lookupFunction<_c_XDisplayOfIM, _dart_XDisplayOfIM>('XDisplayOfIM');
    return _XDisplayOfIM(
      arg0,
    );
  }

  _dart_XDisplayOfIM _XDisplayOfIM;

  ffi.Pointer<ffi.Int8> XLocaleOfIM(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XLocaleOfIM ??=
        _dylib.lookupFunction<_c_XLocaleOfIM, _dart_XLocaleOfIM>('XLocaleOfIM');
    return _XLocaleOfIM(
      arg0,
    );
  }

  _dart_XLocaleOfIM _XLocaleOfIM;

  ffi.Pointer<_XIC> XCreateIC(
    ffi.Pointer<_XIM> arg0,
  ) {
    _XCreateIC ??=
        _dylib.lookupFunction<_c_XCreateIC, _dart_XCreateIC>('XCreateIC');
    return _XCreateIC(
      arg0,
    );
  }

  _dart_XCreateIC _XCreateIC;

  void XDestroyIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XDestroyIC ??=
        _dylib.lookupFunction<_c_XDestroyIC, _dart_XDestroyIC>('XDestroyIC');
    return _XDestroyIC(
      arg0,
    );
  }

  _dart_XDestroyIC _XDestroyIC;

  void XSetICFocus(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XSetICFocus ??=
        _dylib.lookupFunction<_c_XSetICFocus, _dart_XSetICFocus>('XSetICFocus');
    return _XSetICFocus(
      arg0,
    );
  }

  _dart_XSetICFocus _XSetICFocus;

  void XUnsetICFocus(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XUnsetICFocus ??= _dylib
        .lookupFunction<_c_XUnsetICFocus, _dart_XUnsetICFocus>('XUnsetICFocus');
    return _XUnsetICFocus(
      arg0,
    );
  }

  _dart_XUnsetICFocus _XUnsetICFocus;

  ffi.Pointer<ffi.Int32> XwcResetIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XwcResetIC ??=
        _dylib.lookupFunction<_c_XwcResetIC, _dart_XwcResetIC>('XwcResetIC');
    return _XwcResetIC(
      arg0,
    );
  }

  _dart_XwcResetIC _XwcResetIC;

  ffi.Pointer<ffi.Int8> XmbResetIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XmbResetIC ??=
        _dylib.lookupFunction<_c_XmbResetIC, _dart_XmbResetIC>('XmbResetIC');
    return _XmbResetIC(
      arg0,
    );
  }

  _dart_XmbResetIC _XmbResetIC;

  ffi.Pointer<ffi.Int8> Xutf8ResetIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _Xutf8ResetIC ??= _dylib
        .lookupFunction<_c_Xutf8ResetIC, _dart_Xutf8ResetIC>('Xutf8ResetIC');
    return _Xutf8ResetIC(
      arg0,
    );
  }

  _dart_Xutf8ResetIC _Xutf8ResetIC;

  ffi.Pointer<ffi.Int8> XSetICValues(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XSetICValues ??= _dylib
        .lookupFunction<_c_XSetICValues, _dart_XSetICValues>('XSetICValues');
    return _XSetICValues(
      arg0,
    );
  }

  _dart_XSetICValues _XSetICValues;

  ffi.Pointer<ffi.Int8> XGetICValues(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XGetICValues ??= _dylib
        .lookupFunction<_c_XGetICValues, _dart_XGetICValues>('XGetICValues');
    return _XGetICValues(
      arg0,
    );
  }

  _dart_XGetICValues _XGetICValues;

  ffi.Pointer<_XIM> XIMOfIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    _XIMOfIC ??= _dylib.lookupFunction<_c_XIMOfIC, _dart_XIMOfIC>('XIMOfIC');
    return _XIMOfIC(
      arg0,
    );
  }

  _dart_XIMOfIC _XIMOfIC;

  int XmbLookupString(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XKeyEvent> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XmbLookupString ??=
        _dylib.lookupFunction<_c_XmbLookupString, _dart_XmbLookupString>(
            'XmbLookupString');
    return _XmbLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XmbLookupString _XmbLookupString;

  int XwcLookupString(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XKeyEvent> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XwcLookupString ??=
        _dylib.lookupFunction<_c_XwcLookupString, _dart_XwcLookupString>(
            'XwcLookupString');
    return _XwcLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XwcLookupString _XwcLookupString;

  int Xutf8LookupString(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XKeyEvent> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _Xutf8LookupString ??=
        _dylib.lookupFunction<_c_Xutf8LookupString, _dart_Xutf8LookupString>(
            'Xutf8LookupString');
    return _Xutf8LookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_Xutf8LookupString _Xutf8LookupString;

  ffi.Pointer<ffi.Void> XVaCreateNestedList(
    int arg0,
  ) {
    _XVaCreateNestedList ??= _dylib.lookupFunction<_c_XVaCreateNestedList,
        _dart_XVaCreateNestedList>('XVaCreateNestedList');
    return _XVaCreateNestedList(
      arg0,
    );
  }

  _dart_XVaCreateNestedList _XVaCreateNestedList;

  int XRegisterIMInstantiateCallback(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
    ffi.Pointer<ffi.Int8> arg5,
  ) {
    _XRegisterIMInstantiateCallback ??= _dylib.lookupFunction<
        _c_XRegisterIMInstantiateCallback,
        _dart_XRegisterIMInstantiateCallback>('XRegisterIMInstantiateCallback');
    return _XRegisterIMInstantiateCallback(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XRegisterIMInstantiateCallback _XRegisterIMInstantiateCallback;

  int XUnregisterIMInstantiateCallback(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
    ffi.Pointer<ffi.Int8> arg5,
  ) {
    _XUnregisterIMInstantiateCallback ??= _dylib.lookupFunction<
            _c_XUnregisterIMInstantiateCallback,
            _dart_XUnregisterIMInstantiateCallback>(
        'XUnregisterIMInstantiateCallback');
    return _XUnregisterIMInstantiateCallback(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XUnregisterIMInstantiateCallback _XUnregisterIMInstantiateCallback;

  int XInternalConnectionNumbers(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XInternalConnectionNumbers ??= _dylib.lookupFunction<
        _c_XInternalConnectionNumbers,
        _dart_XInternalConnectionNumbers>('XInternalConnectionNumbers');
    return _XInternalConnectionNumbers(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XInternalConnectionNumbers _XInternalConnectionNumbers;

  void XProcessInternalConnection(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XProcessInternalConnection_1 ??= _dylib.lookupFunction<
        _c_XProcessInternalConnection,
        _dart_XProcessInternalConnection>('XProcessInternalConnection');
    return _XProcessInternalConnection_1(
      arg0,
      arg1,
    );
  }

  _dart_XProcessInternalConnection _XProcessInternalConnection_1;

  int XAddConnectionWatch(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XAddConnectionWatch ??= _dylib.lookupFunction<_c_XAddConnectionWatch,
        _dart_XAddConnectionWatch>('XAddConnectionWatch');
    return _XAddConnectionWatch(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XAddConnectionWatch _XAddConnectionWatch;

  void XRemoveConnectionWatch(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XRemoveConnectionWatch ??= _dylib.lookupFunction<_c_XRemoveConnectionWatch,
        _dart_XRemoveConnectionWatch>('XRemoveConnectionWatch');
    return _XRemoveConnectionWatch(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XRemoveConnectionWatch _XRemoveConnectionWatch;

  void XSetAuthorization(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
  ) {
    _XSetAuthorization ??=
        _dylib.lookupFunction<_c_XSetAuthorization, _dart_XSetAuthorization>(
            'XSetAuthorization');
    return _XSetAuthorization(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetAuthorization _XSetAuthorization;

  int _Xmbtowc(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __Xmbtowc ??=
        _dylib.lookupFunction<_c__Xmbtowc, _dart__Xmbtowc>('_Xmbtowc');
    return __Xmbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__Xmbtowc __Xmbtowc;

  int _Xwctomb(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    __Xwctomb ??=
        _dylib.lookupFunction<_c__Xwctomb, _dart__Xwctomb>('_Xwctomb');
    return __Xwctomb(
      arg0,
      arg1,
    );
  }

  _dart__Xwctomb __Xwctomb;

  int XGetEventData(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XGenericEventCookie> arg1,
  ) {
    _XGetEventData ??= _dylib
        .lookupFunction<_c_XGetEventData, _dart_XGetEventData>('XGetEventData');
    return _XGetEventData(
      arg0,
      arg1,
    );
  }

  _dart_XGetEventData _XGetEventData;

  void XFreeEventData(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XGenericEventCookie> arg1,
  ) {
    _XFreeEventData ??=
        _dylib.lookupFunction<_c_XFreeEventData, _dart_XFreeEventData>(
            'XFreeEventData');
    return _XFreeEventData(
      arg0,
      arg1,
    );
  }

  _dart_XFreeEventData _XFreeEventData;

  int XcmsAddColorSpace(
    ffi.Pointer<XcmsColorSpace> arg0,
  ) {
    _XcmsAddColorSpace ??=
        _dylib.lookupFunction<_c_XcmsAddColorSpace, _dart_XcmsAddColorSpace>(
            'XcmsAddColorSpace');
    return _XcmsAddColorSpace(
      arg0,
    );
  }

  _dart_XcmsAddColorSpace _XcmsAddColorSpace;

  int XcmsAddFunctionSet(
    ffi.Pointer<XcmsFunctionSet> arg0,
  ) {
    _XcmsAddFunctionSet ??=
        _dylib.lookupFunction<_c_XcmsAddFunctionSet, _dart_XcmsAddFunctionSet>(
            'XcmsAddFunctionSet');
    return _XcmsAddFunctionSet(
      arg0,
    );
  }

  _dart_XcmsAddFunctionSet _XcmsAddFunctionSet;

  int XcmsAllocColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsAllocColor ??=
        _dylib.lookupFunction<_c_XcmsAllocColor, _dart_XcmsAllocColor>(
            'XcmsAllocColor');
    return _XcmsAllocColor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsAllocColor _XcmsAllocColor;

  int XcmsAllocNamedColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XcmsColor> arg3,
    ffi.Pointer<XcmsColor> arg4,
    int arg5,
  ) {
    _XcmsAllocNamedColor ??= _dylib.lookupFunction<_c_XcmsAllocNamedColor,
        _dart_XcmsAllocNamedColor>('XcmsAllocNamedColor');
    return _XcmsAllocNamedColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XcmsAllocNamedColor _XcmsAllocNamedColor;

  ffi.Pointer<XcmsCCCRec> XcmsCCCOfColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XcmsCCCOfColormap ??=
        _dylib.lookupFunction<_c_XcmsCCCOfColormap, _dart_XcmsCCCOfColormap>(
            'XcmsCCCOfColormap');
    return _XcmsCCCOfColormap(
      arg0,
      arg1,
    );
  }

  _dart_XcmsCCCOfColormap _XcmsCCCOfColormap;

  int XcmsCIELabClipab(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsCIELabClipab ??=
        _dylib.lookupFunction<_c_XcmsCIELabClipab, _dart_XcmsCIELabClipab>(
            'XcmsCIELabClipab');
    return _XcmsCIELabClipab(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsCIELabClipab _XcmsCIELabClipab;

  int XcmsCIELabClipL(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsCIELabClipL ??=
        _dylib.lookupFunction<_c_XcmsCIELabClipL, _dart_XcmsCIELabClipL>(
            'XcmsCIELabClipL');
    return _XcmsCIELabClipL(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsCIELabClipL _XcmsCIELabClipL;

  int XcmsCIELabClipLab(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsCIELabClipLab ??=
        _dylib.lookupFunction<_c_XcmsCIELabClipLab, _dart_XcmsCIELabClipLab>(
            'XcmsCIELabClipLab');
    return _XcmsCIELabClipLab(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsCIELabClipLab _XcmsCIELabClipLab;

  int XcmsCIELabQueryMaxC(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsCIELabQueryMaxC ??= _dylib.lookupFunction<_c_XcmsCIELabQueryMaxC,
        _dart_XcmsCIELabQueryMaxC>('XcmsCIELabQueryMaxC');
    return _XcmsCIELabQueryMaxC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIELabQueryMaxC _XcmsCIELabQueryMaxC;

  int XcmsCIELabQueryMaxL(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsCIELabQueryMaxL ??= _dylib.lookupFunction<_c_XcmsCIELabQueryMaxL,
        _dart_XcmsCIELabQueryMaxL>('XcmsCIELabQueryMaxL');
    return _XcmsCIELabQueryMaxL(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIELabQueryMaxL _XcmsCIELabQueryMaxL;

  int XcmsCIELabQueryMaxLC(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsCIELabQueryMaxLC ??= _dylib.lookupFunction<_c_XcmsCIELabQueryMaxLC,
        _dart_XcmsCIELabQueryMaxLC>('XcmsCIELabQueryMaxLC');
    return _XcmsCIELabQueryMaxLC(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsCIELabQueryMaxLC _XcmsCIELabQueryMaxLC;

  int XcmsCIELabQueryMinL(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsCIELabQueryMinL ??= _dylib.lookupFunction<_c_XcmsCIELabQueryMinL,
        _dart_XcmsCIELabQueryMinL>('XcmsCIELabQueryMinL');
    return _XcmsCIELabQueryMinL(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIELabQueryMinL _XcmsCIELabQueryMinL;

  int XcmsCIELabToCIEXYZ(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIELabToCIEXYZ ??=
        _dylib.lookupFunction<_c_XcmsCIELabToCIEXYZ, _dart_XcmsCIELabToCIEXYZ>(
            'XcmsCIELabToCIEXYZ');
    return _XcmsCIELabToCIEXYZ(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIELabToCIEXYZ _XcmsCIELabToCIEXYZ;

  int XcmsCIELabWhiteShiftColors(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
    ffi.Pointer<XcmsColor> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
  ) {
    _XcmsCIELabWhiteShiftColors ??= _dylib.lookupFunction<
        _c_XcmsCIELabWhiteShiftColors,
        _dart_XcmsCIELabWhiteShiftColors>('XcmsCIELabWhiteShiftColors');
    return _XcmsCIELabWhiteShiftColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XcmsCIELabWhiteShiftColors _XcmsCIELabWhiteShiftColors;

  int XcmsCIELuvClipL(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsCIELuvClipL ??=
        _dylib.lookupFunction<_c_XcmsCIELuvClipL, _dart_XcmsCIELuvClipL>(
            'XcmsCIELuvClipL');
    return _XcmsCIELuvClipL(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsCIELuvClipL _XcmsCIELuvClipL;

  int XcmsCIELuvClipLuv(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsCIELuvClipLuv ??=
        _dylib.lookupFunction<_c_XcmsCIELuvClipLuv, _dart_XcmsCIELuvClipLuv>(
            'XcmsCIELuvClipLuv');
    return _XcmsCIELuvClipLuv(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsCIELuvClipLuv _XcmsCIELuvClipLuv;

  int XcmsCIELuvClipuv(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsCIELuvClipuv ??=
        _dylib.lookupFunction<_c_XcmsCIELuvClipuv, _dart_XcmsCIELuvClipuv>(
            'XcmsCIELuvClipuv');
    return _XcmsCIELuvClipuv(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsCIELuvClipuv _XcmsCIELuvClipuv;

  int XcmsCIELuvQueryMaxC(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsCIELuvQueryMaxC ??= _dylib.lookupFunction<_c_XcmsCIELuvQueryMaxC,
        _dart_XcmsCIELuvQueryMaxC>('XcmsCIELuvQueryMaxC');
    return _XcmsCIELuvQueryMaxC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIELuvQueryMaxC _XcmsCIELuvQueryMaxC;

  int XcmsCIELuvQueryMaxL(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsCIELuvQueryMaxL ??= _dylib.lookupFunction<_c_XcmsCIELuvQueryMaxL,
        _dart_XcmsCIELuvQueryMaxL>('XcmsCIELuvQueryMaxL');
    return _XcmsCIELuvQueryMaxL(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIELuvQueryMaxL _XcmsCIELuvQueryMaxL;

  int XcmsCIELuvQueryMaxLC(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsCIELuvQueryMaxLC ??= _dylib.lookupFunction<_c_XcmsCIELuvQueryMaxLC,
        _dart_XcmsCIELuvQueryMaxLC>('XcmsCIELuvQueryMaxLC');
    return _XcmsCIELuvQueryMaxLC(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsCIELuvQueryMaxLC _XcmsCIELuvQueryMaxLC;

  int XcmsCIELuvQueryMinL(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsCIELuvQueryMinL ??= _dylib.lookupFunction<_c_XcmsCIELuvQueryMinL,
        _dart_XcmsCIELuvQueryMinL>('XcmsCIELuvQueryMinL');
    return _XcmsCIELuvQueryMinL(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIELuvQueryMinL _XcmsCIELuvQueryMinL;

  int XcmsCIELuvToCIEuvY(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIELuvToCIEuvY ??=
        _dylib.lookupFunction<_c_XcmsCIELuvToCIEuvY, _dart_XcmsCIELuvToCIEuvY>(
            'XcmsCIELuvToCIEuvY');
    return _XcmsCIELuvToCIEuvY(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIELuvToCIEuvY _XcmsCIELuvToCIEuvY;

  int XcmsCIELuvWhiteShiftColors(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
    ffi.Pointer<XcmsColor> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
  ) {
    _XcmsCIELuvWhiteShiftColors ??= _dylib.lookupFunction<
        _c_XcmsCIELuvWhiteShiftColors,
        _dart_XcmsCIELuvWhiteShiftColors>('XcmsCIELuvWhiteShiftColors');
    return _XcmsCIELuvWhiteShiftColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XcmsCIELuvWhiteShiftColors _XcmsCIELuvWhiteShiftColors;

  int XcmsCIEXYZToCIELab(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIEXYZToCIELab ??=
        _dylib.lookupFunction<_c_XcmsCIEXYZToCIELab, _dart_XcmsCIEXYZToCIELab>(
            'XcmsCIEXYZToCIELab');
    return _XcmsCIEXYZToCIELab(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIEXYZToCIELab _XcmsCIEXYZToCIELab;

  int XcmsCIEXYZToCIEuvY(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIEXYZToCIEuvY ??=
        _dylib.lookupFunction<_c_XcmsCIEXYZToCIEuvY, _dart_XcmsCIEXYZToCIEuvY>(
            'XcmsCIEXYZToCIEuvY');
    return _XcmsCIEXYZToCIEuvY(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIEXYZToCIEuvY _XcmsCIEXYZToCIEuvY;

  int XcmsCIEXYZToCIExyY(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIEXYZToCIExyY ??=
        _dylib.lookupFunction<_c_XcmsCIEXYZToCIExyY, _dart_XcmsCIEXYZToCIExyY>(
            'XcmsCIEXYZToCIExyY');
    return _XcmsCIEXYZToCIExyY(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIEXYZToCIExyY _XcmsCIEXYZToCIExyY;

  int XcmsCIEXYZToRGBi(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XcmsCIEXYZToRGBi ??=
        _dylib.lookupFunction<_c_XcmsCIEXYZToRGBi, _dart_XcmsCIEXYZToRGBi>(
            'XcmsCIEXYZToRGBi');
    return _XcmsCIEXYZToRGBi(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIEXYZToRGBi _XcmsCIEXYZToRGBi;

  int XcmsCIEuvYToCIELuv(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIEuvYToCIELuv ??=
        _dylib.lookupFunction<_c_XcmsCIEuvYToCIELuv, _dart_XcmsCIEuvYToCIELuv>(
            'XcmsCIEuvYToCIELuv');
    return _XcmsCIEuvYToCIELuv(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIEuvYToCIELuv _XcmsCIEuvYToCIELuv;

  int XcmsCIEuvYToCIEXYZ(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIEuvYToCIEXYZ ??=
        _dylib.lookupFunction<_c_XcmsCIEuvYToCIEXYZ, _dart_XcmsCIEuvYToCIEXYZ>(
            'XcmsCIEuvYToCIEXYZ');
    return _XcmsCIEuvYToCIEXYZ(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIEuvYToCIEXYZ _XcmsCIEuvYToCIEXYZ;

  int XcmsCIEuvYToTekHVC(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIEuvYToTekHVC ??=
        _dylib.lookupFunction<_c_XcmsCIEuvYToTekHVC, _dart_XcmsCIEuvYToTekHVC>(
            'XcmsCIEuvYToTekHVC');
    return _XcmsCIEuvYToTekHVC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIEuvYToTekHVC _XcmsCIEuvYToTekHVC;

  int XcmsCIExyYToCIEXYZ(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsCIExyYToCIEXYZ ??=
        _dylib.lookupFunction<_c_XcmsCIExyYToCIEXYZ, _dart_XcmsCIExyYToCIEXYZ>(
            'XcmsCIExyYToCIEXYZ');
    return _XcmsCIExyYToCIEXYZ(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsCIExyYToCIEXYZ _XcmsCIExyYToCIEXYZ;

  ffi.Pointer<XcmsColor> XcmsClientWhitePointOfCCC(
    ffi.Pointer<XcmsCCCRec> arg0,
  ) {
    _XcmsClientWhitePointOfCCC ??= _dylib.lookupFunction<
        _c_XcmsClientWhitePointOfCCC,
        _dart_XcmsClientWhitePointOfCCC>('XcmsClientWhitePointOfCCC');
    return _XcmsClientWhitePointOfCCC(
      arg0,
    );
  }

  _dart_XcmsClientWhitePointOfCCC _XcmsClientWhitePointOfCCC;

  int XcmsConvertColors(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsConvertColors ??=
        _dylib.lookupFunction<_c_XcmsConvertColors, _dart_XcmsConvertColors>(
            'XcmsConvertColors');
    return _XcmsConvertColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsConvertColors _XcmsConvertColors;

  ffi.Pointer<XcmsCCCRec> XcmsCreateCCC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<Visual> arg2,
    ffi.Pointer<XcmsColor> arg3,
    ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> arg4,
    ffi.Pointer<ffi.Int8> arg5,
    ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> arg6,
    ffi.Pointer<ffi.Int8> arg7,
  ) {
    _XcmsCreateCCC ??= _dylib
        .lookupFunction<_c_XcmsCreateCCC, _dart_XcmsCreateCCC>('XcmsCreateCCC');
    return _XcmsCreateCCC(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XcmsCreateCCC _XcmsCreateCCC;

  ffi.Pointer<XcmsCCCRec> XcmsDefaultCCC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XcmsDefaultCCC ??=
        _dylib.lookupFunction<_c_XcmsDefaultCCC, _dart_XcmsDefaultCCC>(
            'XcmsDefaultCCC');
    return _XcmsDefaultCCC(
      arg0,
      arg1,
    );
  }

  _dart_XcmsDefaultCCC _XcmsDefaultCCC;

  ffi.Pointer<_XDisplay> XcmsDisplayOfCCC(
    ffi.Pointer<XcmsCCCRec> arg0,
  ) {
    _XcmsDisplayOfCCC ??=
        _dylib.lookupFunction<_c_XcmsDisplayOfCCC, _dart_XcmsDisplayOfCCC>(
            'XcmsDisplayOfCCC');
    return _XcmsDisplayOfCCC(
      arg0,
    );
  }

  _dart_XcmsDisplayOfCCC _XcmsDisplayOfCCC;

  int XcmsFormatOfPrefix(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XcmsFormatOfPrefix ??=
        _dylib.lookupFunction<_c_XcmsFormatOfPrefix, _dart_XcmsFormatOfPrefix>(
            'XcmsFormatOfPrefix');
    return _XcmsFormatOfPrefix(
      arg0,
    );
  }

  _dart_XcmsFormatOfPrefix _XcmsFormatOfPrefix;

  void XcmsFreeCCC(
    ffi.Pointer<XcmsCCCRec> arg0,
  ) {
    _XcmsFreeCCC ??=
        _dylib.lookupFunction<_c_XcmsFreeCCC, _dart_XcmsFreeCCC>('XcmsFreeCCC');
    return _XcmsFreeCCC(
      arg0,
    );
  }

  _dart_XcmsFreeCCC _XcmsFreeCCC;

  int XcmsLookupColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XcmsColor> arg3,
    ffi.Pointer<XcmsColor> arg4,
    int arg5,
  ) {
    _XcmsLookupColor ??=
        _dylib.lookupFunction<_c_XcmsLookupColor, _dart_XcmsLookupColor>(
            'XcmsLookupColor');
    return _XcmsLookupColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XcmsLookupColor _XcmsLookupColor;

  ffi.Pointer<ffi.Int8> XcmsPrefixOfFormat(
    int arg0,
  ) {
    _XcmsPrefixOfFormat ??=
        _dylib.lookupFunction<_c_XcmsPrefixOfFormat, _dart_XcmsPrefixOfFormat>(
            'XcmsPrefixOfFormat');
    return _XcmsPrefixOfFormat(
      arg0,
    );
  }

  _dart_XcmsPrefixOfFormat _XcmsPrefixOfFormat;

  int XcmsQueryBlack(
    ffi.Pointer<XcmsCCCRec> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsQueryBlack ??=
        _dylib.lookupFunction<_c_XcmsQueryBlack, _dart_XcmsQueryBlack>(
            'XcmsQueryBlack');
    return _XcmsQueryBlack(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsQueryBlack _XcmsQueryBlack;

  int XcmsQueryBlue(
    ffi.Pointer<XcmsCCCRec> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsQueryBlue ??= _dylib
        .lookupFunction<_c_XcmsQueryBlue, _dart_XcmsQueryBlue>('XcmsQueryBlue');
    return _XcmsQueryBlue(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsQueryBlue _XcmsQueryBlue;

  int XcmsQueryColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsQueryColor ??=
        _dylib.lookupFunction<_c_XcmsQueryColor, _dart_XcmsQueryColor>(
            'XcmsQueryColor');
    return _XcmsQueryColor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsQueryColor _XcmsQueryColor;

  int XcmsQueryColors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
    int arg4,
  ) {
    _XcmsQueryColors ??=
        _dylib.lookupFunction<_c_XcmsQueryColors, _dart_XcmsQueryColors>(
            'XcmsQueryColors');
    return _XcmsQueryColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsQueryColors _XcmsQueryColors;

  int XcmsQueryGreen(
    ffi.Pointer<XcmsCCCRec> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsQueryGreen ??=
        _dylib.lookupFunction<_c_XcmsQueryGreen, _dart_XcmsQueryGreen>(
            'XcmsQueryGreen');
    return _XcmsQueryGreen(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsQueryGreen _XcmsQueryGreen;

  int XcmsQueryRed(
    ffi.Pointer<XcmsCCCRec> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsQueryRed ??= _dylib
        .lookupFunction<_c_XcmsQueryRed, _dart_XcmsQueryRed>('XcmsQueryRed');
    return _XcmsQueryRed(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsQueryRed _XcmsQueryRed;

  int XcmsQueryWhite(
    ffi.Pointer<XcmsCCCRec> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsQueryWhite ??=
        _dylib.lookupFunction<_c_XcmsQueryWhite, _dart_XcmsQueryWhite>(
            'XcmsQueryWhite');
    return _XcmsQueryWhite(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsQueryWhite _XcmsQueryWhite;

  int XcmsRGBiToCIEXYZ(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XcmsRGBiToCIEXYZ ??=
        _dylib.lookupFunction<_c_XcmsRGBiToCIEXYZ, _dart_XcmsRGBiToCIEXYZ>(
            'XcmsRGBiToCIEXYZ');
    return _XcmsRGBiToCIEXYZ(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsRGBiToCIEXYZ _XcmsRGBiToCIEXYZ;

  int XcmsRGBiToRGB(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XcmsRGBiToRGB ??= _dylib
        .lookupFunction<_c_XcmsRGBiToRGB, _dart_XcmsRGBiToRGB>('XcmsRGBiToRGB');
    return _XcmsRGBiToRGB(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsRGBiToRGB _XcmsRGBiToRGB;

  int XcmsRGBToRGBi(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XcmsRGBToRGBi ??= _dylib
        .lookupFunction<_c_XcmsRGBToRGBi, _dart_XcmsRGBToRGBi>('XcmsRGBToRGBi');
    return _XcmsRGBToRGBi(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsRGBToRGBi _XcmsRGBToRGBi;

  int XcmsScreenNumberOfCCC(
    ffi.Pointer<XcmsCCCRec> arg0,
  ) {
    _XcmsScreenNumberOfCCC ??= _dylib.lookupFunction<_c_XcmsScreenNumberOfCCC,
        _dart_XcmsScreenNumberOfCCC>('XcmsScreenNumberOfCCC');
    return _XcmsScreenNumberOfCCC(
      arg0,
    );
  }

  _dart_XcmsScreenNumberOfCCC _XcmsScreenNumberOfCCC;

  ffi.Pointer<XcmsColor> XcmsScreenWhitePointOfCCC(
    ffi.Pointer<XcmsCCCRec> arg0,
  ) {
    _XcmsScreenWhitePointOfCCC ??= _dylib.lookupFunction<
        _c_XcmsScreenWhitePointOfCCC,
        _dart_XcmsScreenWhitePointOfCCC>('XcmsScreenWhitePointOfCCC');
    return _XcmsScreenWhitePointOfCCC(
      arg0,
    );
  }

  _dart_XcmsScreenWhitePointOfCCC _XcmsScreenWhitePointOfCCC;

  ffi.Pointer<XcmsCCCRec> XcmsSetCCCOfColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XcmsCCCRec> arg2,
  ) {
    _XcmsSetCCCOfColormap ??= _dylib.lookupFunction<_c_XcmsSetCCCOfColormap,
        _dart_XcmsSetCCCOfColormap>('XcmsSetCCCOfColormap');
    return _XcmsSetCCCOfColormap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsSetCCCOfColormap _XcmsSetCCCOfColormap;

  ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> XcmsSetCompressionProc(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XcmsSetCompressionProc ??= _dylib.lookupFunction<_c_XcmsSetCompressionProc,
        _dart_XcmsSetCompressionProc>('XcmsSetCompressionProc');
    return _XcmsSetCompressionProc(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsSetCompressionProc _XcmsSetCompressionProc;

  ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> XcmsSetWhiteAdjustProc(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XcmsSetWhiteAdjustProc ??= _dylib.lookupFunction<_c_XcmsSetWhiteAdjustProc,
        _dart_XcmsSetWhiteAdjustProc>('XcmsSetWhiteAdjustProc');
    return _XcmsSetWhiteAdjustProc(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsSetWhiteAdjustProc _XcmsSetWhiteAdjustProc;

  int XcmsSetWhitePoint(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
  ) {
    _XcmsSetWhitePoint ??=
        _dylib.lookupFunction<_c_XcmsSetWhitePoint, _dart_XcmsSetWhitePoint>(
            'XcmsSetWhitePoint');
    return _XcmsSetWhitePoint(
      arg0,
      arg1,
    );
  }

  _dart_XcmsSetWhitePoint _XcmsSetWhitePoint;

  int XcmsStoreColor(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsStoreColor ??=
        _dylib.lookupFunction<_c_XcmsStoreColor, _dart_XcmsStoreColor>(
            'XcmsStoreColor');
    return _XcmsStoreColor(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsStoreColor _XcmsStoreColor;

  int XcmsStoreColors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsStoreColors ??=
        _dylib.lookupFunction<_c_XcmsStoreColors, _dart_XcmsStoreColors>(
            'XcmsStoreColors');
    return _XcmsStoreColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsStoreColors _XcmsStoreColors;

  int XcmsTekHVCClipC(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsTekHVCClipC ??=
        _dylib.lookupFunction<_c_XcmsTekHVCClipC, _dart_XcmsTekHVCClipC>(
            'XcmsTekHVCClipC');
    return _XcmsTekHVCClipC(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsTekHVCClipC _XcmsTekHVCClipC;

  int XcmsTekHVCClipV(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsTekHVCClipV ??=
        _dylib.lookupFunction<_c_XcmsTekHVCClipV, _dart_XcmsTekHVCClipV>(
            'XcmsTekHVCClipV');
    return _XcmsTekHVCClipV(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsTekHVCClipV _XcmsTekHVCClipV;

  int XcmsTekHVCClipVC(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    _XcmsTekHVCClipVC ??=
        _dylib.lookupFunction<_c_XcmsTekHVCClipVC, _dart_XcmsTekHVCClipVC>(
            'XcmsTekHVCClipVC');
    return _XcmsTekHVCClipVC(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XcmsTekHVCClipVC _XcmsTekHVCClipVC;

  int XcmsTekHVCQueryMaxC(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsTekHVCQueryMaxC ??= _dylib.lookupFunction<_c_XcmsTekHVCQueryMaxC,
        _dart_XcmsTekHVCQueryMaxC>('XcmsTekHVCQueryMaxC');
    return _XcmsTekHVCQueryMaxC(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsTekHVCQueryMaxC _XcmsTekHVCQueryMaxC;

  int XcmsTekHVCQueryMaxV(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsTekHVCQueryMaxV ??= _dylib.lookupFunction<_c_XcmsTekHVCQueryMaxV,
        _dart_XcmsTekHVCQueryMaxV>('XcmsTekHVCQueryMaxV');
    return _XcmsTekHVCQueryMaxV(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsTekHVCQueryMaxV _XcmsTekHVCQueryMaxV;

  int XcmsTekHVCQueryMaxVC(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    ffi.Pointer<XcmsColor> arg2,
  ) {
    _XcmsTekHVCQueryMaxVC ??= _dylib.lookupFunction<_c_XcmsTekHVCQueryMaxVC,
        _dart_XcmsTekHVCQueryMaxVC>('XcmsTekHVCQueryMaxVC');
    return _XcmsTekHVCQueryMaxVC(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XcmsTekHVCQueryMaxVC _XcmsTekHVCQueryMaxVC;

  int XcmsTekHVCQueryMaxVSamples(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsTekHVCQueryMaxVSamples ??= _dylib.lookupFunction<
        _c_XcmsTekHVCQueryMaxVSamples,
        _dart_XcmsTekHVCQueryMaxVSamples>('XcmsTekHVCQueryMaxVSamples');
    return _XcmsTekHVCQueryMaxVSamples(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsTekHVCQueryMaxVSamples _XcmsTekHVCQueryMaxVSamples;

  int XcmsTekHVCQueryMinV(
    ffi.Pointer<XcmsCCCRec> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<XcmsColor> arg3,
  ) {
    _XcmsTekHVCQueryMinV ??= _dylib.lookupFunction<_c_XcmsTekHVCQueryMinV,
        _dart_XcmsTekHVCQueryMinV>('XcmsTekHVCQueryMinV');
    return _XcmsTekHVCQueryMinV(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsTekHVCQueryMinV _XcmsTekHVCQueryMinV;

  int XcmsTekHVCToCIEuvY(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _XcmsTekHVCToCIEuvY ??=
        _dylib.lookupFunction<_c_XcmsTekHVCToCIEuvY, _dart_XcmsTekHVCToCIEuvY>(
            'XcmsTekHVCToCIEuvY');
    return _XcmsTekHVCToCIEuvY(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XcmsTekHVCToCIEuvY _XcmsTekHVCToCIEuvY;

  int XcmsTekHVCWhiteShiftColors(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
    ffi.Pointer<XcmsColor> arg4,
    int arg5,
    ffi.Pointer<ffi.Int32> arg6,
  ) {
    _XcmsTekHVCWhiteShiftColors ??= _dylib.lookupFunction<
        _c_XcmsTekHVCWhiteShiftColors,
        _dart_XcmsTekHVCWhiteShiftColors>('XcmsTekHVCWhiteShiftColors');
    return _XcmsTekHVCWhiteShiftColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XcmsTekHVCWhiteShiftColors _XcmsTekHVCWhiteShiftColors;

  ffi.Pointer<Visual> XcmsVisualOfCCC(
    ffi.Pointer<XcmsCCCRec> arg0,
  ) {
    _XcmsVisualOfCCC ??=
        _dylib.lookupFunction<_c_XcmsVisualOfCCC, _dart_XcmsVisualOfCCC>(
            'XcmsVisualOfCCC');
    return _XcmsVisualOfCCC(
      arg0,
    );
  }

  _dart_XcmsVisualOfCCC _XcmsVisualOfCCC;

  int XkbIgnoreExtension(
    int arg0,
  ) {
    _XkbIgnoreExtension ??=
        _dylib.lookupFunction<_c_XkbIgnoreExtension, _dart_XkbIgnoreExtension>(
            'XkbIgnoreExtension');
    return _XkbIgnoreExtension(
      arg0,
    );
  }

  _dart_XkbIgnoreExtension _XkbIgnoreExtension;

  ffi.Pointer<_XDisplay> XkbOpenDisplay(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XkbOpenDisplay ??=
        _dylib.lookupFunction<_c_XkbOpenDisplay, _dart_XkbOpenDisplay>(
            'XkbOpenDisplay');
    return _XkbOpenDisplay(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbOpenDisplay _XkbOpenDisplay;

  int XkbQueryExtension(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XkbQueryExtension ??=
        _dylib.lookupFunction<_c_XkbQueryExtension, _dart_XkbQueryExtension>(
            'XkbQueryExtension');
    return _XkbQueryExtension(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbQueryExtension _XkbQueryExtension;

  int XkbUseExtension(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XkbUseExtension ??=
        _dylib.lookupFunction<_c_XkbUseExtension, _dart_XkbUseExtension>(
            'XkbUseExtension');
    return _XkbUseExtension(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbUseExtension _XkbUseExtension;

  int XkbLibraryVersion(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XkbLibraryVersion ??=
        _dylib.lookupFunction<_c_XkbLibraryVersion, _dart_XkbLibraryVersion>(
            'XkbLibraryVersion');
    return _XkbLibraryVersion(
      arg0,
      arg1,
    );
  }

  _dart_XkbLibraryVersion _XkbLibraryVersion;

  int XkbSetXlibControls(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbSetXlibControls ??=
        _dylib.lookupFunction<_c_XkbSetXlibControls, _dart_XkbSetXlibControls>(
            'XkbSetXlibControls');
    return _XkbSetXlibControls(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbSetXlibControls _XkbSetXlibControls;

  int XkbGetXlibControls(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XkbGetXlibControls ??=
        _dylib.lookupFunction<_c_XkbGetXlibControls, _dart_XkbGetXlibControls>(
            'XkbGetXlibControls');
    return _XkbGetXlibControls(
      arg0,
    );
  }

  _dart_XkbGetXlibControls _XkbGetXlibControls;

  int XkbXlibControlsImplemented() {
    _XkbXlibControlsImplemented ??= _dylib.lookupFunction<
        _c_XkbXlibControlsImplemented,
        _dart_XkbXlibControlsImplemented>('XkbXlibControlsImplemented');
    return _XkbXlibControlsImplemented();
  }

  _dart_XkbXlibControlsImplemented _XkbXlibControlsImplemented;

  void XkbSetAtomFuncs(
    ffi.Pointer<ffi.NativeFunction<XkbInternAtomFunc>> arg0,
    ffi.Pointer<ffi.NativeFunction<XkbGetAtomNameFunc>> arg1,
  ) {
    _XkbSetAtomFuncs ??=
        _dylib.lookupFunction<_c_XkbSetAtomFuncs, _dart_XkbSetAtomFuncs>(
            'XkbSetAtomFuncs');
    return _XkbSetAtomFuncs(
      arg0,
      arg1,
    );
  }

  _dart_XkbSetAtomFuncs _XkbSetAtomFuncs;

  int XkbKeycodeToKeysym(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbKeycodeToKeysym ??=
        _dylib.lookupFunction<_c_XkbKeycodeToKeysym, _dart_XkbKeycodeToKeysym>(
            'XkbKeycodeToKeysym');
    return _XkbKeycodeToKeysym(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbKeycodeToKeysym _XkbKeycodeToKeysym;

  int XkbKeysymToModifiers(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XkbKeysymToModifiers ??= _dylib.lookupFunction<_c_XkbKeysymToModifiers,
        _dart_XkbKeysymToModifiers>('XkbKeysymToModifiers');
    return _XkbKeysymToModifiers(
      arg0,
      arg1,
    );
  }

  _dart_XkbKeysymToModifiers _XkbKeysymToModifiers;

  int XkbLookupKeySym(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint32> arg3,
    ffi.Pointer<ffi.Uint64> arg4,
  ) {
    _XkbLookupKeySym ??=
        _dylib.lookupFunction<_c_XkbLookupKeySym, _dart_XkbLookupKeySym>(
            'XkbLookupKeySym');
    return _XkbLookupKeySym(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbLookupKeySym _XkbLookupKeySym;

  int XkbLookupKeyBinding(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XkbLookupKeyBinding ??= _dylib.lookupFunction<_c_XkbLookupKeyBinding,
        _dart_XkbLookupKeyBinding>('XkbLookupKeyBinding');
    return _XkbLookupKeyBinding(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbLookupKeyBinding _XkbLookupKeyBinding;

  int XkbTranslateKeyCode(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Uint32> arg3,
    ffi.Pointer<ffi.Uint64> arg4,
  ) {
    _XkbTranslateKeyCode ??= _dylib.lookupFunction<_c_XkbTranslateKeyCode,
        _dart_XkbTranslateKeyCode>('XkbTranslateKeyCode');
    return _XkbTranslateKeyCode(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbTranslateKeyCode _XkbTranslateKeyCode;

  int XkbTranslateKeySym(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XkbTranslateKeySym ??=
        _dylib.lookupFunction<_c_XkbTranslateKeySym, _dart_XkbTranslateKeySym>(
            'XkbTranslateKeySym');
    return _XkbTranslateKeySym(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbTranslateKeySym _XkbTranslateKeySym;

  int XkbSetAutoRepeatRate(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbSetAutoRepeatRate ??= _dylib.lookupFunction<_c_XkbSetAutoRepeatRate,
        _dart_XkbSetAutoRepeatRate>('XkbSetAutoRepeatRate');
    return _XkbSetAutoRepeatRate(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbSetAutoRepeatRate _XkbSetAutoRepeatRate;

  int XkbGetAutoRepeatRate(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint32> arg2,
    ffi.Pointer<ffi.Uint32> arg3,
  ) {
    _XkbGetAutoRepeatRate ??= _dylib.lookupFunction<_c_XkbGetAutoRepeatRate,
        _dart_XkbGetAutoRepeatRate>('XkbGetAutoRepeatRate');
    return _XkbGetAutoRepeatRate(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbGetAutoRepeatRate _XkbGetAutoRepeatRate;

  int XkbChangeEnabledControls(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbChangeEnabledControls ??= _dylib.lookupFunction<
        _c_XkbChangeEnabledControls,
        _dart_XkbChangeEnabledControls>('XkbChangeEnabledControls');
    return _XkbChangeEnabledControls(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbChangeEnabledControls _XkbChangeEnabledControls;

  int XkbDeviceBell(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XkbDeviceBell ??= _dylib
        .lookupFunction<_c_XkbDeviceBell, _dart_XkbDeviceBell>('XkbDeviceBell');
    return _XkbDeviceBell(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XkbDeviceBell _XkbDeviceBell;

  int XkbForceDeviceBell(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbForceDeviceBell ??=
        _dylib.lookupFunction<_c_XkbForceDeviceBell, _dart_XkbForceDeviceBell>(
            'XkbForceDeviceBell');
    return _XkbForceDeviceBell(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbForceDeviceBell _XkbForceDeviceBell;

  int XkbDeviceBellEvent(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    _XkbDeviceBellEvent ??=
        _dylib.lookupFunction<_c_XkbDeviceBellEvent, _dart_XkbDeviceBellEvent>(
            'XkbDeviceBellEvent');
    return _XkbDeviceBellEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_XkbDeviceBellEvent _XkbDeviceBellEvent;

  int XkbBell(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbBell ??= _dylib.lookupFunction<_c_XkbBell, _dart_XkbBell>('XkbBell');
    return _XkbBell(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbBell _XkbBell;

  int XkbForceBell(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XkbForceBell ??= _dylib
        .lookupFunction<_c_XkbForceBell, _dart_XkbForceBell>('XkbForceBell');
    return _XkbForceBell(
      arg0,
      arg1,
    );
  }

  _dart_XkbForceBell _XkbForceBell;

  int XkbBellEvent(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbBellEvent ??= _dylib
        .lookupFunction<_c_XkbBellEvent, _dart_XkbBellEvent>('XkbBellEvent');
    return _XkbBellEvent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbBellEvent _XkbBellEvent;

  int XkbSelectEvents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbSelectEvents ??=
        _dylib.lookupFunction<_c_XkbSelectEvents, _dart_XkbSelectEvents>(
            'XkbSelectEvents');
    return _XkbSelectEvents(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbSelectEvents _XkbSelectEvents;

  int XkbSelectEventDetails(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbSelectEventDetails ??= _dylib.lookupFunction<_c_XkbSelectEventDetails,
        _dart_XkbSelectEventDetails>('XkbSelectEventDetails');
    return _XkbSelectEventDetails(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbSelectEventDetails _XkbSelectEventDetails;

  void XkbNoteMapChanges(
    ffi.Pointer<XkbMapChangesPtr> arg0,
    ffi.Pointer<XkbMapNotifyEvent> arg1,
    int arg2,
  ) {
    _XkbNoteMapChanges ??=
        _dylib.lookupFunction<_c_XkbNoteMapChanges, _dart_XkbNoteMapChanges>(
            'XkbNoteMapChanges');
    return _XkbNoteMapChanges(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbNoteMapChanges _XkbNoteMapChanges;

  void XkbNoteNameChanges(
    ffi.Pointer<XkbNameChangesPtr> arg0,
    ffi.Pointer<XkbNamesNotifyEvent> arg1,
    int arg2,
  ) {
    _XkbNoteNameChanges ??=
        _dylib.lookupFunction<_c_XkbNoteNameChanges, _dart_XkbNoteNameChanges>(
            'XkbNoteNameChanges');
    return _XkbNoteNameChanges(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbNoteNameChanges _XkbNoteNameChanges;

  int XkbGetIndicatorState(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _XkbGetIndicatorState ??= _dylib.lookupFunction<_c_XkbGetIndicatorState,
        _dart_XkbGetIndicatorState>('XkbGetIndicatorState');
    return _XkbGetIndicatorState(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetIndicatorState _XkbGetIndicatorState;

  int XkbGetDeviceIndicatorState(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
  ) {
    _XkbGetDeviceIndicatorState ??= _dylib.lookupFunction<
        _c_XkbGetDeviceIndicatorState,
        _dart_XkbGetDeviceIndicatorState>('XkbGetDeviceIndicatorState');
    return _XkbGetDeviceIndicatorState(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbGetDeviceIndicatorState _XkbGetDeviceIndicatorState;

  int XkbGetIndicatorMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbGetIndicatorMap ??=
        _dylib.lookupFunction<_c_XkbGetIndicatorMap, _dart_XkbGetIndicatorMap>(
            'XkbGetIndicatorMap');
    return _XkbGetIndicatorMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetIndicatorMap _XkbGetIndicatorMap;

  int XkbSetIndicatorMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbSetIndicatorMap ??=
        _dylib.lookupFunction<_c_XkbSetIndicatorMap, _dart_XkbSetIndicatorMap>(
            'XkbSetIndicatorMap');
    return _XkbSetIndicatorMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbSetIndicatorMap _XkbSetIndicatorMap;

  int XkbGetNamedIndicator(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<XkbIndicatorMapPtr> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _XkbGetNamedIndicator ??= _dylib.lookupFunction<_c_XkbGetNamedIndicator,
        _dart_XkbGetNamedIndicator>('XkbGetNamedIndicator');
    return _XkbGetNamedIndicator(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbGetNamedIndicator _XkbGetNamedIndicator;

  int XkbGetNamedDeviceIndicator(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Int32> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<XkbIndicatorMapPtr> arg7,
    ffi.Pointer<ffi.Int32> arg8,
  ) {
    _XkbGetNamedDeviceIndicator ??= _dylib.lookupFunction<
        _c_XkbGetNamedDeviceIndicator,
        _dart_XkbGetNamedDeviceIndicator>('XkbGetNamedDeviceIndicator');
    return _XkbGetNamedDeviceIndicator(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XkbGetNamedDeviceIndicator _XkbGetNamedDeviceIndicator;

  int XkbSetNamedIndicator(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XkbIndicatorMapPtr> arg5,
  ) {
    _XkbSetNamedIndicator ??= _dylib.lookupFunction<_c_XkbSetNamedIndicator,
        _dart_XkbSetNamedIndicator>('XkbSetNamedIndicator');
    return _XkbSetNamedIndicator(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbSetNamedIndicator _XkbSetNamedIndicator;

  int XkbSetNamedDeviceIndicator(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
    int arg7,
    ffi.Pointer<XkbIndicatorMapPtr> arg8,
  ) {
    _XkbSetNamedDeviceIndicator ??= _dylib.lookupFunction<
        _c_XkbSetNamedDeviceIndicator,
        _dart_XkbSetNamedDeviceIndicator>('XkbSetNamedDeviceIndicator');
    return _XkbSetNamedDeviceIndicator(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XkbSetNamedDeviceIndicator _XkbSetNamedDeviceIndicator;

  int XkbLockModifiers(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbLockModifiers ??=
        _dylib.lookupFunction<_c_XkbLockModifiers, _dart_XkbLockModifiers>(
            'XkbLockModifiers');
    return _XkbLockModifiers(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbLockModifiers _XkbLockModifiers;

  int XkbLatchModifiers(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbLatchModifiers ??=
        _dylib.lookupFunction<_c_XkbLatchModifiers, _dart_XkbLatchModifiers>(
            'XkbLatchModifiers');
    return _XkbLatchModifiers(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbLatchModifiers _XkbLatchModifiers;

  int XkbLockGroup(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbLockGroup ??= _dylib
        .lookupFunction<_c_XkbLockGroup, _dart_XkbLockGroup>('XkbLockGroup');
    return _XkbLockGroup(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbLockGroup _XkbLockGroup;

  int XkbLatchGroup(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbLatchGroup ??= _dylib
        .lookupFunction<_c_XkbLatchGroup, _dart_XkbLatchGroup>('XkbLatchGroup');
    return _XkbLatchGroup(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbLatchGroup _XkbLatchGroup;

  int XkbSetServerInternalMods(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XkbSetServerInternalMods ??= _dylib.lookupFunction<
        _c_XkbSetServerInternalMods,
        _dart_XkbSetServerInternalMods>('XkbSetServerInternalMods');
    return _XkbSetServerInternalMods(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbSetServerInternalMods _XkbSetServerInternalMods;

  int XkbSetIgnoreLockMods(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XkbSetIgnoreLockMods ??= _dylib.lookupFunction<_c_XkbSetIgnoreLockMods,
        _dart_XkbSetIgnoreLockMods>('XkbSetIgnoreLockMods');
    return _XkbSetIgnoreLockMods(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbSetIgnoreLockMods _XkbSetIgnoreLockMods;

  int XkbVirtualModsToReal(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _XkbVirtualModsToReal ??= _dylib.lookupFunction<_c_XkbVirtualModsToReal,
        _dart_XkbVirtualModsToReal>('XkbVirtualModsToReal');
    return _XkbVirtualModsToReal(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbVirtualModsToReal _XkbVirtualModsToReal;

  int XkbComputeEffectiveMap(
    ffi.Pointer<XkbDescPtr> arg0,
    ffi.Pointer<XkbKeyTypePtr> arg1,
    ffi.Pointer<ffi.Uint8> arg2,
  ) {
    _XkbComputeEffectiveMap ??= _dylib.lookupFunction<_c_XkbComputeEffectiveMap,
        _dart_XkbComputeEffectiveMap>('XkbComputeEffectiveMap');
    return _XkbComputeEffectiveMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbComputeEffectiveMap _XkbComputeEffectiveMap;

  int XkbInitCanonicalKeyTypes(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbInitCanonicalKeyTypes ??= _dylib.lookupFunction<
        _c_XkbInitCanonicalKeyTypes,
        _dart_XkbInitCanonicalKeyTypes>('XkbInitCanonicalKeyTypes');
    return _XkbInitCanonicalKeyTypes(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbInitCanonicalKeyTypes _XkbInitCanonicalKeyTypes;

  ffi.Pointer<XkbDescPtr> XkbAllocKeyboard() {
    _XkbAllocKeyboard ??=
        _dylib.lookupFunction<_c_XkbAllocKeyboard, _dart_XkbAllocKeyboard>(
            'XkbAllocKeyboard');
    return _XkbAllocKeyboard();
  }

  _dart_XkbAllocKeyboard _XkbAllocKeyboard;

  void XkbFreeKeyboard(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbFreeKeyboard ??=
        _dylib.lookupFunction<_c_XkbFreeKeyboard, _dart_XkbFreeKeyboard>(
            'XkbFreeKeyboard');
    return _XkbFreeKeyboard(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbFreeKeyboard _XkbFreeKeyboard;

  int XkbAllocClientMap(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbAllocClientMap ??=
        _dylib.lookupFunction<_c_XkbAllocClientMap, _dart_XkbAllocClientMap>(
            'XkbAllocClientMap');
    return _XkbAllocClientMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAllocClientMap _XkbAllocClientMap;

  int XkbAllocServerMap(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbAllocServerMap ??=
        _dylib.lookupFunction<_c_XkbAllocServerMap, _dart_XkbAllocServerMap>(
            'XkbAllocServerMap');
    return _XkbAllocServerMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAllocServerMap _XkbAllocServerMap;

  void XkbFreeClientMap(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbFreeClientMap ??=
        _dylib.lookupFunction<_c_XkbFreeClientMap, _dart_XkbFreeClientMap>(
            'XkbFreeClientMap');
    return _XkbFreeClientMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbFreeClientMap _XkbFreeClientMap;

  void XkbFreeServerMap(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbFreeServerMap ??=
        _dylib.lookupFunction<_c_XkbFreeServerMap, _dart_XkbFreeServerMap>(
            'XkbFreeServerMap');
    return _XkbFreeServerMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbFreeServerMap _XkbFreeServerMap;

  ffi.Pointer<XkbKeyTypePtr> XkbAddKeyType(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbAddKeyType ??= _dylib
        .lookupFunction<_c_XkbAddKeyType, _dart_XkbAddKeyType>('XkbAddKeyType');
    return _XkbAddKeyType(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbAddKeyType _XkbAddKeyType;

  int XkbAllocIndicatorMaps(
    ffi.Pointer<XkbDescPtr> arg0,
  ) {
    _XkbAllocIndicatorMaps ??= _dylib.lookupFunction<_c_XkbAllocIndicatorMaps,
        _dart_XkbAllocIndicatorMaps>('XkbAllocIndicatorMaps');
    return _XkbAllocIndicatorMaps(
      arg0,
    );
  }

  _dart_XkbAllocIndicatorMaps _XkbAllocIndicatorMaps;

  void XkbFreeIndicatorMaps(
    ffi.Pointer<XkbDescPtr> arg0,
  ) {
    _XkbFreeIndicatorMaps ??= _dylib.lookupFunction<_c_XkbFreeIndicatorMaps,
        _dart_XkbFreeIndicatorMaps>('XkbFreeIndicatorMaps');
    return _XkbFreeIndicatorMaps(
      arg0,
    );
  }

  _dart_XkbFreeIndicatorMaps _XkbFreeIndicatorMaps;

  ffi.Pointer<XkbDescPtr> XkbGetMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbGetMap ??=
        _dylib.lookupFunction<_c_XkbGetMap, _dart_XkbGetMap>('XkbGetMap');
    return _XkbGetMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetMap _XkbGetMap;

  int XkbGetUpdatedMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbGetUpdatedMap ??=
        _dylib.lookupFunction<_c_XkbGetUpdatedMap, _dart_XkbGetUpdatedMap>(
            'XkbGetUpdatedMap');
    return _XkbGetUpdatedMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetUpdatedMap _XkbGetUpdatedMap;

  int XkbGetMapChanges(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDescPtr> arg1,
    ffi.Pointer<XkbMapChangesPtr> arg2,
  ) {
    _XkbGetMapChanges ??=
        _dylib.lookupFunction<_c_XkbGetMapChanges, _dart_XkbGetMapChanges>(
            'XkbGetMapChanges');
    return _XkbGetMapChanges(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetMapChanges _XkbGetMapChanges;

  int XkbRefreshKeyboardMapping(
    ffi.Pointer<XkbMapNotifyEvent> arg0,
  ) {
    _XkbRefreshKeyboardMapping ??= _dylib.lookupFunction<
        _c_XkbRefreshKeyboardMapping,
        _dart_XkbRefreshKeyboardMapping>('XkbRefreshKeyboardMapping');
    return _XkbRefreshKeyboardMapping(
      arg0,
    );
  }

  _dart_XkbRefreshKeyboardMapping _XkbRefreshKeyboardMapping;

  int XkbGetKeyTypes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XkbDescPtr> arg3,
  ) {
    _XkbGetKeyTypes ??=
        _dylib.lookupFunction<_c_XkbGetKeyTypes, _dart_XkbGetKeyTypes>(
            'XkbGetKeyTypes');
    return _XkbGetKeyTypes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbGetKeyTypes _XkbGetKeyTypes;

  int XkbGetKeySyms(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XkbDescPtr> arg3,
  ) {
    _XkbGetKeySyms ??= _dylib
        .lookupFunction<_c_XkbGetKeySyms, _dart_XkbGetKeySyms>('XkbGetKeySyms');
    return _XkbGetKeySyms(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbGetKeySyms _XkbGetKeySyms;

  int XkbGetKeyActions(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XkbDescPtr> arg3,
  ) {
    _XkbGetKeyActions ??=
        _dylib.lookupFunction<_c_XkbGetKeyActions, _dart_XkbGetKeyActions>(
            'XkbGetKeyActions');
    return _XkbGetKeyActions(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbGetKeyActions _XkbGetKeyActions;

  int XkbGetKeyBehaviors(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XkbDescPtr> arg3,
  ) {
    _XkbGetKeyBehaviors ??=
        _dylib.lookupFunction<_c_XkbGetKeyBehaviors, _dart_XkbGetKeyBehaviors>(
            'XkbGetKeyBehaviors');
    return _XkbGetKeyBehaviors(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbGetKeyBehaviors _XkbGetKeyBehaviors;

  int XkbGetVirtualMods(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbGetVirtualMods ??=
        _dylib.lookupFunction<_c_XkbGetVirtualMods, _dart_XkbGetVirtualMods>(
            'XkbGetVirtualMods');
    return _XkbGetVirtualMods(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetVirtualMods _XkbGetVirtualMods;

  int XkbGetKeyExplicitComponents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XkbDescPtr> arg3,
  ) {
    _XkbGetKeyExplicitComponents ??= _dylib.lookupFunction<
        _c_XkbGetKeyExplicitComponents,
        _dart_XkbGetKeyExplicitComponents>('XkbGetKeyExplicitComponents');
    return _XkbGetKeyExplicitComponents(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbGetKeyExplicitComponents _XkbGetKeyExplicitComponents;

  int XkbGetKeyModifierMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XkbDescPtr> arg3,
  ) {
    _XkbGetKeyModifierMap ??= _dylib.lookupFunction<_c_XkbGetKeyModifierMap,
        _dart_XkbGetKeyModifierMap>('XkbGetKeyModifierMap');
    return _XkbGetKeyModifierMap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbGetKeyModifierMap _XkbGetKeyModifierMap;

  int XkbGetKeyVirtualModMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XkbDescPtr> arg3,
  ) {
    _XkbGetKeyVirtualModMap ??= _dylib.lookupFunction<_c_XkbGetKeyVirtualModMap,
        _dart_XkbGetKeyVirtualModMap>('XkbGetKeyVirtualModMap');
    return _XkbGetKeyVirtualModMap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbGetKeyVirtualModMap _XkbGetKeyVirtualModMap;

  int XkbAllocControls(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
  ) {
    _XkbAllocControls ??=
        _dylib.lookupFunction<_c_XkbAllocControls, _dart_XkbAllocControls>(
            'XkbAllocControls');
    return _XkbAllocControls(
      arg0,
      arg1,
    );
  }

  _dart_XkbAllocControls _XkbAllocControls;

  void XkbFreeControls(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbFreeControls ??=
        _dylib.lookupFunction<_c_XkbFreeControls, _dart_XkbFreeControls>(
            'XkbFreeControls');
    return _XkbFreeControls(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbFreeControls _XkbFreeControls;

  int XkbGetControls(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbGetControls ??=
        _dylib.lookupFunction<_c_XkbGetControls, _dart_XkbGetControls>(
            'XkbGetControls');
    return _XkbGetControls(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetControls _XkbGetControls;

  int XkbSetControls(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbSetControls ??=
        _dylib.lookupFunction<_c_XkbSetControls, _dart_XkbSetControls>(
            'XkbSetControls');
    return _XkbSetControls(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbSetControls _XkbSetControls;

  void XkbNoteControlsChanges(
    ffi.Pointer<XkbControlsChangesPtr> arg0,
    ffi.Pointer<XkbControlsNotifyEvent> arg1,
    int arg2,
  ) {
    _XkbNoteControlsChanges ??= _dylib.lookupFunction<_c_XkbNoteControlsChanges,
        _dart_XkbNoteControlsChanges>('XkbNoteControlsChanges');
    return _XkbNoteControlsChanges(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbNoteControlsChanges _XkbNoteControlsChanges;

  int XkbAllocCompatMap(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbAllocCompatMap ??=
        _dylib.lookupFunction<_c_XkbAllocCompatMap, _dart_XkbAllocCompatMap>(
            'XkbAllocCompatMap');
    return _XkbAllocCompatMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAllocCompatMap _XkbAllocCompatMap;

  void XkbFreeCompatMap(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbFreeCompatMap ??=
        _dylib.lookupFunction<_c_XkbFreeCompatMap, _dart_XkbFreeCompatMap>(
            'XkbFreeCompatMap');
    return _XkbFreeCompatMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbFreeCompatMap _XkbFreeCompatMap;

  int XkbGetCompatMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbGetCompatMap ??=
        _dylib.lookupFunction<_c_XkbGetCompatMap, _dart_XkbGetCompatMap>(
            'XkbGetCompatMap');
    return _XkbGetCompatMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetCompatMap _XkbGetCompatMap;

  int XkbSetCompatMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
    int arg3,
  ) {
    _XkbSetCompatMap ??=
        _dylib.lookupFunction<_c_XkbSetCompatMap, _dart_XkbSetCompatMap>(
            'XkbSetCompatMap');
    return _XkbSetCompatMap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbSetCompatMap _XkbSetCompatMap;

  ffi.Pointer<XkbSymInterpretPtr> XkbAddSymInterpret(
    ffi.Pointer<XkbDescPtr> arg0,
    ffi.Pointer<XkbSymInterpretPtr> arg1,
    int arg2,
    ffi.Pointer<XkbChangesPtr> arg3,
  ) {
    _XkbAddSymInterpret ??=
        _dylib.lookupFunction<_c_XkbAddSymInterpret, _dart_XkbAddSymInterpret>(
            'XkbAddSymInterpret');
    return _XkbAddSymInterpret(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbAddSymInterpret _XkbAddSymInterpret;

  int XkbAllocNames(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _XkbAllocNames ??= _dylib
        .lookupFunction<_c_XkbAllocNames, _dart_XkbAllocNames>('XkbAllocNames');
    return _XkbAllocNames(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbAllocNames _XkbAllocNames;

  int XkbGetNames(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbGetNames ??=
        _dylib.lookupFunction<_c_XkbGetNames, _dart_XkbGetNames>('XkbGetNames');
    return _XkbGetNames(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetNames _XkbGetNames;

  int XkbSetNames(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XkbDescPtr> arg4,
  ) {
    _XkbSetNames ??=
        _dylib.lookupFunction<_c_XkbSetNames, _dart_XkbSetNames>('XkbSetNames');
    return _XkbSetNames(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbSetNames _XkbSetNames;

  int XkbChangeNames(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDescPtr> arg1,
    ffi.Pointer<XkbNameChangesPtr> arg2,
  ) {
    _XkbChangeNames ??=
        _dylib.lookupFunction<_c_XkbChangeNames, _dart_XkbChangeNames>(
            'XkbChangeNames');
    return _XkbChangeNames(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbChangeNames _XkbChangeNames;

  void XkbFreeNames(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbFreeNames ??= _dylib
        .lookupFunction<_c_XkbFreeNames, _dart_XkbFreeNames>('XkbFreeNames');
    return _XkbFreeNames(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbFreeNames _XkbFreeNames;

  int XkbGetState(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbStatePtr> arg2,
  ) {
    _XkbGetState ??=
        _dylib.lookupFunction<_c_XkbGetState, _dart_XkbGetState>('XkbGetState');
    return _XkbGetState(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetState _XkbGetState;

  int XkbSetMap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDescPtr> arg2,
  ) {
    _XkbSetMap ??=
        _dylib.lookupFunction<_c_XkbSetMap, _dart_XkbSetMap>('XkbSetMap');
    return _XkbSetMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbSetMap _XkbSetMap;

  int XkbChangeMap(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDescPtr> arg1,
    ffi.Pointer<XkbMapChangesPtr> arg2,
  ) {
    _XkbChangeMap ??= _dylib
        .lookupFunction<_c_XkbChangeMap, _dart_XkbChangeMap>('XkbChangeMap');
    return _XkbChangeMap(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbChangeMap _XkbChangeMap;

  int XkbSetDetectableAutoRepeat(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XkbSetDetectableAutoRepeat ??= _dylib.lookupFunction<
        _c_XkbSetDetectableAutoRepeat,
        _dart_XkbSetDetectableAutoRepeat>('XkbSetDetectableAutoRepeat');
    return _XkbSetDetectableAutoRepeat(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbSetDetectableAutoRepeat _XkbSetDetectableAutoRepeat;

  int XkbGetDetectableAutoRepeat(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XkbGetDetectableAutoRepeat ??= _dylib.lookupFunction<
        _c_XkbGetDetectableAutoRepeat,
        _dart_XkbGetDetectableAutoRepeat>('XkbGetDetectableAutoRepeat');
    return _XkbGetDetectableAutoRepeat(
      arg0,
      arg1,
    );
  }

  _dart_XkbGetDetectableAutoRepeat _XkbGetDetectableAutoRepeat;

  int XkbSetAutoResetControls(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint32> arg2,
    ffi.Pointer<ffi.Uint32> arg3,
  ) {
    _XkbSetAutoResetControls ??= _dylib.lookupFunction<
        _c_XkbSetAutoResetControls,
        _dart_XkbSetAutoResetControls>('XkbSetAutoResetControls');
    return _XkbSetAutoResetControls(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbSetAutoResetControls _XkbSetAutoResetControls;

  int XkbGetAutoResetControls(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _XkbGetAutoResetControls ??= _dylib.lookupFunction<
        _c_XkbGetAutoResetControls,
        _dart_XkbGetAutoResetControls>('XkbGetAutoResetControls');
    return _XkbGetAutoResetControls(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetAutoResetControls _XkbGetAutoResetControls;

  int XkbSetPerClientControls(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _XkbSetPerClientControls ??= _dylib.lookupFunction<
        _c_XkbSetPerClientControls,
        _dart_XkbSetPerClientControls>('XkbSetPerClientControls');
    return _XkbSetPerClientControls(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbSetPerClientControls _XkbSetPerClientControls;

  int XkbGetPerClientControls(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    _XkbGetPerClientControls ??= _dylib.lookupFunction<
        _c_XkbGetPerClientControls,
        _dart_XkbGetPerClientControls>('XkbGetPerClientControls');
    return _XkbGetPerClientControls(
      arg0,
      arg1,
    );
  }

  _dart_XkbGetPerClientControls _XkbGetPerClientControls;

  int XkbCopyKeyType(
    ffi.Pointer<XkbKeyTypePtr> arg0,
    ffi.Pointer<XkbKeyTypePtr> arg1,
  ) {
    _XkbCopyKeyType ??=
        _dylib.lookupFunction<_c_XkbCopyKeyType, _dart_XkbCopyKeyType>(
            'XkbCopyKeyType');
    return _XkbCopyKeyType(
      arg0,
      arg1,
    );
  }

  _dart_XkbCopyKeyType _XkbCopyKeyType;

  int XkbCopyKeyTypes(
    ffi.Pointer<XkbKeyTypePtr> arg0,
    ffi.Pointer<XkbKeyTypePtr> arg1,
    int arg2,
  ) {
    _XkbCopyKeyTypes ??=
        _dylib.lookupFunction<_c_XkbCopyKeyTypes, _dart_XkbCopyKeyTypes>(
            'XkbCopyKeyTypes');
    return _XkbCopyKeyTypes(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbCopyKeyTypes _XkbCopyKeyTypes;

  int XkbResizeKeyType(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbResizeKeyType ??=
        _dylib.lookupFunction<_c_XkbResizeKeyType, _dart_XkbResizeKeyType>(
            'XkbResizeKeyType');
    return _XkbResizeKeyType(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbResizeKeyType _XkbResizeKeyType;

  ffi.Pointer<ffi.Uint64> XkbResizeKeySyms(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbResizeKeySyms ??=
        _dylib.lookupFunction<_c_XkbResizeKeySyms, _dart_XkbResizeKeySyms>(
            'XkbResizeKeySyms');
    return _XkbResizeKeySyms(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbResizeKeySyms _XkbResizeKeySyms;

  int XkbChangeTypesOfKey(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<XkbMapChangesPtr> arg5,
  ) {
    _XkbChangeTypesOfKey ??= _dylib.lookupFunction<_c_XkbChangeTypesOfKey,
        _dart_XkbChangeTypesOfKey>('XkbChangeTypesOfKey');
    return _XkbChangeTypesOfKey(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbChangeTypesOfKey _XkbChangeTypesOfKey;

  int XkbChangeKeycodeRange(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<XkbChangesPtr> arg3,
  ) {
    _XkbChangeKeycodeRange ??= _dylib.lookupFunction<_c_XkbChangeKeycodeRange,
        _dart_XkbChangeKeycodeRange>('XkbChangeKeycodeRange');
    return _XkbChangeKeycodeRange(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbChangeKeycodeRange _XkbChangeKeycodeRange;

  /// ====================================================================**
  ffi.Pointer<XkbComponentListPtr> XkbListComponents(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbComponentNamesPtr> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XkbListComponents ??=
        _dylib.lookupFunction<_c_XkbListComponents, _dart_XkbListComponents>(
            'XkbListComponents');
    return _XkbListComponents(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbListComponents _XkbListComponents;

  void XkbFreeComponentList(
    ffi.Pointer<XkbComponentListPtr> arg0,
  ) {
    _XkbFreeComponentList ??= _dylib.lookupFunction<_c_XkbFreeComponentList,
        _dart_XkbFreeComponentList>('XkbFreeComponentList');
    return _XkbFreeComponentList(
      arg0,
    );
  }

  _dart_XkbFreeComponentList _XkbFreeComponentList;

  ffi.Pointer<XkbDescPtr> XkbGetKeyboard(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbGetKeyboard ??=
        _dylib.lookupFunction<_c_XkbGetKeyboard, _dart_XkbGetKeyboard>(
            'XkbGetKeyboard');
    return _XkbGetKeyboard(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetKeyboard _XkbGetKeyboard;

  ffi.Pointer<XkbDescPtr> XkbGetKeyboardByName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbComponentNamesPtr> arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    _XkbGetKeyboardByName ??= _dylib.lookupFunction<_c_XkbGetKeyboardByName,
        _dart_XkbGetKeyboardByName>('XkbGetKeyboardByName');
    return _XkbGetKeyboardByName(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbGetKeyboardByName _XkbGetKeyboardByName;

  /// ====================================================================**
  int XkbKeyTypesForCoreSymbols(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Uint64> arg5,
  ) {
    _XkbKeyTypesForCoreSymbols ??= _dylib.lookupFunction<
        _c_XkbKeyTypesForCoreSymbols,
        _dart_XkbKeyTypesForCoreSymbols>('XkbKeyTypesForCoreSymbols');
    return _XkbKeyTypesForCoreSymbols(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbKeyTypesForCoreSymbols _XkbKeyTypesForCoreSymbols;

  int XkbApplyCompatMapToKey(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    ffi.Pointer<XkbChangesPtr> arg2,
  ) {
    _XkbApplyCompatMapToKey ??= _dylib.lookupFunction<_c_XkbApplyCompatMapToKey,
        _dart_XkbApplyCompatMapToKey>('XkbApplyCompatMapToKey');
    return _XkbApplyCompatMapToKey(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbApplyCompatMapToKey _XkbApplyCompatMapToKey;

  int XkbUpdateMapFromCore(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<XkbChangesPtr> arg5,
  ) {
    _XkbUpdateMapFromCore ??= _dylib.lookupFunction<_c_XkbUpdateMapFromCore,
        _dart_XkbUpdateMapFromCore>('XkbUpdateMapFromCore');
    return _XkbUpdateMapFromCore(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XkbUpdateMapFromCore _XkbUpdateMapFromCore;

  /// ====================================================================**
  ffi.Pointer<XkbDeviceLedInfoPtr> XkbAddDeviceLedInfo(
    ffi.Pointer<XkbDeviceInfoPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbAddDeviceLedInfo ??= _dylib.lookupFunction<_c_XkbAddDeviceLedInfo,
        _dart_XkbAddDeviceLedInfo>('XkbAddDeviceLedInfo');
    return _XkbAddDeviceLedInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAddDeviceLedInfo _XkbAddDeviceLedInfo;

  int XkbResizeDeviceButtonActions(
    ffi.Pointer<XkbDeviceInfoPtr> arg0,
    int arg1,
  ) {
    _XkbResizeDeviceButtonActions ??= _dylib.lookupFunction<
        _c_XkbResizeDeviceButtonActions,
        _dart_XkbResizeDeviceButtonActions>('XkbResizeDeviceButtonActions');
    return _XkbResizeDeviceButtonActions(
      arg0,
      arg1,
    );
  }

  _dart_XkbResizeDeviceButtonActions _XkbResizeDeviceButtonActions;

  ffi.Pointer<XkbDeviceInfoPtr> XkbAllocDeviceInfo(
    int arg0,
    int arg1,
    int arg2,
  ) {
    _XkbAllocDeviceInfo ??=
        _dylib.lookupFunction<_c_XkbAllocDeviceInfo, _dart_XkbAllocDeviceInfo>(
            'XkbAllocDeviceInfo');
    return _XkbAllocDeviceInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAllocDeviceInfo _XkbAllocDeviceInfo;

  void XkbFreeDeviceInfo(
    ffi.Pointer<XkbDeviceInfoPtr> arg0,
    int arg1,
    int arg2,
  ) {
    _XkbFreeDeviceInfo ??=
        _dylib.lookupFunction<_c_XkbFreeDeviceInfo, _dart_XkbFreeDeviceInfo>(
            'XkbFreeDeviceInfo');
    return _XkbFreeDeviceInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbFreeDeviceInfo _XkbFreeDeviceInfo;

  void XkbNoteDeviceChanges(
    ffi.Pointer<XkbDeviceChangesPtr> arg0,
    ffi.Pointer<XkbExtensionDeviceNotifyEvent> arg1,
    int arg2,
  ) {
    _XkbNoteDeviceChanges ??= _dylib.lookupFunction<_c_XkbNoteDeviceChanges,
        _dart_XkbNoteDeviceChanges>('XkbNoteDeviceChanges');
    return _XkbNoteDeviceChanges(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbNoteDeviceChanges _XkbNoteDeviceChanges;

  ffi.Pointer<XkbDeviceInfoPtr> XkbGetDeviceInfo(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbGetDeviceInfo ??=
        _dylib.lookupFunction<_c_XkbGetDeviceInfo, _dart_XkbGetDeviceInfo>(
            'XkbGetDeviceInfo');
    return _XkbGetDeviceInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbGetDeviceInfo _XkbGetDeviceInfo;

  int XkbGetDeviceInfoChanges(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDeviceInfoPtr> arg1,
    ffi.Pointer<XkbDeviceChangesPtr> arg2,
  ) {
    _XkbGetDeviceInfoChanges ??= _dylib.lookupFunction<
        _c_XkbGetDeviceInfoChanges,
        _dart_XkbGetDeviceInfoChanges>('XkbGetDeviceInfoChanges');
    return _XkbGetDeviceInfoChanges(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbGetDeviceInfoChanges _XkbGetDeviceInfoChanges;

  int XkbGetDeviceButtonActions(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDeviceInfoPtr> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbGetDeviceButtonActions ??= _dylib.lookupFunction<
        _c_XkbGetDeviceButtonActions,
        _dart_XkbGetDeviceButtonActions>('XkbGetDeviceButtonActions');
    return _XkbGetDeviceButtonActions(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbGetDeviceButtonActions _XkbGetDeviceButtonActions;

  int XkbGetDeviceLedInfo(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDeviceInfoPtr> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbGetDeviceLedInfo ??= _dylib.lookupFunction<_c_XkbGetDeviceLedInfo,
        _dart_XkbGetDeviceLedInfo>('XkbGetDeviceLedInfo');
    return _XkbGetDeviceLedInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbGetDeviceLedInfo _XkbGetDeviceLedInfo;

  int XkbSetDeviceInfo(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XkbDeviceInfoPtr> arg2,
  ) {
    _XkbSetDeviceInfo ??=
        _dylib.lookupFunction<_c_XkbSetDeviceInfo, _dart_XkbSetDeviceInfo>(
            'XkbSetDeviceInfo');
    return _XkbSetDeviceInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbSetDeviceInfo _XkbSetDeviceInfo;

  int XkbChangeDeviceInfo(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDeviceInfoPtr> arg1,
    ffi.Pointer<XkbDeviceChangesPtr> arg2,
  ) {
    _XkbChangeDeviceInfo ??= _dylib.lookupFunction<_c_XkbChangeDeviceInfo,
        _dart_XkbChangeDeviceInfo>('XkbChangeDeviceInfo');
    return _XkbChangeDeviceInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbChangeDeviceInfo _XkbChangeDeviceInfo;

  int XkbSetDeviceLedInfo(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDeviceInfoPtr> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XkbSetDeviceLedInfo ??= _dylib.lookupFunction<_c_XkbSetDeviceLedInfo,
        _dart_XkbSetDeviceLedInfo>('XkbSetDeviceLedInfo');
    return _XkbSetDeviceLedInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XkbSetDeviceLedInfo _XkbSetDeviceLedInfo;

  int XkbSetDeviceButtonActions(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbDeviceInfoPtr> arg1,
    int arg2,
    int arg3,
  ) {
    _XkbSetDeviceButtonActions ??= _dylib.lookupFunction<
        _c_XkbSetDeviceButtonActions,
        _dart_XkbSetDeviceButtonActions>('XkbSetDeviceButtonActions');
    return _XkbSetDeviceButtonActions(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbSetDeviceButtonActions _XkbSetDeviceButtonActions;

  /// ====================================================================**
  int XkbToControl(
    int arg0,
  ) {
    _XkbToControl ??= _dylib
        .lookupFunction<_c_XkbToControl, _dart_XkbToControl>('XkbToControl');
    return _XkbToControl(
      arg0,
    );
  }

  _dart_XkbToControl _XkbToControl;

  /// ====================================================================**
  int XkbSetDebuggingFlags(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ffi.Uint32> arg6,
    ffi.Pointer<ffi.Uint32> arg7,
  ) {
    _XkbSetDebuggingFlags ??= _dylib.lookupFunction<_c_XkbSetDebuggingFlags,
        _dart_XkbSetDebuggingFlags>('XkbSetDebuggingFlags');
    return _XkbSetDebuggingFlags(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XkbSetDebuggingFlags _XkbSetDebuggingFlags;

  int XkbApplyVirtualModChanges(
    ffi.Pointer<XkbDescPtr> arg0,
    int arg1,
    ffi.Pointer<XkbChangesPtr> arg2,
  ) {
    _XkbApplyVirtualModChanges ??= _dylib.lookupFunction<
        _c_XkbApplyVirtualModChanges,
        _dart_XkbApplyVirtualModChanges>('XkbApplyVirtualModChanges');
    return _XkbApplyVirtualModChanges(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbApplyVirtualModChanges _XkbApplyVirtualModChanges;

  void XkbUpdateKeyTypeVirtualMods(
    ffi.Pointer<XkbDescPtr> arg0,
    ffi.Pointer<XkbKeyTypePtr> arg1,
    int arg2,
    ffi.Pointer<XkbChangesPtr> arg3,
  ) {
    _XkbUpdateKeyTypeVirtualMods ??= _dylib.lookupFunction<
        _c_XkbUpdateKeyTypeVirtualMods,
        _dart_XkbUpdateKeyTypeVirtualMods>('XkbUpdateKeyTypeVirtualMods');
    return _XkbUpdateKeyTypeVirtualMods(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XkbUpdateKeyTypeVirtualMods _XkbUpdateKeyTypeVirtualMods;

  int readv(
    int __fd,
    ffi.Pointer<iovec> __iovec,
    int __count,
  ) {
    _readv ??= _dylib.lookupFunction<_c_readv, _dart_readv>('readv');
    return _readv(
      __fd,
      __iovec,
      __count,
    );
  }

  _dart_readv _readv;

  int writev(
    int __fd,
    ffi.Pointer<iovec> __iovec,
    int __count,
  ) {
    _writev ??= _dylib.lookupFunction<_c_writev, _dart_writev>('writev');
    return _writev(
      __fd,
      __iovec,
      __count,
    );
  }

  _dart_writev _writev;

  int preadv(
    int __fd,
    ffi.Pointer<iovec> __iovec,
    int __count,
    int __offset,
  ) {
    _preadv ??= _dylib.lookupFunction<_c_preadv, _dart_preadv>('preadv');
    return _preadv(
      __fd,
      __iovec,
      __count,
      __offset,
    );
  }

  _dart_preadv _preadv;

  int pwritev(
    int __fd,
    ffi.Pointer<iovec> __iovec,
    int __count,
    int __offset,
  ) {
    _pwritev ??= _dylib.lookupFunction<_c_pwritev, _dart_pwritev>('pwritev');
    return _pwritev(
      __fd,
      __iovec,
      __count,
      __offset,
    );
  }

  _dart_pwritev _pwritev;

  int __sched_cpucount(
    int __setsize,
    ffi.Pointer<cpu_set_t> __setp,
  ) {
    ___sched_cpucount ??=
        _dylib.lookupFunction<_c___sched_cpucount, _dart___sched_cpucount>(
            '__sched_cpucount');
    return ___sched_cpucount(
      __setsize,
      __setp,
    );
  }

  _dart___sched_cpucount ___sched_cpucount;

  ffi.Pointer<cpu_set_t> __sched_cpualloc(
    int __count,
  ) {
    ___sched_cpualloc ??=
        _dylib.lookupFunction<_c___sched_cpualloc, _dart___sched_cpualloc>(
            '__sched_cpualloc');
    return ___sched_cpualloc(
      __count,
    );
  }

  _dart___sched_cpualloc ___sched_cpualloc;

  void __sched_cpufree(
    ffi.Pointer<cpu_set_t> __set,
  ) {
    ___sched_cpufree ??=
        _dylib.lookupFunction<_c___sched_cpufree, _dart___sched_cpufree>(
            '__sched_cpufree');
    return ___sched_cpufree(
      __set,
    );
  }

  _dart___sched_cpufree ___sched_cpufree;

  int sched_setparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    _sched_setparam ??=
        _dylib.lookupFunction<_c_sched_setparam, _dart_sched_setparam>(
            'sched_setparam');
    return _sched_setparam(
      __pid,
      __param,
    );
  }

  _dart_sched_setparam _sched_setparam;

  int sched_getparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    _sched_getparam ??=
        _dylib.lookupFunction<_c_sched_getparam, _dart_sched_getparam>(
            'sched_getparam');
    return _sched_getparam(
      __pid,
      __param,
    );
  }

  _dart_sched_getparam _sched_getparam;

  int sched_setscheduler(
    int __pid,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    _sched_setscheduler ??=
        _dylib.lookupFunction<_c_sched_setscheduler, _dart_sched_setscheduler>(
            'sched_setscheduler');
    return _sched_setscheduler(
      __pid,
      __policy,
      __param,
    );
  }

  _dart_sched_setscheduler _sched_setscheduler;

  int sched_getscheduler(
    int __pid,
  ) {
    _sched_getscheduler ??=
        _dylib.lookupFunction<_c_sched_getscheduler, _dart_sched_getscheduler>(
            'sched_getscheduler');
    return _sched_getscheduler(
      __pid,
    );
  }

  _dart_sched_getscheduler _sched_getscheduler;

  int sched_yield() {
    _sched_yield ??=
        _dylib.lookupFunction<_c_sched_yield, _dart_sched_yield>('sched_yield');
    return _sched_yield();
  }

  _dart_sched_yield _sched_yield;

  int sched_get_priority_max(
    int __algorithm,
  ) {
    _sched_get_priority_max ??= _dylib.lookupFunction<_c_sched_get_priority_max,
        _dart_sched_get_priority_max>('sched_get_priority_max');
    return _sched_get_priority_max(
      __algorithm,
    );
  }

  _dart_sched_get_priority_max _sched_get_priority_max;

  int sched_get_priority_min(
    int __algorithm,
  ) {
    _sched_get_priority_min ??= _dylib.lookupFunction<_c_sched_get_priority_min,
        _dart_sched_get_priority_min>('sched_get_priority_min');
    return _sched_get_priority_min(
      __algorithm,
    );
  }

  _dart_sched_get_priority_min _sched_get_priority_min;

  int sched_rr_get_interval(
    int __pid,
    ffi.Pointer<timespec> __t,
  ) {
    _sched_rr_get_interval ??= _dylib.lookupFunction<_c_sched_rr_get_interval,
        _dart_sched_rr_get_interval>('sched_rr_get_interval');
    return _sched_rr_get_interval(
      __pid,
      __t,
    );
  }

  _dart_sched_rr_get_interval _sched_rr_get_interval;

  int clock() {
    _clock ??= _dylib.lookupFunction<_c_clock, _dart_clock>('clock');
    return _clock();
  }

  _dart_clock _clock;

  int time(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    _time ??= _dylib.lookupFunction<_c_time, _dart_time>('time');
    return _time(
      __timer,
    );
  }

  _dart_time _time;

  double difftime(
    int __time1,
    int __time0,
  ) {
    _difftime ??=
        _dylib.lookupFunction<_c_difftime, _dart_difftime>('difftime');
    return _difftime(
      __time1,
      __time0,
    );
  }

  _dart_difftime _difftime;

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    _mktime ??= _dylib.lookupFunction<_c_mktime, _dart_mktime>('mktime');
    return _mktime(
      __tp,
    );
  }

  _dart_mktime _mktime;

  int strftime(
    ffi.Pointer<ffi.Int8> __s,
    int __maxsize,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<tm> __tp,
  ) {
    _strftime ??=
        _dylib.lookupFunction<_c_strftime, _dart_strftime>('strftime');
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  _dart_strftime _strftime;

  int strftime_l(
    ffi.Pointer<ffi.Int8> __s,
    int __maxsize,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<tm> __tp,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _strftime_l ??=
        _dylib.lookupFunction<_c_strftime_l, _dart_strftime_l>('strftime_l');
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  _dart_strftime_l _strftime_l;

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    _gmtime ??= _dylib.lookupFunction<_c_gmtime, _dart_gmtime>('gmtime');
    return _gmtime(
      __timer,
    );
  }

  _dart_gmtime _gmtime;

  ffi.Pointer<tm> localtime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    _localtime ??=
        _dylib.lookupFunction<_c_localtime, _dart_localtime>('localtime');
    return _localtime(
      __timer,
    );
  }

  _dart_localtime _localtime;

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    _gmtime_r ??=
        _dylib.lookupFunction<_c_gmtime_r, _dart_gmtime_r>('gmtime_r');
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  _dart_gmtime_r _gmtime_r;

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    _localtime_r ??=
        _dylib.lookupFunction<_c_localtime_r, _dart_localtime_r>('localtime_r');
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  _dart_localtime_r _localtime_r;

  ffi.Pointer<ffi.Int8> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    _asctime ??= _dylib.lookupFunction<_c_asctime, _dart_asctime>('asctime');
    return _asctime(
      __tp,
    );
  }

  _dart_asctime _asctime;

  ffi.Pointer<ffi.Int8> ctime(
    ffi.Pointer<ffi.Int64> __timer,
  ) {
    _ctime ??= _dylib.lookupFunction<_c_ctime, _dart_ctime>('ctime');
    return _ctime(
      __timer,
    );
  }

  _dart_ctime _ctime;

  ffi.Pointer<ffi.Int8> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _asctime_r ??=
        _dylib.lookupFunction<_c_asctime_r, _dart_asctime_r>('asctime_r');
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  _dart_asctime_r _asctime_r;

  ffi.Pointer<ffi.Int8> ctime_r(
    ffi.Pointer<ffi.Int64> __timer,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _ctime_r ??= _dylib.lookupFunction<_c_ctime_r, _dart_ctime_r>('ctime_r');
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  _dart_ctime_r _ctime_r;

  void tzset() {
    _tzset ??= _dylib.lookupFunction<_c_tzset, _dart_tzset>('tzset');
    return _tzset();
  }

  _dart_tzset _tzset;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    _timegm ??= _dylib.lookupFunction<_c_timegm, _dart_timegm>('timegm');
    return _timegm(
      __tp,
    );
  }

  _dart_timegm _timegm;

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    _timelocal ??=
        _dylib.lookupFunction<_c_timelocal, _dart_timelocal>('timelocal');
    return _timelocal(
      __tp,
    );
  }

  _dart_timelocal _timelocal;

  int dysize(
    int __year,
  ) {
    _dysize ??= _dylib.lookupFunction<_c_dysize, _dart_dysize>('dysize');
    return _dysize(
      __year,
    );
  }

  _dart_dysize _dysize;

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    _nanosleep ??=
        _dylib.lookupFunction<_c_nanosleep, _dart_nanosleep>('nanosleep');
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  _dart_nanosleep _nanosleep;

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    _clock_getres ??= _dylib
        .lookupFunction<_c_clock_getres, _dart_clock_getres>('clock_getres');
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  _dart_clock_getres _clock_getres;

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_gettime ??= _dylib
        .lookupFunction<_c_clock_gettime, _dart_clock_gettime>('clock_gettime');
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_gettime _clock_gettime;

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    _clock_settime ??= _dylib
        .lookupFunction<_c_clock_settime, _dart_clock_settime>('clock_settime');
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  _dart_clock_settime _clock_settime;

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    _clock_nanosleep ??=
        _dylib.lookupFunction<_c_clock_nanosleep, _dart_clock_nanosleep>(
            'clock_nanosleep');
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  _dart_clock_nanosleep _clock_nanosleep;

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<ffi.Int32> __clock_id,
  ) {
    _clock_getcpuclockid ??= _dylib.lookupFunction<_c_clock_getcpuclockid,
        _dart_clock_getcpuclockid>('clock_getcpuclockid');
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  _dart_clock_getcpuclockid _clock_getcpuclockid;

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
  ) {
    _timer_create ??= _dylib
        .lookupFunction<_c_timer_create, _dart_timer_create>('timer_create');
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  _dart_timer_create _timer_create;

  int timer_delete(
    ffi.Pointer<ffi.Void> __timerid,
  ) {
    _timer_delete ??= _dylib
        .lookupFunction<_c_timer_delete, _dart_timer_delete>('timer_delete');
    return _timer_delete(
      __timerid,
    );
  }

  _dart_timer_delete _timer_delete;

  int timer_settime(
    ffi.Pointer<ffi.Void> __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    _timer_settime ??= _dylib
        .lookupFunction<_c_timer_settime, _dart_timer_settime>('timer_settime');
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  _dart_timer_settime _timer_settime;

  int timer_gettime(
    ffi.Pointer<ffi.Void> __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    _timer_gettime ??= _dylib
        .lookupFunction<_c_timer_gettime, _dart_timer_gettime>('timer_gettime');
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  _dart_timer_gettime _timer_gettime;

  int timer_getoverrun(
    ffi.Pointer<ffi.Void> __timerid,
  ) {
    _timer_getoverrun ??=
        _dylib.lookupFunction<_c_timer_getoverrun, _dart_timer_getoverrun>(
            'timer_getoverrun');
    return _timer_getoverrun(
      __timerid,
    );
  }

  _dart_timer_getoverrun _timer_getoverrun;

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    _timespec_get ??= _dylib
        .lookupFunction<_c_timespec_get, _dart_timespec_get>('timespec_get');
    return _timespec_get(
      __ts,
      __base,
    );
  }

  _dart_timespec_get _timespec_get;

  void pthread_exit(
    ffi.Pointer<ffi.Void> __retval,
  ) {
    _pthread_exit ??= _dylib
        .lookupFunction<_c_pthread_exit, _dart_pthread_exit>('pthread_exit');
    return _pthread_exit(
      __retval,
    );
  }

  _dart_pthread_exit _pthread_exit;

  int pthread_join(
    int __th,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
  ) {
    _pthread_join ??= _dylib
        .lookupFunction<_c_pthread_join, _dart_pthread_join>('pthread_join');
    return _pthread_join(
      __th,
      __thread_return,
    );
  }

  _dart_pthread_join _pthread_join;

  int pthread_detach(
    int __th,
  ) {
    _pthread_detach ??=
        _dylib.lookupFunction<_c_pthread_detach, _dart_pthread_detach>(
            'pthread_detach');
    return _pthread_detach(
      __th,
    );
  }

  _dart_pthread_detach _pthread_detach;

  int pthread_self() {
    _pthread_self ??= _dylib
        .lookupFunction<_c_pthread_self, _dart_pthread_self>('pthread_self');
    return _pthread_self();
  }

  _dart_pthread_self _pthread_self;

  int pthread_equal(
    int __thread1,
    int __thread2,
  ) {
    _pthread_equal ??= _dylib
        .lookupFunction<_c_pthread_equal, _dart_pthread_equal>('pthread_equal');
    return _pthread_equal(
      __thread1,
      __thread2,
    );
  }

  _dart_pthread_equal _pthread_equal;

  int pthread_setschedparam(
    int __target_thread,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    _pthread_setschedparam ??= _dylib.lookupFunction<_c_pthread_setschedparam,
        _dart_pthread_setschedparam>('pthread_setschedparam');
    return _pthread_setschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  _dart_pthread_setschedparam _pthread_setschedparam;

  int pthread_getschedparam(
    int __target_thread,
    ffi.Pointer<ffi.Int32> __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    _pthread_getschedparam ??= _dylib.lookupFunction<_c_pthread_getschedparam,
        _dart_pthread_getschedparam>('pthread_getschedparam');
    return _pthread_getschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  _dart_pthread_getschedparam _pthread_getschedparam;

  int pthread_setschedprio(
    int __target_thread,
    int __prio,
  ) {
    _pthread_setschedprio ??= _dylib.lookupFunction<_c_pthread_setschedprio,
        _dart_pthread_setschedprio>('pthread_setschedprio');
    return _pthread_setschedprio(
      __target_thread,
      __prio,
    );
  }

  _dart_pthread_setschedprio _pthread_setschedprio;

  int pthread_once(
    ffi.Pointer<ffi.Int32> __once_control,
    ffi.Pointer<ffi.NativeFunction<_typedefC_15>> __init_routine,
  ) {
    _pthread_once ??= _dylib
        .lookupFunction<_c_pthread_once, _dart_pthread_once>('pthread_once');
    return _pthread_once(
      __once_control,
      __init_routine,
    );
  }

  _dart_pthread_once _pthread_once;

  int pthread_setcancelstate(
    int __state,
    ffi.Pointer<ffi.Int32> __oldstate,
  ) {
    _pthread_setcancelstate ??= _dylib.lookupFunction<_c_pthread_setcancelstate,
        _dart_pthread_setcancelstate>('pthread_setcancelstate');
    return _pthread_setcancelstate(
      __state,
      __oldstate,
    );
  }

  _dart_pthread_setcancelstate _pthread_setcancelstate;

  int pthread_setcanceltype(
    int __type,
    ffi.Pointer<ffi.Int32> __oldtype,
  ) {
    _pthread_setcanceltype ??= _dylib.lookupFunction<_c_pthread_setcanceltype,
        _dart_pthread_setcanceltype>('pthread_setcanceltype');
    return _pthread_setcanceltype(
      __type,
      __oldtype,
    );
  }

  _dart_pthread_setcanceltype _pthread_setcanceltype;

  int pthread_cancel(
    int __th,
  ) {
    _pthread_cancel ??=
        _dylib.lookupFunction<_c_pthread_cancel, _dart_pthread_cancel>(
            'pthread_cancel');
    return _pthread_cancel(
      __th,
    );
  }

  _dart_pthread_cancel _pthread_cancel;

  void pthread_testcancel() {
    _pthread_testcancel ??=
        _dylib.lookupFunction<_c_pthread_testcancel, _dart_pthread_testcancel>(
            'pthread_testcancel');
    return _pthread_testcancel();
  }

  _dart_pthread_testcancel _pthread_testcancel;

  void __pthread_register_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    ___pthread_register_cancel ??= _dylib.lookupFunction<
        _c___pthread_register_cancel,
        _dart___pthread_register_cancel>('__pthread_register_cancel');
    return ___pthread_register_cancel(
      __buf,
    );
  }

  _dart___pthread_register_cancel ___pthread_register_cancel;

  void __pthread_unregister_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    ___pthread_unregister_cancel ??= _dylib.lookupFunction<
        _c___pthread_unregister_cancel,
        _dart___pthread_unregister_cancel>('__pthread_unregister_cancel');
    return ___pthread_unregister_cancel(
      __buf,
    );
  }

  _dart___pthread_unregister_cancel ___pthread_unregister_cancel;

  void __pthread_unwind_next(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    ___pthread_unwind_next ??= _dylib.lookupFunction<_c___pthread_unwind_next,
        _dart___pthread_unwind_next>('__pthread_unwind_next');
    return ___pthread_unwind_next(
      __buf,
    );
  }

  _dart___pthread_unwind_next ___pthread_unwind_next;

  int __sigsetjmp(
    ffi.Pointer<__jmp_buf_tag> __env,
    int __savemask,
  ) {
    ___sigsetjmp ??=
        _dylib.lookupFunction<_c___sigsetjmp, _dart___sigsetjmp>('__sigsetjmp');
    return ___sigsetjmp(
      __env,
      __savemask,
    );
  }

  _dart___sigsetjmp ___sigsetjmp;

  int pthread_spin_init(
    ffi.Pointer<ffi.Int32> __lock,
    int __pshared,
  ) {
    _pthread_spin_init ??=
        _dylib.lookupFunction<_c_pthread_spin_init, _dart_pthread_spin_init>(
            'pthread_spin_init');
    return _pthread_spin_init(
      __lock,
      __pshared,
    );
  }

  _dart_pthread_spin_init _pthread_spin_init;

  int pthread_spin_destroy(
    ffi.Pointer<ffi.Int32> __lock,
  ) {
    _pthread_spin_destroy ??= _dylib.lookupFunction<_c_pthread_spin_destroy,
        _dart_pthread_spin_destroy>('pthread_spin_destroy');
    return _pthread_spin_destroy(
      __lock,
    );
  }

  _dart_pthread_spin_destroy _pthread_spin_destroy;

  int pthread_spin_lock(
    ffi.Pointer<ffi.Int32> __lock,
  ) {
    _pthread_spin_lock ??=
        _dylib.lookupFunction<_c_pthread_spin_lock, _dart_pthread_spin_lock>(
            'pthread_spin_lock');
    return _pthread_spin_lock(
      __lock,
    );
  }

  _dart_pthread_spin_lock _pthread_spin_lock;

  int pthread_spin_trylock(
    ffi.Pointer<ffi.Int32> __lock,
  ) {
    _pthread_spin_trylock ??= _dylib.lookupFunction<_c_pthread_spin_trylock,
        _dart_pthread_spin_trylock>('pthread_spin_trylock');
    return _pthread_spin_trylock(
      __lock,
    );
  }

  _dart_pthread_spin_trylock _pthread_spin_trylock;

  int pthread_spin_unlock(
    ffi.Pointer<ffi.Int32> __lock,
  ) {
    _pthread_spin_unlock ??= _dylib.lookupFunction<_c_pthread_spin_unlock,
        _dart_pthread_spin_unlock>('pthread_spin_unlock');
    return _pthread_spin_unlock(
      __lock,
    );
  }

  _dart_pthread_spin_unlock _pthread_spin_unlock;

  int pthread_key_create(
    ffi.Pointer<ffi.Uint32> __key,
    ffi.Pointer<ffi.NativeFunction<_typedefC_17>> __destr_function,
  ) {
    _pthread_key_create ??=
        _dylib.lookupFunction<_c_pthread_key_create, _dart_pthread_key_create>(
            'pthread_key_create');
    return _pthread_key_create(
      __key,
      __destr_function,
    );
  }

  _dart_pthread_key_create _pthread_key_create;

  int pthread_key_delete(
    int __key,
  ) {
    _pthread_key_delete ??=
        _dylib.lookupFunction<_c_pthread_key_delete, _dart_pthread_key_delete>(
            'pthread_key_delete');
    return _pthread_key_delete(
      __key,
    );
  }

  _dart_pthread_key_delete _pthread_key_delete;

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int __key,
  ) {
    _pthread_getspecific ??= _dylib.lookupFunction<_c_pthread_getspecific,
        _dart_pthread_getspecific>('pthread_getspecific');
    return _pthread_getspecific(
      __key,
    );
  }

  _dart_pthread_getspecific _pthread_getspecific;

  int pthread_setspecific(
    int __key,
    ffi.Pointer<ffi.Void> __pointer,
  ) {
    _pthread_setspecific ??= _dylib.lookupFunction<_c_pthread_setspecific,
        _dart_pthread_setspecific>('pthread_setspecific');
    return _pthread_setspecific(
      __key,
      __pointer,
    );
  }

  _dart_pthread_setspecific _pthread_setspecific;

  int pthread_getcpuclockid(
    int __thread_id,
    ffi.Pointer<ffi.Int32> __clock_id,
  ) {
    _pthread_getcpuclockid ??= _dylib.lookupFunction<_c_pthread_getcpuclockid,
        _dart_pthread_getcpuclockid>('pthread_getcpuclockid');
    return _pthread_getcpuclockid(
      __thread_id,
      __clock_id,
    );
  }

  _dart_pthread_getcpuclockid _pthread_getcpuclockid;

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<_typedefC_18>> __prepare,
    ffi.Pointer<ffi.NativeFunction<_typedefC_19>> __parent,
    ffi.Pointer<ffi.NativeFunction<_typedefC_20>> __child,
  ) {
    _pthread_atfork ??=
        _dylib.lookupFunction<_c_pthread_atfork, _dart_pthread_atfork>(
            'pthread_atfork');
    return _pthread_atfork(
      __prepare,
      __parent,
      __child,
    );
  }

  _dart_pthread_atfork _pthread_atfork;

  void xcb_char2b_next(
    ffi.Pointer<xcb_char2b_iterator_t> i,
  ) {
    _xcb_char2b_next ??=
        _dylib.lookupFunction<_c_xcb_char2b_next, _dart_xcb_char2b_next>(
            'xcb_char2b_next');
    return _xcb_char2b_next(
      i,
    );
  }

  _dart_xcb_char2b_next _xcb_char2b_next;

  void xcb_window_next(
    ffi.Pointer<xcb_window_iterator_t> i,
  ) {
    _xcb_window_next ??=
        _dylib.lookupFunction<_c_xcb_window_next, _dart_xcb_window_next>(
            'xcb_window_next');
    return _xcb_window_next(
      i,
    );
  }

  _dart_xcb_window_next _xcb_window_next;

  void xcb_pixmap_next(
    ffi.Pointer<xcb_pixmap_iterator_t> i,
  ) {
    _xcb_pixmap_next ??=
        _dylib.lookupFunction<_c_xcb_pixmap_next, _dart_xcb_pixmap_next>(
            'xcb_pixmap_next');
    return _xcb_pixmap_next(
      i,
    );
  }

  _dart_xcb_pixmap_next _xcb_pixmap_next;

  void xcb_cursor_next(
    ffi.Pointer<xcb_cursor_iterator_t> i,
  ) {
    _xcb_cursor_next ??=
        _dylib.lookupFunction<_c_xcb_cursor_next, _dart_xcb_cursor_next>(
            'xcb_cursor_next');
    return _xcb_cursor_next(
      i,
    );
  }

  _dart_xcb_cursor_next _xcb_cursor_next;

  void xcb_font_next(
    ffi.Pointer<xcb_font_iterator_t> i,
  ) {
    _xcb_font_next ??= _dylib
        .lookupFunction<_c_xcb_font_next, _dart_xcb_font_next>('xcb_font_next');
    return _xcb_font_next(
      i,
    );
  }

  _dart_xcb_font_next _xcb_font_next;

  void xcb_gcontext_next(
    ffi.Pointer<xcb_gcontext_iterator_t> i,
  ) {
    _xcb_gcontext_next ??=
        _dylib.lookupFunction<_c_xcb_gcontext_next, _dart_xcb_gcontext_next>(
            'xcb_gcontext_next');
    return _xcb_gcontext_next(
      i,
    );
  }

  _dart_xcb_gcontext_next _xcb_gcontext_next;

  void xcb_colormap_next(
    ffi.Pointer<xcb_colormap_iterator_t> i,
  ) {
    _xcb_colormap_next ??=
        _dylib.lookupFunction<_c_xcb_colormap_next, _dart_xcb_colormap_next>(
            'xcb_colormap_next');
    return _xcb_colormap_next(
      i,
    );
  }

  _dart_xcb_colormap_next _xcb_colormap_next;

  void xcb_atom_next(
    ffi.Pointer<xcb_atom_iterator_t> i,
  ) {
    _xcb_atom_next ??= _dylib
        .lookupFunction<_c_xcb_atom_next, _dart_xcb_atom_next>('xcb_atom_next');
    return _xcb_atom_next(
      i,
    );
  }

  _dart_xcb_atom_next _xcb_atom_next;

  void xcb_drawable_next(
    ffi.Pointer<xcb_drawable_iterator_t> i,
  ) {
    _xcb_drawable_next ??=
        _dylib.lookupFunction<_c_xcb_drawable_next, _dart_xcb_drawable_next>(
            'xcb_drawable_next');
    return _xcb_drawable_next(
      i,
    );
  }

  _dart_xcb_drawable_next _xcb_drawable_next;

  void xcb_fontable_next(
    ffi.Pointer<xcb_fontable_iterator_t> i,
  ) {
    _xcb_fontable_next ??=
        _dylib.lookupFunction<_c_xcb_fontable_next, _dart_xcb_fontable_next>(
            'xcb_fontable_next');
    return _xcb_fontable_next(
      i,
    );
  }

  _dart_xcb_fontable_next _xcb_fontable_next;

  void xcb_bool32_next(
    ffi.Pointer<xcb_bool32_iterator_t> i,
  ) {
    _xcb_bool32_next ??=
        _dylib.lookupFunction<_c_xcb_bool32_next, _dart_xcb_bool32_next>(
            'xcb_bool32_next');
    return _xcb_bool32_next(
      i,
    );
  }

  _dart_xcb_bool32_next _xcb_bool32_next;

  void xcb_visualid_next(
    ffi.Pointer<xcb_visualid_iterator_t> i,
  ) {
    _xcb_visualid_next ??=
        _dylib.lookupFunction<_c_xcb_visualid_next, _dart_xcb_visualid_next>(
            'xcb_visualid_next');
    return _xcb_visualid_next(
      i,
    );
  }

  _dart_xcb_visualid_next _xcb_visualid_next;

  void xcb_timestamp_next(
    ffi.Pointer<xcb_timestamp_iterator_t> i,
  ) {
    _xcb_timestamp_next ??=
        _dylib.lookupFunction<_c_xcb_timestamp_next, _dart_xcb_timestamp_next>(
            'xcb_timestamp_next');
    return _xcb_timestamp_next(
      i,
    );
  }

  _dart_xcb_timestamp_next _xcb_timestamp_next;

  void xcb_keysym_next(
    ffi.Pointer<xcb_keysym_iterator_t> i,
  ) {
    _xcb_keysym_next ??=
        _dylib.lookupFunction<_c_xcb_keysym_next, _dart_xcb_keysym_next>(
            'xcb_keysym_next');
    return _xcb_keysym_next(
      i,
    );
  }

  _dart_xcb_keysym_next _xcb_keysym_next;

  void xcb_keycode_next(
    ffi.Pointer<xcb_keycode_iterator_t> i,
  ) {
    _xcb_keycode_next ??=
        _dylib.lookupFunction<_c_xcb_keycode_next, _dart_xcb_keycode_next>(
            'xcb_keycode_next');
    return _xcb_keycode_next(
      i,
    );
  }

  _dart_xcb_keycode_next _xcb_keycode_next;

  void xcb_keycode32_next(
    ffi.Pointer<xcb_keycode32_iterator_t> i,
  ) {
    _xcb_keycode32_next ??=
        _dylib.lookupFunction<_c_xcb_keycode32_next, _dart_xcb_keycode32_next>(
            'xcb_keycode32_next');
    return _xcb_keycode32_next(
      i,
    );
  }

  _dart_xcb_keycode32_next _xcb_keycode32_next;

  void xcb_button_next(
    ffi.Pointer<xcb_button_iterator_t> i,
  ) {
    _xcb_button_next ??=
        _dylib.lookupFunction<_c_xcb_button_next, _dart_xcb_button_next>(
            'xcb_button_next');
    return _xcb_button_next(
      i,
    );
  }

  _dart_xcb_button_next _xcb_button_next;

  void xcb_point_next(
    ffi.Pointer<xcb_point_iterator_t> i,
  ) {
    _xcb_point_next ??=
        _dylib.lookupFunction<_c_xcb_point_next, _dart_xcb_point_next>(
            'xcb_point_next');
    return _xcb_point_next(
      i,
    );
  }

  _dart_xcb_point_next _xcb_point_next;

  void xcb_rectangle_next(
    ffi.Pointer<xcb_rectangle_iterator_t> i,
  ) {
    _xcb_rectangle_next ??=
        _dylib.lookupFunction<_c_xcb_rectangle_next, _dart_xcb_rectangle_next>(
            'xcb_rectangle_next');
    return _xcb_rectangle_next(
      i,
    );
  }

  _dart_xcb_rectangle_next _xcb_rectangle_next;

  void xcb_arc_next(
    ffi.Pointer<xcb_arc_iterator_t> i,
  ) {
    _xcb_arc_next ??= _dylib
        .lookupFunction<_c_xcb_arc_next, _dart_xcb_arc_next>('xcb_arc_next');
    return _xcb_arc_next(
      i,
    );
  }

  _dart_xcb_arc_next _xcb_arc_next;

  void xcb_format_next(
    ffi.Pointer<xcb_format_iterator_t> i,
  ) {
    _xcb_format_next ??=
        _dylib.lookupFunction<_c_xcb_format_next, _dart_xcb_format_next>(
            'xcb_format_next');
    return _xcb_format_next(
      i,
    );
  }

  _dart_xcb_format_next _xcb_format_next;

  void xcb_visualtype_next(
    ffi.Pointer<xcb_visualtype_iterator_t> i,
  ) {
    _xcb_visualtype_next ??= _dylib.lookupFunction<_c_xcb_visualtype_next,
        _dart_xcb_visualtype_next>('xcb_visualtype_next');
    return _xcb_visualtype_next(
      i,
    );
  }

  _dart_xcb_visualtype_next _xcb_visualtype_next;

  int xcb_depth_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_depth_sizeof ??=
        _dylib.lookupFunction<_c_xcb_depth_sizeof, _dart_xcb_depth_sizeof>(
            'xcb_depth_sizeof');
    return _xcb_depth_sizeof(
      _buffer,
    );
  }

  _dart_xcb_depth_sizeof _xcb_depth_sizeof;

  ffi.Pointer<xcb_visualtype_t> xcb_depth_visuals(
    ffi.Pointer<xcb_depth_t> R,
  ) {
    _xcb_depth_visuals ??=
        _dylib.lookupFunction<_c_xcb_depth_visuals, _dart_xcb_depth_visuals>(
            'xcb_depth_visuals');
    return _xcb_depth_visuals(
      R,
    );
  }

  _dart_xcb_depth_visuals _xcb_depth_visuals;

  int xcb_depth_visuals_length(
    ffi.Pointer<xcb_depth_t> R,
  ) {
    _xcb_depth_visuals_length ??= _dylib.lookupFunction<
        _c_xcb_depth_visuals_length,
        _dart_xcb_depth_visuals_length>('xcb_depth_visuals_length');
    return _xcb_depth_visuals_length(
      R,
    );
  }

  _dart_xcb_depth_visuals_length _xcb_depth_visuals_length;

  void xcb_depth_next(
    ffi.Pointer<xcb_depth_iterator_t> i,
  ) {
    _xcb_depth_next ??=
        _dylib.lookupFunction<_c_xcb_depth_next, _dart_xcb_depth_next>(
            'xcb_depth_next');
    return _xcb_depth_next(
      i,
    );
  }

  _dart_xcb_depth_next _xcb_depth_next;

  int xcb_screen_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_screen_sizeof ??=
        _dylib.lookupFunction<_c_xcb_screen_sizeof, _dart_xcb_screen_sizeof>(
            'xcb_screen_sizeof');
    return _xcb_screen_sizeof(
      _buffer,
    );
  }

  _dart_xcb_screen_sizeof _xcb_screen_sizeof;

  int xcb_screen_allowed_depths_length(
    ffi.Pointer<xcb_screen_t> R,
  ) {
    _xcb_screen_allowed_depths_length ??= _dylib.lookupFunction<
            _c_xcb_screen_allowed_depths_length,
            _dart_xcb_screen_allowed_depths_length>(
        'xcb_screen_allowed_depths_length');
    return _xcb_screen_allowed_depths_length(
      R,
    );
  }

  _dart_xcb_screen_allowed_depths_length _xcb_screen_allowed_depths_length;

  void xcb_screen_next(
    ffi.Pointer<xcb_screen_iterator_t> i,
  ) {
    _xcb_screen_next ??=
        _dylib.lookupFunction<_c_xcb_screen_next, _dart_xcb_screen_next>(
            'xcb_screen_next');
    return _xcb_screen_next(
      i,
    );
  }

  _dart_xcb_screen_next _xcb_screen_next;

  int xcb_setup_request_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_setup_request_sizeof ??= _dylib.lookupFunction<
        _c_xcb_setup_request_sizeof,
        _dart_xcb_setup_request_sizeof>('xcb_setup_request_sizeof');
    return _xcb_setup_request_sizeof(
      _buffer,
    );
  }

  _dart_xcb_setup_request_sizeof _xcb_setup_request_sizeof;

  ffi.Pointer<ffi.Int8> xcb_setup_request_authorization_protocol_name(
    ffi.Pointer<xcb_setup_request_t> R,
  ) {
    _xcb_setup_request_authorization_protocol_name ??= _dylib.lookupFunction<
            _c_xcb_setup_request_authorization_protocol_name,
            _dart_xcb_setup_request_authorization_protocol_name>(
        'xcb_setup_request_authorization_protocol_name');
    return _xcb_setup_request_authorization_protocol_name(
      R,
    );
  }

  _dart_xcb_setup_request_authorization_protocol_name
      _xcb_setup_request_authorization_protocol_name;

  int xcb_setup_request_authorization_protocol_name_length(
    ffi.Pointer<xcb_setup_request_t> R,
  ) {
    _xcb_setup_request_authorization_protocol_name_length ??=
        _dylib.lookupFunction<
                _c_xcb_setup_request_authorization_protocol_name_length,
                _dart_xcb_setup_request_authorization_protocol_name_length>(
            'xcb_setup_request_authorization_protocol_name_length');
    return _xcb_setup_request_authorization_protocol_name_length(
      R,
    );
  }

  _dart_xcb_setup_request_authorization_protocol_name_length
      _xcb_setup_request_authorization_protocol_name_length;

  ffi.Pointer<ffi.Int8> xcb_setup_request_authorization_protocol_data(
    ffi.Pointer<xcb_setup_request_t> R,
  ) {
    _xcb_setup_request_authorization_protocol_data ??= _dylib.lookupFunction<
            _c_xcb_setup_request_authorization_protocol_data,
            _dart_xcb_setup_request_authorization_protocol_data>(
        'xcb_setup_request_authorization_protocol_data');
    return _xcb_setup_request_authorization_protocol_data(
      R,
    );
  }

  _dart_xcb_setup_request_authorization_protocol_data
      _xcb_setup_request_authorization_protocol_data;

  int xcb_setup_request_authorization_protocol_data_length(
    ffi.Pointer<xcb_setup_request_t> R,
  ) {
    _xcb_setup_request_authorization_protocol_data_length ??=
        _dylib.lookupFunction<
                _c_xcb_setup_request_authorization_protocol_data_length,
                _dart_xcb_setup_request_authorization_protocol_data_length>(
            'xcb_setup_request_authorization_protocol_data_length');
    return _xcb_setup_request_authorization_protocol_data_length(
      R,
    );
  }

  _dart_xcb_setup_request_authorization_protocol_data_length
      _xcb_setup_request_authorization_protocol_data_length;

  void xcb_setup_request_next(
    ffi.Pointer<xcb_setup_request_iterator_t> i,
  ) {
    _xcb_setup_request_next ??= _dylib.lookupFunction<_c_xcb_setup_request_next,
        _dart_xcb_setup_request_next>('xcb_setup_request_next');
    return _xcb_setup_request_next(
      i,
    );
  }

  _dart_xcb_setup_request_next _xcb_setup_request_next;

  int xcb_setup_failed_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_setup_failed_sizeof ??= _dylib.lookupFunction<
        _c_xcb_setup_failed_sizeof,
        _dart_xcb_setup_failed_sizeof>('xcb_setup_failed_sizeof');
    return _xcb_setup_failed_sizeof(
      _buffer,
    );
  }

  _dart_xcb_setup_failed_sizeof _xcb_setup_failed_sizeof;

  ffi.Pointer<ffi.Int8> xcb_setup_failed_reason(
    ffi.Pointer<xcb_setup_failed_t> R,
  ) {
    _xcb_setup_failed_reason ??= _dylib.lookupFunction<
        _c_xcb_setup_failed_reason,
        _dart_xcb_setup_failed_reason>('xcb_setup_failed_reason');
    return _xcb_setup_failed_reason(
      R,
    );
  }

  _dart_xcb_setup_failed_reason _xcb_setup_failed_reason;

  int xcb_setup_failed_reason_length(
    ffi.Pointer<xcb_setup_failed_t> R,
  ) {
    _xcb_setup_failed_reason_length ??= _dylib.lookupFunction<
        _c_xcb_setup_failed_reason_length,
        _dart_xcb_setup_failed_reason_length>('xcb_setup_failed_reason_length');
    return _xcb_setup_failed_reason_length(
      R,
    );
  }

  _dart_xcb_setup_failed_reason_length _xcb_setup_failed_reason_length;

  void xcb_setup_failed_next(
    ffi.Pointer<xcb_setup_failed_iterator_t> i,
  ) {
    _xcb_setup_failed_next ??= _dylib.lookupFunction<_c_xcb_setup_failed_next,
        _dart_xcb_setup_failed_next>('xcb_setup_failed_next');
    return _xcb_setup_failed_next(
      i,
    );
  }

  _dart_xcb_setup_failed_next _xcb_setup_failed_next;

  int xcb_setup_authenticate_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_setup_authenticate_sizeof ??= _dylib.lookupFunction<
        _c_xcb_setup_authenticate_sizeof,
        _dart_xcb_setup_authenticate_sizeof>('xcb_setup_authenticate_sizeof');
    return _xcb_setup_authenticate_sizeof(
      _buffer,
    );
  }

  _dart_xcb_setup_authenticate_sizeof _xcb_setup_authenticate_sizeof;

  ffi.Pointer<ffi.Int8> xcb_setup_authenticate_reason(
    ffi.Pointer<xcb_setup_authenticate_t> R,
  ) {
    _xcb_setup_authenticate_reason ??= _dylib.lookupFunction<
        _c_xcb_setup_authenticate_reason,
        _dart_xcb_setup_authenticate_reason>('xcb_setup_authenticate_reason');
    return _xcb_setup_authenticate_reason(
      R,
    );
  }

  _dart_xcb_setup_authenticate_reason _xcb_setup_authenticate_reason;

  int xcb_setup_authenticate_reason_length(
    ffi.Pointer<xcb_setup_authenticate_t> R,
  ) {
    _xcb_setup_authenticate_reason_length ??= _dylib.lookupFunction<
            _c_xcb_setup_authenticate_reason_length,
            _dart_xcb_setup_authenticate_reason_length>(
        'xcb_setup_authenticate_reason_length');
    return _xcb_setup_authenticate_reason_length(
      R,
    );
  }

  _dart_xcb_setup_authenticate_reason_length
      _xcb_setup_authenticate_reason_length;

  void xcb_setup_authenticate_next(
    ffi.Pointer<xcb_setup_authenticate_iterator_t> i,
  ) {
    _xcb_setup_authenticate_next ??= _dylib.lookupFunction<
        _c_xcb_setup_authenticate_next,
        _dart_xcb_setup_authenticate_next>('xcb_setup_authenticate_next');
    return _xcb_setup_authenticate_next(
      i,
    );
  }

  _dart_xcb_setup_authenticate_next _xcb_setup_authenticate_next;

  int xcb_setup_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_setup_sizeof ??=
        _dylib.lookupFunction<_c_xcb_setup_sizeof, _dart_xcb_setup_sizeof>(
            'xcb_setup_sizeof');
    return _xcb_setup_sizeof(
      _buffer,
    );
  }

  _dart_xcb_setup_sizeof _xcb_setup_sizeof;

  ffi.Pointer<ffi.Int8> xcb_setup_vendor(
    ffi.Pointer<xcb_setup_t> R,
  ) {
    _xcb_setup_vendor ??=
        _dylib.lookupFunction<_c_xcb_setup_vendor, _dart_xcb_setup_vendor>(
            'xcb_setup_vendor');
    return _xcb_setup_vendor(
      R,
    );
  }

  _dart_xcb_setup_vendor _xcb_setup_vendor;

  int xcb_setup_vendor_length(
    ffi.Pointer<xcb_setup_t> R,
  ) {
    _xcb_setup_vendor_length ??= _dylib.lookupFunction<
        _c_xcb_setup_vendor_length,
        _dart_xcb_setup_vendor_length>('xcb_setup_vendor_length');
    return _xcb_setup_vendor_length(
      R,
    );
  }

  _dart_xcb_setup_vendor_length _xcb_setup_vendor_length;

  ffi.Pointer<xcb_format_t> xcb_setup_pixmap_formats(
    ffi.Pointer<xcb_setup_t> R,
  ) {
    _xcb_setup_pixmap_formats ??= _dylib.lookupFunction<
        _c_xcb_setup_pixmap_formats,
        _dart_xcb_setup_pixmap_formats>('xcb_setup_pixmap_formats');
    return _xcb_setup_pixmap_formats(
      R,
    );
  }

  _dart_xcb_setup_pixmap_formats _xcb_setup_pixmap_formats;

  int xcb_setup_pixmap_formats_length(
    ffi.Pointer<xcb_setup_t> R,
  ) {
    _xcb_setup_pixmap_formats_length ??= _dylib.lookupFunction<
            _c_xcb_setup_pixmap_formats_length,
            _dart_xcb_setup_pixmap_formats_length>(
        'xcb_setup_pixmap_formats_length');
    return _xcb_setup_pixmap_formats_length(
      R,
    );
  }

  _dart_xcb_setup_pixmap_formats_length _xcb_setup_pixmap_formats_length;

  int xcb_setup_roots_length(
    ffi.Pointer<xcb_setup_t> R,
  ) {
    _xcb_setup_roots_length ??= _dylib.lookupFunction<_c_xcb_setup_roots_length,
        _dart_xcb_setup_roots_length>('xcb_setup_roots_length');
    return _xcb_setup_roots_length(
      R,
    );
  }

  _dart_xcb_setup_roots_length _xcb_setup_roots_length;

  void xcb_setup_next(
    ffi.Pointer<xcb_setup_iterator_t> i,
  ) {
    _xcb_setup_next ??=
        _dylib.lookupFunction<_c_xcb_setup_next, _dart_xcb_setup_next>(
            'xcb_setup_next');
    return _xcb_setup_next(
      i,
    );
  }

  _dart_xcb_setup_next _xcb_setup_next;

  void xcb_client_message_data_next(
    ffi.Pointer<xcb_client_message_data_iterator_t> i,
  ) {
    _xcb_client_message_data_next ??= _dylib.lookupFunction<
        _c_xcb_client_message_data_next,
        _dart_xcb_client_message_data_next>('xcb_client_message_data_next');
    return _xcb_client_message_data_next(
      i,
    );
  }

  _dart_xcb_client_message_data_next _xcb_client_message_data_next;

  int xcb_create_window_value_list_serialize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
    int value_mask,
    ffi.Pointer<xcb_create_window_value_list_t> _aux,
  ) {
    _xcb_create_window_value_list_serialize ??= _dylib.lookupFunction<
            _c_xcb_create_window_value_list_serialize,
            _dart_xcb_create_window_value_list_serialize>(
        'xcb_create_window_value_list_serialize');
    return _xcb_create_window_value_list_serialize(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_create_window_value_list_serialize
      _xcb_create_window_value_list_serialize;

  int xcb_create_window_value_list_unpack(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
    ffi.Pointer<xcb_create_window_value_list_t> _aux,
  ) {
    _xcb_create_window_value_list_unpack ??= _dylib.lookupFunction<
            _c_xcb_create_window_value_list_unpack,
            _dart_xcb_create_window_value_list_unpack>(
        'xcb_create_window_value_list_unpack');
    return _xcb_create_window_value_list_unpack(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_create_window_value_list_unpack
      _xcb_create_window_value_list_unpack;

  int xcb_create_window_value_list_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
  ) {
    _xcb_create_window_value_list_sizeof ??= _dylib.lookupFunction<
            _c_xcb_create_window_value_list_sizeof,
            _dart_xcb_create_window_value_list_sizeof>(
        'xcb_create_window_value_list_sizeof');
    return _xcb_create_window_value_list_sizeof(
      _buffer,
      value_mask,
    );
  }

  _dart_xcb_create_window_value_list_sizeof
      _xcb_create_window_value_list_sizeof;

  int xcb_create_window_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_create_window_sizeof ??= _dylib.lookupFunction<
        _c_xcb_create_window_sizeof,
        _dart_xcb_create_window_sizeof>('xcb_create_window_sizeof');
    return _xcb_create_window_sizeof(
      _buffer,
    );
  }

  _dart_xcb_create_window_sizeof _xcb_create_window_sizeof;

  ffi.Pointer<ffi.Void> xcb_create_window_value_list(
    ffi.Pointer<xcb_create_window_request_t> R,
  ) {
    _xcb_create_window_value_list ??= _dylib.lookupFunction<
        _c_xcb_create_window_value_list,
        _dart_xcb_create_window_value_list>('xcb_create_window_value_list');
    return _xcb_create_window_value_list(
      R,
    );
  }

  _dart_xcb_create_window_value_list _xcb_create_window_value_list;

  int xcb_change_window_attributes_value_list_serialize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
    int value_mask,
    ffi.Pointer<xcb_change_window_attributes_value_list_t> _aux,
  ) {
    _xcb_change_window_attributes_value_list_serialize ??=
        _dylib.lookupFunction<
                _c_xcb_change_window_attributes_value_list_serialize,
                _dart_xcb_change_window_attributes_value_list_serialize>(
            'xcb_change_window_attributes_value_list_serialize');
    return _xcb_change_window_attributes_value_list_serialize(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_change_window_attributes_value_list_serialize
      _xcb_change_window_attributes_value_list_serialize;

  int xcb_change_window_attributes_value_list_unpack(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
    ffi.Pointer<xcb_change_window_attributes_value_list_t> _aux,
  ) {
    _xcb_change_window_attributes_value_list_unpack ??= _dylib.lookupFunction<
            _c_xcb_change_window_attributes_value_list_unpack,
            _dart_xcb_change_window_attributes_value_list_unpack>(
        'xcb_change_window_attributes_value_list_unpack');
    return _xcb_change_window_attributes_value_list_unpack(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_change_window_attributes_value_list_unpack
      _xcb_change_window_attributes_value_list_unpack;

  int xcb_change_window_attributes_value_list_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
  ) {
    _xcb_change_window_attributes_value_list_sizeof ??= _dylib.lookupFunction<
            _c_xcb_change_window_attributes_value_list_sizeof,
            _dart_xcb_change_window_attributes_value_list_sizeof>(
        'xcb_change_window_attributes_value_list_sizeof');
    return _xcb_change_window_attributes_value_list_sizeof(
      _buffer,
      value_mask,
    );
  }

  _dart_xcb_change_window_attributes_value_list_sizeof
      _xcb_change_window_attributes_value_list_sizeof;

  int xcb_change_window_attributes_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_change_window_attributes_sizeof ??= _dylib.lookupFunction<
            _c_xcb_change_window_attributes_sizeof,
            _dart_xcb_change_window_attributes_sizeof>(
        'xcb_change_window_attributes_sizeof');
    return _xcb_change_window_attributes_sizeof(
      _buffer,
    );
  }

  _dart_xcb_change_window_attributes_sizeof
      _xcb_change_window_attributes_sizeof;

  ffi.Pointer<ffi.Void> xcb_change_window_attributes_value_list(
    ffi.Pointer<xcb_change_window_attributes_request_t> R,
  ) {
    _xcb_change_window_attributes_value_list ??= _dylib.lookupFunction<
            _c_xcb_change_window_attributes_value_list,
            _dart_xcb_change_window_attributes_value_list>(
        'xcb_change_window_attributes_value_list');
    return _xcb_change_window_attributes_value_list(
      R,
    );
  }

  _dart_xcb_change_window_attributes_value_list
      _xcb_change_window_attributes_value_list;

  int xcb_configure_window_value_list_serialize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
    int value_mask,
    ffi.Pointer<xcb_configure_window_value_list_t> _aux,
  ) {
    _xcb_configure_window_value_list_serialize ??= _dylib.lookupFunction<
            _c_xcb_configure_window_value_list_serialize,
            _dart_xcb_configure_window_value_list_serialize>(
        'xcb_configure_window_value_list_serialize');
    return _xcb_configure_window_value_list_serialize(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_configure_window_value_list_serialize
      _xcb_configure_window_value_list_serialize;

  int xcb_configure_window_value_list_unpack(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
    ffi.Pointer<xcb_configure_window_value_list_t> _aux,
  ) {
    _xcb_configure_window_value_list_unpack ??= _dylib.lookupFunction<
            _c_xcb_configure_window_value_list_unpack,
            _dart_xcb_configure_window_value_list_unpack>(
        'xcb_configure_window_value_list_unpack');
    return _xcb_configure_window_value_list_unpack(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_configure_window_value_list_unpack
      _xcb_configure_window_value_list_unpack;

  int xcb_configure_window_value_list_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
  ) {
    _xcb_configure_window_value_list_sizeof ??= _dylib.lookupFunction<
            _c_xcb_configure_window_value_list_sizeof,
            _dart_xcb_configure_window_value_list_sizeof>(
        'xcb_configure_window_value_list_sizeof');
    return _xcb_configure_window_value_list_sizeof(
      _buffer,
      value_mask,
    );
  }

  _dart_xcb_configure_window_value_list_sizeof
      _xcb_configure_window_value_list_sizeof;

  int xcb_configure_window_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_configure_window_sizeof ??= _dylib.lookupFunction<
        _c_xcb_configure_window_sizeof,
        _dart_xcb_configure_window_sizeof>('xcb_configure_window_sizeof');
    return _xcb_configure_window_sizeof(
      _buffer,
    );
  }

  _dart_xcb_configure_window_sizeof _xcb_configure_window_sizeof;

  ffi.Pointer<ffi.Void> xcb_configure_window_value_list(
    ffi.Pointer<xcb_configure_window_request_t> R,
  ) {
    _xcb_configure_window_value_list ??= _dylib.lookupFunction<
            _c_xcb_configure_window_value_list,
            _dart_xcb_configure_window_value_list>(
        'xcb_configure_window_value_list');
    return _xcb_configure_window_value_list(
      R,
    );
  }

  _dart_xcb_configure_window_value_list _xcb_configure_window_value_list;

  int xcb_query_tree_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_query_tree_sizeof ??= _dylib.lookupFunction<_c_xcb_query_tree_sizeof,
        _dart_xcb_query_tree_sizeof>('xcb_query_tree_sizeof');
    return _xcb_query_tree_sizeof(
      _buffer,
    );
  }

  _dart_xcb_query_tree_sizeof _xcb_query_tree_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_query_tree_children(
    ffi.Pointer<xcb_query_tree_reply_t> R,
  ) {
    _xcb_query_tree_children ??= _dylib.lookupFunction<
        _c_xcb_query_tree_children,
        _dart_xcb_query_tree_children>('xcb_query_tree_children');
    return _xcb_query_tree_children(
      R,
    );
  }

  _dart_xcb_query_tree_children _xcb_query_tree_children;

  int xcb_query_tree_children_length(
    ffi.Pointer<xcb_query_tree_reply_t> R,
  ) {
    _xcb_query_tree_children_length ??= _dylib.lookupFunction<
        _c_xcb_query_tree_children_length,
        _dart_xcb_query_tree_children_length>('xcb_query_tree_children_length');
    return _xcb_query_tree_children_length(
      R,
    );
  }

  _dart_xcb_query_tree_children_length _xcb_query_tree_children_length;

  int xcb_intern_atom_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_intern_atom_sizeof ??= _dylib.lookupFunction<_c_xcb_intern_atom_sizeof,
        _dart_xcb_intern_atom_sizeof>('xcb_intern_atom_sizeof');
    return _xcb_intern_atom_sizeof(
      _buffer,
    );
  }

  _dart_xcb_intern_atom_sizeof _xcb_intern_atom_sizeof;

  int xcb_get_atom_name_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_get_atom_name_sizeof ??= _dylib.lookupFunction<
        _c_xcb_get_atom_name_sizeof,
        _dart_xcb_get_atom_name_sizeof>('xcb_get_atom_name_sizeof');
    return _xcb_get_atom_name_sizeof(
      _buffer,
    );
  }

  _dart_xcb_get_atom_name_sizeof _xcb_get_atom_name_sizeof;

  ffi.Pointer<ffi.Int8> xcb_get_atom_name_name(
    ffi.Pointer<xcb_get_atom_name_reply_t> R,
  ) {
    _xcb_get_atom_name_name ??= _dylib.lookupFunction<_c_xcb_get_atom_name_name,
        _dart_xcb_get_atom_name_name>('xcb_get_atom_name_name');
    return _xcb_get_atom_name_name(
      R,
    );
  }

  _dart_xcb_get_atom_name_name _xcb_get_atom_name_name;

  int xcb_get_atom_name_name_length(
    ffi.Pointer<xcb_get_atom_name_reply_t> R,
  ) {
    _xcb_get_atom_name_name_length ??= _dylib.lookupFunction<
        _c_xcb_get_atom_name_name_length,
        _dart_xcb_get_atom_name_name_length>('xcb_get_atom_name_name_length');
    return _xcb_get_atom_name_name_length(
      R,
    );
  }

  _dart_xcb_get_atom_name_name_length _xcb_get_atom_name_name_length;

  int xcb_change_property_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_change_property_sizeof ??= _dylib.lookupFunction<
        _c_xcb_change_property_sizeof,
        _dart_xcb_change_property_sizeof>('xcb_change_property_sizeof');
    return _xcb_change_property_sizeof(
      _buffer,
    );
  }

  _dart_xcb_change_property_sizeof _xcb_change_property_sizeof;

  ffi.Pointer<ffi.Void> xcb_change_property_data(
    ffi.Pointer<xcb_change_property_request_t> R,
  ) {
    _xcb_change_property_data ??= _dylib.lookupFunction<
        _c_xcb_change_property_data,
        _dart_xcb_change_property_data>('xcb_change_property_data');
    return _xcb_change_property_data(
      R,
    );
  }

  _dart_xcb_change_property_data _xcb_change_property_data;

  int xcb_change_property_data_length(
    ffi.Pointer<xcb_change_property_request_t> R,
  ) {
    _xcb_change_property_data_length ??= _dylib.lookupFunction<
            _c_xcb_change_property_data_length,
            _dart_xcb_change_property_data_length>(
        'xcb_change_property_data_length');
    return _xcb_change_property_data_length(
      R,
    );
  }

  _dart_xcb_change_property_data_length _xcb_change_property_data_length;

  int xcb_get_property_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_get_property_sizeof ??= _dylib.lookupFunction<
        _c_xcb_get_property_sizeof,
        _dart_xcb_get_property_sizeof>('xcb_get_property_sizeof');
    return _xcb_get_property_sizeof(
      _buffer,
    );
  }

  _dart_xcb_get_property_sizeof _xcb_get_property_sizeof;

  ffi.Pointer<ffi.Void> xcb_get_property_value(
    ffi.Pointer<xcb_get_property_reply_t> R,
  ) {
    _xcb_get_property_value ??= _dylib.lookupFunction<_c_xcb_get_property_value,
        _dart_xcb_get_property_value>('xcb_get_property_value');
    return _xcb_get_property_value(
      R,
    );
  }

  _dart_xcb_get_property_value _xcb_get_property_value;

  int xcb_get_property_value_length(
    ffi.Pointer<xcb_get_property_reply_t> R,
  ) {
    _xcb_get_property_value_length ??= _dylib.lookupFunction<
        _c_xcb_get_property_value_length,
        _dart_xcb_get_property_value_length>('xcb_get_property_value_length');
    return _xcb_get_property_value_length(
      R,
    );
  }

  _dart_xcb_get_property_value_length _xcb_get_property_value_length;

  int xcb_list_properties_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_list_properties_sizeof ??= _dylib.lookupFunction<
        _c_xcb_list_properties_sizeof,
        _dart_xcb_list_properties_sizeof>('xcb_list_properties_sizeof');
    return _xcb_list_properties_sizeof(
      _buffer,
    );
  }

  _dart_xcb_list_properties_sizeof _xcb_list_properties_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_list_properties_atoms(
    ffi.Pointer<xcb_list_properties_reply_t> R,
  ) {
    _xcb_list_properties_atoms ??= _dylib.lookupFunction<
        _c_xcb_list_properties_atoms,
        _dart_xcb_list_properties_atoms>('xcb_list_properties_atoms');
    return _xcb_list_properties_atoms(
      R,
    );
  }

  _dart_xcb_list_properties_atoms _xcb_list_properties_atoms;

  int xcb_list_properties_atoms_length(
    ffi.Pointer<xcb_list_properties_reply_t> R,
  ) {
    _xcb_list_properties_atoms_length ??= _dylib.lookupFunction<
            _c_xcb_list_properties_atoms_length,
            _dart_xcb_list_properties_atoms_length>(
        'xcb_list_properties_atoms_length');
    return _xcb_list_properties_atoms_length(
      R,
    );
  }

  _dart_xcb_list_properties_atoms_length _xcb_list_properties_atoms_length;

  void xcb_timecoord_next(
    ffi.Pointer<xcb_timecoord_iterator_t> i,
  ) {
    _xcb_timecoord_next ??=
        _dylib.lookupFunction<_c_xcb_timecoord_next, _dart_xcb_timecoord_next>(
            'xcb_timecoord_next');
    return _xcb_timecoord_next(
      i,
    );
  }

  _dart_xcb_timecoord_next _xcb_timecoord_next;

  int xcb_get_motion_events_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_get_motion_events_sizeof ??= _dylib.lookupFunction<
        _c_xcb_get_motion_events_sizeof,
        _dart_xcb_get_motion_events_sizeof>('xcb_get_motion_events_sizeof');
    return _xcb_get_motion_events_sizeof(
      _buffer,
    );
  }

  _dart_xcb_get_motion_events_sizeof _xcb_get_motion_events_sizeof;

  ffi.Pointer<xcb_timecoord_t> xcb_get_motion_events_events(
    ffi.Pointer<xcb_get_motion_events_reply_t> R,
  ) {
    _xcb_get_motion_events_events ??= _dylib.lookupFunction<
        _c_xcb_get_motion_events_events,
        _dart_xcb_get_motion_events_events>('xcb_get_motion_events_events');
    return _xcb_get_motion_events_events(
      R,
    );
  }

  _dart_xcb_get_motion_events_events _xcb_get_motion_events_events;

  int xcb_get_motion_events_events_length(
    ffi.Pointer<xcb_get_motion_events_reply_t> R,
  ) {
    _xcb_get_motion_events_events_length ??= _dylib.lookupFunction<
            _c_xcb_get_motion_events_events_length,
            _dart_xcb_get_motion_events_events_length>(
        'xcb_get_motion_events_events_length');
    return _xcb_get_motion_events_events_length(
      R,
    );
  }

  _dart_xcb_get_motion_events_events_length
      _xcb_get_motion_events_events_length;

  int xcb_open_font_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_open_font_sizeof ??= _dylib.lookupFunction<_c_xcb_open_font_sizeof,
        _dart_xcb_open_font_sizeof>('xcb_open_font_sizeof');
    return _xcb_open_font_sizeof(
      _buffer,
    );
  }

  _dart_xcb_open_font_sizeof _xcb_open_font_sizeof;

  ffi.Pointer<ffi.Int8> xcb_open_font_name(
    ffi.Pointer<xcb_open_font_request_t> R,
  ) {
    _xcb_open_font_name ??=
        _dylib.lookupFunction<_c_xcb_open_font_name, _dart_xcb_open_font_name>(
            'xcb_open_font_name');
    return _xcb_open_font_name(
      R,
    );
  }

  _dart_xcb_open_font_name _xcb_open_font_name;

  int xcb_open_font_name_length(
    ffi.Pointer<xcb_open_font_request_t> R,
  ) {
    _xcb_open_font_name_length ??= _dylib.lookupFunction<
        _c_xcb_open_font_name_length,
        _dart_xcb_open_font_name_length>('xcb_open_font_name_length');
    return _xcb_open_font_name_length(
      R,
    );
  }

  _dart_xcb_open_font_name_length _xcb_open_font_name_length;

  void xcb_fontprop_next(
    ffi.Pointer<xcb_fontprop_iterator_t> i,
  ) {
    _xcb_fontprop_next ??=
        _dylib.lookupFunction<_c_xcb_fontprop_next, _dart_xcb_fontprop_next>(
            'xcb_fontprop_next');
    return _xcb_fontprop_next(
      i,
    );
  }

  _dart_xcb_fontprop_next _xcb_fontprop_next;

  void xcb_charinfo_next(
    ffi.Pointer<xcb_charinfo_iterator_t> i,
  ) {
    _xcb_charinfo_next ??=
        _dylib.lookupFunction<_c_xcb_charinfo_next, _dart_xcb_charinfo_next>(
            'xcb_charinfo_next');
    return _xcb_charinfo_next(
      i,
    );
  }

  _dart_xcb_charinfo_next _xcb_charinfo_next;

  int xcb_query_font_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_query_font_sizeof ??= _dylib.lookupFunction<_c_xcb_query_font_sizeof,
        _dart_xcb_query_font_sizeof>('xcb_query_font_sizeof');
    return _xcb_query_font_sizeof(
      _buffer,
    );
  }

  _dart_xcb_query_font_sizeof _xcb_query_font_sizeof;

  ffi.Pointer<xcb_fontprop_t> xcb_query_font_properties(
    ffi.Pointer<xcb_query_font_reply_t> R,
  ) {
    _xcb_query_font_properties ??= _dylib.lookupFunction<
        _c_xcb_query_font_properties,
        _dart_xcb_query_font_properties>('xcb_query_font_properties');
    return _xcb_query_font_properties(
      R,
    );
  }

  _dart_xcb_query_font_properties _xcb_query_font_properties;

  int xcb_query_font_properties_length(
    ffi.Pointer<xcb_query_font_reply_t> R,
  ) {
    _xcb_query_font_properties_length ??= _dylib.lookupFunction<
            _c_xcb_query_font_properties_length,
            _dart_xcb_query_font_properties_length>(
        'xcb_query_font_properties_length');
    return _xcb_query_font_properties_length(
      R,
    );
  }

  _dart_xcb_query_font_properties_length _xcb_query_font_properties_length;

  ffi.Pointer<xcb_charinfo_t> xcb_query_font_char_infos(
    ffi.Pointer<xcb_query_font_reply_t> R,
  ) {
    _xcb_query_font_char_infos ??= _dylib.lookupFunction<
        _c_xcb_query_font_char_infos,
        _dart_xcb_query_font_char_infos>('xcb_query_font_char_infos');
    return _xcb_query_font_char_infos(
      R,
    );
  }

  _dart_xcb_query_font_char_infos _xcb_query_font_char_infos;

  int xcb_query_font_char_infos_length(
    ffi.Pointer<xcb_query_font_reply_t> R,
  ) {
    _xcb_query_font_char_infos_length ??= _dylib.lookupFunction<
            _c_xcb_query_font_char_infos_length,
            _dart_xcb_query_font_char_infos_length>(
        'xcb_query_font_char_infos_length');
    return _xcb_query_font_char_infos_length(
      R,
    );
  }

  _dart_xcb_query_font_char_infos_length _xcb_query_font_char_infos_length;

  int xcb_query_text_extents_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int string_len,
  ) {
    _xcb_query_text_extents_sizeof ??= _dylib.lookupFunction<
        _c_xcb_query_text_extents_sizeof,
        _dart_xcb_query_text_extents_sizeof>('xcb_query_text_extents_sizeof');
    return _xcb_query_text_extents_sizeof(
      _buffer,
      string_len,
    );
  }

  _dart_xcb_query_text_extents_sizeof _xcb_query_text_extents_sizeof;

  int xcb_str_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_str_sizeof ??=
        _dylib.lookupFunction<_c_xcb_str_sizeof, _dart_xcb_str_sizeof>(
            'xcb_str_sizeof');
    return _xcb_str_sizeof(
      _buffer,
    );
  }

  _dart_xcb_str_sizeof _xcb_str_sizeof;

  ffi.Pointer<ffi.Int8> xcb_str_name(
    ffi.Pointer<xcb_str_t> R,
  ) {
    _xcb_str_name ??= _dylib
        .lookupFunction<_c_xcb_str_name, _dart_xcb_str_name>('xcb_str_name');
    return _xcb_str_name(
      R,
    );
  }

  _dart_xcb_str_name _xcb_str_name;

  int xcb_str_name_length(
    ffi.Pointer<xcb_str_t> R,
  ) {
    _xcb_str_name_length ??= _dylib.lookupFunction<_c_xcb_str_name_length,
        _dart_xcb_str_name_length>('xcb_str_name_length');
    return _xcb_str_name_length(
      R,
    );
  }

  _dart_xcb_str_name_length _xcb_str_name_length;

  void xcb_str_next(
    ffi.Pointer<xcb_str_iterator_t> i,
  ) {
    _xcb_str_next ??= _dylib
        .lookupFunction<_c_xcb_str_next, _dart_xcb_str_next>('xcb_str_next');
    return _xcb_str_next(
      i,
    );
  }

  _dart_xcb_str_next _xcb_str_next;

  int xcb_list_fonts_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_list_fonts_sizeof ??= _dylib.lookupFunction<_c_xcb_list_fonts_sizeof,
        _dart_xcb_list_fonts_sizeof>('xcb_list_fonts_sizeof');
    return _xcb_list_fonts_sizeof(
      _buffer,
    );
  }

  _dart_xcb_list_fonts_sizeof _xcb_list_fonts_sizeof;

  int xcb_list_fonts_names_length(
    ffi.Pointer<xcb_list_fonts_reply_t> R,
  ) {
    _xcb_list_fonts_names_length ??= _dylib.lookupFunction<
        _c_xcb_list_fonts_names_length,
        _dart_xcb_list_fonts_names_length>('xcb_list_fonts_names_length');
    return _xcb_list_fonts_names_length(
      R,
    );
  }

  _dart_xcb_list_fonts_names_length _xcb_list_fonts_names_length;

  int xcb_list_fonts_with_info_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_list_fonts_with_info_sizeof ??= _dylib.lookupFunction<
            _c_xcb_list_fonts_with_info_sizeof,
            _dart_xcb_list_fonts_with_info_sizeof>(
        'xcb_list_fonts_with_info_sizeof');
    return _xcb_list_fonts_with_info_sizeof(
      _buffer,
    );
  }

  _dart_xcb_list_fonts_with_info_sizeof _xcb_list_fonts_with_info_sizeof;

  ffi.Pointer<xcb_fontprop_t> xcb_list_fonts_with_info_properties(
    ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
  ) {
    _xcb_list_fonts_with_info_properties ??= _dylib.lookupFunction<
            _c_xcb_list_fonts_with_info_properties,
            _dart_xcb_list_fonts_with_info_properties>(
        'xcb_list_fonts_with_info_properties');
    return _xcb_list_fonts_with_info_properties(
      R,
    );
  }

  _dart_xcb_list_fonts_with_info_properties
      _xcb_list_fonts_with_info_properties;

  int xcb_list_fonts_with_info_properties_length(
    ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
  ) {
    _xcb_list_fonts_with_info_properties_length ??= _dylib.lookupFunction<
            _c_xcb_list_fonts_with_info_properties_length,
            _dart_xcb_list_fonts_with_info_properties_length>(
        'xcb_list_fonts_with_info_properties_length');
    return _xcb_list_fonts_with_info_properties_length(
      R,
    );
  }

  _dart_xcb_list_fonts_with_info_properties_length
      _xcb_list_fonts_with_info_properties_length;

  ffi.Pointer<ffi.Int8> xcb_list_fonts_with_info_name(
    ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
  ) {
    _xcb_list_fonts_with_info_name ??= _dylib.lookupFunction<
        _c_xcb_list_fonts_with_info_name,
        _dart_xcb_list_fonts_with_info_name>('xcb_list_fonts_with_info_name');
    return _xcb_list_fonts_with_info_name(
      R,
    );
  }

  _dart_xcb_list_fonts_with_info_name _xcb_list_fonts_with_info_name;

  int xcb_list_fonts_with_info_name_length(
    ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
  ) {
    _xcb_list_fonts_with_info_name_length ??= _dylib.lookupFunction<
            _c_xcb_list_fonts_with_info_name_length,
            _dart_xcb_list_fonts_with_info_name_length>(
        'xcb_list_fonts_with_info_name_length');
    return _xcb_list_fonts_with_info_name_length(
      R,
    );
  }

  _dart_xcb_list_fonts_with_info_name_length
      _xcb_list_fonts_with_info_name_length;

  int xcb_set_font_path_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_set_font_path_sizeof ??= _dylib.lookupFunction<
        _c_xcb_set_font_path_sizeof,
        _dart_xcb_set_font_path_sizeof>('xcb_set_font_path_sizeof');
    return _xcb_set_font_path_sizeof(
      _buffer,
    );
  }

  _dart_xcb_set_font_path_sizeof _xcb_set_font_path_sizeof;

  int xcb_set_font_path_font_length(
    ffi.Pointer<xcb_set_font_path_request_t> R,
  ) {
    _xcb_set_font_path_font_length ??= _dylib.lookupFunction<
        _c_xcb_set_font_path_font_length,
        _dart_xcb_set_font_path_font_length>('xcb_set_font_path_font_length');
    return _xcb_set_font_path_font_length(
      R,
    );
  }

  _dart_xcb_set_font_path_font_length _xcb_set_font_path_font_length;

  int xcb_get_font_path_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_get_font_path_sizeof ??= _dylib.lookupFunction<
        _c_xcb_get_font_path_sizeof,
        _dart_xcb_get_font_path_sizeof>('xcb_get_font_path_sizeof');
    return _xcb_get_font_path_sizeof(
      _buffer,
    );
  }

  _dart_xcb_get_font_path_sizeof _xcb_get_font_path_sizeof;

  int xcb_get_font_path_path_length(
    ffi.Pointer<xcb_get_font_path_reply_t> R,
  ) {
    _xcb_get_font_path_path_length ??= _dylib.lookupFunction<
        _c_xcb_get_font_path_path_length,
        _dart_xcb_get_font_path_path_length>('xcb_get_font_path_path_length');
    return _xcb_get_font_path_path_length(
      R,
    );
  }

  _dart_xcb_get_font_path_path_length _xcb_get_font_path_path_length;

  int xcb_create_gc_value_list_serialize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
    int value_mask,
    ffi.Pointer<xcb_create_gc_value_list_t> _aux,
  ) {
    _xcb_create_gc_value_list_serialize ??= _dylib.lookupFunction<
            _c_xcb_create_gc_value_list_serialize,
            _dart_xcb_create_gc_value_list_serialize>(
        'xcb_create_gc_value_list_serialize');
    return _xcb_create_gc_value_list_serialize(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_create_gc_value_list_serialize _xcb_create_gc_value_list_serialize;

  int xcb_create_gc_value_list_unpack(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
    ffi.Pointer<xcb_create_gc_value_list_t> _aux,
  ) {
    _xcb_create_gc_value_list_unpack ??= _dylib.lookupFunction<
            _c_xcb_create_gc_value_list_unpack,
            _dart_xcb_create_gc_value_list_unpack>(
        'xcb_create_gc_value_list_unpack');
    return _xcb_create_gc_value_list_unpack(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_create_gc_value_list_unpack _xcb_create_gc_value_list_unpack;

  int xcb_create_gc_value_list_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
  ) {
    _xcb_create_gc_value_list_sizeof ??= _dylib.lookupFunction<
            _c_xcb_create_gc_value_list_sizeof,
            _dart_xcb_create_gc_value_list_sizeof>(
        'xcb_create_gc_value_list_sizeof');
    return _xcb_create_gc_value_list_sizeof(
      _buffer,
      value_mask,
    );
  }

  _dart_xcb_create_gc_value_list_sizeof _xcb_create_gc_value_list_sizeof;

  int xcb_create_gc_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_create_gc_sizeof ??= _dylib.lookupFunction<_c_xcb_create_gc_sizeof,
        _dart_xcb_create_gc_sizeof>('xcb_create_gc_sizeof');
    return _xcb_create_gc_sizeof(
      _buffer,
    );
  }

  _dart_xcb_create_gc_sizeof _xcb_create_gc_sizeof;

  ffi.Pointer<ffi.Void> xcb_create_gc_value_list(
    ffi.Pointer<xcb_create_gc_request_t> R,
  ) {
    _xcb_create_gc_value_list ??= _dylib.lookupFunction<
        _c_xcb_create_gc_value_list,
        _dart_xcb_create_gc_value_list>('xcb_create_gc_value_list');
    return _xcb_create_gc_value_list(
      R,
    );
  }

  _dart_xcb_create_gc_value_list _xcb_create_gc_value_list;

  int xcb_change_gc_value_list_serialize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
    int value_mask,
    ffi.Pointer<xcb_change_gc_value_list_t> _aux,
  ) {
    _xcb_change_gc_value_list_serialize ??= _dylib.lookupFunction<
            _c_xcb_change_gc_value_list_serialize,
            _dart_xcb_change_gc_value_list_serialize>(
        'xcb_change_gc_value_list_serialize');
    return _xcb_change_gc_value_list_serialize(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_change_gc_value_list_serialize _xcb_change_gc_value_list_serialize;

  int xcb_change_gc_value_list_unpack(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
    ffi.Pointer<xcb_change_gc_value_list_t> _aux,
  ) {
    _xcb_change_gc_value_list_unpack ??= _dylib.lookupFunction<
            _c_xcb_change_gc_value_list_unpack,
            _dart_xcb_change_gc_value_list_unpack>(
        'xcb_change_gc_value_list_unpack');
    return _xcb_change_gc_value_list_unpack(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_change_gc_value_list_unpack _xcb_change_gc_value_list_unpack;

  int xcb_change_gc_value_list_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
  ) {
    _xcb_change_gc_value_list_sizeof ??= _dylib.lookupFunction<
            _c_xcb_change_gc_value_list_sizeof,
            _dart_xcb_change_gc_value_list_sizeof>(
        'xcb_change_gc_value_list_sizeof');
    return _xcb_change_gc_value_list_sizeof(
      _buffer,
      value_mask,
    );
  }

  _dart_xcb_change_gc_value_list_sizeof _xcb_change_gc_value_list_sizeof;

  int xcb_change_gc_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_change_gc_sizeof ??= _dylib.lookupFunction<_c_xcb_change_gc_sizeof,
        _dart_xcb_change_gc_sizeof>('xcb_change_gc_sizeof');
    return _xcb_change_gc_sizeof(
      _buffer,
    );
  }

  _dart_xcb_change_gc_sizeof _xcb_change_gc_sizeof;

  ffi.Pointer<ffi.Void> xcb_change_gc_value_list(
    ffi.Pointer<xcb_change_gc_request_t> R,
  ) {
    _xcb_change_gc_value_list ??= _dylib.lookupFunction<
        _c_xcb_change_gc_value_list,
        _dart_xcb_change_gc_value_list>('xcb_change_gc_value_list');
    return _xcb_change_gc_value_list(
      R,
    );
  }

  _dart_xcb_change_gc_value_list _xcb_change_gc_value_list;

  int xcb_set_dashes_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_set_dashes_sizeof ??= _dylib.lookupFunction<_c_xcb_set_dashes_sizeof,
        _dart_xcb_set_dashes_sizeof>('xcb_set_dashes_sizeof');
    return _xcb_set_dashes_sizeof(
      _buffer,
    );
  }

  _dart_xcb_set_dashes_sizeof _xcb_set_dashes_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_set_dashes_dashes(
    ffi.Pointer<xcb_set_dashes_request_t> R,
  ) {
    _xcb_set_dashes_dashes ??= _dylib.lookupFunction<_c_xcb_set_dashes_dashes,
        _dart_xcb_set_dashes_dashes>('xcb_set_dashes_dashes');
    return _xcb_set_dashes_dashes(
      R,
    );
  }

  _dart_xcb_set_dashes_dashes _xcb_set_dashes_dashes;

  int xcb_set_dashes_dashes_length(
    ffi.Pointer<xcb_set_dashes_request_t> R,
  ) {
    _xcb_set_dashes_dashes_length ??= _dylib.lookupFunction<
        _c_xcb_set_dashes_dashes_length,
        _dart_xcb_set_dashes_dashes_length>('xcb_set_dashes_dashes_length');
    return _xcb_set_dashes_dashes_length(
      R,
    );
  }

  _dart_xcb_set_dashes_dashes_length _xcb_set_dashes_dashes_length;

  int xcb_set_clip_rectangles_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int rectangles_len,
  ) {
    _xcb_set_clip_rectangles_sizeof ??= _dylib.lookupFunction<
        _c_xcb_set_clip_rectangles_sizeof,
        _dart_xcb_set_clip_rectangles_sizeof>('xcb_set_clip_rectangles_sizeof');
    return _xcb_set_clip_rectangles_sizeof(
      _buffer,
      rectangles_len,
    );
  }

  _dart_xcb_set_clip_rectangles_sizeof _xcb_set_clip_rectangles_sizeof;

  ffi.Pointer<xcb_rectangle_t> xcb_set_clip_rectangles_rectangles(
    ffi.Pointer<xcb_set_clip_rectangles_request_t> R,
  ) {
    _xcb_set_clip_rectangles_rectangles ??= _dylib.lookupFunction<
            _c_xcb_set_clip_rectangles_rectangles,
            _dart_xcb_set_clip_rectangles_rectangles>(
        'xcb_set_clip_rectangles_rectangles');
    return _xcb_set_clip_rectangles_rectangles(
      R,
    );
  }

  _dart_xcb_set_clip_rectangles_rectangles _xcb_set_clip_rectangles_rectangles;

  int xcb_set_clip_rectangles_rectangles_length(
    ffi.Pointer<xcb_set_clip_rectangles_request_t> R,
  ) {
    _xcb_set_clip_rectangles_rectangles_length ??= _dylib.lookupFunction<
            _c_xcb_set_clip_rectangles_rectangles_length,
            _dart_xcb_set_clip_rectangles_rectangles_length>(
        'xcb_set_clip_rectangles_rectangles_length');
    return _xcb_set_clip_rectangles_rectangles_length(
      R,
    );
  }

  _dart_xcb_set_clip_rectangles_rectangles_length
      _xcb_set_clip_rectangles_rectangles_length;

  int xcb_poly_point_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int points_len,
  ) {
    _xcb_poly_point_sizeof ??= _dylib.lookupFunction<_c_xcb_poly_point_sizeof,
        _dart_xcb_poly_point_sizeof>('xcb_poly_point_sizeof');
    return _xcb_poly_point_sizeof(
      _buffer,
      points_len,
    );
  }

  _dart_xcb_poly_point_sizeof _xcb_poly_point_sizeof;

  ffi.Pointer<xcb_point_t> xcb_poly_point_points(
    ffi.Pointer<xcb_poly_point_request_t> R,
  ) {
    _xcb_poly_point_points ??= _dylib.lookupFunction<_c_xcb_poly_point_points,
        _dart_xcb_poly_point_points>('xcb_poly_point_points');
    return _xcb_poly_point_points(
      R,
    );
  }

  _dart_xcb_poly_point_points _xcb_poly_point_points;

  int xcb_poly_point_points_length(
    ffi.Pointer<xcb_poly_point_request_t> R,
  ) {
    _xcb_poly_point_points_length ??= _dylib.lookupFunction<
        _c_xcb_poly_point_points_length,
        _dart_xcb_poly_point_points_length>('xcb_poly_point_points_length');
    return _xcb_poly_point_points_length(
      R,
    );
  }

  _dart_xcb_poly_point_points_length _xcb_poly_point_points_length;

  int xcb_poly_line_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int points_len,
  ) {
    _xcb_poly_line_sizeof ??= _dylib.lookupFunction<_c_xcb_poly_line_sizeof,
        _dart_xcb_poly_line_sizeof>('xcb_poly_line_sizeof');
    return _xcb_poly_line_sizeof(
      _buffer,
      points_len,
    );
  }

  _dart_xcb_poly_line_sizeof _xcb_poly_line_sizeof;

  ffi.Pointer<xcb_point_t> xcb_poly_line_points(
    ffi.Pointer<xcb_poly_line_request_t> R,
  ) {
    _xcb_poly_line_points ??= _dylib.lookupFunction<_c_xcb_poly_line_points,
        _dart_xcb_poly_line_points>('xcb_poly_line_points');
    return _xcb_poly_line_points(
      R,
    );
  }

  _dart_xcb_poly_line_points _xcb_poly_line_points;

  int xcb_poly_line_points_length(
    ffi.Pointer<xcb_poly_line_request_t> R,
  ) {
    _xcb_poly_line_points_length ??= _dylib.lookupFunction<
        _c_xcb_poly_line_points_length,
        _dart_xcb_poly_line_points_length>('xcb_poly_line_points_length');
    return _xcb_poly_line_points_length(
      R,
    );
  }

  _dart_xcb_poly_line_points_length _xcb_poly_line_points_length;

  void xcb_segment_next(
    ffi.Pointer<xcb_segment_iterator_t> i,
  ) {
    _xcb_segment_next ??=
        _dylib.lookupFunction<_c_xcb_segment_next, _dart_xcb_segment_next>(
            'xcb_segment_next');
    return _xcb_segment_next(
      i,
    );
  }

  _dart_xcb_segment_next _xcb_segment_next;

  int xcb_poly_segment_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int segments_len,
  ) {
    _xcb_poly_segment_sizeof ??= _dylib.lookupFunction<
        _c_xcb_poly_segment_sizeof,
        _dart_xcb_poly_segment_sizeof>('xcb_poly_segment_sizeof');
    return _xcb_poly_segment_sizeof(
      _buffer,
      segments_len,
    );
  }

  _dart_xcb_poly_segment_sizeof _xcb_poly_segment_sizeof;

  ffi.Pointer<xcb_segment_t> xcb_poly_segment_segments(
    ffi.Pointer<xcb_poly_segment_request_t> R,
  ) {
    _xcb_poly_segment_segments ??= _dylib.lookupFunction<
        _c_xcb_poly_segment_segments,
        _dart_xcb_poly_segment_segments>('xcb_poly_segment_segments');
    return _xcb_poly_segment_segments(
      R,
    );
  }

  _dart_xcb_poly_segment_segments _xcb_poly_segment_segments;

  int xcb_poly_segment_segments_length(
    ffi.Pointer<xcb_poly_segment_request_t> R,
  ) {
    _xcb_poly_segment_segments_length ??= _dylib.lookupFunction<
            _c_xcb_poly_segment_segments_length,
            _dart_xcb_poly_segment_segments_length>(
        'xcb_poly_segment_segments_length');
    return _xcb_poly_segment_segments_length(
      R,
    );
  }

  _dart_xcb_poly_segment_segments_length _xcb_poly_segment_segments_length;

  int xcb_poly_rectangle_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int rectangles_len,
  ) {
    _xcb_poly_rectangle_sizeof ??= _dylib.lookupFunction<
        _c_xcb_poly_rectangle_sizeof,
        _dart_xcb_poly_rectangle_sizeof>('xcb_poly_rectangle_sizeof');
    return _xcb_poly_rectangle_sizeof(
      _buffer,
      rectangles_len,
    );
  }

  _dart_xcb_poly_rectangle_sizeof _xcb_poly_rectangle_sizeof;

  ffi.Pointer<xcb_rectangle_t> xcb_poly_rectangle_rectangles(
    ffi.Pointer<xcb_poly_rectangle_request_t> R,
  ) {
    _xcb_poly_rectangle_rectangles ??= _dylib.lookupFunction<
        _c_xcb_poly_rectangle_rectangles,
        _dart_xcb_poly_rectangle_rectangles>('xcb_poly_rectangle_rectangles');
    return _xcb_poly_rectangle_rectangles(
      R,
    );
  }

  _dart_xcb_poly_rectangle_rectangles _xcb_poly_rectangle_rectangles;

  int xcb_poly_rectangle_rectangles_length(
    ffi.Pointer<xcb_poly_rectangle_request_t> R,
  ) {
    _xcb_poly_rectangle_rectangles_length ??= _dylib.lookupFunction<
            _c_xcb_poly_rectangle_rectangles_length,
            _dart_xcb_poly_rectangle_rectangles_length>(
        'xcb_poly_rectangle_rectangles_length');
    return _xcb_poly_rectangle_rectangles_length(
      R,
    );
  }

  _dart_xcb_poly_rectangle_rectangles_length
      _xcb_poly_rectangle_rectangles_length;

  int xcb_poly_arc_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int arcs_len,
  ) {
    _xcb_poly_arc_sizeof ??= _dylib.lookupFunction<_c_xcb_poly_arc_sizeof,
        _dart_xcb_poly_arc_sizeof>('xcb_poly_arc_sizeof');
    return _xcb_poly_arc_sizeof(
      _buffer,
      arcs_len,
    );
  }

  _dart_xcb_poly_arc_sizeof _xcb_poly_arc_sizeof;

  ffi.Pointer<xcb_arc_t> xcb_poly_arc_arcs(
    ffi.Pointer<xcb_poly_arc_request_t> R,
  ) {
    _xcb_poly_arc_arcs ??=
        _dylib.lookupFunction<_c_xcb_poly_arc_arcs, _dart_xcb_poly_arc_arcs>(
            'xcb_poly_arc_arcs');
    return _xcb_poly_arc_arcs(
      R,
    );
  }

  _dart_xcb_poly_arc_arcs _xcb_poly_arc_arcs;

  int xcb_poly_arc_arcs_length(
    ffi.Pointer<xcb_poly_arc_request_t> R,
  ) {
    _xcb_poly_arc_arcs_length ??= _dylib.lookupFunction<
        _c_xcb_poly_arc_arcs_length,
        _dart_xcb_poly_arc_arcs_length>('xcb_poly_arc_arcs_length');
    return _xcb_poly_arc_arcs_length(
      R,
    );
  }

  _dart_xcb_poly_arc_arcs_length _xcb_poly_arc_arcs_length;

  int xcb_fill_poly_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int points_len,
  ) {
    _xcb_fill_poly_sizeof ??= _dylib.lookupFunction<_c_xcb_fill_poly_sizeof,
        _dart_xcb_fill_poly_sizeof>('xcb_fill_poly_sizeof');
    return _xcb_fill_poly_sizeof(
      _buffer,
      points_len,
    );
  }

  _dart_xcb_fill_poly_sizeof _xcb_fill_poly_sizeof;

  ffi.Pointer<xcb_point_t> xcb_fill_poly_points(
    ffi.Pointer<xcb_fill_poly_request_t> R,
  ) {
    _xcb_fill_poly_points ??= _dylib.lookupFunction<_c_xcb_fill_poly_points,
        _dart_xcb_fill_poly_points>('xcb_fill_poly_points');
    return _xcb_fill_poly_points(
      R,
    );
  }

  _dart_xcb_fill_poly_points _xcb_fill_poly_points;

  int xcb_fill_poly_points_length(
    ffi.Pointer<xcb_fill_poly_request_t> R,
  ) {
    _xcb_fill_poly_points_length ??= _dylib.lookupFunction<
        _c_xcb_fill_poly_points_length,
        _dart_xcb_fill_poly_points_length>('xcb_fill_poly_points_length');
    return _xcb_fill_poly_points_length(
      R,
    );
  }

  _dart_xcb_fill_poly_points_length _xcb_fill_poly_points_length;

  int xcb_poly_fill_rectangle_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int rectangles_len,
  ) {
    _xcb_poly_fill_rectangle_sizeof ??= _dylib.lookupFunction<
        _c_xcb_poly_fill_rectangle_sizeof,
        _dart_xcb_poly_fill_rectangle_sizeof>('xcb_poly_fill_rectangle_sizeof');
    return _xcb_poly_fill_rectangle_sizeof(
      _buffer,
      rectangles_len,
    );
  }

  _dart_xcb_poly_fill_rectangle_sizeof _xcb_poly_fill_rectangle_sizeof;

  ffi.Pointer<xcb_rectangle_t> xcb_poly_fill_rectangle_rectangles(
    ffi.Pointer<xcb_poly_fill_rectangle_request_t> R,
  ) {
    _xcb_poly_fill_rectangle_rectangles ??= _dylib.lookupFunction<
            _c_xcb_poly_fill_rectangle_rectangles,
            _dart_xcb_poly_fill_rectangle_rectangles>(
        'xcb_poly_fill_rectangle_rectangles');
    return _xcb_poly_fill_rectangle_rectangles(
      R,
    );
  }

  _dart_xcb_poly_fill_rectangle_rectangles _xcb_poly_fill_rectangle_rectangles;

  int xcb_poly_fill_rectangle_rectangles_length(
    ffi.Pointer<xcb_poly_fill_rectangle_request_t> R,
  ) {
    _xcb_poly_fill_rectangle_rectangles_length ??= _dylib.lookupFunction<
            _c_xcb_poly_fill_rectangle_rectangles_length,
            _dart_xcb_poly_fill_rectangle_rectangles_length>(
        'xcb_poly_fill_rectangle_rectangles_length');
    return _xcb_poly_fill_rectangle_rectangles_length(
      R,
    );
  }

  _dart_xcb_poly_fill_rectangle_rectangles_length
      _xcb_poly_fill_rectangle_rectangles_length;

  int xcb_poly_fill_arc_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int arcs_len,
  ) {
    _xcb_poly_fill_arc_sizeof ??= _dylib.lookupFunction<
        _c_xcb_poly_fill_arc_sizeof,
        _dart_xcb_poly_fill_arc_sizeof>('xcb_poly_fill_arc_sizeof');
    return _xcb_poly_fill_arc_sizeof(
      _buffer,
      arcs_len,
    );
  }

  _dart_xcb_poly_fill_arc_sizeof _xcb_poly_fill_arc_sizeof;

  ffi.Pointer<xcb_arc_t> xcb_poly_fill_arc_arcs(
    ffi.Pointer<xcb_poly_fill_arc_request_t> R,
  ) {
    _xcb_poly_fill_arc_arcs ??= _dylib.lookupFunction<_c_xcb_poly_fill_arc_arcs,
        _dart_xcb_poly_fill_arc_arcs>('xcb_poly_fill_arc_arcs');
    return _xcb_poly_fill_arc_arcs(
      R,
    );
  }

  _dart_xcb_poly_fill_arc_arcs _xcb_poly_fill_arc_arcs;

  int xcb_poly_fill_arc_arcs_length(
    ffi.Pointer<xcb_poly_fill_arc_request_t> R,
  ) {
    _xcb_poly_fill_arc_arcs_length ??= _dylib.lookupFunction<
        _c_xcb_poly_fill_arc_arcs_length,
        _dart_xcb_poly_fill_arc_arcs_length>('xcb_poly_fill_arc_arcs_length');
    return _xcb_poly_fill_arc_arcs_length(
      R,
    );
  }

  _dart_xcb_poly_fill_arc_arcs_length _xcb_poly_fill_arc_arcs_length;

  int xcb_put_image_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int data_len,
  ) {
    _xcb_put_image_sizeof ??= _dylib.lookupFunction<_c_xcb_put_image_sizeof,
        _dart_xcb_put_image_sizeof>('xcb_put_image_sizeof');
    return _xcb_put_image_sizeof(
      _buffer,
      data_len,
    );
  }

  _dart_xcb_put_image_sizeof _xcb_put_image_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_put_image_data(
    ffi.Pointer<xcb_put_image_request_t> R,
  ) {
    _xcb_put_image_data ??=
        _dylib.lookupFunction<_c_xcb_put_image_data, _dart_xcb_put_image_data>(
            'xcb_put_image_data');
    return _xcb_put_image_data(
      R,
    );
  }

  _dart_xcb_put_image_data _xcb_put_image_data;

  int xcb_put_image_data_length(
    ffi.Pointer<xcb_put_image_request_t> R,
  ) {
    _xcb_put_image_data_length ??= _dylib.lookupFunction<
        _c_xcb_put_image_data_length,
        _dart_xcb_put_image_data_length>('xcb_put_image_data_length');
    return _xcb_put_image_data_length(
      R,
    );
  }

  _dart_xcb_put_image_data_length _xcb_put_image_data_length;

  int xcb_get_image_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_get_image_sizeof ??= _dylib.lookupFunction<_c_xcb_get_image_sizeof,
        _dart_xcb_get_image_sizeof>('xcb_get_image_sizeof');
    return _xcb_get_image_sizeof(
      _buffer,
    );
  }

  _dart_xcb_get_image_sizeof _xcb_get_image_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_get_image_data(
    ffi.Pointer<xcb_get_image_reply_t> R,
  ) {
    _xcb_get_image_data ??=
        _dylib.lookupFunction<_c_xcb_get_image_data, _dart_xcb_get_image_data>(
            'xcb_get_image_data');
    return _xcb_get_image_data(
      R,
    );
  }

  _dart_xcb_get_image_data _xcb_get_image_data;

  int xcb_get_image_data_length(
    ffi.Pointer<xcb_get_image_reply_t> R,
  ) {
    _xcb_get_image_data_length ??= _dylib.lookupFunction<
        _c_xcb_get_image_data_length,
        _dart_xcb_get_image_data_length>('xcb_get_image_data_length');
    return _xcb_get_image_data_length(
      R,
    );
  }

  _dart_xcb_get_image_data_length _xcb_get_image_data_length;

  int xcb_poly_text_8_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int items_len,
  ) {
    _xcb_poly_text_8_sizeof ??= _dylib.lookupFunction<_c_xcb_poly_text_8_sizeof,
        _dart_xcb_poly_text_8_sizeof>('xcb_poly_text_8_sizeof');
    return _xcb_poly_text_8_sizeof(
      _buffer,
      items_len,
    );
  }

  _dart_xcb_poly_text_8_sizeof _xcb_poly_text_8_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_poly_text_8_items(
    ffi.Pointer<xcb_poly_text_8_request_t> R,
  ) {
    _xcb_poly_text_8_items ??= _dylib.lookupFunction<_c_xcb_poly_text_8_items,
        _dart_xcb_poly_text_8_items>('xcb_poly_text_8_items');
    return _xcb_poly_text_8_items(
      R,
    );
  }

  _dart_xcb_poly_text_8_items _xcb_poly_text_8_items;

  int xcb_poly_text_8_items_length(
    ffi.Pointer<xcb_poly_text_8_request_t> R,
  ) {
    _xcb_poly_text_8_items_length ??= _dylib.lookupFunction<
        _c_xcb_poly_text_8_items_length,
        _dart_xcb_poly_text_8_items_length>('xcb_poly_text_8_items_length');
    return _xcb_poly_text_8_items_length(
      R,
    );
  }

  _dart_xcb_poly_text_8_items_length _xcb_poly_text_8_items_length;

  int xcb_poly_text_16_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int items_len,
  ) {
    _xcb_poly_text_16_sizeof ??= _dylib.lookupFunction<
        _c_xcb_poly_text_16_sizeof,
        _dart_xcb_poly_text_16_sizeof>('xcb_poly_text_16_sizeof');
    return _xcb_poly_text_16_sizeof(
      _buffer,
      items_len,
    );
  }

  _dart_xcb_poly_text_16_sizeof _xcb_poly_text_16_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_poly_text_16_items(
    ffi.Pointer<xcb_poly_text_16_request_t> R,
  ) {
    _xcb_poly_text_16_items ??= _dylib.lookupFunction<_c_xcb_poly_text_16_items,
        _dart_xcb_poly_text_16_items>('xcb_poly_text_16_items');
    return _xcb_poly_text_16_items(
      R,
    );
  }

  _dart_xcb_poly_text_16_items _xcb_poly_text_16_items;

  int xcb_poly_text_16_items_length(
    ffi.Pointer<xcb_poly_text_16_request_t> R,
  ) {
    _xcb_poly_text_16_items_length ??= _dylib.lookupFunction<
        _c_xcb_poly_text_16_items_length,
        _dart_xcb_poly_text_16_items_length>('xcb_poly_text_16_items_length');
    return _xcb_poly_text_16_items_length(
      R,
    );
  }

  _dart_xcb_poly_text_16_items_length _xcb_poly_text_16_items_length;

  int xcb_image_text_8_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_image_text_8_sizeof ??= _dylib.lookupFunction<
        _c_xcb_image_text_8_sizeof,
        _dart_xcb_image_text_8_sizeof>('xcb_image_text_8_sizeof');
    return _xcb_image_text_8_sizeof(
      _buffer,
    );
  }

  _dart_xcb_image_text_8_sizeof _xcb_image_text_8_sizeof;

  ffi.Pointer<ffi.Int8> xcb_image_text_8_string(
    ffi.Pointer<xcb_image_text_8_request_t> R,
  ) {
    _xcb_image_text_8_string ??= _dylib.lookupFunction<
        _c_xcb_image_text_8_string,
        _dart_xcb_image_text_8_string>('xcb_image_text_8_string');
    return _xcb_image_text_8_string(
      R,
    );
  }

  _dart_xcb_image_text_8_string _xcb_image_text_8_string;

  int xcb_image_text_8_string_length(
    ffi.Pointer<xcb_image_text_8_request_t> R,
  ) {
    _xcb_image_text_8_string_length ??= _dylib.lookupFunction<
        _c_xcb_image_text_8_string_length,
        _dart_xcb_image_text_8_string_length>('xcb_image_text_8_string_length');
    return _xcb_image_text_8_string_length(
      R,
    );
  }

  _dart_xcb_image_text_8_string_length _xcb_image_text_8_string_length;

  int xcb_image_text_16_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_image_text_16_sizeof ??= _dylib.lookupFunction<
        _c_xcb_image_text_16_sizeof,
        _dart_xcb_image_text_16_sizeof>('xcb_image_text_16_sizeof');
    return _xcb_image_text_16_sizeof(
      _buffer,
    );
  }

  _dart_xcb_image_text_16_sizeof _xcb_image_text_16_sizeof;

  ffi.Pointer<xcb_char2b_t> xcb_image_text_16_string(
    ffi.Pointer<xcb_image_text_16_request_t> R,
  ) {
    _xcb_image_text_16_string ??= _dylib.lookupFunction<
        _c_xcb_image_text_16_string,
        _dart_xcb_image_text_16_string>('xcb_image_text_16_string');
    return _xcb_image_text_16_string(
      R,
    );
  }

  _dart_xcb_image_text_16_string _xcb_image_text_16_string;

  int xcb_image_text_16_string_length(
    ffi.Pointer<xcb_image_text_16_request_t> R,
  ) {
    _xcb_image_text_16_string_length ??= _dylib.lookupFunction<
            _c_xcb_image_text_16_string_length,
            _dart_xcb_image_text_16_string_length>(
        'xcb_image_text_16_string_length');
    return _xcb_image_text_16_string_length(
      R,
    );
  }

  _dart_xcb_image_text_16_string_length _xcb_image_text_16_string_length;

  int xcb_list_installed_colormaps_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_list_installed_colormaps_sizeof ??= _dylib.lookupFunction<
            _c_xcb_list_installed_colormaps_sizeof,
            _dart_xcb_list_installed_colormaps_sizeof>(
        'xcb_list_installed_colormaps_sizeof');
    return _xcb_list_installed_colormaps_sizeof(
      _buffer,
    );
  }

  _dart_xcb_list_installed_colormaps_sizeof
      _xcb_list_installed_colormaps_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_list_installed_colormaps_cmaps(
    ffi.Pointer<xcb_list_installed_colormaps_reply_t> R,
  ) {
    _xcb_list_installed_colormaps_cmaps ??= _dylib.lookupFunction<
            _c_xcb_list_installed_colormaps_cmaps,
            _dart_xcb_list_installed_colormaps_cmaps>(
        'xcb_list_installed_colormaps_cmaps');
    return _xcb_list_installed_colormaps_cmaps(
      R,
    );
  }

  _dart_xcb_list_installed_colormaps_cmaps _xcb_list_installed_colormaps_cmaps;

  int xcb_list_installed_colormaps_cmaps_length(
    ffi.Pointer<xcb_list_installed_colormaps_reply_t> R,
  ) {
    _xcb_list_installed_colormaps_cmaps_length ??= _dylib.lookupFunction<
            _c_xcb_list_installed_colormaps_cmaps_length,
            _dart_xcb_list_installed_colormaps_cmaps_length>(
        'xcb_list_installed_colormaps_cmaps_length');
    return _xcb_list_installed_colormaps_cmaps_length(
      R,
    );
  }

  _dart_xcb_list_installed_colormaps_cmaps_length
      _xcb_list_installed_colormaps_cmaps_length;

  int xcb_alloc_named_color_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_alloc_named_color_sizeof ??= _dylib.lookupFunction<
        _c_xcb_alloc_named_color_sizeof,
        _dart_xcb_alloc_named_color_sizeof>('xcb_alloc_named_color_sizeof');
    return _xcb_alloc_named_color_sizeof(
      _buffer,
    );
  }

  _dart_xcb_alloc_named_color_sizeof _xcb_alloc_named_color_sizeof;

  int xcb_alloc_color_cells_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_alloc_color_cells_sizeof ??= _dylib.lookupFunction<
        _c_xcb_alloc_color_cells_sizeof,
        _dart_xcb_alloc_color_cells_sizeof>('xcb_alloc_color_cells_sizeof');
    return _xcb_alloc_color_cells_sizeof(
      _buffer,
    );
  }

  _dart_xcb_alloc_color_cells_sizeof _xcb_alloc_color_cells_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_alloc_color_cells_pixels(
    ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
  ) {
    _xcb_alloc_color_cells_pixels ??= _dylib.lookupFunction<
        _c_xcb_alloc_color_cells_pixels,
        _dart_xcb_alloc_color_cells_pixels>('xcb_alloc_color_cells_pixels');
    return _xcb_alloc_color_cells_pixels(
      R,
    );
  }

  _dart_xcb_alloc_color_cells_pixels _xcb_alloc_color_cells_pixels;

  int xcb_alloc_color_cells_pixels_length(
    ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
  ) {
    _xcb_alloc_color_cells_pixels_length ??= _dylib.lookupFunction<
            _c_xcb_alloc_color_cells_pixels_length,
            _dart_xcb_alloc_color_cells_pixels_length>(
        'xcb_alloc_color_cells_pixels_length');
    return _xcb_alloc_color_cells_pixels_length(
      R,
    );
  }

  _dart_xcb_alloc_color_cells_pixels_length
      _xcb_alloc_color_cells_pixels_length;

  ffi.Pointer<ffi.Uint32> xcb_alloc_color_cells_masks(
    ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
  ) {
    _xcb_alloc_color_cells_masks ??= _dylib.lookupFunction<
        _c_xcb_alloc_color_cells_masks,
        _dart_xcb_alloc_color_cells_masks>('xcb_alloc_color_cells_masks');
    return _xcb_alloc_color_cells_masks(
      R,
    );
  }

  _dart_xcb_alloc_color_cells_masks _xcb_alloc_color_cells_masks;

  int xcb_alloc_color_cells_masks_length(
    ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
  ) {
    _xcb_alloc_color_cells_masks_length ??= _dylib.lookupFunction<
            _c_xcb_alloc_color_cells_masks_length,
            _dart_xcb_alloc_color_cells_masks_length>(
        'xcb_alloc_color_cells_masks_length');
    return _xcb_alloc_color_cells_masks_length(
      R,
    );
  }

  _dart_xcb_alloc_color_cells_masks_length _xcb_alloc_color_cells_masks_length;

  int xcb_alloc_color_planes_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_alloc_color_planes_sizeof ??= _dylib.lookupFunction<
        _c_xcb_alloc_color_planes_sizeof,
        _dart_xcb_alloc_color_planes_sizeof>('xcb_alloc_color_planes_sizeof');
    return _xcb_alloc_color_planes_sizeof(
      _buffer,
    );
  }

  _dart_xcb_alloc_color_planes_sizeof _xcb_alloc_color_planes_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_alloc_color_planes_pixels(
    ffi.Pointer<xcb_alloc_color_planes_reply_t> R,
  ) {
    _xcb_alloc_color_planes_pixels ??= _dylib.lookupFunction<
        _c_xcb_alloc_color_planes_pixels,
        _dart_xcb_alloc_color_planes_pixels>('xcb_alloc_color_planes_pixels');
    return _xcb_alloc_color_planes_pixels(
      R,
    );
  }

  _dart_xcb_alloc_color_planes_pixels _xcb_alloc_color_planes_pixels;

  int xcb_alloc_color_planes_pixels_length(
    ffi.Pointer<xcb_alloc_color_planes_reply_t> R,
  ) {
    _xcb_alloc_color_planes_pixels_length ??= _dylib.lookupFunction<
            _c_xcb_alloc_color_planes_pixels_length,
            _dart_xcb_alloc_color_planes_pixels_length>(
        'xcb_alloc_color_planes_pixels_length');
    return _xcb_alloc_color_planes_pixels_length(
      R,
    );
  }

  _dart_xcb_alloc_color_planes_pixels_length
      _xcb_alloc_color_planes_pixels_length;

  int xcb_free_colors_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int pixels_len,
  ) {
    _xcb_free_colors_sizeof ??= _dylib.lookupFunction<_c_xcb_free_colors_sizeof,
        _dart_xcb_free_colors_sizeof>('xcb_free_colors_sizeof');
    return _xcb_free_colors_sizeof(
      _buffer,
      pixels_len,
    );
  }

  _dart_xcb_free_colors_sizeof _xcb_free_colors_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_free_colors_pixels(
    ffi.Pointer<xcb_free_colors_request_t> R,
  ) {
    _xcb_free_colors_pixels ??= _dylib.lookupFunction<_c_xcb_free_colors_pixels,
        _dart_xcb_free_colors_pixels>('xcb_free_colors_pixels');
    return _xcb_free_colors_pixels(
      R,
    );
  }

  _dart_xcb_free_colors_pixels _xcb_free_colors_pixels;

  int xcb_free_colors_pixels_length(
    ffi.Pointer<xcb_free_colors_request_t> R,
  ) {
    _xcb_free_colors_pixels_length ??= _dylib.lookupFunction<
        _c_xcb_free_colors_pixels_length,
        _dart_xcb_free_colors_pixels_length>('xcb_free_colors_pixels_length');
    return _xcb_free_colors_pixels_length(
      R,
    );
  }

  _dart_xcb_free_colors_pixels_length _xcb_free_colors_pixels_length;

  void xcb_coloritem_next(
    ffi.Pointer<xcb_coloritem_iterator_t> i,
  ) {
    _xcb_coloritem_next ??=
        _dylib.lookupFunction<_c_xcb_coloritem_next, _dart_xcb_coloritem_next>(
            'xcb_coloritem_next');
    return _xcb_coloritem_next(
      i,
    );
  }

  _dart_xcb_coloritem_next _xcb_coloritem_next;

  int xcb_store_colors_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int items_len,
  ) {
    _xcb_store_colors_sizeof ??= _dylib.lookupFunction<
        _c_xcb_store_colors_sizeof,
        _dart_xcb_store_colors_sizeof>('xcb_store_colors_sizeof');
    return _xcb_store_colors_sizeof(
      _buffer,
      items_len,
    );
  }

  _dart_xcb_store_colors_sizeof _xcb_store_colors_sizeof;

  ffi.Pointer<xcb_coloritem_t> xcb_store_colors_items(
    ffi.Pointer<xcb_store_colors_request_t> R,
  ) {
    _xcb_store_colors_items ??= _dylib.lookupFunction<_c_xcb_store_colors_items,
        _dart_xcb_store_colors_items>('xcb_store_colors_items');
    return _xcb_store_colors_items(
      R,
    );
  }

  _dart_xcb_store_colors_items _xcb_store_colors_items;

  int xcb_store_colors_items_length(
    ffi.Pointer<xcb_store_colors_request_t> R,
  ) {
    _xcb_store_colors_items_length ??= _dylib.lookupFunction<
        _c_xcb_store_colors_items_length,
        _dart_xcb_store_colors_items_length>('xcb_store_colors_items_length');
    return _xcb_store_colors_items_length(
      R,
    );
  }

  _dart_xcb_store_colors_items_length _xcb_store_colors_items_length;

  int xcb_store_named_color_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_store_named_color_sizeof ??= _dylib.lookupFunction<
        _c_xcb_store_named_color_sizeof,
        _dart_xcb_store_named_color_sizeof>('xcb_store_named_color_sizeof');
    return _xcb_store_named_color_sizeof(
      _buffer,
    );
  }

  _dart_xcb_store_named_color_sizeof _xcb_store_named_color_sizeof;

  ffi.Pointer<ffi.Int8> xcb_store_named_color_name(
    ffi.Pointer<xcb_store_named_color_request_t> R,
  ) {
    _xcb_store_named_color_name ??= _dylib.lookupFunction<
        _c_xcb_store_named_color_name,
        _dart_xcb_store_named_color_name>('xcb_store_named_color_name');
    return _xcb_store_named_color_name(
      R,
    );
  }

  _dart_xcb_store_named_color_name _xcb_store_named_color_name;

  int xcb_store_named_color_name_length(
    ffi.Pointer<xcb_store_named_color_request_t> R,
  ) {
    _xcb_store_named_color_name_length ??= _dylib.lookupFunction<
            _c_xcb_store_named_color_name_length,
            _dart_xcb_store_named_color_name_length>(
        'xcb_store_named_color_name_length');
    return _xcb_store_named_color_name_length(
      R,
    );
  }

  _dart_xcb_store_named_color_name_length _xcb_store_named_color_name_length;

  void xcb_rgb_next(
    ffi.Pointer<xcb_rgb_iterator_t> i,
  ) {
    _xcb_rgb_next ??= _dylib
        .lookupFunction<_c_xcb_rgb_next, _dart_xcb_rgb_next>('xcb_rgb_next');
    return _xcb_rgb_next(
      i,
    );
  }

  _dart_xcb_rgb_next _xcb_rgb_next;

  int xcb_query_colors_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int pixels_len,
  ) {
    _xcb_query_colors_sizeof ??= _dylib.lookupFunction<
        _c_xcb_query_colors_sizeof,
        _dart_xcb_query_colors_sizeof>('xcb_query_colors_sizeof');
    return _xcb_query_colors_sizeof(
      _buffer,
      pixels_len,
    );
  }

  _dart_xcb_query_colors_sizeof _xcb_query_colors_sizeof;

  ffi.Pointer<xcb_rgb_t> xcb_query_colors_colors(
    ffi.Pointer<xcb_query_colors_reply_t> R,
  ) {
    _xcb_query_colors_colors ??= _dylib.lookupFunction<
        _c_xcb_query_colors_colors,
        _dart_xcb_query_colors_colors>('xcb_query_colors_colors');
    return _xcb_query_colors_colors(
      R,
    );
  }

  _dart_xcb_query_colors_colors _xcb_query_colors_colors;

  int xcb_query_colors_colors_length(
    ffi.Pointer<xcb_query_colors_reply_t> R,
  ) {
    _xcb_query_colors_colors_length ??= _dylib.lookupFunction<
        _c_xcb_query_colors_colors_length,
        _dart_xcb_query_colors_colors_length>('xcb_query_colors_colors_length');
    return _xcb_query_colors_colors_length(
      R,
    );
  }

  _dart_xcb_query_colors_colors_length _xcb_query_colors_colors_length;

  int xcb_lookup_color_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_lookup_color_sizeof ??= _dylib.lookupFunction<
        _c_xcb_lookup_color_sizeof,
        _dart_xcb_lookup_color_sizeof>('xcb_lookup_color_sizeof');
    return _xcb_lookup_color_sizeof(
      _buffer,
    );
  }

  _dart_xcb_lookup_color_sizeof _xcb_lookup_color_sizeof;

  int xcb_query_extension_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_query_extension_sizeof ??= _dylib.lookupFunction<
        _c_xcb_query_extension_sizeof,
        _dart_xcb_query_extension_sizeof>('xcb_query_extension_sizeof');
    return _xcb_query_extension_sizeof(
      _buffer,
    );
  }

  _dart_xcb_query_extension_sizeof _xcb_query_extension_sizeof;

  int xcb_list_extensions_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_list_extensions_sizeof ??= _dylib.lookupFunction<
        _c_xcb_list_extensions_sizeof,
        _dart_xcb_list_extensions_sizeof>('xcb_list_extensions_sizeof');
    return _xcb_list_extensions_sizeof(
      _buffer,
    );
  }

  _dart_xcb_list_extensions_sizeof _xcb_list_extensions_sizeof;

  int xcb_list_extensions_names_length(
    ffi.Pointer<xcb_list_extensions_reply_t> R,
  ) {
    _xcb_list_extensions_names_length ??= _dylib.lookupFunction<
            _c_xcb_list_extensions_names_length,
            _dart_xcb_list_extensions_names_length>(
        'xcb_list_extensions_names_length');
    return _xcb_list_extensions_names_length(
      R,
    );
  }

  _dart_xcb_list_extensions_names_length _xcb_list_extensions_names_length;

  int xcb_change_keyboard_mapping_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_change_keyboard_mapping_sizeof ??= _dylib.lookupFunction<
            _c_xcb_change_keyboard_mapping_sizeof,
            _dart_xcb_change_keyboard_mapping_sizeof>(
        'xcb_change_keyboard_mapping_sizeof');
    return _xcb_change_keyboard_mapping_sizeof(
      _buffer,
    );
  }

  _dart_xcb_change_keyboard_mapping_sizeof _xcb_change_keyboard_mapping_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_change_keyboard_mapping_keysyms(
    ffi.Pointer<xcb_change_keyboard_mapping_request_t> R,
  ) {
    _xcb_change_keyboard_mapping_keysyms ??= _dylib.lookupFunction<
            _c_xcb_change_keyboard_mapping_keysyms,
            _dart_xcb_change_keyboard_mapping_keysyms>(
        'xcb_change_keyboard_mapping_keysyms');
    return _xcb_change_keyboard_mapping_keysyms(
      R,
    );
  }

  _dart_xcb_change_keyboard_mapping_keysyms
      _xcb_change_keyboard_mapping_keysyms;

  int xcb_change_keyboard_mapping_keysyms_length(
    ffi.Pointer<xcb_change_keyboard_mapping_request_t> R,
  ) {
    _xcb_change_keyboard_mapping_keysyms_length ??= _dylib.lookupFunction<
            _c_xcb_change_keyboard_mapping_keysyms_length,
            _dart_xcb_change_keyboard_mapping_keysyms_length>(
        'xcb_change_keyboard_mapping_keysyms_length');
    return _xcb_change_keyboard_mapping_keysyms_length(
      R,
    );
  }

  _dart_xcb_change_keyboard_mapping_keysyms_length
      _xcb_change_keyboard_mapping_keysyms_length;

  int xcb_get_keyboard_mapping_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_get_keyboard_mapping_sizeof ??= _dylib.lookupFunction<
            _c_xcb_get_keyboard_mapping_sizeof,
            _dart_xcb_get_keyboard_mapping_sizeof>(
        'xcb_get_keyboard_mapping_sizeof');
    return _xcb_get_keyboard_mapping_sizeof(
      _buffer,
    );
  }

  _dart_xcb_get_keyboard_mapping_sizeof _xcb_get_keyboard_mapping_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_get_keyboard_mapping_keysyms(
    ffi.Pointer<xcb_get_keyboard_mapping_reply_t> R,
  ) {
    _xcb_get_keyboard_mapping_keysyms ??= _dylib.lookupFunction<
            _c_xcb_get_keyboard_mapping_keysyms,
            _dart_xcb_get_keyboard_mapping_keysyms>(
        'xcb_get_keyboard_mapping_keysyms');
    return _xcb_get_keyboard_mapping_keysyms(
      R,
    );
  }

  _dart_xcb_get_keyboard_mapping_keysyms _xcb_get_keyboard_mapping_keysyms;

  int xcb_get_keyboard_mapping_keysyms_length(
    ffi.Pointer<xcb_get_keyboard_mapping_reply_t> R,
  ) {
    _xcb_get_keyboard_mapping_keysyms_length ??= _dylib.lookupFunction<
            _c_xcb_get_keyboard_mapping_keysyms_length,
            _dart_xcb_get_keyboard_mapping_keysyms_length>(
        'xcb_get_keyboard_mapping_keysyms_length');
    return _xcb_get_keyboard_mapping_keysyms_length(
      R,
    );
  }

  _dart_xcb_get_keyboard_mapping_keysyms_length
      _xcb_get_keyboard_mapping_keysyms_length;

  int xcb_change_keyboard_control_value_list_serialize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
    int value_mask,
    ffi.Pointer<xcb_change_keyboard_control_value_list_t> _aux,
  ) {
    _xcb_change_keyboard_control_value_list_serialize ??= _dylib.lookupFunction<
            _c_xcb_change_keyboard_control_value_list_serialize,
            _dart_xcb_change_keyboard_control_value_list_serialize>(
        'xcb_change_keyboard_control_value_list_serialize');
    return _xcb_change_keyboard_control_value_list_serialize(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_change_keyboard_control_value_list_serialize
      _xcb_change_keyboard_control_value_list_serialize;

  int xcb_change_keyboard_control_value_list_unpack(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
    ffi.Pointer<xcb_change_keyboard_control_value_list_t> _aux,
  ) {
    _xcb_change_keyboard_control_value_list_unpack ??= _dylib.lookupFunction<
            _c_xcb_change_keyboard_control_value_list_unpack,
            _dart_xcb_change_keyboard_control_value_list_unpack>(
        'xcb_change_keyboard_control_value_list_unpack');
    return _xcb_change_keyboard_control_value_list_unpack(
      _buffer,
      value_mask,
      _aux,
    );
  }

  _dart_xcb_change_keyboard_control_value_list_unpack
      _xcb_change_keyboard_control_value_list_unpack;

  int xcb_change_keyboard_control_value_list_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
    int value_mask,
  ) {
    _xcb_change_keyboard_control_value_list_sizeof ??= _dylib.lookupFunction<
            _c_xcb_change_keyboard_control_value_list_sizeof,
            _dart_xcb_change_keyboard_control_value_list_sizeof>(
        'xcb_change_keyboard_control_value_list_sizeof');
    return _xcb_change_keyboard_control_value_list_sizeof(
      _buffer,
      value_mask,
    );
  }

  _dart_xcb_change_keyboard_control_value_list_sizeof
      _xcb_change_keyboard_control_value_list_sizeof;

  int xcb_change_keyboard_control_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_change_keyboard_control_sizeof ??= _dylib.lookupFunction<
            _c_xcb_change_keyboard_control_sizeof,
            _dart_xcb_change_keyboard_control_sizeof>(
        'xcb_change_keyboard_control_sizeof');
    return _xcb_change_keyboard_control_sizeof(
      _buffer,
    );
  }

  _dart_xcb_change_keyboard_control_sizeof _xcb_change_keyboard_control_sizeof;

  ffi.Pointer<ffi.Void> xcb_change_keyboard_control_value_list(
    ffi.Pointer<xcb_change_keyboard_control_request_t> R,
  ) {
    _xcb_change_keyboard_control_value_list ??= _dylib.lookupFunction<
            _c_xcb_change_keyboard_control_value_list,
            _dart_xcb_change_keyboard_control_value_list>(
        'xcb_change_keyboard_control_value_list');
    return _xcb_change_keyboard_control_value_list(
      R,
    );
  }

  _dart_xcb_change_keyboard_control_value_list
      _xcb_change_keyboard_control_value_list;

  int xcb_change_hosts_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_change_hosts_sizeof ??= _dylib.lookupFunction<
        _c_xcb_change_hosts_sizeof,
        _dart_xcb_change_hosts_sizeof>('xcb_change_hosts_sizeof');
    return _xcb_change_hosts_sizeof(
      _buffer,
    );
  }

  _dart_xcb_change_hosts_sizeof _xcb_change_hosts_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_change_hosts_address(
    ffi.Pointer<xcb_change_hosts_request_t> R,
  ) {
    _xcb_change_hosts_address ??= _dylib.lookupFunction<
        _c_xcb_change_hosts_address,
        _dart_xcb_change_hosts_address>('xcb_change_hosts_address');
    return _xcb_change_hosts_address(
      R,
    );
  }

  _dart_xcb_change_hosts_address _xcb_change_hosts_address;

  int xcb_change_hosts_address_length(
    ffi.Pointer<xcb_change_hosts_request_t> R,
  ) {
    _xcb_change_hosts_address_length ??= _dylib.lookupFunction<
            _c_xcb_change_hosts_address_length,
            _dart_xcb_change_hosts_address_length>(
        'xcb_change_hosts_address_length');
    return _xcb_change_hosts_address_length(
      R,
    );
  }

  _dart_xcb_change_hosts_address_length _xcb_change_hosts_address_length;

  int xcb_host_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_host_sizeof ??=
        _dylib.lookupFunction<_c_xcb_host_sizeof, _dart_xcb_host_sizeof>(
            'xcb_host_sizeof');
    return _xcb_host_sizeof(
      _buffer,
    );
  }

  _dart_xcb_host_sizeof _xcb_host_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_host_address(
    ffi.Pointer<xcb_host_t> R,
  ) {
    _xcb_host_address ??=
        _dylib.lookupFunction<_c_xcb_host_address, _dart_xcb_host_address>(
            'xcb_host_address');
    return _xcb_host_address(
      R,
    );
  }

  _dart_xcb_host_address _xcb_host_address;

  int xcb_host_address_length(
    ffi.Pointer<xcb_host_t> R,
  ) {
    _xcb_host_address_length ??= _dylib.lookupFunction<
        _c_xcb_host_address_length,
        _dart_xcb_host_address_length>('xcb_host_address_length');
    return _xcb_host_address_length(
      R,
    );
  }

  _dart_xcb_host_address_length _xcb_host_address_length;

  void xcb_host_next(
    ffi.Pointer<xcb_host_iterator_t> i,
  ) {
    _xcb_host_next ??= _dylib
        .lookupFunction<_c_xcb_host_next, _dart_xcb_host_next>('xcb_host_next');
    return _xcb_host_next(
      i,
    );
  }

  _dart_xcb_host_next _xcb_host_next;

  int xcb_list_hosts_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_list_hosts_sizeof ??= _dylib.lookupFunction<_c_xcb_list_hosts_sizeof,
        _dart_xcb_list_hosts_sizeof>('xcb_list_hosts_sizeof');
    return _xcb_list_hosts_sizeof(
      _buffer,
    );
  }

  _dart_xcb_list_hosts_sizeof _xcb_list_hosts_sizeof;

  int xcb_list_hosts_hosts_length(
    ffi.Pointer<xcb_list_hosts_reply_t> R,
  ) {
    _xcb_list_hosts_hosts_length ??= _dylib.lookupFunction<
        _c_xcb_list_hosts_hosts_length,
        _dart_xcb_list_hosts_hosts_length>('xcb_list_hosts_hosts_length');
    return _xcb_list_hosts_hosts_length(
      R,
    );
  }

  _dart_xcb_list_hosts_hosts_length _xcb_list_hosts_hosts_length;

  int xcb_rotate_properties_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_rotate_properties_sizeof ??= _dylib.lookupFunction<
        _c_xcb_rotate_properties_sizeof,
        _dart_xcb_rotate_properties_sizeof>('xcb_rotate_properties_sizeof');
    return _xcb_rotate_properties_sizeof(
      _buffer,
    );
  }

  _dart_xcb_rotate_properties_sizeof _xcb_rotate_properties_sizeof;

  ffi.Pointer<ffi.Uint32> xcb_rotate_properties_atoms(
    ffi.Pointer<xcb_rotate_properties_request_t> R,
  ) {
    _xcb_rotate_properties_atoms ??= _dylib.lookupFunction<
        _c_xcb_rotate_properties_atoms,
        _dart_xcb_rotate_properties_atoms>('xcb_rotate_properties_atoms');
    return _xcb_rotate_properties_atoms(
      R,
    );
  }

  _dart_xcb_rotate_properties_atoms _xcb_rotate_properties_atoms;

  int xcb_rotate_properties_atoms_length(
    ffi.Pointer<xcb_rotate_properties_request_t> R,
  ) {
    _xcb_rotate_properties_atoms_length ??= _dylib.lookupFunction<
            _c_xcb_rotate_properties_atoms_length,
            _dart_xcb_rotate_properties_atoms_length>(
        'xcb_rotate_properties_atoms_length');
    return _xcb_rotate_properties_atoms_length(
      R,
    );
  }

  _dart_xcb_rotate_properties_atoms_length _xcb_rotate_properties_atoms_length;

  int xcb_set_pointer_mapping_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_set_pointer_mapping_sizeof ??= _dylib.lookupFunction<
        _c_xcb_set_pointer_mapping_sizeof,
        _dart_xcb_set_pointer_mapping_sizeof>('xcb_set_pointer_mapping_sizeof');
    return _xcb_set_pointer_mapping_sizeof(
      _buffer,
    );
  }

  _dart_xcb_set_pointer_mapping_sizeof _xcb_set_pointer_mapping_sizeof;

  int xcb_get_pointer_mapping_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_get_pointer_mapping_sizeof ??= _dylib.lookupFunction<
        _c_xcb_get_pointer_mapping_sizeof,
        _dart_xcb_get_pointer_mapping_sizeof>('xcb_get_pointer_mapping_sizeof');
    return _xcb_get_pointer_mapping_sizeof(
      _buffer,
    );
  }

  _dart_xcb_get_pointer_mapping_sizeof _xcb_get_pointer_mapping_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_get_pointer_mapping_map(
    ffi.Pointer<xcb_get_pointer_mapping_reply_t> R,
  ) {
    _xcb_get_pointer_mapping_map ??= _dylib.lookupFunction<
        _c_xcb_get_pointer_mapping_map,
        _dart_xcb_get_pointer_mapping_map>('xcb_get_pointer_mapping_map');
    return _xcb_get_pointer_mapping_map(
      R,
    );
  }

  _dart_xcb_get_pointer_mapping_map _xcb_get_pointer_mapping_map;

  int xcb_get_pointer_mapping_map_length(
    ffi.Pointer<xcb_get_pointer_mapping_reply_t> R,
  ) {
    _xcb_get_pointer_mapping_map_length ??= _dylib.lookupFunction<
            _c_xcb_get_pointer_mapping_map_length,
            _dart_xcb_get_pointer_mapping_map_length>(
        'xcb_get_pointer_mapping_map_length');
    return _xcb_get_pointer_mapping_map_length(
      R,
    );
  }

  _dart_xcb_get_pointer_mapping_map_length _xcb_get_pointer_mapping_map_length;

  int xcb_set_modifier_mapping_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_set_modifier_mapping_sizeof ??= _dylib.lookupFunction<
            _c_xcb_set_modifier_mapping_sizeof,
            _dart_xcb_set_modifier_mapping_sizeof>(
        'xcb_set_modifier_mapping_sizeof');
    return _xcb_set_modifier_mapping_sizeof(
      _buffer,
    );
  }

  _dart_xcb_set_modifier_mapping_sizeof _xcb_set_modifier_mapping_sizeof;

  int xcb_get_modifier_mapping_sizeof(
    ffi.Pointer<ffi.Void> _buffer,
  ) {
    _xcb_get_modifier_mapping_sizeof ??= _dylib.lookupFunction<
            _c_xcb_get_modifier_mapping_sizeof,
            _dart_xcb_get_modifier_mapping_sizeof>(
        'xcb_get_modifier_mapping_sizeof');
    return _xcb_get_modifier_mapping_sizeof(
      _buffer,
    );
  }

  _dart_xcb_get_modifier_mapping_sizeof _xcb_get_modifier_mapping_sizeof;

  ffi.Pointer<ffi.Uint8> xcb_get_modifier_mapping_keycodes(
    ffi.Pointer<xcb_get_modifier_mapping_reply_t> R,
  ) {
    _xcb_get_modifier_mapping_keycodes ??= _dylib.lookupFunction<
            _c_xcb_get_modifier_mapping_keycodes,
            _dart_xcb_get_modifier_mapping_keycodes>(
        'xcb_get_modifier_mapping_keycodes');
    return _xcb_get_modifier_mapping_keycodes(
      R,
    );
  }

  _dart_xcb_get_modifier_mapping_keycodes _xcb_get_modifier_mapping_keycodes;

  int xcb_get_modifier_mapping_keycodes_length(
    ffi.Pointer<xcb_get_modifier_mapping_reply_t> R,
  ) {
    _xcb_get_modifier_mapping_keycodes_length ??= _dylib.lookupFunction<
            _c_xcb_get_modifier_mapping_keycodes_length,
            _dart_xcb_get_modifier_mapping_keycodes_length>(
        'xcb_get_modifier_mapping_keycodes_length');
    return _xcb_get_modifier_mapping_keycodes_length(
      R,
    );
  }

  _dart_xcb_get_modifier_mapping_keycodes_length
      _xcb_get_modifier_mapping_keycodes_length;

  int xcb_flush(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_flush ??=
        _dylib.lookupFunction<_c_xcb_flush, _dart_xcb_flush>('xcb_flush');
    return _xcb_flush(
      c,
    );
  }

  _dart_xcb_flush _xcb_flush;

  int xcb_get_maximum_request_length(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_get_maximum_request_length ??= _dylib.lookupFunction<
        _c_xcb_get_maximum_request_length,
        _dart_xcb_get_maximum_request_length>('xcb_get_maximum_request_length');
    return _xcb_get_maximum_request_length(
      c,
    );
  }

  _dart_xcb_get_maximum_request_length _xcb_get_maximum_request_length;

  void xcb_prefetch_maximum_request_length(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_prefetch_maximum_request_length ??= _dylib.lookupFunction<
            _c_xcb_prefetch_maximum_request_length,
            _dart_xcb_prefetch_maximum_request_length>(
        'xcb_prefetch_maximum_request_length');
    return _xcb_prefetch_maximum_request_length(
      c,
    );
  }

  _dart_xcb_prefetch_maximum_request_length
      _xcb_prefetch_maximum_request_length;

  ffi.Pointer<xcb_generic_event_t> xcb_wait_for_event(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_wait_for_event ??=
        _dylib.lookupFunction<_c_xcb_wait_for_event, _dart_xcb_wait_for_event>(
            'xcb_wait_for_event');
    return _xcb_wait_for_event(
      c,
    );
  }

  _dart_xcb_wait_for_event _xcb_wait_for_event;

  ffi.Pointer<xcb_generic_event_t> xcb_poll_for_event(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_poll_for_event ??=
        _dylib.lookupFunction<_c_xcb_poll_for_event, _dart_xcb_poll_for_event>(
            'xcb_poll_for_event');
    return _xcb_poll_for_event(
      c,
    );
  }

  _dart_xcb_poll_for_event _xcb_poll_for_event;

  ffi.Pointer<xcb_generic_event_t> xcb_poll_for_queued_event(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_poll_for_queued_event ??= _dylib.lookupFunction<
        _c_xcb_poll_for_queued_event,
        _dart_xcb_poll_for_queued_event>('xcb_poll_for_queued_event');
    return _xcb_poll_for_queued_event(
      c,
    );
  }

  _dart_xcb_poll_for_queued_event _xcb_poll_for_queued_event;

  ffi.Pointer<xcb_generic_event_t> xcb_poll_for_special_event(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<xcb_special_event> se,
  ) {
    _xcb_poll_for_special_event ??= _dylib.lookupFunction<
        _c_xcb_poll_for_special_event,
        _dart_xcb_poll_for_special_event>('xcb_poll_for_special_event');
    return _xcb_poll_for_special_event(
      c,
      se,
    );
  }

  _dart_xcb_poll_for_special_event _xcb_poll_for_special_event;

  ffi.Pointer<xcb_generic_event_t> xcb_wait_for_special_event(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<xcb_special_event> se,
  ) {
    _xcb_wait_for_special_event ??= _dylib.lookupFunction<
        _c_xcb_wait_for_special_event,
        _dart_xcb_wait_for_special_event>('xcb_wait_for_special_event');
    return _xcb_wait_for_special_event(
      c,
      se,
    );
  }

  _dart_xcb_wait_for_special_event _xcb_wait_for_special_event;

  ffi.Pointer<xcb_special_event> xcb_register_for_special_xge(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<xcb_extension_t> ext,
    int eid,
    ffi.Pointer<ffi.Uint32> stamp,
  ) {
    _xcb_register_for_special_xge ??= _dylib.lookupFunction<
        _c_xcb_register_for_special_xge,
        _dart_xcb_register_for_special_xge>('xcb_register_for_special_xge');
    return _xcb_register_for_special_xge(
      c,
      ext,
      eid,
      stamp,
    );
  }

  _dart_xcb_register_for_special_xge _xcb_register_for_special_xge;

  void xcb_unregister_for_special_event(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<xcb_special_event> se,
  ) {
    _xcb_unregister_for_special_event ??= _dylib.lookupFunction<
            _c_xcb_unregister_for_special_event,
            _dart_xcb_unregister_for_special_event>(
        'xcb_unregister_for_special_event');
    return _xcb_unregister_for_special_event(
      c,
      se,
    );
  }

  _dart_xcb_unregister_for_special_event _xcb_unregister_for_special_event;

  void xcb_discard_reply(
    ffi.Pointer<xcb_connection_t> c,
    int sequence,
  ) {
    _xcb_discard_reply ??=
        _dylib.lookupFunction<_c_xcb_discard_reply, _dart_xcb_discard_reply>(
            'xcb_discard_reply');
    return _xcb_discard_reply(
      c,
      sequence,
    );
  }

  _dart_xcb_discard_reply _xcb_discard_reply;

  void xcb_discard_reply64(
    ffi.Pointer<xcb_connection_t> c,
    int sequence,
  ) {
    _xcb_discard_reply64 ??= _dylib.lookupFunction<_c_xcb_discard_reply64,
        _dart_xcb_discard_reply64>('xcb_discard_reply64');
    return _xcb_discard_reply64(
      c,
      sequence,
    );
  }

  _dart_xcb_discard_reply64 _xcb_discard_reply64;

  ffi.Pointer<xcb_query_extension_reply_t> xcb_get_extension_data(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<xcb_extension_t> ext,
  ) {
    _xcb_get_extension_data ??= _dylib.lookupFunction<_c_xcb_get_extension_data,
        _dart_xcb_get_extension_data>('xcb_get_extension_data');
    return _xcb_get_extension_data(
      c,
      ext,
    );
  }

  _dart_xcb_get_extension_data _xcb_get_extension_data;

  void xcb_prefetch_extension_data(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<xcb_extension_t> ext,
  ) {
    _xcb_prefetch_extension_data ??= _dylib.lookupFunction<
        _c_xcb_prefetch_extension_data,
        _dart_xcb_prefetch_extension_data>('xcb_prefetch_extension_data');
    return _xcb_prefetch_extension_data(
      c,
      ext,
    );
  }

  _dart_xcb_prefetch_extension_data _xcb_prefetch_extension_data;

  ffi.Pointer<xcb_setup_t> xcb_get_setup(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_get_setup ??= _dylib
        .lookupFunction<_c_xcb_get_setup, _dart_xcb_get_setup>('xcb_get_setup');
    return _xcb_get_setup(
      c,
    );
  }

  _dart_xcb_get_setup _xcb_get_setup;

  int xcb_get_file_descriptor(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_get_file_descriptor ??= _dylib.lookupFunction<
        _c_xcb_get_file_descriptor,
        _dart_xcb_get_file_descriptor>('xcb_get_file_descriptor');
    return _xcb_get_file_descriptor(
      c,
    );
  }

  _dart_xcb_get_file_descriptor _xcb_get_file_descriptor;

  int xcb_connection_has_error(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_connection_has_error ??= _dylib.lookupFunction<
        _c_xcb_connection_has_error,
        _dart_xcb_connection_has_error>('xcb_connection_has_error');
    return _xcb_connection_has_error(
      c,
    );
  }

  _dart_xcb_connection_has_error _xcb_connection_has_error;

  ffi.Pointer<xcb_connection_t> xcb_connect_to_fd(
    int fd,
    ffi.Pointer<xcb_auth_info_t> auth_info,
  ) {
    _xcb_connect_to_fd ??=
        _dylib.lookupFunction<_c_xcb_connect_to_fd, _dart_xcb_connect_to_fd>(
            'xcb_connect_to_fd');
    return _xcb_connect_to_fd(
      fd,
      auth_info,
    );
  }

  _dart_xcb_connect_to_fd _xcb_connect_to_fd;

  void xcb_disconnect(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_disconnect ??=
        _dylib.lookupFunction<_c_xcb_disconnect, _dart_xcb_disconnect>(
            'xcb_disconnect');
    return _xcb_disconnect(
      c,
    );
  }

  _dart_xcb_disconnect _xcb_disconnect;

  int xcb_parse_display(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> host,
    ffi.Pointer<ffi.Int32> display,
    ffi.Pointer<ffi.Int32> screen,
  ) {
    _xcb_parse_display ??=
        _dylib.lookupFunction<_c_xcb_parse_display, _dart_xcb_parse_display>(
            'xcb_parse_display');
    return _xcb_parse_display(
      name,
      host,
      display,
      screen,
    );
  }

  _dart_xcb_parse_display _xcb_parse_display;

  ffi.Pointer<xcb_connection_t> xcb_connect(
    ffi.Pointer<ffi.Int8> displayname,
    ffi.Pointer<ffi.Int32> screenp,
  ) {
    _xcb_connect ??=
        _dylib.lookupFunction<_c_xcb_connect, _dart_xcb_connect>('xcb_connect');
    return _xcb_connect(
      displayname,
      screenp,
    );
  }

  _dart_xcb_connect _xcb_connect;

  ffi.Pointer<xcb_connection_t> xcb_connect_to_display_with_auth_info(
    ffi.Pointer<ffi.Int8> display,
    ffi.Pointer<xcb_auth_info_t> auth,
    ffi.Pointer<ffi.Int32> screen,
  ) {
    _xcb_connect_to_display_with_auth_info ??= _dylib.lookupFunction<
            _c_xcb_connect_to_display_with_auth_info,
            _dart_xcb_connect_to_display_with_auth_info>(
        'xcb_connect_to_display_with_auth_info');
    return _xcb_connect_to_display_with_auth_info(
      display,
      auth,
      screen,
    );
  }

  _dart_xcb_connect_to_display_with_auth_info
      _xcb_connect_to_display_with_auth_info;

  int xcb_generate_id(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_generate_id ??=
        _dylib.lookupFunction<_c_xcb_generate_id, _dart_xcb_generate_id>(
            'xcb_generate_id');
    return _xcb_generate_id(
      c,
    );
  }

  _dart_xcb_generate_id _xcb_generate_id;

  int xcb_total_read(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_total_read ??=
        _dylib.lookupFunction<_c_xcb_total_read, _dart_xcb_total_read>(
            'xcb_total_read');
    return _xcb_total_read(
      c,
    );
  }

  _dart_xcb_total_read _xcb_total_read;

  int xcb_total_written(
    ffi.Pointer<xcb_connection_t> c,
  ) {
    _xcb_total_written ??=
        _dylib.lookupFunction<_c_xcb_total_written, _dart_xcb_total_written>(
            'xcb_total_written');
    return _xcb_total_written(
      c,
    );
  }

  _dart_xcb_total_written _xcb_total_written;

  ffi.Pointer<xcb_connection_t> XGetXCBConnection(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _XGetXCBConnection ??=
        _dylib.lookupFunction<_c_XGetXCBConnection, _dart_XGetXCBConnection>(
            'XGetXCBConnection');
    return _XGetXCBConnection(
      dpy,
    );
  }

  _dart_XGetXCBConnection _XGetXCBConnection;

  void XSetEventQueueOwner(
    ffi.Pointer<_XDisplay> dpy,
    int owner,
  ) {
    _XSetEventQueueOwner ??= _dylib.lookupFunction<_c_XSetEventQueueOwner,
        _dart_XSetEventQueueOwner>('XSetEventQueueOwner');
    return _XSetEventQueueOwner(
      dpy,
      owner,
    );
  }

  _dart_XSetEventQueueOwner _XSetEventQueueOwner;

  ffi.Pointer<ffi.Int32> __errno_location() {
    ___errno_location ??=
        _dylib.lookupFunction<_c___errno_location, _dart___errno_location>(
            '__errno_location');
    return ___errno_location();
  }

  _dart___errno_location ___errno_location;

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    _memcpy ??= _dylib.lookupFunction<_c_memcpy, _dart_memcpy>('memcpy');
    return _memcpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart_memcpy _memcpy;

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    _memmove ??= _dylib.lookupFunction<_c_memmove, _dart_memmove>('memmove');
    return _memmove(
      __dest,
      __src,
      __n,
    );
  }

  _dart_memmove _memmove;

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dest,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    _memccpy ??= _dylib.lookupFunction<_c_memccpy, _dart_memccpy>('memccpy');
    return _memccpy(
      __dest,
      __src,
      __c,
      __n,
    );
  }

  _dart_memccpy _memccpy;

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    _memset ??= _dylib.lookupFunction<_c_memset, _dart_memset>('memset');
    return _memset(
      __s,
      __c,
      __n,
    );
  }

  _dart_memset _memset;

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    _memcmp ??= _dylib.lookupFunction<_c_memcmp, _dart_memcmp>('memcmp');
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_memcmp _memcmp;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    _memchr ??= _dylib.lookupFunction<_c_memchr, _dart_memchr>('memchr');
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  _dart_memchr _memchr;

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    _strcpy ??= _dylib.lookupFunction<_c_strcpy, _dart_strcpy>('strcpy');
    return _strcpy(
      __dest,
      __src,
    );
  }

  _dart_strcpy _strcpy;

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _strncpy ??= _dylib.lookupFunction<_c_strncpy, _dart_strncpy>('strncpy');
    return _strncpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart_strncpy _strncpy;

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    _strcat ??= _dylib.lookupFunction<_c_strcat, _dart_strcat>('strcat');
    return _strcat(
      __dest,
      __src,
    );
  }

  _dart_strcat _strcat;

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _strncat ??= _dylib.lookupFunction<_c_strncat, _dart_strncat>('strncat');
    return _strncat(
      __dest,
      __src,
      __n,
    );
  }

  _dart_strncat _strncat;

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcmp ??= _dylib.lookupFunction<_c_strcmp, _dart_strcmp>('strcmp');
    return _strcmp(
      __s1,
      __s2,
    );
  }

  _dart_strcmp _strcmp;

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    _strncmp ??= _dylib.lookupFunction<_c_strncmp, _dart_strncmp>('strncmp');
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_strncmp _strncmp;

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcoll ??= _dylib.lookupFunction<_c_strcoll, _dart_strcoll>('strcoll');
    return _strcoll(
      __s1,
      __s2,
    );
  }

  _dart_strcoll _strcoll;

  int strxfrm(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _strxfrm ??= _dylib.lookupFunction<_c_strxfrm, _dart_strxfrm>('strxfrm');
    return _strxfrm(
      __dest,
      __src,
      __n,
    );
  }

  _dart_strxfrm _strxfrm;

  int strcoll_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _strcoll_l ??=
        _dylib.lookupFunction<_c_strcoll_l, _dart_strcoll_l>('strcoll_l');
    return _strcoll_l(
      __s1,
      __s2,
      __l,
    );
  }

  _dart_strcoll_l _strcoll_l;

  int strxfrm_l(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _strxfrm_l ??=
        _dylib.lookupFunction<_c_strxfrm_l, _dart_strxfrm_l>('strxfrm_l');
    return _strxfrm_l(
      __dest,
      __src,
      __n,
      __l,
    );
  }

  _dart_strxfrm_l _strxfrm_l;

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _strdup ??= _dylib.lookupFunction<_c_strdup, _dart_strdup>('strdup');
    return _strdup(
      __s,
    );
  }

  _dart_strdup _strdup;

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __string,
    int __n,
  ) {
    _strndup ??= _dylib.lookupFunction<_c_strndup, _dart_strndup>('strndup');
    return _strndup(
      __string,
      __n,
    );
  }

  _dart_strndup _strndup;

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _strchr ??= _dylib.lookupFunction<_c_strchr, _dart_strchr>('strchr');
    return _strchr(
      __s,
      __c,
    );
  }

  _dart_strchr _strchr;

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _strrchr ??= _dylib.lookupFunction<_c_strrchr, _dart_strrchr>('strrchr');
    return _strrchr(
      __s,
      __c,
    );
  }

  _dart_strrchr _strrchr;

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __reject,
  ) {
    _strcspn ??= _dylib.lookupFunction<_c_strcspn, _dart_strcspn>('strcspn');
    return _strcspn(
      __s,
      __reject,
    );
  }

  _dart_strcspn _strcspn;

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    _strspn ??= _dylib.lookupFunction<_c_strspn, _dart_strspn>('strspn');
    return _strspn(
      __s,
      __accept,
    );
  }

  _dart_strspn _strspn;

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __accept,
  ) {
    _strpbrk ??= _dylib.lookupFunction<_c_strpbrk, _dart_strpbrk>('strpbrk');
    return _strpbrk(
      __s,
      __accept,
    );
  }

  _dart_strpbrk _strpbrk;

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __haystack,
    ffi.Pointer<ffi.Int8> __needle,
  ) {
    _strstr ??= _dylib.lookupFunction<_c_strstr, _dart_strstr>('strstr');
    return _strstr(
      __haystack,
      __needle,
    );
  }

  _dart_strstr _strstr;

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    _strtok ??= _dylib.lookupFunction<_c_strtok, _dart_strtok>('strtok');
    return _strtok(
      __s,
      __delim,
    );
  }

  _dart_strtok _strtok;

  ffi.Pointer<ffi.Int8> __strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    ___strtok_r ??=
        _dylib.lookupFunction<_c___strtok_r, _dart___strtok_r>('__strtok_r');
    return ___strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  _dart___strtok_r ___strtok_r;

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
  ) {
    _strtok_r ??=
        _dylib.lookupFunction<_c_strtok_r, _dart_strtok_r>('strtok_r');
    return _strtok_r(
      __s,
      __delim,
      __save_ptr,
    );
  }

  _dart_strtok_r _strtok_r;

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _strlen ??= _dylib.lookupFunction<_c_strlen, _dart_strlen>('strlen');
    return _strlen(
      __s,
    );
  }

  _dart_strlen _strlen;

  int strnlen(
    ffi.Pointer<ffi.Int8> __string,
    int __maxlen,
  ) {
    _strnlen ??= _dylib.lookupFunction<_c_strnlen, _dart_strnlen>('strnlen');
    return _strnlen(
      __string,
      __maxlen,
    );
  }

  _dart_strnlen _strnlen;

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    _strerror ??=
        _dylib.lookupFunction<_c_strerror, _dart_strerror>('strerror');
    return _strerror(
      __errnum,
    );
  }

  _dart_strerror _strerror;

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    _strerror_r ??=
        _dylib.lookupFunction<_c_strerror_r, _dart_strerror_r>('strerror_r');
    return _strerror_r(
      __errnum,
      __buf,
      __buflen,
    );
  }

  _dart_strerror_r _strerror_r;

  ffi.Pointer<ffi.Int8> strerror_l(
    int __errnum,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _strerror_l ??=
        _dylib.lookupFunction<_c_strerror_l, _dart_strerror_l>('strerror_l');
    return _strerror_l(
      __errnum,
      __l,
    );
  }

  _dart_strerror_l _strerror_l;

  int bcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    _bcmp ??= _dylib.lookupFunction<_c_bcmp, _dart_bcmp>('bcmp');
    return _bcmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_bcmp _bcmp;

  void bcopy(
    ffi.Pointer<ffi.Void> __src,
    ffi.Pointer<ffi.Void> __dest,
    int __n,
  ) {
    _bcopy ??= _dylib.lookupFunction<_c_bcopy, _dart_bcopy>('bcopy');
    return _bcopy(
      __src,
      __dest,
      __n,
    );
  }

  _dart_bcopy _bcopy;

  void bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    _bzero ??= _dylib.lookupFunction<_c_bzero, _dart_bzero>('bzero');
    return _bzero(
      __s,
      __n,
    );
  }

  _dart_bzero _bzero;

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _index ??= _dylib.lookupFunction<_c_index, _dart_index>('index');
    return _index(
      __s,
      __c,
    );
  }

  _dart_index _index;

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _rindex ??= _dylib.lookupFunction<_c_rindex, _dart_rindex>('rindex');
    return _rindex(
      __s,
      __c,
    );
  }

  _dart_rindex _rindex;

  int ffs(
    int __i,
  ) {
    _ffs ??= _dylib.lookupFunction<_c_ffs, _dart_ffs>('ffs');
    return _ffs(
      __i,
    );
  }

  _dart_ffs _ffs;

  int ffsl(
    int __l,
  ) {
    _ffsl ??= _dylib.lookupFunction<_c_ffsl, _dart_ffsl>('ffsl');
    return _ffsl(
      __l,
    );
  }

  _dart_ffsl _ffsl;

  int ffsll(
    int __ll,
  ) {
    _ffsll ??= _dylib.lookupFunction<_c_ffsll, _dart_ffsll>('ffsll');
    return _ffsll(
      __ll,
    );
  }

  _dart_ffsll _ffsll;

  int strcasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcasecmp ??=
        _dylib.lookupFunction<_c_strcasecmp, _dart_strcasecmp>('strcasecmp');
    return _strcasecmp(
      __s1,
      __s2,
    );
  }

  _dart_strcasecmp _strcasecmp;

  int strncasecmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    _strncasecmp ??=
        _dylib.lookupFunction<_c_strncasecmp, _dart_strncasecmp>('strncasecmp');
    return _strncasecmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_strncasecmp _strncasecmp;

  int strcasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _strcasecmp_l ??= _dylib
        .lookupFunction<_c_strcasecmp_l, _dart_strcasecmp_l>('strcasecmp_l');
    return _strcasecmp_l(
      __s1,
      __s2,
      __loc,
    );
  }

  _dart_strcasecmp_l _strcasecmp_l;

  int strncasecmp_l(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
    ffi.Pointer<__locale_struct> __loc,
  ) {
    _strncasecmp_l ??= _dylib
        .lookupFunction<_c_strncasecmp_l, _dart_strncasecmp_l>('strncasecmp_l');
    return _strncasecmp_l(
      __s1,
      __s2,
      __n,
      __loc,
    );
  }

  _dart_strncasecmp_l _strncasecmp_l;

  void explicit_bzero(
    ffi.Pointer<ffi.Void> __s,
    int __n,
  ) {
    _explicit_bzero ??=
        _dylib.lookupFunction<_c_explicit_bzero, _dart_explicit_bzero>(
            'explicit_bzero');
    return _explicit_bzero(
      __s,
      __n,
    );
  }

  _dart_explicit_bzero _explicit_bzero;

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    _strsep ??= _dylib.lookupFunction<_c_strsep, _dart_strsep>('strsep');
    return _strsep(
      __stringp,
      __delim,
    );
  }

  _dart_strsep _strsep;

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    _strsignal ??=
        _dylib.lookupFunction<_c_strsignal, _dart_strsignal>('strsignal');
    return _strsignal(
      __sig,
    );
  }

  _dart_strsignal _strsignal;

  ffi.Pointer<ffi.Int8> __stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    ___stpcpy ??=
        _dylib.lookupFunction<_c___stpcpy, _dart___stpcpy>('__stpcpy');
    return ___stpcpy(
      __dest,
      __src,
    );
  }

  _dart___stpcpy ___stpcpy;

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    _stpcpy ??= _dylib.lookupFunction<_c_stpcpy, _dart_stpcpy>('stpcpy');
    return _stpcpy(
      __dest,
      __src,
    );
  }

  _dart_stpcpy _stpcpy;

  ffi.Pointer<ffi.Int8> __stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    ___stpncpy ??=
        _dylib.lookupFunction<_c___stpncpy, _dart___stpncpy>('__stpncpy');
    return ___stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart___stpncpy ___stpncpy;

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dest,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _stpncpy ??= _dylib.lookupFunction<_c_stpncpy, _dart_stpncpy>('stpncpy');
    return _stpncpy(
      __dest,
      __src,
      __n,
    );
  }

  _dart_stpncpy _stpncpy;

  int __ctype_get_mb_cur_max() {
    ___ctype_get_mb_cur_max ??= _dylib.lookupFunction<_c___ctype_get_mb_cur_max,
        _dart___ctype_get_mb_cur_max>('__ctype_get_mb_cur_max');
    return ___ctype_get_mb_cur_max();
  }

  _dart___ctype_get_mb_cur_max ___ctype_get_mb_cur_max;

  double atof(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    _atof ??= _dylib.lookupFunction<_c_atof, _dart_atof>('atof');
    return _atof(
      __nptr,
    );
  }

  _dart_atof _atof;

  int atoi(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    _atoi ??= _dylib.lookupFunction<_c_atoi, _dart_atoi>('atoi');
    return _atoi(
      __nptr,
    );
  }

  _dart_atoi _atoi;

  int atol(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    _atol ??= _dylib.lookupFunction<_c_atol, _dart_atol>('atol');
    return _atol(
      __nptr,
    );
  }

  _dart_atol _atol;

  int atoll(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    _atoll ??= _dylib.lookupFunction<_c_atoll, _dart_atoll>('atoll');
    return _atoll(
      __nptr,
    );
  }

  _dart_atoll _atoll;

  double strtod(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    _strtod ??= _dylib.lookupFunction<_c_strtod, _dart_strtod>('strtod');
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  _dart_strtod _strtod;

  double strtof(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    _strtof ??= _dylib.lookupFunction<_c_strtof, _dart_strtof>('strtof');
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  _dart_strtof _strtof;

  int strtol(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtol ??= _dylib.lookupFunction<_c_strtol, _dart_strtol>('strtol');
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtol _strtol;

  int strtoul(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoul ??= _dylib.lookupFunction<_c_strtoul, _dart_strtoul>('strtoul');
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoul _strtoul;

  int strtoq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoq ??= _dylib.lookupFunction<_c_strtoq, _dart_strtoq>('strtoq');
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoq _strtoq;

  int strtouq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtouq ??= _dylib.lookupFunction<_c_strtouq, _dart_strtouq>('strtouq');
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtouq _strtouq;

  int strtoll(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoll ??= _dylib.lookupFunction<_c_strtoll, _dart_strtoll>('strtoll');
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoll _strtoll;

  int strtoull(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoull ??=
        _dylib.lookupFunction<_c_strtoull, _dart_strtoull>('strtoull');
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoull _strtoull;

  ffi.Pointer<ffi.Int8> l64a(
    int __n,
  ) {
    _l64a ??= _dylib.lookupFunction<_c_l64a, _dart_l64a>('l64a');
    return _l64a(
      __n,
    );
  }

  _dart_l64a _l64a;

  int a64l(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _a64l ??= _dylib.lookupFunction<_c_a64l, _dart_a64l>('a64l');
    return _a64l(
      __s,
    );
  }

  _dart_a64l _a64l;

  int random() {
    _random ??= _dylib.lookupFunction<_c_random, _dart_random>('random');
    return _random();
  }

  _dart_random _random;

  void srandom(
    int __seed,
  ) {
    _srandom ??= _dylib.lookupFunction<_c_srandom, _dart_srandom>('srandom');
    return _srandom(
      __seed,
    );
  }

  _dart_srandom _srandom;

  ffi.Pointer<ffi.Int8> initstate(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
  ) {
    _initstate ??=
        _dylib.lookupFunction<_c_initstate, _dart_initstate>('initstate');
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  _dart_initstate _initstate;

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> __statebuf,
  ) {
    _setstate ??=
        _dylib.lookupFunction<_c_setstate, _dart_setstate>('setstate');
    return _setstate(
      __statebuf,
    );
  }

  _dart_setstate _setstate;

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    _random_r ??=
        _dylib.lookupFunction<_c_random_r, _dart_random_r>('random_r');
    return _random_r(
      __buf,
      __result,
    );
  }

  _dart_random_r _random_r;

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    _srandom_r ??=
        _dylib.lookupFunction<_c_srandom_r, _dart_srandom_r>('srandom_r');
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  _dart_srandom_r _srandom_r;

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    _initstate_r ??=
        _dylib.lookupFunction<_c_initstate_r, _dart_initstate_r>('initstate_r');
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  _dart_initstate_r _initstate_r;

  int setstate_r(
    ffi.Pointer<ffi.Int8> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    _setstate_r ??=
        _dylib.lookupFunction<_c_setstate_r, _dart_setstate_r>('setstate_r');
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  _dart_setstate_r _setstate_r;

  int rand() {
    _rand ??= _dylib.lookupFunction<_c_rand, _dart_rand>('rand');
    return _rand();
  }

  _dart_rand _rand;

  void srand(
    int __seed,
  ) {
    _srand ??= _dylib.lookupFunction<_c_srand, _dart_srand>('srand');
    return _srand(
      __seed,
    );
  }

  _dart_srand _srand;

  int rand_r(
    ffi.Pointer<ffi.Uint32> __seed,
  ) {
    _rand_r ??= _dylib.lookupFunction<_c_rand_r, _dart_rand_r>('rand_r');
    return _rand_r(
      __seed,
    );
  }

  _dart_rand_r _rand_r;

  double drand48() {
    _drand48 ??= _dylib.lookupFunction<_c_drand48, _dart_drand48>('drand48');
    return _drand48();
  }

  _dart_drand48 _drand48;

  double erand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    _erand48 ??= _dylib.lookupFunction<_c_erand48, _dart_erand48>('erand48');
    return _erand48(
      __xsubi,
    );
  }

  _dart_erand48 _erand48;

  int lrand48() {
    _lrand48 ??= _dylib.lookupFunction<_c_lrand48, _dart_lrand48>('lrand48');
    return _lrand48();
  }

  _dart_lrand48 _lrand48;

  int nrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    _nrand48 ??= _dylib.lookupFunction<_c_nrand48, _dart_nrand48>('nrand48');
    return _nrand48(
      __xsubi,
    );
  }

  _dart_nrand48 _nrand48;

  int mrand48() {
    _mrand48 ??= _dylib.lookupFunction<_c_mrand48, _dart_mrand48>('mrand48');
    return _mrand48();
  }

  _dart_mrand48 _mrand48;

  int jrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    _jrand48 ??= _dylib.lookupFunction<_c_jrand48, _dart_jrand48>('jrand48');
    return _jrand48(
      __xsubi,
    );
  }

  _dart_jrand48 _jrand48;

  void srand48(
    int __seedval,
  ) {
    _srand48 ??= _dylib.lookupFunction<_c_srand48, _dart_srand48>('srand48');
    return _srand48(
      __seedval,
    );
  }

  _dart_srand48 _srand48;

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> __seed16v,
  ) {
    _seed48 ??= _dylib.lookupFunction<_c_seed48, _dart_seed48>('seed48');
    return _seed48(
      __seed16v,
    );
  }

  _dart_seed48 _seed48;

  void lcong48(
    ffi.Pointer<ffi.Uint16> __param,
  ) {
    _lcong48 ??= _dylib.lookupFunction<_c_lcong48, _dart_lcong48>('lcong48');
    return _lcong48(
      __param,
    );
  }

  _dart_lcong48 _lcong48;

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    _drand48_r ??=
        _dylib.lookupFunction<_c_drand48_r, _dart_drand48_r>('drand48_r');
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  _dart_drand48_r _drand48_r;

  int erand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    _erand48_r ??=
        _dylib.lookupFunction<_c_erand48_r, _dart_erand48_r>('erand48_r');
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  _dart_erand48_r _erand48_r;

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    _lrand48_r ??=
        _dylib.lookupFunction<_c_lrand48_r, _dart_lrand48_r>('lrand48_r');
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  _dart_lrand48_r _lrand48_r;

  int nrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    _nrand48_r ??=
        _dylib.lookupFunction<_c_nrand48_r, _dart_nrand48_r>('nrand48_r');
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  _dart_nrand48_r _nrand48_r;

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    _mrand48_r ??=
        _dylib.lookupFunction<_c_mrand48_r, _dart_mrand48_r>('mrand48_r');
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  _dart_mrand48_r _mrand48_r;

  int jrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    _jrand48_r ??=
        _dylib.lookupFunction<_c_jrand48_r, _dart_jrand48_r>('jrand48_r');
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  _dart_jrand48_r _jrand48_r;

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    _srand48_r ??=
        _dylib.lookupFunction<_c_srand48_r, _dart_srand48_r>('srand48_r');
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  _dart_srand48_r _srand48_r;

  int seed48_r(
    ffi.Pointer<ffi.Uint16> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    _seed48_r ??=
        _dylib.lookupFunction<_c_seed48_r, _dart_seed48_r>('seed48_r');
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  _dart_seed48_r _seed48_r;

  int lcong48_r(
    ffi.Pointer<ffi.Uint16> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    _lcong48_r ??=
        _dylib.lookupFunction<_c_lcong48_r, _dart_lcong48_r>('lcong48_r');
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  _dart_lcong48_r _lcong48_r;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    _malloc ??= _dylib.lookupFunction<_c_malloc, _dart_malloc>('malloc');
    return _malloc(
      __size,
    );
  }

  _dart_malloc _malloc;

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    _calloc ??= _dylib.lookupFunction<_c_calloc, _dart_calloc>('calloc');
    return _calloc(
      __nmemb,
      __size,
    );
  }

  _dart_calloc _calloc;

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    _realloc ??= _dylib.lookupFunction<_c_realloc, _dart_realloc>('realloc');
    return _realloc(
      __ptr,
      __size,
    );
  }

  _dart_realloc _realloc;

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    _reallocarray ??= _dylib
        .lookupFunction<_c_reallocarray, _dart_reallocarray>('reallocarray');
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  _dart_reallocarray _reallocarray;

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    _free ??= _dylib.lookupFunction<_c_free, _dart_free>('free');
    return _free(
      __ptr,
    );
  }

  _dart_free _free;

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    _alloca ??= _dylib.lookupFunction<_c_alloca, _dart_alloca>('alloca');
    return _alloca(
      __size,
    );
  }

  _dart_alloca _alloca;

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    _valloc ??= _dylib.lookupFunction<_c_valloc, _dart_valloc>('valloc');
    return _valloc(
      __size,
    );
  }

  _dart_valloc _valloc;

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    _posix_memalign ??=
        _dylib.lookupFunction<_c_posix_memalign, _dart_posix_memalign>(
            'posix_memalign');
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  _dart_posix_memalign _posix_memalign;

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    _aligned_alloc ??= _dylib
        .lookupFunction<_c_aligned_alloc, _dart_aligned_alloc>('aligned_alloc');
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  _dart_aligned_alloc _aligned_alloc;

  void abort() {
    _abort ??= _dylib.lookupFunction<_c_abort, _dart_abort>('abort');
    return _abort();
  }

  _dart_abort _abort;

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_23>> __func,
  ) {
    _atexit ??= _dylib.lookupFunction<_c_atexit, _dart_atexit>('atexit');
    return _atexit(
      __func,
    );
  }

  _dart_atexit _atexit;

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_24>> __func,
  ) {
    _at_quick_exit ??= _dylib
        .lookupFunction<_c_at_quick_exit, _dart_at_quick_exit>('at_quick_exit');
    return _at_quick_exit(
      __func,
    );
  }

  _dart_at_quick_exit _at_quick_exit;

  int on_exit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_25>> __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    _on_exit ??= _dylib.lookupFunction<_c_on_exit, _dart_on_exit>('on_exit');
    return _on_exit(
      __func,
      __arg,
    );
  }

  _dart_on_exit _on_exit;

  void exit(
    int __status,
  ) {
    _exit_1 ??= _dylib.lookupFunction<_c_exit, _dart_exit>('exit');
    return _exit_1(
      __status,
    );
  }

  _dart_exit _exit_1;

  void quick_exit(
    int __status,
  ) {
    _quick_exit ??=
        _dylib.lookupFunction<_c_quick_exit, _dart_quick_exit>('quick_exit');
    return _quick_exit(
      __status,
    );
  }

  _dart_quick_exit _quick_exit;

  void _Exit(
    int __status,
  ) {
    __Exit ??= _dylib.lookupFunction<_c__Exit, _dart__Exit>('_Exit');
    return __Exit(
      __status,
    );
  }

  _dart__Exit __Exit;

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _getenv ??= _dylib.lookupFunction<_c_getenv, _dart_getenv>('getenv');
    return _getenv(
      __name,
    );
  }

  _dart_getenv _getenv;

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    _putenv ??= _dylib.lookupFunction<_c_putenv, _dart_putenv>('putenv');
    return _putenv(
      __string,
    );
  }

  _dart_putenv _putenv;

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    _setenv ??= _dylib.lookupFunction<_c_setenv, _dart_setenv>('setenv');
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  _dart_setenv _setenv;

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _unsetenv ??=
        _dylib.lookupFunction<_c_unsetenv, _dart_unsetenv>('unsetenv');
    return _unsetenv(
      __name,
    );
  }

  _dart_unsetenv _unsetenv;

  int clearenv() {
    _clearenv ??=
        _dylib.lookupFunction<_c_clearenv, _dart_clearenv>('clearenv');
    return _clearenv();
  }

  _dart_clearenv _clearenv;

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    _mktemp ??= _dylib.lookupFunction<_c_mktemp, _dart_mktemp>('mktemp');
    return _mktemp(
      __template,
    );
  }

  _dart_mktemp _mktemp;

  int mkstemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    _mkstemp ??= _dylib.lookupFunction<_c_mkstemp, _dart_mkstemp>('mkstemp');
    return _mkstemp(
      __template,
    );
  }

  _dart_mkstemp _mkstemp;

  int mkstemps(
    ffi.Pointer<ffi.Int8> __template,
    int __suffixlen,
  ) {
    _mkstemps ??=
        _dylib.lookupFunction<_c_mkstemps, _dart_mkstemps>('mkstemps');
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  _dart_mkstemps _mkstemps;

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    _mkdtemp ??= _dylib.lookupFunction<_c_mkdtemp, _dart_mkdtemp>('mkdtemp');
    return _mkdtemp(
      __template,
    );
  }

  _dart_mkdtemp _mkdtemp;

  int system(
    ffi.Pointer<ffi.Int8> __command,
  ) {
    _system ??= _dylib.lookupFunction<_c_system, _dart_system>('system');
    return _system(
      __command,
    );
  }

  _dart_system _system;

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __resolved,
  ) {
    _realpath ??=
        _dylib.lookupFunction<_c_realpath, _dart_realpath>('realpath');
    return _realpath(
      __name,
      __resolved,
    );
  }

  _dart_realpath _realpath;

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
  ) {
    _bsearch ??= _dylib.lookupFunction<_c_bsearch, _dart_bsearch>('bsearch');
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  _dart_bsearch _bsearch;

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
  ) {
    _qsort ??= _dylib.lookupFunction<_c_qsort, _dart_qsort>('qsort');
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  _dart_qsort _qsort;

  int abs(
    int __x,
  ) {
    _abs ??= _dylib.lookupFunction<_c_abs, _dart_abs>('abs');
    return _abs(
      __x,
    );
  }

  _dart_abs _abs;

  int labs(
    int __x,
  ) {
    _labs ??= _dylib.lookupFunction<_c_labs, _dart_labs>('labs');
    return _labs(
      __x,
    );
  }

  _dart_labs _labs;

  int llabs(
    int __x,
  ) {
    _llabs ??= _dylib.lookupFunction<_c_llabs, _dart_llabs>('llabs');
    return _llabs(
      __x,
    );
  }

  _dart_llabs _llabs;

  ffi.Pointer<ffi.Int8> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    _ecvt ??= _dylib.lookupFunction<_c_ecvt, _dart_ecvt>('ecvt');
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  _dart_ecvt _ecvt;

  ffi.Pointer<ffi.Int8> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    _fcvt ??= _dylib.lookupFunction<_c_fcvt, _dart_fcvt>('fcvt');
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  _dart_fcvt _fcvt;

  ffi.Pointer<ffi.Int8> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _gcvt ??= _dylib.lookupFunction<_c_gcvt, _dart_gcvt>('gcvt');
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  _dart_gcvt _gcvt;

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _ecvt_r ??= _dylib.lookupFunction<_c_ecvt_r, _dart_ecvt_r>('ecvt_r');
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  _dart_ecvt_r _ecvt_r;

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _fcvt_r ??= _dylib.lookupFunction<_c_fcvt_r, _dart_fcvt_r>('fcvt_r');
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  _dart_fcvt_r _fcvt_r;

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    _mblen ??= _dylib.lookupFunction<_c_mblen, _dart_mblen>('mblen');
    return _mblen(
      __s,
      __n,
    );
  }

  _dart_mblen _mblen;

  int mbtowc(
    ffi.Pointer<ffi.Int32> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    _mbtowc ??= _dylib.lookupFunction<_c_mbtowc, _dart_mbtowc>('mbtowc');
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  _dart_mbtowc _mbtowc;

  int wctomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wchar,
  ) {
    _wctomb ??= _dylib.lookupFunction<_c_wctomb, _dart_wctomb>('wctomb');
    return _wctomb(
      __s,
      __wchar,
    );
  }

  _dart_wctomb _wctomb;

  int mbstowcs(
    ffi.Pointer<ffi.Int32> __pwcs,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    _mbstowcs ??=
        _dylib.lookupFunction<_c_mbstowcs, _dart_mbstowcs>('mbstowcs');
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  _dart_mbstowcs _mbstowcs;

  int wcstombs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int32> __pwcs,
    int __n,
  ) {
    _wcstombs ??=
        _dylib.lookupFunction<_c_wcstombs, _dart_wcstombs>('wcstombs');
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  _dart_wcstombs _wcstombs;

  int rpmatch(
    ffi.Pointer<ffi.Int8> __response,
  ) {
    _rpmatch ??= _dylib.lookupFunction<_c_rpmatch, _dart_rpmatch>('rpmatch');
    return _rpmatch(
      __response,
    );
  }

  _dart_rpmatch _rpmatch;

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
  ) {
    _getsubopt ??=
        _dylib.lookupFunction<_c_getsubopt, _dart_getsubopt>('getsubopt');
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  _dart_getsubopt _getsubopt;

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    _getloadavg ??=
        _dylib.lookupFunction<_c_getloadavg, _dart_getloadavg>('getloadavg');
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  _dart_getloadavg _getloadavg;

  /// Return a len-sized request buffer for the request type. This function may
  /// flush the output queue.
  ///
  /// @param dpy The display connection
  /// @param type The request type
  /// @param len Length of the request in bytes
  ///
  /// @returns A pointer to the request buffer with a few default values
  /// initialized.
  ffi.Pointer<ffi.Void> _XGetRequest(
    ffi.Pointer<_XDisplay> dpy,
    int type,
    int len,
  ) {
    __XGetRequest ??= _dylib
        .lookupFunction<_c__XGetRequest, _dart__XGetRequest>('_XGetRequest');
    return __XGetRequest(
      dpy,
      type,
      len,
    );
  }

  _dart__XGetRequest __XGetRequest;

  void _XFlushGCCache(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<_XGC> gc,
  ) {
    __XFlushGCCache ??=
        _dylib.lookupFunction<_c__XFlushGCCache, _dart__XFlushGCCache>(
            '_XFlushGCCache');
    return __XFlushGCCache(
      dpy,
      gc,
    );
  }

  _dart__XFlushGCCache __XFlushGCCache;

  int _XData32(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int64> data,
    int len,
  ) {
    __XData32 ??=
        _dylib.lookupFunction<_c__XData32, _dart__XData32>('_XData32');
    return __XData32(
      dpy,
      data,
      len,
    );
  }

  _dart__XData32 __XData32;

  void _XRead32(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int64> data,
    int len,
  ) {
    __XRead32 ??=
        _dylib.lookupFunction<_c__XRead32, _dart__XRead32>('_XRead32');
    return __XRead32(
      dpy,
      data,
      len,
    );
  }

  _dart__XRead32 __XRead32;

  void _XDeqAsyncHandler(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<_XAsyncHandler> handler,
  ) {
    __XDeqAsyncHandler ??=
        _dylib.lookupFunction<_c__XDeqAsyncHandler, _dart__XDeqAsyncHandler>(
            '_XDeqAsyncHandler');
    return __XDeqAsyncHandler(
      dpy,
      handler,
    );
  }

  _dart__XDeqAsyncHandler __XDeqAsyncHandler;

  int _XError(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<xError> arg1,
  ) {
    __XError ??= _dylib.lookupFunction<_c__XError, _dart__XError>('_XError');
    return __XError(
      arg0,
      arg1,
    );
  }

  _dart__XError __XError;

  int _XIOError(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    __XIOError ??=
        _dylib.lookupFunction<_c__XIOError, _dart__XIOError>('_XIOError');
    return __XIOError(
      arg0,
    );
  }

  _dart__XIOError __XIOError;

  void _XEatData(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XEatData ??=
        _dylib.lookupFunction<_c__XEatData, _dart__XEatData>('_XEatData');
    return __XEatData(
      arg0,
      arg1,
    );
  }

  _dart__XEatData __XEatData;

  void _XEatDataWords(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XEatDataWords ??=
        _dylib.lookupFunction<_c__XEatDataWords, _dart__XEatDataWords>(
            '_XEatDataWords');
    return __XEatDataWords(
      arg0,
      arg1,
    );
  }

  _dart__XEatDataWords __XEatDataWords;

  ffi.Pointer<ffi.Int8> _XAllocScratch(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XAllocScratch ??=
        _dylib.lookupFunction<_c__XAllocScratch, _dart__XAllocScratch>(
            '_XAllocScratch');
    return __XAllocScratch(
      arg0,
      arg1,
    );
  }

  _dart__XAllocScratch __XAllocScratch;

  ffi.Pointer<ffi.Int8> _XAllocTemp(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XAllocTemp ??=
        _dylib.lookupFunction<_c__XAllocTemp, _dart__XAllocTemp>('_XAllocTemp');
    return __XAllocTemp(
      arg0,
      arg1,
    );
  }

  _dart__XAllocTemp __XAllocTemp;

  void _XFreeTemp(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XFreeTemp ??=
        _dylib.lookupFunction<_c__XFreeTemp, _dart__XFreeTemp>('_XFreeTemp');
    return __XFreeTemp(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XFreeTemp __XFreeTemp;

  ffi.Pointer<Visual> _XVIDtoVisual(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XVIDtoVisual ??= _dylib
        .lookupFunction<_c__XVIDtoVisual, _dart__XVIDtoVisual>('_XVIDtoVisual');
    return __XVIDtoVisual(
      arg0,
      arg1,
    );
  }

  _dart__XVIDtoVisual __XVIDtoVisual;

  int _XSetLastRequestRead(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<xGenericReply> arg1,
  ) {
    __XSetLastRequestRead ??= _dylib.lookupFunction<_c__XSetLastRequestRead,
        _dart__XSetLastRequestRead>('_XSetLastRequestRead');
    return __XSetLastRequestRead(
      arg0,
      arg1,
    );
  }

  _dart__XSetLastRequestRead __XSetLastRequestRead;

  int _XGetHostname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    __XGetHostname ??= _dylib
        .lookupFunction<_c__XGetHostname, _dart__XGetHostname>('_XGetHostname');
    return __XGetHostname(
      arg0,
      arg1,
    );
  }

  _dart__XGetHostname __XGetHostname;

  ffi.Pointer<Screen> _XScreenOfWindow(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XScreenOfWindow ??=
        _dylib.lookupFunction<_c__XScreenOfWindow, _dart__XScreenOfWindow>(
            '_XScreenOfWindow');
    return __XScreenOfWindow(
      arg0,
      arg1,
    );
  }

  _dart__XScreenOfWindow __XScreenOfWindow;

  void _XGetAsyncData(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    __XGetAsyncData ??=
        _dylib.lookupFunction<_c__XGetAsyncData, _dart__XGetAsyncData>(
            '_XGetAsyncData');
    return __XGetAsyncData(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart__XGetAsyncData __XGetAsyncData;

  void _XFlush(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    __XFlush ??= _dylib.lookupFunction<_c__XFlush, _dart__XFlush>('_XFlush');
    return __XFlush(
      arg0,
    );
  }

  _dart__XFlush __XFlush;

  int _XEventsQueued(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XEventsQueued ??=
        _dylib.lookupFunction<_c__XEventsQueued, _dart__XEventsQueued>(
            '_XEventsQueued');
    return __XEventsQueued(
      arg0,
      arg1,
    );
  }

  _dart__XEventsQueued __XEventsQueued;

  void _XReadEvents(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    __XReadEvents ??= _dylib
        .lookupFunction<_c__XReadEvents, _dart__XReadEvents>('_XReadEvents');
    return __XReadEvents(
      arg0,
    );
  }

  _dart__XReadEvents __XReadEvents;

  int _XRead(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XRead ??= _dylib.lookupFunction<_c__XRead, _dart__XRead>('_XRead');
    return __XRead(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XRead __XRead;

  void _XReadPad(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XReadPad ??=
        _dylib.lookupFunction<_c__XReadPad, _dart__XReadPad>('_XReadPad');
    return __XReadPad(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XReadPad __XReadPad;

  void _XSend(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XSend ??= _dylib.lookupFunction<_c__XSend, _dart__XSend>('_XSend');
    return __XSend(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XSend __XSend;

  void _XEnq(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<xEvent> arg1,
  ) {
    __XEnq ??= _dylib.lookupFunction<_c__XEnq, _dart__XEnq>('_XEnq');
    return __XEnq(
      arg0,
      arg1,
    );
  }

  _dart__XEnq __XEnq;

  void _XDeq(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XQEvent> arg1,
    ffi.Pointer<_XQEvent> arg2,
  ) {
    __XDeq ??= _dylib.lookupFunction<_c__XDeq, _dart__XDeq>('_XDeq');
    return __XDeq(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XDeq __XDeq;

  int _XUnknownWireEventCookie(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XGenericEventCookie> arg1,
    ffi.Pointer<xEvent> arg2,
  ) {
    __XUnknownWireEventCookie ??= _dylib.lookupFunction<
        _c__XUnknownWireEventCookie,
        _dart__XUnknownWireEventCookie>('_XUnknownWireEventCookie');
    return __XUnknownWireEventCookie(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XUnknownWireEventCookie __XUnknownWireEventCookie;

  int _XUnknownCopyEventCookie(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XGenericEventCookie> arg1,
    ffi.Pointer<XGenericEventCookie> arg2,
  ) {
    __XUnknownCopyEventCookie ??= _dylib.lookupFunction<
        _c__XUnknownCopyEventCookie,
        _dart__XUnknownCopyEventCookie>('_XUnknownCopyEventCookie');
    return __XUnknownCopyEventCookie(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XUnknownCopyEventCookie __XUnknownCopyEventCookie;

  int _XDefaultWireError(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<XErrorEvent> he,
    ffi.Pointer<xError> we,
  ) {
    __XDefaultWireError ??=
        _dylib.lookupFunction<_c__XDefaultWireError, _dart__XDefaultWireError>(
            '_XDefaultWireError');
    return __XDefaultWireError(
      display,
      he,
      we,
    );
  }

  _dart__XDefaultWireError __XDefaultWireError;

  int _XPollfdCacheInit(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XPollfdCacheInit ??=
        _dylib.lookupFunction<_c__XPollfdCacheInit, _dart__XPollfdCacheInit>(
            '_XPollfdCacheInit');
    return __XPollfdCacheInit(
      dpy,
    );
  }

  _dart__XPollfdCacheInit __XPollfdCacheInit;

  void _XPollfdCacheAdd(
    ffi.Pointer<_XDisplay> dpy,
    int fd,
  ) {
    __XPollfdCacheAdd ??=
        _dylib.lookupFunction<_c__XPollfdCacheAdd, _dart__XPollfdCacheAdd>(
            '_XPollfdCacheAdd');
    return __XPollfdCacheAdd(
      dpy,
      fd,
    );
  }

  _dart__XPollfdCacheAdd __XPollfdCacheAdd;

  void _XPollfdCacheDel(
    ffi.Pointer<_XDisplay> dpy,
    int fd,
  ) {
    __XPollfdCacheDel ??=
        _dylib.lookupFunction<_c__XPollfdCacheDel, _dart__XPollfdCacheDel>(
            '_XPollfdCacheDel');
    return __XPollfdCacheDel(
      dpy,
      fd,
    );
  }

  _dart__XPollfdCacheDel __XPollfdCacheDel;

  int _XAllocID(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XAllocID ??=
        _dylib.lookupFunction<_c__XAllocID, _dart__XAllocID>('_XAllocID');
    return __XAllocID(
      dpy,
    );
  }

  _dart__XAllocID __XAllocID;

  void _XAllocIDs(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Uint64> ids,
    int count,
  ) {
    __XAllocIDs ??=
        _dylib.lookupFunction<_c__XAllocIDs, _dart__XAllocIDs>('_XAllocIDs');
    return __XAllocIDs(
      dpy,
      ids,
      count,
    );
  }

  _dart__XAllocIDs __XAllocIDs;

  int _XFreeExtData(
    ffi.Pointer<XExtData> arg0,
  ) {
    __XFreeExtData ??= _dylib
        .lookupFunction<_c__XFreeExtData, _dart__XFreeExtData>('_XFreeExtData');
    return __XFreeExtData(
      arg0,
    );
  }

  _dart__XFreeExtData __XFreeExtData;

  ffi.Pointer<ffi.NativeFunction<_typedefC_28>> XESetCreateGC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_29>> arg2,
  ) {
    _XESetCreateGC ??= _dylib
        .lookupFunction<_c_XESetCreateGC, _dart_XESetCreateGC>('XESetCreateGC');
    return _XESetCreateGC(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetCreateGC _XESetCreateGC;

  ffi.Pointer<ffi.NativeFunction<_typedefC_30>> XESetCopyGC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_31>> arg2,
  ) {
    _XESetCopyGC ??=
        _dylib.lookupFunction<_c_XESetCopyGC, _dart_XESetCopyGC>('XESetCopyGC');
    return _XESetCopyGC(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetCopyGC _XESetCopyGC;

  ffi.Pointer<ffi.NativeFunction<_typedefC_32>> XESetFlushGC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_33>> arg2,
  ) {
    _XESetFlushGC ??= _dylib
        .lookupFunction<_c_XESetFlushGC, _dart_XESetFlushGC>('XESetFlushGC');
    return _XESetFlushGC(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetFlushGC _XESetFlushGC;

  ffi.Pointer<ffi.NativeFunction<_typedefC_34>> XESetFreeGC(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_35>> arg2,
  ) {
    _XESetFreeGC ??=
        _dylib.lookupFunction<_c_XESetFreeGC, _dart_XESetFreeGC>('XESetFreeGC');
    return _XESetFreeGC(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetFreeGC _XESetFreeGC;

  ffi.Pointer<ffi.NativeFunction<_typedefC_36>> XESetCreateFont(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_37>> arg2,
  ) {
    _XESetCreateFont ??=
        _dylib.lookupFunction<_c_XESetCreateFont, _dart_XESetCreateFont>(
            'XESetCreateFont');
    return _XESetCreateFont(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetCreateFont _XESetCreateFont;

  ffi.Pointer<ffi.NativeFunction<_typedefC_38>> XESetFreeFont(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_39>> arg2,
  ) {
    _XESetFreeFont ??= _dylib
        .lookupFunction<_c_XESetFreeFont, _dart_XESetFreeFont>('XESetFreeFont');
    return _XESetFreeFont(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetFreeFont _XESetFreeFont;

  ffi.Pointer<ffi.NativeFunction<_typedefC_40>> XESetCloseDisplay(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_41>> arg2,
  ) {
    _XESetCloseDisplay ??=
        _dylib.lookupFunction<_c_XESetCloseDisplay, _dart_XESetCloseDisplay>(
            'XESetCloseDisplay');
    return _XESetCloseDisplay(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetCloseDisplay _XESetCloseDisplay;

  ffi.Pointer<ffi.NativeFunction<_typedefC_42>> XESetError(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_43>> arg2,
  ) {
    _XESetError ??=
        _dylib.lookupFunction<_c_XESetError, _dart_XESetError>('XESetError');
    return _XESetError(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetError _XESetError;

  ffi.Pointer<ffi.NativeFunction<_typedefC_44>> XESetErrorString(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_45>> arg2,
  ) {
    _XESetErrorString ??=
        _dylib.lookupFunction<_c_XESetErrorString, _dart_XESetErrorString>(
            'XESetErrorString');
    return _XESetErrorString(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetErrorString _XESetErrorString;

  ffi.Pointer<ffi.NativeFunction<_typedefC_46>> XESetPrintErrorValues(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_47>> arg2,
  ) {
    _XESetPrintErrorValues ??= _dylib.lookupFunction<_c_XESetPrintErrorValues,
        _dart_XESetPrintErrorValues>('XESetPrintErrorValues');
    return _XESetPrintErrorValues(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetPrintErrorValues _XESetPrintErrorValues;

  ffi.Pointer<ffi.NativeFunction<_typedefC_48>> XESetWireToEventCookie(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_49>> arg2,
  ) {
    _XESetWireToEventCookie ??= _dylib.lookupFunction<_c_XESetWireToEventCookie,
        _dart_XESetWireToEventCookie>('XESetWireToEventCookie');
    return _XESetWireToEventCookie(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetWireToEventCookie _XESetWireToEventCookie;

  ffi.Pointer<ffi.NativeFunction<_typedefC_50>> XESetCopyEventCookie(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_51>> arg2,
  ) {
    _XESetCopyEventCookie ??= _dylib.lookupFunction<_c_XESetCopyEventCookie,
        _dart_XESetCopyEventCookie>('XESetCopyEventCookie');
    return _XESetCopyEventCookie(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetCopyEventCookie _XESetCopyEventCookie;

  ffi.Pointer<ffi.NativeFunction<_typedefC_52>> XESetWireToError(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_53>> arg2,
  ) {
    _XESetWireToError ??=
        _dylib.lookupFunction<_c_XESetWireToError, _dart_XESetWireToError>(
            'XESetWireToError');
    return _XESetWireToError(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetWireToError _XESetWireToError;

  ffi.Pointer<ffi.NativeFunction<_typedefC_54>> XESetBeforeFlush(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_55>> arg2,
  ) {
    _XESetBeforeFlush ??=
        _dylib.lookupFunction<_c_XESetBeforeFlush, _dart_XESetBeforeFlush>(
            'XESetBeforeFlush');
    return _XESetBeforeFlush(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XESetBeforeFlush _XESetBeforeFlush;

  int _XRegisterInternalConnection(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.NativeFunction<_XInternalConnectionProc>> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    __XRegisterInternalConnection ??= _dylib.lookupFunction<
        _c__XRegisterInternalConnection,
        _dart__XRegisterInternalConnection>('_XRegisterInternalConnection');
    return __XRegisterInternalConnection(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XRegisterInternalConnection __XRegisterInternalConnection;

  void _XUnregisterInternalConnection(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XUnregisterInternalConnection ??= _dylib.lookupFunction<
        _c__XUnregisterInternalConnection,
        _dart__XUnregisterInternalConnection>('_XUnregisterInternalConnection');
    return __XUnregisterInternalConnection(
      arg0,
      arg1,
    );
  }

  _dart__XUnregisterInternalConnection __XUnregisterInternalConnection;

  void _XProcessInternalConnection(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XConnectionInfo> arg1,
  ) {
    __XProcessInternalConnection ??= _dylib.lookupFunction<
        _c__XProcessInternalConnection,
        _dart__XProcessInternalConnection>('_XProcessInternalConnection');
    return __XProcessInternalConnection(
      arg0,
      arg1,
    );
  }

  _dart__XProcessInternalConnection __XProcessInternalConnection;

  int _XTextHeight(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XTextHeight ??= _dylib
        .lookupFunction<_c__XTextHeight, _dart__XTextHeight>('_XTextHeight');
    return __XTextHeight(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XTextHeight __XTextHeight;

  int _XTextHeight16(
    ffi.Pointer<XFontStruct> arg0,
    ffi.Pointer<XChar2b> arg1,
    int arg2,
  ) {
    __XTextHeight16 ??=
        _dylib.lookupFunction<_c__XTextHeight16, _dart__XTextHeight16>(
            '_XTextHeight16');
    return __XTextHeight16(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XTextHeight16 __XTextHeight16;

  int _XF86LoadQueryLocaleFont(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<XFontStruct>> arg2,
    ffi.Pointer<ffi.Uint64> arg3,
  ) {
    __XF86LoadQueryLocaleFont ??= _dylib.lookupFunction<
        _c__XF86LoadQueryLocaleFont,
        _dart__XF86LoadQueryLocaleFont>('_XF86LoadQueryLocaleFont');
    return __XF86LoadQueryLocaleFont(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XF86LoadQueryLocaleFont __XF86LoadQueryLocaleFont;

  void _XProcessWindowAttributes(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<xChangeWindowAttributesReq> req,
    int valuemask,
    ffi.Pointer<XSetWindowAttributes> attributes,
  ) {
    __XProcessWindowAttributes ??= _dylib.lookupFunction<
        _c__XProcessWindowAttributes,
        _dart__XProcessWindowAttributes>('_XProcessWindowAttributes');
    return __XProcessWindowAttributes(
      dpy,
      req,
      valuemask,
      attributes,
    );
  }

  _dart__XProcessWindowAttributes __XProcessWindowAttributes;

  int _XDefaultError(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XErrorEvent> event,
  ) {
    __XDefaultError ??=
        _dylib.lookupFunction<_c__XDefaultError, _dart__XDefaultError>(
            '_XDefaultError');
    return __XDefaultError(
      dpy,
      event,
    );
  }

  _dart__XDefaultError __XDefaultError;

  int _XDefaultIOError(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XDefaultIOError ??=
        _dylib.lookupFunction<_c__XDefaultIOError, _dart__XDefaultIOError>(
            '_XDefaultIOError');
    return __XDefaultIOError(
      dpy,
    );
  }

  _dart__XDefaultIOError __XDefaultIOError;

  void _XSetClipRectangles(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<_XGC> gc,
    int clip_x_origin,
    int clip_y_origin,
    ffi.Pointer<XRectangle> rectangles,
    int n,
    int ordering,
  ) {
    __XSetClipRectangles ??= _dylib.lookupFunction<_c__XSetClipRectangles,
        _dart__XSetClipRectangles>('_XSetClipRectangles');
    return __XSetClipRectangles(
      dpy,
      gc,
      clip_x_origin,
      clip_y_origin,
      rectangles,
      n,
      ordering,
    );
  }

  _dart__XSetClipRectangles __XSetClipRectangles;

  int _XGetWindowAttributes(
    ffi.Pointer<_XDisplay> dpy,
    int w,
    ffi.Pointer<XWindowAttributes> attr,
  ) {
    __XGetWindowAttributes ??= _dylib.lookupFunction<_c__XGetWindowAttributes,
        _dart__XGetWindowAttributes>('_XGetWindowAttributes');
    return __XGetWindowAttributes(
      dpy,
      w,
      attr,
    );
  }

  _dart__XGetWindowAttributes __XGetWindowAttributes;

  void _XFreeEventCookies(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XFreeEventCookies ??=
        _dylib.lookupFunction<_c__XFreeEventCookies, _dart__XFreeEventCookies>(
            '_XFreeEventCookies');
    return __XFreeEventCookies(
      dpy,
    );
  }

  _dart__XFreeEventCookies __XFreeEventCookies;

  int _XFetchEventCookie(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XGenericEventCookie> ev,
  ) {
    __XFetchEventCookie ??=
        _dylib.lookupFunction<_c__XFetchEventCookie, _dart__XFetchEventCookie>(
            '_XFetchEventCookie');
    return __XFetchEventCookie(
      dpy,
      ev,
    );
  }

  _dart__XFetchEventCookie __XFetchEventCookie;

  int _XCopyEventCookie(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XGenericEventCookie> in_1,
    ffi.Pointer<XGenericEventCookie> out,
  ) {
    __XCopyEventCookie ??=
        _dylib.lookupFunction<_c__XCopyEventCookie, _dart__XCopyEventCookie>(
            '_XCopyEventCookie');
    return __XCopyEventCookie(
      dpy,
      in_1,
      out,
    );
  }

  _dart__XCopyEventCookie __XCopyEventCookie;

  void xlocaledir(
    ffi.Pointer<ffi.Int8> buf,
    int buf_len,
  ) {
    _xlocaledir ??=
        _dylib.lookupFunction<_c_xlocaledir, _dart_xlocaledir>('xlocaledir');
    return _xlocaledir(
      buf,
      buf_len,
    );
  }

  _dart_xlocaledir _xlocaledir;

  ffi.Pointer<ffi.Int8> setlocale(
    int __category,
    ffi.Pointer<ffi.Int8> __locale,
  ) {
    _setlocale ??=
        _dylib.lookupFunction<_c_setlocale, _dart_setlocale>('setlocale');
    return _setlocale(
      __category,
      __locale,
    );
  }

  _dart_setlocale _setlocale;

  ffi.Pointer<lconv> localeconv() {
    _localeconv ??=
        _dylib.lookupFunction<_c_localeconv, _dart_localeconv>('localeconv');
    return _localeconv();
  }

  _dart_localeconv _localeconv;

  ffi.Pointer<__locale_struct> newlocale(
    int __category_mask,
    ffi.Pointer<ffi.Int8> __locale,
    ffi.Pointer<__locale_struct> __base,
  ) {
    _newlocale ??=
        _dylib.lookupFunction<_c_newlocale, _dart_newlocale>('newlocale');
    return _newlocale(
      __category_mask,
      __locale,
      __base,
    );
  }

  _dart_newlocale _newlocale;

  ffi.Pointer<__locale_struct> duplocale(
    ffi.Pointer<__locale_struct> __dataset,
  ) {
    _duplocale ??=
        _dylib.lookupFunction<_c_duplocale, _dart_duplocale>('duplocale');
    return _duplocale(
      __dataset,
    );
  }

  _dart_duplocale _duplocale;

  void freelocale(
    ffi.Pointer<__locale_struct> __dataset,
  ) {
    _freelocale ??=
        _dylib.lookupFunction<_c_freelocale, _dart_freelocale>('freelocale');
    return _freelocale(
      __dataset,
    );
  }

  _dart_freelocale _freelocale;

  ffi.Pointer<__locale_struct> uselocale(
    ffi.Pointer<__locale_struct> __dataset,
  ) {
    _uselocale ??=
        _dylib.lookupFunction<_c_uselocale, _dart_uselocale>('uselocale');
    return _uselocale(
      __dataset,
    );
  }

  _dart_uselocale _uselocale;

  /// Memory Management
  ffi.Pointer<ffi.Int8> Xpermalloc(
    int arg0,
  ) {
    _Xpermalloc ??=
        _dylib.lookupFunction<_c_Xpermalloc, _dart_Xpermalloc>('Xpermalloc');
    return _Xpermalloc(
      arg0,
    );
  }

  _dart_Xpermalloc _Xpermalloc;

  int XrmStringToQuark(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XrmStringToQuark ??=
        _dylib.lookupFunction<_c_XrmStringToQuark, _dart_XrmStringToQuark>(
            'XrmStringToQuark');
    return _XrmStringToQuark(
      arg0,
    );
  }

  _dart_XrmStringToQuark _XrmStringToQuark;

  int XrmPermStringToQuark(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XrmPermStringToQuark ??= _dylib.lookupFunction<_c_XrmPermStringToQuark,
        _dart_XrmPermStringToQuark>('XrmPermStringToQuark');
    return _XrmPermStringToQuark(
      arg0,
    );
  }

  _dart_XrmPermStringToQuark _XrmPermStringToQuark;

  ffi.Pointer<ffi.Int8> XrmQuarkToString(
    int arg0,
  ) {
    _XrmQuarkToString ??=
        _dylib.lookupFunction<_c_XrmQuarkToString, _dart_XrmQuarkToString>(
            'XrmQuarkToString');
    return _XrmQuarkToString(
      arg0,
    );
  }

  _dart_XrmQuarkToString _XrmQuarkToString;

  int XrmUniqueQuark() {
    _XrmUniqueQuark ??=
        _dylib.lookupFunction<_c_XrmUniqueQuark, _dart_XrmUniqueQuark>(
            'XrmUniqueQuark');
    return _XrmUniqueQuark();
  }

  _dart_XrmUniqueQuark _XrmUniqueQuark;

  void XrmStringToQuarkList(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _XrmStringToQuarkList ??= _dylib.lookupFunction<_c_XrmStringToQuarkList,
        _dart_XrmStringToQuarkList>('XrmStringToQuarkList');
    return _XrmStringToQuarkList(
      arg0,
      arg1,
    );
  }

  _dart_XrmStringToQuarkList _XrmStringToQuarkList;

  void XrmStringToBindingQuarkList(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XrmStringToBindingQuarkList ??= _dylib.lookupFunction<
        _c_XrmStringToBindingQuarkList,
        _dart_XrmStringToBindingQuarkList>('XrmStringToBindingQuarkList');
    return _XrmStringToBindingQuarkList(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XrmStringToBindingQuarkList _XrmStringToBindingQuarkList;

  void XrmDestroyDatabase(
    ffi.Pointer<_XrmHashBucketRec> arg0,
  ) {
    _XrmDestroyDatabase ??=
        _dylib.lookupFunction<_c_XrmDestroyDatabase, _dart_XrmDestroyDatabase>(
            'XrmDestroyDatabase');
    return _XrmDestroyDatabase(
      arg0,
    );
  }

  _dart_XrmDestroyDatabase _XrmDestroyDatabase;

  void XrmQPutResource(
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    int arg3,
    ffi.Pointer<XrmValuePtr> arg4,
  ) {
    _XrmQPutResource ??=
        _dylib.lookupFunction<_c_XrmQPutResource, _dart_XrmQPutResource>(
            'XrmQPutResource');
    return _XrmQPutResource(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XrmQPutResource _XrmQPutResource;

  void XrmPutResource(
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<XrmValuePtr> arg3,
  ) {
    _XrmPutResource ??=
        _dylib.lookupFunction<_c_XrmPutResource, _dart_XrmPutResource>(
            'XrmPutResource');
    return _XrmPutResource(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XrmPutResource _XrmPutResource;

  void XrmQPutStringResource(
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _XrmQPutStringResource ??= _dylib.lookupFunction<_c_XrmQPutStringResource,
        _dart_XrmQPutStringResource>('XrmQPutStringResource');
    return _XrmQPutStringResource(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XrmQPutStringResource _XrmQPutStringResource;

  void XrmPutStringResource(
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XrmPutStringResource ??= _dylib.lookupFunction<_c_XrmPutStringResource,
        _dart_XrmPutStringResource>('XrmPutStringResource');
    return _XrmPutStringResource(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XrmPutStringResource _XrmPutStringResource;

  void XrmPutLineResource(
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XrmPutLineResource ??=
        _dylib.lookupFunction<_c_XrmPutLineResource, _dart_XrmPutLineResource>(
            'XrmPutLineResource');
    return _XrmPutLineResource(
      arg0,
      arg1,
    );
  }

  _dart_XrmPutLineResource _XrmPutLineResource;

  int XrmQGetResource(
    ffi.Pointer<_XrmHashBucketRec> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<XrmValuePtr> arg4,
  ) {
    _XrmQGetResource ??=
        _dylib.lookupFunction<_c_XrmQGetResource, _dart_XrmQGetResource>(
            'XrmQGetResource');
    return _XrmQGetResource(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XrmQGetResource _XrmQGetResource;

  int XrmGetResource(
    ffi.Pointer<_XrmHashBucketRec> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
    ffi.Pointer<XrmValuePtr> arg4,
  ) {
    _XrmGetResource ??=
        _dylib.lookupFunction<_c_XrmGetResource, _dart_XrmGetResource>(
            'XrmGetResource');
    return _XrmGetResource(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XrmGetResource _XrmGetResource;

  int XrmQGetSearchList(
    ffi.Pointer<_XrmHashBucketRec> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>>> arg3,
    int arg4,
  ) {
    _XrmQGetSearchList ??=
        _dylib.lookupFunction<_c_XrmQGetSearchList, _dart_XrmQGetSearchList>(
            'XrmQGetSearchList');
    return _XrmQGetSearchList(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XrmQGetSearchList _XrmQGetSearchList;

  int XrmQGetSearchResource(
    ffi.Pointer<ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>>> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int32> arg3,
    ffi.Pointer<XrmValuePtr> arg4,
  ) {
    _XrmQGetSearchResource ??= _dylib.lookupFunction<_c_XrmQGetSearchResource,
        _dart_XrmQGetSearchResource>('XrmQGetSearchResource');
    return _XrmQGetSearchResource(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XrmQGetSearchResource _XrmQGetSearchResource;

  void XrmSetDatabase(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XrmHashBucketRec> arg1,
  ) {
    _XrmSetDatabase ??=
        _dylib.lookupFunction<_c_XrmSetDatabase, _dart_XrmSetDatabase>(
            'XrmSetDatabase');
    return _XrmSetDatabase(
      arg0,
      arg1,
    );
  }

  _dart_XrmSetDatabase _XrmSetDatabase;

  ffi.Pointer<_XrmHashBucketRec> XrmGetDatabase(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    _XrmGetDatabase ??=
        _dylib.lookupFunction<_c_XrmGetDatabase, _dart_XrmGetDatabase>(
            'XrmGetDatabase');
    return _XrmGetDatabase(
      arg0,
    );
  }

  _dart_XrmGetDatabase _XrmGetDatabase;

  ffi.Pointer<_XrmHashBucketRec> XrmGetFileDatabase(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XrmGetFileDatabase ??=
        _dylib.lookupFunction<_c_XrmGetFileDatabase, _dart_XrmGetFileDatabase>(
            'XrmGetFileDatabase');
    return _XrmGetFileDatabase(
      arg0,
    );
  }

  _dart_XrmGetFileDatabase _XrmGetFileDatabase;

  int XrmCombineFileDatabase(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
    int arg2,
  ) {
    _XrmCombineFileDatabase ??= _dylib.lookupFunction<_c_XrmCombineFileDatabase,
        _dart_XrmCombineFileDatabase>('XrmCombineFileDatabase');
    return _XrmCombineFileDatabase(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XrmCombineFileDatabase _XrmCombineFileDatabase;

  ffi.Pointer<_XrmHashBucketRec> XrmGetStringDatabase(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _XrmGetStringDatabase ??= _dylib.lookupFunction<_c_XrmGetStringDatabase,
        _dart_XrmGetStringDatabase>('XrmGetStringDatabase');
    return _XrmGetStringDatabase(
      arg0,
    );
  }

  _dart_XrmGetStringDatabase _XrmGetStringDatabase;

  void XrmPutFileDatabase(
    ffi.Pointer<_XrmHashBucketRec> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _XrmPutFileDatabase ??=
        _dylib.lookupFunction<_c_XrmPutFileDatabase, _dart_XrmPutFileDatabase>(
            'XrmPutFileDatabase');
    return _XrmPutFileDatabase(
      arg0,
      arg1,
    );
  }

  _dart_XrmPutFileDatabase _XrmPutFileDatabase;

  void XrmMergeDatabases(
    ffi.Pointer<_XrmHashBucketRec> arg0,
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
  ) {
    _XrmMergeDatabases ??=
        _dylib.lookupFunction<_c_XrmMergeDatabases, _dart_XrmMergeDatabases>(
            'XrmMergeDatabases');
    return _XrmMergeDatabases(
      arg0,
      arg1,
    );
  }

  _dart_XrmMergeDatabases _XrmMergeDatabases;

  void XrmCombineDatabase(
    ffi.Pointer<_XrmHashBucketRec> arg0,
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
    int arg2,
  ) {
    _XrmCombineDatabase ??=
        _dylib.lookupFunction<_c_XrmCombineDatabase, _dart_XrmCombineDatabase>(
            'XrmCombineDatabase');
    return _XrmCombineDatabase(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XrmCombineDatabase _XrmCombineDatabase;

  int XrmEnumerateDatabase(
    ffi.Pointer<_XrmHashBucketRec> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    int arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_56>> arg4,
    ffi.Pointer<ffi.Int8> arg5,
  ) {
    _XrmEnumerateDatabase ??= _dylib.lookupFunction<_c_XrmEnumerateDatabase,
        _dart_XrmEnumerateDatabase>('XrmEnumerateDatabase');
    return _XrmEnumerateDatabase(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XrmEnumerateDatabase _XrmEnumerateDatabase;

  ffi.Pointer<ffi.Int8> XrmLocaleOfDatabase(
    ffi.Pointer<_XrmHashBucketRec> arg0,
  ) {
    _XrmLocaleOfDatabase ??= _dylib.lookupFunction<_c_XrmLocaleOfDatabase,
        _dart_XrmLocaleOfDatabase>('XrmLocaleOfDatabase');
    return _XrmLocaleOfDatabase(
      arg0,
    );
  }

  _dart_XrmLocaleOfDatabase _XrmLocaleOfDatabase;

  void XrmParseCommand(
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
    ffi.Pointer<XrmOptionDescList> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int32> arg4,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
  ) {
    _XrmParseCommand ??=
        _dylib.lookupFunction<_c_XrmParseCommand, _dart_XrmParseCommand>(
            'XrmParseCommand');
    return _XrmParseCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_XrmParseCommand _XrmParseCommand;

  ffi.Pointer<XClassHint> XAllocClassHint() {
    _XAllocClassHint ??=
        _dylib.lookupFunction<_c_XAllocClassHint, _dart_XAllocClassHint>(
            'XAllocClassHint');
    return _XAllocClassHint();
  }

  _dart_XAllocClassHint _XAllocClassHint;

  ffi.Pointer<XIconSize> XAllocIconSize() {
    _XAllocIconSize ??=
        _dylib.lookupFunction<_c_XAllocIconSize, _dart_XAllocIconSize>(
            'XAllocIconSize');
    return _XAllocIconSize();
  }

  _dart_XAllocIconSize _XAllocIconSize;

  ffi.Pointer<XSizeHints> XAllocSizeHints() {
    _XAllocSizeHints ??=
        _dylib.lookupFunction<_c_XAllocSizeHints, _dart_XAllocSizeHints>(
            'XAllocSizeHints');
    return _XAllocSizeHints();
  }

  _dart_XAllocSizeHints _XAllocSizeHints;

  ffi.Pointer<XStandardColormap> XAllocStandardColormap() {
    _XAllocStandardColormap ??= _dylib.lookupFunction<_c_XAllocStandardColormap,
        _dart_XAllocStandardColormap>('XAllocStandardColormap');
    return _XAllocStandardColormap();
  }

  _dart_XAllocStandardColormap _XAllocStandardColormap;

  ffi.Pointer<XWMHints> XAllocWMHints() {
    _XAllocWMHints ??= _dylib
        .lookupFunction<_c_XAllocWMHints, _dart_XAllocWMHints>('XAllocWMHints');
    return _XAllocWMHints();
  }

  _dart_XAllocWMHints _XAllocWMHints;

  int XClipBox(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<XRectangle> arg1,
  ) {
    _XClipBox ??=
        _dylib.lookupFunction<_c_XClipBox, _dart_XClipBox>('XClipBox');
    return _XClipBox(
      arg0,
      arg1,
    );
  }

  _dart_XClipBox _XClipBox;

  ffi.Pointer<_XRegion> XCreateRegion() {
    _XCreateRegion ??= _dylib
        .lookupFunction<_c_XCreateRegion, _dart_XCreateRegion>('XCreateRegion');
    return _XCreateRegion();
  }

  _dart_XCreateRegion _XCreateRegion;

  ffi.Pointer<ffi.Int8> XDefaultString() {
    _XDefaultString ??=
        _dylib.lookupFunction<_c_XDefaultString, _dart_XDefaultString>(
            'XDefaultString');
    return _XDefaultString();
  }

  _dart_XDefaultString _XDefaultString;

  int XDeleteContext(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    _XDeleteContext ??=
        _dylib.lookupFunction<_c_XDeleteContext, _dart_XDeleteContext>(
            'XDeleteContext');
    return _XDeleteContext(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XDeleteContext _XDeleteContext;

  int XDestroyRegion(
    ffi.Pointer<_XRegion> arg0,
  ) {
    _XDestroyRegion ??=
        _dylib.lookupFunction<_c_XDestroyRegion, _dart_XDestroyRegion>(
            'XDestroyRegion');
    return _XDestroyRegion(
      arg0,
    );
  }

  _dart_XDestroyRegion _XDestroyRegion;

  int XEmptyRegion(
    ffi.Pointer<_XRegion> arg0,
  ) {
    _XEmptyRegion ??= _dylib
        .lookupFunction<_c_XEmptyRegion, _dart_XEmptyRegion>('XEmptyRegion');
    return _XEmptyRegion(
      arg0,
    );
  }

  _dart_XEmptyRegion _XEmptyRegion;

  int XEqualRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
  ) {
    _XEqualRegion ??= _dylib
        .lookupFunction<_c_XEqualRegion, _dart_XEqualRegion>('XEqualRegion');
    return _XEqualRegion(
      arg0,
      arg1,
    );
  }

  _dart_XEqualRegion _XEqualRegion;

  int XFindContext(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ) {
    _XFindContext ??= _dylib
        .lookupFunction<_c_XFindContext, _dart_XFindContext>('XFindContext');
    return _XFindContext(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XFindContext _XFindContext;

  int XGetClassHint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XClassHint> arg2,
  ) {
    _XGetClassHint ??= _dylib
        .lookupFunction<_c_XGetClassHint, _dart_XGetClassHint>('XGetClassHint');
    return _XGetClassHint(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetClassHint _XGetClassHint;

  int XGetIconSizes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<XIconSize>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetIconSizes ??= _dylib
        .lookupFunction<_c_XGetIconSizes, _dart_XGetIconSizes>('XGetIconSizes');
    return _XGetIconSizes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetIconSizes _XGetIconSizes;

  int XGetNormalHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XGetNormalHints ??=
        _dylib.lookupFunction<_c_XGetNormalHints, _dart_XGetNormalHints>(
            'XGetNormalHints');
    return _XGetNormalHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetNormalHints _XGetNormalHints;

  int XGetRGBColormaps(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<XStandardColormap>> arg2,
    ffi.Pointer<ffi.Int32> arg3,
    int arg4,
  ) {
    _XGetRGBColormaps ??=
        _dylib.lookupFunction<_c_XGetRGBColormaps, _dart_XGetRGBColormaps>(
            'XGetRGBColormaps');
    return _XGetRGBColormaps(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XGetRGBColormaps _XGetRGBColormaps;

  int XGetSizeHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    int arg3,
  ) {
    _XGetSizeHints ??= _dylib
        .lookupFunction<_c_XGetSizeHints, _dart_XGetSizeHints>('XGetSizeHints');
    return _XGetSizeHints(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetSizeHints _XGetSizeHints;

  int XGetStandardColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XStandardColormap> arg2,
    int arg3,
  ) {
    _XGetStandardColormap ??= _dylib.lookupFunction<_c_XGetStandardColormap,
        _dart_XGetStandardColormap>('XGetStandardColormap');
    return _XGetStandardColormap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetStandardColormap _XGetStandardColormap;

  int XGetTextProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
    int arg3,
  ) {
    _XGetTextProperty ??=
        _dylib.lookupFunction<_c_XGetTextProperty, _dart_XGetTextProperty>(
            'XGetTextProperty');
    return _XGetTextProperty(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetTextProperty _XGetTextProperty;

  ffi.Pointer<XVisualInfo> XGetVisualInfo(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XVisualInfo> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _XGetVisualInfo ??=
        _dylib.lookupFunction<_c_XGetVisualInfo, _dart_XGetVisualInfo>(
            'XGetVisualInfo');
    return _XGetVisualInfo(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetVisualInfo _XGetVisualInfo;

  int XGetWMClientMachine(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XGetWMClientMachine ??= _dylib.lookupFunction<_c_XGetWMClientMachine,
        _dart_XGetWMClientMachine>('XGetWMClientMachine');
    return _XGetWMClientMachine(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetWMClientMachine _XGetWMClientMachine;

  ffi.Pointer<XWMHints> XGetWMHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    _XGetWMHints ??=
        _dylib.lookupFunction<_c_XGetWMHints, _dart_XGetWMHints>('XGetWMHints');
    return _XGetWMHints(
      arg0,
      arg1,
    );
  }

  _dart_XGetWMHints _XGetWMHints;

  int XGetWMIconName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XGetWMIconName ??=
        _dylib.lookupFunction<_c_XGetWMIconName, _dart_XGetWMIconName>(
            'XGetWMIconName');
    return _XGetWMIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetWMIconName _XGetWMIconName;

  int XGetWMName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XGetWMName ??=
        _dylib.lookupFunction<_c_XGetWMName, _dart_XGetWMName>('XGetWMName');
    return _XGetWMName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetWMName _XGetWMName;

  int XGetWMNormalHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    ffi.Pointer<ffi.Int64> arg3,
  ) {
    _XGetWMNormalHints ??=
        _dylib.lookupFunction<_c_XGetWMNormalHints, _dart_XGetWMNormalHints>(
            'XGetWMNormalHints');
    return _XGetWMNormalHints(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XGetWMNormalHints _XGetWMNormalHints;

  int XGetWMSizeHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    ffi.Pointer<ffi.Int64> arg3,
    int arg4,
  ) {
    _XGetWMSizeHints ??=
        _dylib.lookupFunction<_c_XGetWMSizeHints, _dart_XGetWMSizeHints>(
            'XGetWMSizeHints');
    return _XGetWMSizeHints(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XGetWMSizeHints _XGetWMSizeHints;

  int XGetZoomHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XGetZoomHints ??= _dylib
        .lookupFunction<_c_XGetZoomHints, _dart_XGetZoomHints>('XGetZoomHints');
    return _XGetZoomHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XGetZoomHints _XGetZoomHints;

  int XIntersectRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XIntersectRegion ??=
        _dylib.lookupFunction<_c_XIntersectRegion, _dart_XIntersectRegion>(
            'XIntersectRegion');
    return _XIntersectRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XIntersectRegion _XIntersectRegion;

  void XConvertCase(
    int arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _XConvertCase ??= _dylib
        .lookupFunction<_c_XConvertCase, _dart_XConvertCase>('XConvertCase');
    return _XConvertCase(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XConvertCase _XConvertCase;

  int XLookupString(
    ffi.Pointer<XKeyEvent> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    ffi.Pointer<XComposeStatus> arg4,
  ) {
    _XLookupString_1 ??= _dylib
        .lookupFunction<_c_XLookupString, _dart_XLookupString>('XLookupString');
    return _XLookupString_1(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XLookupString _XLookupString_1;

  int XMatchVisualInfo(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<XVisualInfo> arg4,
  ) {
    _XMatchVisualInfo ??=
        _dylib.lookupFunction<_c_XMatchVisualInfo, _dart_XMatchVisualInfo>(
            'XMatchVisualInfo');
    return _XMatchVisualInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XMatchVisualInfo _XMatchVisualInfo;

  int XOffsetRegion(
    ffi.Pointer<_XRegion> arg0,
    int arg1,
    int arg2,
  ) {
    _XOffsetRegion ??= _dylib
        .lookupFunction<_c_XOffsetRegion, _dart_XOffsetRegion>('XOffsetRegion');
    return _XOffsetRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XOffsetRegion _XOffsetRegion;

  int XPointInRegion(
    ffi.Pointer<_XRegion> arg0,
    int arg1,
    int arg2,
  ) {
    _XPointInRegion ??=
        _dylib.lookupFunction<_c_XPointInRegion, _dart_XPointInRegion>(
            'XPointInRegion');
    return _XPointInRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XPointInRegion _XPointInRegion;

  ffi.Pointer<_XRegion> XPolygonRegion(
    ffi.Pointer<XPoint> arg0,
    int arg1,
    int arg2,
  ) {
    _XPolygonRegion ??=
        _dylib.lookupFunction<_c_XPolygonRegion, _dart_XPolygonRegion>(
            'XPolygonRegion');
    return _XPolygonRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XPolygonRegion _XPolygonRegion;

  int XRectInRegion(
    ffi.Pointer<_XRegion> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _XRectInRegion ??= _dylib
        .lookupFunction<_c_XRectInRegion, _dart_XRectInRegion>('XRectInRegion');
    return _XRectInRegion(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XRectInRegion _XRectInRegion;

  int XSaveContext(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _XSaveContext ??= _dylib
        .lookupFunction<_c_XSaveContext, _dart_XSaveContext>('XSaveContext');
    return _XSaveContext(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSaveContext _XSaveContext;

  int XSetClassHint(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XClassHint> arg2,
  ) {
    _XSetClassHint ??= _dylib
        .lookupFunction<_c_XSetClassHint, _dart_XSetClassHint>('XSetClassHint');
    return _XSetClassHint(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetClassHint _XSetClassHint;

  int XSetIconSizes(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XIconSize> arg2,
    int arg3,
  ) {
    _XSetIconSizes ??= _dylib
        .lookupFunction<_c_XSetIconSizes, _dart_XSetIconSizes>('XSetIconSizes');
    return _XSetIconSizes(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetIconSizes _XSetIconSizes;

  int XSetNormalHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XSetNormalHints ??=
        _dylib.lookupFunction<_c_XSetNormalHints, _dart_XSetNormalHints>(
            'XSetNormalHints');
    return _XSetNormalHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetNormalHints _XSetNormalHints;

  void XSetRGBColormaps(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XStandardColormap> arg2,
    int arg3,
    int arg4,
  ) {
    _XSetRGBColormaps ??=
        _dylib.lookupFunction<_c_XSetRGBColormaps, _dart_XSetRGBColormaps>(
            'XSetRGBColormaps');
    return _XSetRGBColormaps(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_XSetRGBColormaps _XSetRGBColormaps;

  int XSetSizeHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    int arg3,
  ) {
    _XSetSizeHints ??= _dylib
        .lookupFunction<_c_XSetSizeHints, _dart_XSetSizeHints>('XSetSizeHints');
    return _XSetSizeHints(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetSizeHints _XSetSizeHints;

  int XSetStandardProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
    int arg6,
    ffi.Pointer<XSizeHints> arg7,
  ) {
    _XSetStandardProperties ??= _dylib.lookupFunction<_c_XSetStandardProperties,
        _dart_XSetStandardProperties>('XSetStandardProperties');
    return _XSetStandardProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_XSetStandardProperties _XSetStandardProperties;

  void XSetTextProperty(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
    int arg3,
  ) {
    _XSetTextProperty ??=
        _dylib.lookupFunction<_c_XSetTextProperty, _dart_XSetTextProperty>(
            'XSetTextProperty');
    return _XSetTextProperty(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetTextProperty _XSetTextProperty;

  void XSetWMClientMachine(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XSetWMClientMachine ??= _dylib.lookupFunction<_c_XSetWMClientMachine,
        _dart_XSetWMClientMachine>('XSetWMClientMachine');
    return _XSetWMClientMachine(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMClientMachine _XSetWMClientMachine;

  int XSetWMHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XWMHints> arg2,
  ) {
    _XSetWMHints ??=
        _dylib.lookupFunction<_c_XSetWMHints, _dart_XSetWMHints>('XSetWMHints');
    return _XSetWMHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMHints _XSetWMHints;

  void XSetWMIconName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XSetWMIconName ??=
        _dylib.lookupFunction<_c_XSetWMIconName, _dart_XSetWMIconName>(
            'XSetWMIconName');
    return _XSetWMIconName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMIconName _XSetWMIconName;

  void XSetWMName(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XSetWMName ??=
        _dylib.lookupFunction<_c_XSetWMName, _dart_XSetWMName>('XSetWMName');
    return _XSetWMName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMName _XSetWMName;

  void XSetWMNormalHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XSetWMNormalHints ??=
        _dylib.lookupFunction<_c_XSetWMNormalHints, _dart_XSetWMNormalHints>(
            'XSetWMNormalHints');
    return _XSetWMNormalHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetWMNormalHints _XSetWMNormalHints;

  void XSetWMProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
    ffi.Pointer<XTextProperty> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
    int arg5,
    ffi.Pointer<XSizeHints> arg6,
    ffi.Pointer<XWMHints> arg7,
    ffi.Pointer<XClassHint> arg8,
  ) {
    _XSetWMProperties ??=
        _dylib.lookupFunction<_c_XSetWMProperties, _dart_XSetWMProperties>(
            'XSetWMProperties');
    return _XSetWMProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XSetWMProperties _XSetWMProperties;

  void XmbSetWMProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
    int arg5,
    ffi.Pointer<XSizeHints> arg6,
    ffi.Pointer<XWMHints> arg7,
    ffi.Pointer<XClassHint> arg8,
  ) {
    _XmbSetWMProperties ??=
        _dylib.lookupFunction<_c_XmbSetWMProperties, _dart_XmbSetWMProperties>(
            'XmbSetWMProperties');
    return _XmbSetWMProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_XmbSetWMProperties _XmbSetWMProperties;

  void Xutf8SetWMProperties(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
    int arg5,
    ffi.Pointer<XSizeHints> arg6,
    ffi.Pointer<XWMHints> arg7,
    ffi.Pointer<XClassHint> arg8,
  ) {
    _Xutf8SetWMProperties ??= _dylib.lookupFunction<_c_Xutf8SetWMProperties,
        _dart_Xutf8SetWMProperties>('Xutf8SetWMProperties');
    return _Xutf8SetWMProperties(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  _dart_Xutf8SetWMProperties _Xutf8SetWMProperties;

  void XSetWMSizeHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
    int arg3,
  ) {
    _XSetWMSizeHints ??=
        _dylib.lookupFunction<_c_XSetWMSizeHints, _dart_XSetWMSizeHints>(
            'XSetWMSizeHints');
    return _XSetWMSizeHints(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetWMSizeHints _XSetWMSizeHints;

  int XSetRegion(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<_XGC> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XSetRegion ??=
        _dylib.lookupFunction<_c_XSetRegion, _dart_XSetRegion>('XSetRegion');
    return _XSetRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetRegion _XSetRegion;

  void XSetStandardColormap(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XStandardColormap> arg2,
    int arg3,
  ) {
    _XSetStandardColormap ??= _dylib.lookupFunction<_c_XSetStandardColormap,
        _dart_XSetStandardColormap>('XSetStandardColormap');
    return _XSetStandardColormap(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_XSetStandardColormap _XSetStandardColormap;

  int XSetZoomHints(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<XSizeHints> arg2,
  ) {
    _XSetZoomHints ??= _dylib
        .lookupFunction<_c_XSetZoomHints, _dart_XSetZoomHints>('XSetZoomHints');
    return _XSetZoomHints(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSetZoomHints _XSetZoomHints;

  int XShrinkRegion(
    ffi.Pointer<_XRegion> arg0,
    int arg1,
    int arg2,
  ) {
    _XShrinkRegion ??= _dylib
        .lookupFunction<_c_XShrinkRegion, _dart_XShrinkRegion>('XShrinkRegion');
    return _XShrinkRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XShrinkRegion _XShrinkRegion;

  int XStringListToTextProperty(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    int arg1,
    ffi.Pointer<XTextProperty> arg2,
  ) {
    _XStringListToTextProperty ??= _dylib.lookupFunction<
        _c_XStringListToTextProperty,
        _dart_XStringListToTextProperty>('XStringListToTextProperty');
    return _XStringListToTextProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XStringListToTextProperty _XStringListToTextProperty;

  int XSubtractRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XSubtractRegion ??=
        _dylib.lookupFunction<_c_XSubtractRegion, _dart_XSubtractRegion>(
            'XSubtractRegion');
    return _XSubtractRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XSubtractRegion _XSubtractRegion;

  int XmbTextListToTextProperty(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
    int count,
    int style,
    ffi.Pointer<XTextProperty> text_prop_return,
  ) {
    _XmbTextListToTextProperty_1 ??= _dylib.lookupFunction<
        _c_XmbTextListToTextProperty,
        _dart_XmbTextListToTextProperty>('XmbTextListToTextProperty');
    return _XmbTextListToTextProperty_1(
      display,
      list,
      count,
      style,
      text_prop_return,
    );
  }

  _dart_XmbTextListToTextProperty _XmbTextListToTextProperty_1;

  int XwcTextListToTextProperty(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
    int count,
    int style,
    ffi.Pointer<XTextProperty> text_prop_return,
  ) {
    _XwcTextListToTextProperty_1 ??= _dylib.lookupFunction<
        _c_XwcTextListToTextProperty,
        _dart_XwcTextListToTextProperty>('XwcTextListToTextProperty');
    return _XwcTextListToTextProperty_1(
      display,
      list,
      count,
      style,
      text_prop_return,
    );
  }

  _dart_XwcTextListToTextProperty _XwcTextListToTextProperty_1;

  int Xutf8TextListToTextProperty(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
    int count,
    int style,
    ffi.Pointer<XTextProperty> text_prop_return,
  ) {
    _Xutf8TextListToTextProperty_1 ??= _dylib.lookupFunction<
        _c_Xutf8TextListToTextProperty,
        _dart_Xutf8TextListToTextProperty>('Xutf8TextListToTextProperty');
    return _Xutf8TextListToTextProperty_1(
      display,
      list,
      count,
      style,
      text_prop_return,
    );
  }

  _dart_Xutf8TextListToTextProperty _Xutf8TextListToTextProperty_1;

  void XwcFreeStringList(
    ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
  ) {
    _XwcFreeStringList_1 ??=
        _dylib.lookupFunction<_c_XwcFreeStringList, _dart_XwcFreeStringList>(
            'XwcFreeStringList');
    return _XwcFreeStringList_1(
      list,
    );
  }

  _dart_XwcFreeStringList _XwcFreeStringList_1;

  int XTextPropertyToStringList(
    ffi.Pointer<XTextProperty> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _XTextPropertyToStringList ??= _dylib.lookupFunction<
        _c_XTextPropertyToStringList,
        _dart_XTextPropertyToStringList>('XTextPropertyToStringList');
    return _XTextPropertyToStringList(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XTextPropertyToStringList _XTextPropertyToStringList;

  int XmbTextPropertyToTextList(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
    ffi.Pointer<ffi.Int32> count_return,
  ) {
    _XmbTextPropertyToTextList_1 ??= _dylib.lookupFunction<
        _c_XmbTextPropertyToTextList,
        _dart_XmbTextPropertyToTextList>('XmbTextPropertyToTextList');
    return _XmbTextPropertyToTextList_1(
      display,
      text_prop,
      list_return,
      count_return,
    );
  }

  _dart_XmbTextPropertyToTextList _XmbTextPropertyToTextList_1;

  int XwcTextPropertyToTextList(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_return,
    ffi.Pointer<ffi.Int32> count_return,
  ) {
    _XwcTextPropertyToTextList_1 ??= _dylib.lookupFunction<
        _c_XwcTextPropertyToTextList,
        _dart_XwcTextPropertyToTextList>('XwcTextPropertyToTextList');
    return _XwcTextPropertyToTextList_1(
      display,
      text_prop,
      list_return,
      count_return,
    );
  }

  _dart_XwcTextPropertyToTextList _XwcTextPropertyToTextList_1;

  int Xutf8TextPropertyToTextList(
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
    ffi.Pointer<ffi.Int32> count_return,
  ) {
    _Xutf8TextPropertyToTextList_1 ??= _dylib.lookupFunction<
        _c_Xutf8TextPropertyToTextList,
        _dart_Xutf8TextPropertyToTextList>('Xutf8TextPropertyToTextList');
    return _Xutf8TextPropertyToTextList_1(
      display,
      text_prop,
      list_return,
      count_return,
    );
  }

  _dart_Xutf8TextPropertyToTextList _Xutf8TextPropertyToTextList_1;

  int XUnionRectWithRegion(
    ffi.Pointer<XRectangle> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XUnionRectWithRegion ??= _dylib.lookupFunction<_c_XUnionRectWithRegion,
        _dart_XUnionRectWithRegion>('XUnionRectWithRegion');
    return _XUnionRectWithRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XUnionRectWithRegion _XUnionRectWithRegion;

  int XUnionRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XUnionRegion ??= _dylib
        .lookupFunction<_c_XUnionRegion, _dart_XUnionRegion>('XUnionRegion');
    return _XUnionRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XUnionRegion _XUnionRegion;

  int XWMGeometry(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
    ffi.Pointer<XSizeHints> arg5,
    ffi.Pointer<ffi.Int32> arg6,
    ffi.Pointer<ffi.Int32> arg7,
    ffi.Pointer<ffi.Int32> arg8,
    ffi.Pointer<ffi.Int32> arg9,
    ffi.Pointer<ffi.Int32> arg10,
  ) {
    _XWMGeometry ??=
        _dylib.lookupFunction<_c_XWMGeometry, _dart_XWMGeometry>('XWMGeometry');
    return _XWMGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
    );
  }

  _dart_XWMGeometry _XWMGeometry;

  int XXorRegion(
    ffi.Pointer<_XRegion> arg0,
    ffi.Pointer<_XRegion> arg1,
    ffi.Pointer<_XRegion> arg2,
  ) {
    _XXorRegion ??=
        _dylib.lookupFunction<_c_XXorRegion, _dart_XXorRegion>('XXorRegion');
    return _XXorRegion(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XXorRegion _XXorRegion;

  int _XimGeometryCallback() {
    __XimGeometryCallback ??= _dylib.lookupFunction<_c__XimGeometryCallback,
        _dart__XimGeometryCallback>('_XimGeometryCallback');
    return __XimGeometryCallback();
  }

  _dart__XimGeometryCallback __XimGeometryCallback;

  int _XimStrConversionCallback() {
    __XimStrConversionCallback ??= _dylib.lookupFunction<
        _c__XimStrConversionCallback,
        _dart__XimStrConversionCallback>('_XimStrConversionCallback');
    return __XimStrConversionCallback();
  }

  _dart__XimStrConversionCallback __XimStrConversionCallback;

  int _XimPreeditStartCallback() {
    __XimPreeditStartCallback ??= _dylib.lookupFunction<
        _c__XimPreeditStartCallback,
        _dart__XimPreeditStartCallback>('_XimPreeditStartCallback');
    return __XimPreeditStartCallback();
  }

  _dart__XimPreeditStartCallback __XimPreeditStartCallback;

  int _XimPreeditDoneCallback() {
    __XimPreeditDoneCallback ??= _dylib.lookupFunction<
        _c__XimPreeditDoneCallback,
        _dart__XimPreeditDoneCallback>('_XimPreeditDoneCallback');
    return __XimPreeditDoneCallback();
  }

  _dart__XimPreeditDoneCallback __XimPreeditDoneCallback;

  void _free_memory_for_text(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    __free_memory_for_text ??= _dylib.lookupFunction<_c__free_memory_for_text,
        _dart__free_memory_for_text>('_free_memory_for_text');
    return __free_memory_for_text(
      arg0,
    );
  }

  _dart__free_memory_for_text __free_memory_for_text;

  int _XimPreeditDrawCallback() {
    __XimPreeditDrawCallback ??= _dylib.lookupFunction<
        _c__XimPreeditDrawCallback,
        _dart__XimPreeditDrawCallback>('_XimPreeditDrawCallback');
    return __XimPreeditDrawCallback();
  }

  _dart__XimPreeditDrawCallback __XimPreeditDrawCallback;

  int _XimPreeditCaretCallback() {
    __XimPreeditCaretCallback ??= _dylib.lookupFunction<
        _c__XimPreeditCaretCallback,
        _dart__XimPreeditCaretCallback>('_XimPreeditCaretCallback');
    return __XimPreeditCaretCallback();
  }

  _dart__XimPreeditCaretCallback __XimPreeditCaretCallback;

  int _XimStatusStartCallback() {
    __XimStatusStartCallback ??= _dylib.lookupFunction<
        _c__XimStatusStartCallback,
        _dart__XimStatusStartCallback>('_XimStatusStartCallback');
    return __XimStatusStartCallback();
  }

  _dart__XimStatusStartCallback __XimStatusStartCallback;

  int _XimStatusDoneCallback() {
    __XimStatusDoneCallback ??= _dylib.lookupFunction<_c__XimStatusDoneCallback,
        _dart__XimStatusDoneCallback>('_XimStatusDoneCallback');
    return __XimStatusDoneCallback();
  }

  _dart__XimStatusDoneCallback __XimStatusDoneCallback;

  int _XimStatusDrawCallback() {
    __XimStatusDrawCallback ??= _dylib.lookupFunction<_c__XimStatusDrawCallback,
        _dart__XimStatusDrawCallback>('_XimStatusDrawCallback');
    return __XimStatusDrawCallback();
  }

  _dart__XimStatusDrawCallback __XimStatusDrawCallback;

  int _XimPreeditStateNotifyCallback() {
    __XimPreeditStateNotifyCallback ??= _dylib.lookupFunction<
        _c__XimPreeditStateNotifyCallback,
        _dart__XimPreeditStateNotifyCallback>('_XimPreeditStateNotifyCallback');
    return __XimPreeditStateNotifyCallback();
  }

  _dart__XimPreeditStateNotifyCallback __XimPreeditStateNotifyCallback;

  int _XimIsReadyForProcess(
    int ic,
  ) {
    __XimIsReadyForProcess ??= _dylib.lookupFunction<_c__XimIsReadyForProcess,
        _dart__XimIsReadyForProcess>('_XimIsReadyForProcess');
    return __XimIsReadyForProcess(
      ic,
    );
  }

  _dart__XimIsReadyForProcess __XimIsReadyForProcess;

  void _XimProcessPendingCallbacks(
    int ic,
  ) {
    __XimProcessPendingCallbacks ??= _dylib.lookupFunction<
        _c__XimProcessPendingCallbacks,
        _dart__XimProcessPendingCallbacks>('_XimProcessPendingCallbacks');
    return __XimProcessPendingCallbacks(
      ic,
    );
  }

  _dart__XimProcessPendingCallbacks __XimProcessPendingCallbacks;

  void _XimPutCbIntoQueue(
    int ic,
    int call_data,
  ) {
    __XimPutCbIntoQueue ??=
        _dylib.lookupFunction<_c__XimPutCbIntoQueue, _dart__XimPutCbIntoQueue>(
            '_XimPutCbIntoQueue');
    return __XimPutCbIntoQueue(
      ic,
      call_data,
    );
  }

  _dart__XimPutCbIntoQueue __XimPutCbIntoQueue;

  int _XimCbDispatch(
    int xim,
    int len,
    int data,
    int call_data,
  ) {
    __XimCbDispatch ??=
        _dylib.lookupFunction<_c__XimCbDispatch, _dart__XimCbDispatch>(
            '_XimCbDispatch');
    return __XimCbDispatch(
      xim,
      len,
      data,
      call_data,
    );
  }

  _dart__XimCbDispatch __XimCbDispatch;

  void _read_text_from_packet(
    int im,
    ffi.Pointer<ffi.Int8> buf,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> text_ptr,
  ) {
    __read_text_from_packet ??= _dylib.lookupFunction<_c__read_text_from_packet,
        _dart__read_text_from_packet>('_read_text_from_packet');
    return __read_text_from_packet(
      im,
      buf,
      text_ptr,
    );
  }

  _dart__read_text_from_packet __read_text_from_packet;

  int _XimTriggerCheck(
    int im,
    ffi.Pointer<ffi.Int32> ev,
    int len,
    ffi.Pointer<ffi.Int32> keylist,
  ) {
    __XimTriggerCheck ??=
        _dylib.lookupFunction<_c__XimTriggerCheck, _dart__XimTriggerCheck>(
            '_XimTriggerCheck');
    return __XimTriggerCheck(
      im,
      ev,
      len,
      keylist,
    );
  }

  _dart__XimTriggerCheck __XimTriggerCheck;

  int _XimTriggerOnCheck(
    int im,
    ffi.Pointer<ffi.Int32> ev,
  ) {
    __XimTriggerOnCheck ??=
        _dylib.lookupFunction<_c__XimTriggerOnCheck, _dart__XimTriggerOnCheck>(
            '_XimTriggerOnCheck');
    return __XimTriggerOnCheck(
      im,
      ev,
    );
  }

  _dart__XimTriggerOnCheck __XimTriggerOnCheck;

  int _XimTriggerOffCheck(
    int im,
    ffi.Pointer<ffi.Int32> ev,
  ) {
    __XimTriggerOffCheck ??= _dylib.lookupFunction<_c__XimTriggerOffCheck,
        _dart__XimTriggerOffCheck>('_XimTriggerOffCheck');
    return __XimTriggerOffCheck(
      im,
      ev,
    );
  }

  _dart__XimTriggerOffCheck __XimTriggerOffCheck;

  int _XimOnKeysCheck(
    int ic,
    ffi.Pointer<ffi.Int32> ev,
  ) {
    __XimOnKeysCheck ??=
        _dylib.lookupFunction<_c__XimOnKeysCheck, _dart__XimOnKeysCheck>(
            '_XimOnKeysCheck');
    return __XimOnKeysCheck(
      ic,
      ev,
    );
  }

  _dart__XimOnKeysCheck __XimOnKeysCheck;

  int _XimOffKeysCheck(
    int ic,
    ffi.Pointer<ffi.Int32> ev,
  ) {
    __XimOffKeysCheck ??=
        _dylib.lookupFunction<_c__XimOffKeysCheck, _dart__XimOffKeysCheck>(
            '_XimOffKeysCheck');
    return __XimOffKeysCheck(
      ic,
      ev,
    );
  }

  _dart__XimOffKeysCheck __XimOffKeysCheck;

  void _XimPendingFilter(
    int ic,
  ) {
    __XimPendingFilter ??=
        _dylib.lookupFunction<_c__XimPendingFilter, _dart__XimPendingFilter>(
            '_XimPendingFilter');
    return __XimPendingFilter(
      ic,
    );
  }

  _dart__XimPendingFilter __XimPendingFilter;

  int _XimProtoKeypressFilter(
    int ic,
    ffi.Pointer<ffi.Int32> ev,
  ) {
    __XimProtoKeypressFilter ??= _dylib.lookupFunction<
        _c__XimProtoKeypressFilter,
        _dart__XimProtoKeypressFilter>('_XimProtoKeypressFilter');
    return __XimProtoKeypressFilter(
      ic,
      ev,
    );
  }

  _dart__XimProtoKeypressFilter __XimProtoKeypressFilter;

  int _XimFilterKeypress(
    ffi.Pointer<ffi.Int32> d,
    int w,
    ffi.Pointer<ffi.Int32> ev,
    int client_data,
  ) {
    __XimFilterKeypress ??=
        _dylib.lookupFunction<_c__XimFilterKeypress, _dart__XimFilterKeypress>(
            '_XimFilterKeypress');
    return __XimFilterKeypress(
      d,
      w,
      ev,
      client_data,
    );
  }

  _dart__XimFilterKeypress __XimFilterKeypress;

  int _XimProtoKeyreleaseFilter(
    int ic,
    ffi.Pointer<ffi.Int32> ev,
  ) {
    __XimProtoKeyreleaseFilter ??= _dylib.lookupFunction<
        _c__XimProtoKeyreleaseFilter,
        _dart__XimProtoKeyreleaseFilter>('_XimProtoKeyreleaseFilter');
    return __XimProtoKeyreleaseFilter(
      ic,
      ev,
    );
  }

  _dart__XimProtoKeyreleaseFilter __XimProtoKeyreleaseFilter;

  int _XimFilterKeyrelease(
    ffi.Pointer<ffi.Int32> d,
    int w,
    ffi.Pointer<ffi.Int32> ev,
    int client_data,
  ) {
    __XimFilterKeyrelease ??= _dylib.lookupFunction<_c__XimFilterKeyrelease,
        _dart__XimFilterKeyrelease>('_XimFilterKeyrelease');
    return __XimFilterKeyrelease(
      d,
      w,
      ev,
      client_data,
    );
  }

  _dart__XimFilterKeyrelease __XimFilterKeyrelease;

  void _XimRegisterKeyPressFilter(
    int ic,
  ) {
    __XimRegisterKeyPressFilter ??= _dylib.lookupFunction<
        _c__XimRegisterKeyPressFilter,
        _dart__XimRegisterKeyPressFilter>('_XimRegisterKeyPressFilter');
    return __XimRegisterKeyPressFilter(
      ic,
    );
  }

  _dart__XimRegisterKeyPressFilter __XimRegisterKeyPressFilter;

  void _XimRegisterKeyReleaseFilter(
    int ic,
  ) {
    __XimRegisterKeyReleaseFilter ??= _dylib.lookupFunction<
        _c__XimRegisterKeyReleaseFilter,
        _dart__XimRegisterKeyReleaseFilter>('_XimRegisterKeyReleaseFilter');
    return __XimRegisterKeyReleaseFilter(
      ic,
    );
  }

  _dart__XimRegisterKeyReleaseFilter __XimRegisterKeyReleaseFilter;

  void _XimUnregisterKeyPressFilter(
    int ic,
  ) {
    __XimUnregisterKeyPressFilter ??= _dylib.lookupFunction<
        _c__XimUnregisterKeyPressFilter,
        _dart__XimUnregisterKeyPressFilter>('_XimUnregisterKeyPressFilter');
    return __XimUnregisterKeyPressFilter(
      ic,
    );
  }

  _dart__XimUnregisterKeyPressFilter __XimUnregisterKeyPressFilter;

  void _XimUnregisterKeyReleaseFilter(
    int ic,
  ) {
    __XimUnregisterKeyReleaseFilter ??= _dylib.lookupFunction<
        _c__XimUnregisterKeyReleaseFilter,
        _dart__XimUnregisterKeyReleaseFilter>('_XimUnregisterKeyReleaseFilter');
    return __XimUnregisterKeyReleaseFilter(
      ic,
    );
  }

  _dart__XimUnregisterKeyReleaseFilter __XimUnregisterKeyReleaseFilter;

  void _XimRegisterFilter(
    int ic,
  ) {
    __XimRegisterFilter ??=
        _dylib.lookupFunction<_c__XimRegisterFilter, _dart__XimRegisterFilter>(
            '_XimRegisterFilter');
    return __XimRegisterFilter(
      ic,
    );
  }

  _dart__XimRegisterFilter __XimRegisterFilter;

  void _XimUnregisterFilter(
    int ic,
  ) {
    __XimUnregisterFilter ??= _dylib.lookupFunction<_c__XimUnregisterFilter,
        _dart__XimUnregisterFilter>('_XimUnregisterFilter');
    return __XimUnregisterFilter(
      ic,
    );
  }

  _dart__XimUnregisterFilter __XimUnregisterFilter;

  void _XimReregisterFilter(
    int ic,
  ) {
    __XimReregisterFilter ??= _dylib.lookupFunction<_c__XimReregisterFilter,
        _dart__XimReregisterFilter>('_XimReregisterFilter');
    return __XimReregisterFilter(
      ic,
    );
  }

  _dart__XimReregisterFilter __XimReregisterFilter;

  int _XimFilterServerDestroy(
    ffi.Pointer<ffi.Int32> d,
    int w,
    ffi.Pointer<ffi.Int32> ev,
    int client_data,
  ) {
    __XimFilterServerDestroy ??= _dylib.lookupFunction<
        _c__XimFilterServerDestroy,
        _dart__XimFilterServerDestroy>('_XimFilterServerDestroy');
    return __XimFilterServerDestroy(
      d,
      w,
      ev,
      client_data,
    );
  }

  _dart__XimFilterServerDestroy __XimFilterServerDestroy;

  void _XimRegisterServerFilter(
    int im,
  ) {
    __XimRegisterServerFilter ??= _dylib.lookupFunction<
        _c__XimRegisterServerFilter,
        _dart__XimRegisterServerFilter>('_XimRegisterServerFilter');
    return __XimRegisterServerFilter(
      im,
    );
  }

  _dart__XimRegisterServerFilter __XimRegisterServerFilter;

  void _XimUnregisterServerFilter(
    int im,
  ) {
    __XimUnregisterServerFilter ??= _dylib.lookupFunction<
        _c__XimUnregisterServerFilter,
        _dart__XimUnregisterServerFilter>('_XimUnregisterServerFilter');
    return __XimUnregisterServerFilter(
      im,
    );
  }

  _dart__XimUnregisterServerFilter __XimUnregisterServerFilter;

  int _XimCreateICCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimCreateICCheck ??=
        _dylib.lookupFunction<_c__XimCreateICCheck, _dart__XimCreateICCheck>(
            '_XimCreateICCheck');
    return __XimCreateICCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimCreateICCheck __XimCreateICCheck;

  int _XimGetICValuesCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimGetICValuesCheck ??= _dylib.lookupFunction<_c__XimGetICValuesCheck,
        _dart__XimGetICValuesCheck>('_XimGetICValuesCheck');
    return __XimGetICValuesCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimGetICValuesCheck __XimGetICValuesCheck;

  ffi.Pointer<ffi.Int8> _XimProtoGetICValues(
    int xic,
    ffi.Pointer<ffi.Int32> arg,
  ) {
    __XimProtoGetICValues ??= _dylib.lookupFunction<_c__XimProtoGetICValues,
        _dart__XimProtoGetICValues>('_XimProtoGetICValues');
    return __XimProtoGetICValues(
      xic,
      arg,
    );
  }

  _dart__XimProtoGetICValues __XimProtoGetICValues;

  int _XimSetICValuesCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimSetICValuesCheck ??= _dylib.lookupFunction<_c__XimSetICValuesCheck,
        _dart__XimSetICValuesCheck>('_XimSetICValuesCheck');
    return __XimSetICValuesCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimSetICValuesCheck __XimSetICValuesCheck;

  ffi.Pointer<ffi.Int8> _XimProtoSetICValues(
    int xic,
    ffi.Pointer<ffi.Int32> arg,
  ) {
    __XimProtoSetICValues ??= _dylib.lookupFunction<_c__XimProtoSetICValues,
        _dart__XimProtoSetICValues>('_XimProtoSetICValues');
    return __XimProtoSetICValues(
      xic,
      arg,
    );
  }

  _dart__XimProtoSetICValues __XimProtoSetICValues;

  int _XimDestroyICCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimDestroyICCheck ??=
        _dylib.lookupFunction<_c__XimDestroyICCheck, _dart__XimDestroyICCheck>(
            '_XimDestroyICCheck');
    return __XimDestroyICCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimDestroyICCheck __XimDestroyICCheck;

  void _XimProtoICFree(
    int ic,
  ) {
    __XimProtoICFree ??=
        _dylib.lookupFunction<_c__XimProtoICFree, _dart__XimProtoICFree>(
            '_XimProtoICFree');
    return __XimProtoICFree(
      ic,
    );
  }

  _dart__XimProtoICFree __XimProtoICFree;

  void _XimProtoDestroyIC(
    int xic,
  ) {
    __XimProtoDestroyIC ??=
        _dylib.lookupFunction<_c__XimProtoDestroyIC, _dart__XimProtoDestroyIC>(
            '_XimProtoDestroyIC');
    return __XimProtoDestroyIC(
      xic,
    );
  }

  _dart__XimProtoDestroyIC __XimProtoDestroyIC;

  void BrokenSyncWithServer(
    int xic,
  ) {
    _BrokenSyncWithServer ??= _dylib.lookupFunction<_c_BrokenSyncWithServer,
        _dart_BrokenSyncWithServer>('BrokenSyncWithServer');
    return _BrokenSyncWithServer(
      xic,
    );
  }

  _dart_BrokenSyncWithServer _BrokenSyncWithServer;

  void _XimProtoSetFocus(
    int xic,
  ) {
    __XimProtoSetFocus ??=
        _dylib.lookupFunction<_c__XimProtoSetFocus, _dart__XimProtoSetFocus>(
            '_XimProtoSetFocus');
    return __XimProtoSetFocus(
      xic,
    );
  }

  _dart__XimProtoSetFocus __XimProtoSetFocus;

  void _XimProtoUnsetFocus(
    int xic,
  ) {
    __XimProtoUnsetFocus ??= _dylib.lookupFunction<_c__XimProtoUnsetFocus,
        _dart__XimProtoUnsetFocus>('_XimProtoUnsetFocus');
    return __XimProtoUnsetFocus(
      xic,
    );
  }

  _dart__XimProtoUnsetFocus __XimProtoUnsetFocus;

  int _XimResetICCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimResetICCheck ??=
        _dylib.lookupFunction<_c__XimResetICCheck, _dart__XimResetICCheck>(
            '_XimResetICCheck');
    return __XimResetICCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimResetICCheck __XimResetICCheck;

  ffi.Pointer<ffi.Int8> _XimProtoReset(
    int xic,
    ffi.Pointer<ffi.NativeFunction<_typedefC_57>> retfunc,
  ) {
    __XimProtoReset ??=
        _dylib.lookupFunction<_c__XimProtoReset, _dart__XimProtoReset>(
            '_XimProtoReset');
    return __XimProtoReset(
      xic,
      retfunc,
    );
  }

  _dart__XimProtoReset __XimProtoReset;

  ffi.Pointer<ffi.Int8> _XimCommitedMbString(
    int im,
    int ic,
    int buf,
  ) {
    __XimCommitedMbString ??= _dylib.lookupFunction<_c__XimCommitedMbString,
        _dart__XimCommitedMbString>('_XimCommitedMbString');
    return __XimCommitedMbString(
      im,
      ic,
      buf,
    );
  }

  _dart__XimCommitedMbString __XimCommitedMbString;

  ffi.Pointer<ffi.Int8> _XimProtoMbReset(
    int xic,
  ) {
    __XimProtoMbReset ??=
        _dylib.lookupFunction<_c__XimProtoMbReset, _dart__XimProtoMbReset>(
            '_XimProtoMbReset');
    return __XimProtoMbReset(
      xic,
    );
  }

  _dart__XimProtoMbReset __XimProtoMbReset;

  ffi.Pointer<ffi.Int32> _XimCommitedWcString(
    int im,
    int ic,
    int buf,
  ) {
    __XimCommitedWcString ??= _dylib.lookupFunction<_c__XimCommitedWcString,
        _dart__XimCommitedWcString>('_XimCommitedWcString');
    return __XimCommitedWcString(
      im,
      ic,
      buf,
    );
  }

  _dart__XimCommitedWcString __XimCommitedWcString;

  ffi.Pointer<ffi.Int32> _XimProtoWcReset(
    int xic,
  ) {
    __XimProtoWcReset ??=
        _dylib.lookupFunction<_c__XimProtoWcReset, _dart__XimProtoWcReset>(
            '_XimProtoWcReset');
    return __XimProtoWcReset(
      xic,
    );
  }

  _dart__XimProtoWcReset __XimProtoWcReset;

  ffi.Pointer<ffi.Int8> _XimCommitedUtf8String(
    int im,
    int ic,
    int buf,
  ) {
    __XimCommitedUtf8String ??= _dylib.lookupFunction<_c__XimCommitedUtf8String,
        _dart__XimCommitedUtf8String>('_XimCommitedUtf8String');
    return __XimCommitedUtf8String(
      im,
      ic,
      buf,
    );
  }

  _dart__XimCommitedUtf8String __XimCommitedUtf8String;

  ffi.Pointer<ffi.Int8> _XimProtoUtf8Reset(
    int xic,
  ) {
    __XimProtoUtf8Reset ??=
        _dylib.lookupFunction<_c__XimProtoUtf8Reset, _dart__XimProtoUtf8Reset>(
            '_XimProtoUtf8Reset');
    return __XimProtoUtf8Reset(
      xic,
    );
  }

  _dart__XimProtoUtf8Reset __XimProtoUtf8Reset;

  int _XimGetInputStyle(
    ffi.Pointer<ffi.Int32> arg,
    ffi.Pointer<ffi.Int32> input_style,
  ) {
    __XimGetInputStyle ??=
        _dylib.lookupFunction<_c__XimGetInputStyle, _dart__XimGetInputStyle>(
            '_XimGetInputStyle');
    return __XimGetInputStyle(
      arg,
      input_style,
    );
  }

  _dart__XimGetInputStyle __XimGetInputStyle;

  int _XimProtoCreateIC(
    int xim,
    ffi.Pointer<ffi.Int32> arg,
  ) {
    __XimProtoCreateIC ??=
        _dylib.lookupFunction<_c__XimProtoCreateIC, _dart__XimProtoCreateIC>(
            '_XimProtoCreateIC');
    return __XimProtoCreateIC(
      xim,
      arg,
    );
  }

  _dart__XimProtoCreateIC __XimProtoCreateIC;

  int _XimCheckDataSize(
    int buf,
    int len,
  ) {
    __XimCheckDataSize ??=
        _dylib.lookupFunction<_c__XimCheckDataSize, _dart__XimCheckDataSize>(
            '_XimCheckDataSize');
    return __XimCheckDataSize(
      buf,
      len,
    );
  }

  _dart__XimCheckDataSize __XimCheckDataSize;

  void _XimSetHeader(
    int buf,
    int major_opcode,
    int minor_opcode,
    ffi.Pointer<ffi.Int32> len,
  ) {
    __XimSetHeader ??= _dylib
        .lookupFunction<_c__XimSetHeader, _dart__XimSetHeader>('_XimSetHeader');
    return __XimSetHeader(
      buf,
      major_opcode,
      minor_opcode,
      len,
    );
  }

  _dart__XimSetHeader __XimSetHeader;

  int _XimGetMyEndian() {
    __XimGetMyEndian ??=
        _dylib.lookupFunction<_c__XimGetMyEndian, _dart__XimGetMyEndian>(
            '_XimGetMyEndian');
    return __XimGetMyEndian();
  }

  _dart__XimGetMyEndian __XimGetMyEndian;

  int _XimCheckServerName(
    int im,
    ffi.Pointer<ffi.Int8> str,
  ) {
    __XimCheckServerName ??= _dylib.lookupFunction<_c__XimCheckServerName,
        _dart__XimCheckServerName>('_XimCheckServerName');
    return __XimCheckServerName(
      im,
      str,
    );
  }

  _dart__XimCheckServerName __XimCheckServerName;

  ffi.Pointer<ffi.Int8> _XimCheckLocaleName(
    int im,
    ffi.Pointer<ffi.Int8> address,
    int address_len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> locale_name,
    int len,
  ) {
    __XimCheckLocaleName ??= _dylib.lookupFunction<_c__XimCheckLocaleName,
        _dart__XimCheckLocaleName>('_XimCheckLocaleName');
    return __XimCheckLocaleName(
      im,
      address,
      address_len,
      locale_name,
      len,
    );
  }

  _dart__XimCheckLocaleName __XimCheckLocaleName;

  int _XimCheckTransport(
    ffi.Pointer<ffi.Int8> address,
    int address_len,
    ffi.Pointer<ffi.Int8> transport,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> trans_addr,
  ) {
    __XimCheckTransport ??=
        _dylib.lookupFunction<_c__XimCheckTransport, _dart__XimCheckTransport>(
            '_XimCheckTransport');
    return __XimCheckTransport(
      address,
      address_len,
      transport,
      len,
      trans_addr,
    );
  }

  _dart__XimCheckTransport __XimCheckTransport;

  int _CheckSNEvent(
    ffi.Pointer<ffi.Int32> display,
    ffi.Pointer<ffi.Int32> xevent,
    int arg,
  ) {
    __CheckSNEvent ??= _dylib
        .lookupFunction<_c__CheckSNEvent, _dart__CheckSNEvent>('_CheckSNEvent');
    return __CheckSNEvent(
      display,
      xevent,
      arg,
    );
  }

  _dart__CheckSNEvent __CheckSNEvent;

  int _XimGetSelectionNotify(
    ffi.Pointer<ffi.Int32> display,
    int window,
    int target,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> ret_address,
  ) {
    __XimGetSelectionNotify ??= _dylib.lookupFunction<_c__XimGetSelectionNotify,
        _dart__XimGetSelectionNotify>('_XimGetSelectionNotify');
    return __XimGetSelectionNotify(
      display,
      window,
      target,
      ret_address,
    );
  }

  _dart__XimGetSelectionNotify __XimGetSelectionNotify;

  int _XimPreConnectionIM(
    int im,
    int selection,
  ) {
    __XimPreConnectionIM ??= _dylib.lookupFunction<_c__XimPreConnectionIM,
        _dart__XimPreConnectionIM>('_XimPreConnectionIM');
    return __XimPreConnectionIM(
      im,
      selection,
    );
  }

  _dart__XimPreConnectionIM __XimPreConnectionIM;

  int _XimPreConnect(
    int im,
  ) {
    __XimPreConnect ??=
        _dylib.lookupFunction<_c__XimPreConnect, _dart__XimPreConnect>(
            '_XimPreConnect');
    return __XimPreConnect(
      im,
    );
  }

  _dart__XimPreConnect __XimPreConnect;

  int _XimGetAuthProtocolNames(
    int im,
    ffi.Pointer<ffi.Int32> buf,
    ffi.Pointer<ffi.Int32> num,
    ffi.Pointer<ffi.Int32> len,
  ) {
    __XimGetAuthProtocolNames ??= _dylib.lookupFunction<
        _c__XimGetAuthProtocolNames,
        _dart__XimGetAuthProtocolNames>('_XimGetAuthProtocolNames');
    return __XimGetAuthProtocolNames(
      im,
      buf,
      num,
      len,
    );
  }

  _dart__XimGetAuthProtocolNames __XimGetAuthProtocolNames;

  int _XimSetAuthReplyData(
    int im,
    int buf,
    ffi.Pointer<ffi.Int32> len,
  ) {
    __XimSetAuthReplyData ??= _dylib.lookupFunction<_c__XimSetAuthReplyData,
        _dart__XimSetAuthReplyData>('_XimSetAuthReplyData');
    return __XimSetAuthReplyData(
      im,
      buf,
      len,
    );
  }

  _dart__XimSetAuthReplyData __XimSetAuthReplyData;

  int _XimSetAuthNextData(
    int im,
    int buf,
    ffi.Pointer<ffi.Int32> len,
  ) {
    __XimSetAuthNextData ??= _dylib.lookupFunction<_c__XimSetAuthNextData,
        _dart__XimSetAuthNextData>('_XimSetAuthNextData');
    return __XimSetAuthNextData(
      im,
      buf,
      len,
    );
  }

  _dart__XimSetAuthNextData __XimSetAuthNextData;

  int _XimSetAuthRequiredData(
    int im,
    int buf,
    ffi.Pointer<ffi.Int32> len,
  ) {
    __XimSetAuthRequiredData ??= _dylib.lookupFunction<
        _c__XimSetAuthRequiredData,
        _dart__XimSetAuthRequiredData>('_XimSetAuthRequiredData');
    return __XimSetAuthRequiredData(
      im,
      buf,
      len,
    );
  }

  _dart__XimSetAuthRequiredData __XimSetAuthRequiredData;

  int _XimCheckAuthSetupData(
    int im,
    int buf,
  ) {
    __XimCheckAuthSetupData ??= _dylib.lookupFunction<_c__XimCheckAuthSetupData,
        _dart__XimCheckAuthSetupData>('_XimCheckAuthSetupData');
    return __XimCheckAuthSetupData(
      im,
      buf,
    );
  }

  _dart__XimCheckAuthSetupData __XimCheckAuthSetupData;

  int _XimCheckAuthNextData(
    int im,
    int buf,
  ) {
    __XimCheckAuthNextData ??= _dylib.lookupFunction<_c__XimCheckAuthNextData,
        _dart__XimCheckAuthNextData>('_XimCheckAuthNextData');
    return __XimCheckAuthNextData(
      im,
      buf,
    );
  }

  _dart__XimCheckAuthNextData __XimCheckAuthNextData;

  int _XimClientAuthCheck(
    int im,
    int buf,
  ) {
    __XimClientAuthCheck ??= _dylib.lookupFunction<_c__XimClientAuthCheck,
        _dart__XimClientAuthCheck>('_XimClientAuthCheck');
    return __XimClientAuthCheck(
      im,
      buf,
    );
  }

  _dart__XimClientAuthCheck __XimClientAuthCheck;

  void _XimAuthNG(
    int im,
  ) {
    __XimAuthNG ??=
        _dylib.lookupFunction<_c__XimAuthNG, _dart__XimAuthNG>('_XimAuthNG');
    return __XimAuthNG(
      im,
    );
  }

  _dart__XimAuthNG __XimAuthNG;

  int _XimAllRecv(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimAllRecv ??=
        _dylib.lookupFunction<_c__XimAllRecv, _dart__XimAllRecv>('_XimAllRecv');
    return __XimAllRecv(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimAllRecv __XimAllRecv;

  int _XimConnection(
    int im,
  ) {
    __XimConnection ??=
        _dylib.lookupFunction<_c__XimConnection, _dart__XimConnection>(
            '_XimConnection');
    return __XimConnection(
      im,
    );
  }

  _dart__XimConnection __XimConnection;

  int _XimDisconnectCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimDisconnectCheck ??= _dylib.lookupFunction<_c__XimDisconnectCheck,
        _dart__XimDisconnectCheck>('_XimDisconnectCheck');
    return __XimDisconnectCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimDisconnectCheck __XimDisconnectCheck;

  int _XimDisconnect(
    int im,
  ) {
    __XimDisconnect ??=
        _dylib.lookupFunction<_c__XimDisconnect, _dart__XimDisconnect>(
            '_XimDisconnect');
    return __XimDisconnect(
      im,
    );
  }

  _dart__XimDisconnect __XimDisconnect;

  int _XimOpenCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimOpenCheck ??= _dylib
        .lookupFunction<_c__XimOpenCheck, _dart__XimOpenCheck>('_XimOpenCheck');
    return __XimOpenCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimOpenCheck __XimOpenCheck;

  int _XimOpen(
    int im,
  ) {
    __XimOpen ??=
        _dylib.lookupFunction<_c__XimOpen, _dart__XimOpen>('_XimOpen');
    return __XimOpen(
      im,
    );
  }

  _dart__XimOpen __XimOpen;

  int _XimCloseCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimCloseCheck ??=
        _dylib.lookupFunction<_c__XimCloseCheck, _dart__XimCloseCheck>(
            '_XimCloseCheck');
    return __XimCloseCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimCloseCheck __XimCloseCheck;

  int _XimClose(
    int im,
  ) {
    __XimClose ??=
        _dylib.lookupFunction<_c__XimClose, _dart__XimClose>('_XimClose');
    return __XimClose(
      im,
    );
  }

  _dart__XimClose __XimClose;

  void _XimProtoIMFree(
    int im,
  ) {
    __XimProtoIMFree ??=
        _dylib.lookupFunction<_c__XimProtoIMFree, _dart__XimProtoIMFree>(
            '_XimProtoIMFree');
    return __XimProtoIMFree(
      im,
    );
  }

  _dart__XimProtoIMFree __XimProtoIMFree;

  int _XimProtoCloseIM(
    int xim,
  ) {
    __XimProtoCloseIM ??=
        _dylib.lookupFunction<_c__XimProtoCloseIM, _dart__XimProtoCloseIM>(
            '_XimProtoCloseIM');
    return __XimProtoCloseIM(
      xim,
    );
  }

  _dart__XimProtoCloseIM __XimProtoCloseIM;

  int _XimSetIMValuesCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimSetIMValuesCheck ??= _dylib.lookupFunction<_c__XimSetIMValuesCheck,
        _dart__XimSetIMValuesCheck>('_XimSetIMValuesCheck');
    return __XimSetIMValuesCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimSetIMValuesCheck __XimSetIMValuesCheck;

  ffi.Pointer<ffi.Int8> _XimProtoSetIMValues(
    int xim,
    ffi.Pointer<ffi.Int32> arg,
  ) {
    __XimProtoSetIMValues ??= _dylib.lookupFunction<_c__XimProtoSetIMValues,
        _dart__XimProtoSetIMValues>('_XimProtoSetIMValues');
    return __XimProtoSetIMValues(
      xim,
      arg,
    );
  }

  _dart__XimProtoSetIMValues __XimProtoSetIMValues;

  int _XimGetIMValuesCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimGetIMValuesCheck ??= _dylib.lookupFunction<_c__XimGetIMValuesCheck,
        _dart__XimGetIMValuesCheck>('_XimGetIMValuesCheck');
    return __XimGetIMValuesCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimGetIMValuesCheck __XimGetIMValuesCheck;

  ffi.Pointer<ffi.Int8> _XimProtoGetIMValues(
    int xim,
    ffi.Pointer<ffi.Int32> arg,
  ) {
    __XimProtoGetIMValues ??= _dylib.lookupFunction<_c__XimProtoGetIMValues,
        _dart__XimProtoGetIMValues>('_XimProtoGetIMValues');
    return __XimProtoGetIMValues(
      xim,
      arg,
    );
  }

  _dart__XimProtoGetIMValues __XimProtoGetIMValues;

  int _XimSetEncodingByName(
    int im,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
    ffi.Pointer<ffi.Int32> len,
  ) {
    __XimSetEncodingByName ??= _dylib.lookupFunction<_c__XimSetEncodingByName,
        _dart__XimSetEncodingByName>('_XimSetEncodingByName');
    return __XimSetEncodingByName(
      im,
      buf,
      len,
    );
  }

  _dart__XimSetEncodingByName __XimSetEncodingByName;

  int _XimSetEncodingByDetail(
    int im,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
    ffi.Pointer<ffi.Int32> len,
  ) {
    __XimSetEncodingByDetail ??= _dylib.lookupFunction<
        _c__XimSetEncodingByDetail,
        _dart__XimSetEncodingByDetail>('_XimSetEncodingByDetail');
    return __XimSetEncodingByDetail(
      im,
      buf,
      len,
    );
  }

  _dart__XimSetEncodingByDetail __XimSetEncodingByDetail;

  int _XimGetEncoding(
    int im,
    ffi.Pointer<ffi.Int32> buf,
    ffi.Pointer<ffi.Int8> name,
    int name_len,
    ffi.Pointer<ffi.Int8> detail,
    int detail_len,
  ) {
    __XimGetEncoding ??=
        _dylib.lookupFunction<_c__XimGetEncoding, _dart__XimGetEncoding>(
            '_XimGetEncoding');
    return __XimGetEncoding(
      im,
      buf,
      name,
      name_len,
      detail,
      detail_len,
    );
  }

  _dart__XimGetEncoding __XimGetEncoding;

  int _XimEncodingNegoCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimEncodingNegoCheck ??= _dylib.lookupFunction<_c__XimEncodingNegoCheck,
        _dart__XimEncodingNegoCheck>('_XimEncodingNegoCheck');
    return __XimEncodingNegoCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimEncodingNegoCheck __XimEncodingNegoCheck;

  int _XimEncodingNegotiation(
    int im,
  ) {
    __XimEncodingNegotiation ??= _dylib.lookupFunction<
        _c__XimEncodingNegotiation,
        _dart__XimEncodingNegotiation>('_XimEncodingNegotiation');
    return __XimEncodingNegotiation(
      im,
    );
  }

  _dart__XimEncodingNegotiation __XimEncodingNegotiation;

  int _XimProtoOpenIM(
    int im,
  ) {
    __XimProtoOpenIM ??=
        _dylib.lookupFunction<_c__XimProtoOpenIM, _dart__XimProtoOpenIM>(
            '_XimProtoOpenIM');
    return __XimProtoOpenIM(
      im,
    );
  }

  _dart__XimProtoOpenIM __XimProtoOpenIM;

  int _XimICOfXICID(
    int im,
    int icid,
  ) {
    __XimICOfXICID ??= _dylib
        .lookupFunction<_c__XimICOfXICID, _dart__XimICOfXICID>('_XimICOfXICID');
    return __XimICOfXICID(
      im,
      icid,
    );
  }

  _dart__XimICOfXICID __XimICOfXICID;

  void _XimProcIMSetEventMask(
    int im,
    int buf,
  ) {
    __XimProcIMSetEventMask ??= _dylib.lookupFunction<_c__XimProcIMSetEventMask,
        _dart__XimProcIMSetEventMask>('_XimProcIMSetEventMask');
    return __XimProcIMSetEventMask(
      im,
      buf,
    );
  }

  _dart__XimProcIMSetEventMask __XimProcIMSetEventMask;

  void _XimProcICSetEventMask(
    int ic,
    int buf,
  ) {
    __XimProcICSetEventMask ??= _dylib.lookupFunction<_c__XimProcICSetEventMask,
        _dart__XimProcICSetEventMask>('_XimProcICSetEventMask');
    return __XimProcICSetEventMask(
      ic,
      buf,
    );
  }

  _dart__XimProcICSetEventMask __XimProcICSetEventMask;

  int _XimSetEventMaskCallback(
    int xim,
    int len,
    int data,
    int call_data,
  ) {
    __XimSetEventMaskCallback ??= _dylib.lookupFunction<
        _c__XimSetEventMaskCallback,
        _dart__XimSetEventMaskCallback>('_XimSetEventMaskCallback');
    return __XimSetEventMaskCallback(
      xim,
      len,
      data,
      call_data,
    );
  }

  _dart__XimSetEventMaskCallback __XimSetEventMaskCallback;

  int _XimSyncCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimSyncCheck ??= _dylib
        .lookupFunction<_c__XimSyncCheck, _dart__XimSyncCheck>('_XimSyncCheck');
    return __XimSyncCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimSyncCheck __XimSyncCheck;

  int _XimSync(
    int im,
    int ic,
  ) {
    __XimSync ??=
        _dylib.lookupFunction<_c__XimSync, _dart__XimSync>('_XimSync');
    return __XimSync(
      im,
      ic,
    );
  }

  _dart__XimSync __XimSync;

  int _XimProcSyncReply(
    int im,
    int ic,
  ) {
    __XimProcSyncReply ??=
        _dylib.lookupFunction<_c__XimProcSyncReply, _dart__XimProcSyncReply>(
            '_XimProcSyncReply');
    return __XimProcSyncReply(
      im,
      ic,
    );
  }

  _dart__XimProcSyncReply __XimProcSyncReply;

  int _XimRespSyncReply(
    int ic,
    int mode,
  ) {
    __XimRespSyncReply ??=
        _dylib.lookupFunction<_c__XimRespSyncReply, _dart__XimRespSyncReply>(
            '_XimRespSyncReply');
    return __XimRespSyncReply(
      ic,
      mode,
    );
  }

  _dart__XimRespSyncReply __XimRespSyncReply;

  int _XimSyncCallback(
    int xim,
    int len,
    int data,
    int call_data,
  ) {
    __XimSyncCallback ??=
        _dylib.lookupFunction<_c__XimSyncCallback, _dart__XimSyncCallback>(
            '_XimSyncCallback');
    return __XimSyncCallback(
      xim,
      len,
      data,
      call_data,
    );
  }

  _dart__XimSyncCallback __XimSyncCallback;

  int _XimSetEventToWire(
    ffi.Pointer<ffi.Int32> ev,
    ffi.Pointer<ffi.Int32> event,
  ) {
    __XimSetEventToWire ??=
        _dylib.lookupFunction<_c__XimSetEventToWire, _dart__XimSetEventToWire>(
            '_XimSetEventToWire');
    return __XimSetEventToWire(
      ev,
      event,
    );
  }

  _dart__XimSetEventToWire __XimSetEventToWire;

  int _XimForwardEventCore(
    int ic,
    ffi.Pointer<ffi.Int32> ev,
    int sync_1,
  ) {
    __XimForwardEventCore ??= _dylib.lookupFunction<_c__XimForwardEventCore,
        _dart__XimForwardEventCore>('_XimForwardEventCore');
    return __XimForwardEventCore(
      ic,
      ev,
      sync_1,
    );
  }

  _dart__XimForwardEventCore __XimForwardEventCore;

  int _XimForwardEvent(
    int ic,
    ffi.Pointer<ffi.Int32> ev,
    int sync_1,
  ) {
    __XimForwardEvent ??=
        _dylib.lookupFunction<_c__XimForwardEvent, _dart__XimForwardEvent>(
            '_XimForwardEvent');
    return __XimForwardEvent(
      ic,
      ev,
      sync_1,
    );
  }

  _dart__XimForwardEvent __XimForwardEvent;

  void _XimProcEvent(
    ffi.Pointer<ffi.Int32> d,
    int ic,
    ffi.Pointer<ffi.Int32> ev,
    ffi.Pointer<ffi.Int32> buf,
  ) {
    __XimProcEvent ??= _dylib
        .lookupFunction<_c__XimProcEvent, _dart__XimProcEvent>('_XimProcEvent');
    return __XimProcEvent(
      d,
      ic,
      ev,
      buf,
    );
  }

  _dart__XimProcEvent __XimProcEvent;

  int _XimForwardEventRecv(
    int im,
    int ic,
    int buf,
  ) {
    __XimForwardEventRecv ??= _dylib.lookupFunction<_c__XimForwardEventRecv,
        _dart__XimForwardEventRecv>('_XimForwardEventRecv');
    return __XimForwardEventRecv(
      im,
      ic,
      buf,
    );
  }

  _dart__XimForwardEventRecv __XimForwardEventRecv;

  int _XimForwardEventCallback(
    int xim,
    int len,
    int data,
    int call_data,
  ) {
    __XimForwardEventCallback ??= _dylib.lookupFunction<
        _c__XimForwardEventCallback,
        _dart__XimForwardEventCallback>('_XimForwardEventCallback');
    return __XimForwardEventCallback(
      xim,
      len,
      data,
      call_data,
    );
  }

  _dart__XimForwardEventCallback __XimForwardEventCallback;

  int _XimRegisterTriggerkey(
    int im,
    int buf,
  ) {
    __XimRegisterTriggerkey ??= _dylib.lookupFunction<_c__XimRegisterTriggerkey,
        _dart__XimRegisterTriggerkey>('_XimRegisterTriggerkey');
    return __XimRegisterTriggerkey(
      im,
      buf,
    );
  }

  _dart__XimRegisterTriggerkey __XimRegisterTriggerkey;

  int _XimRegisterTriggerKeysCallback(
    int xim,
    int len,
    int data,
    int call_data,
  ) {
    __XimRegisterTriggerKeysCallback ??= _dylib.lookupFunction<
            _c__XimRegisterTriggerKeysCallback,
            _dart__XimRegisterTriggerKeysCallback>(
        '_XimRegisterTriggerKeysCallback');
    return __XimRegisterTriggerKeysCallback(
      xim,
      len,
      data,
      call_data,
    );
  }

  _dart__XimRegisterTriggerKeysCallback __XimRegisterTriggerKeysCallback;

  int _XimGetWindowEventmask(
    int ic,
  ) {
    __XimGetWindowEventmask ??= _dylib.lookupFunction<_c__XimGetWindowEventmask,
        _dart__XimGetWindowEventmask>('_XimGetWindowEventmask');
    return __XimGetWindowEventmask(
      ic,
    );
  }

  _dart__XimGetWindowEventmask __XimGetWindowEventmask;

  int _XimTriggerNotifyCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimTriggerNotifyCheck ??= _dylib.lookupFunction<_c__XimTriggerNotifyCheck,
        _dart__XimTriggerNotifyCheck>('_XimTriggerNotifyCheck');
    return __XimTriggerNotifyCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimTriggerNotifyCheck __XimTriggerNotifyCheck;

  int _XimTriggerNotify(
    int im,
    int ic,
    int mode,
    int idx,
  ) {
    __XimTriggerNotify ??=
        _dylib.lookupFunction<_c__XimTriggerNotify, _dart__XimTriggerNotify>(
            '_XimTriggerNotify');
    return __XimTriggerNotify(
      im,
      ic,
      mode,
      idx,
    );
  }

  _dart__XimTriggerNotify __XimTriggerNotify;

  int _XimRegCommitInfo(
    int ic,
    ffi.Pointer<ffi.Int8> string,
    int string_len,
    ffi.Pointer<ffi.Int32> keysym,
    int keysym_len,
  ) {
    __XimRegCommitInfo ??=
        _dylib.lookupFunction<_c__XimRegCommitInfo, _dart__XimRegCommitInfo>(
            '_XimRegCommitInfo');
    return __XimRegCommitInfo(
      ic,
      string,
      string_len,
      keysym,
      keysym_len,
    );
  }

  _dart__XimRegCommitInfo __XimRegCommitInfo;

  void _XimUnregCommitInfo(
    int ic,
  ) {
    __XimUnregCommitInfo ??= _dylib.lookupFunction<_c__XimUnregCommitInfo,
        _dart__XimUnregCommitInfo>('_XimUnregCommitInfo');
    return __XimUnregCommitInfo(
      ic,
    );
  }

  _dart__XimUnregCommitInfo __XimUnregCommitInfo;

  void _XimFreeCommitInfo(
    int ic,
  ) {
    __XimFreeCommitInfo ??=
        _dylib.lookupFunction<_c__XimFreeCommitInfo, _dart__XimFreeCommitInfo>(
            '_XimFreeCommitInfo');
    return __XimFreeCommitInfo(
      ic,
    );
  }

  _dart__XimFreeCommitInfo __XimFreeCommitInfo;

  int _XimProcKeySym(
    int ic,
    int sym,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> xim_keysym,
    ffi.Pointer<ffi.Int32> xim_keysym_len,
  ) {
    __XimProcKeySym ??=
        _dylib.lookupFunction<_c__XimProcKeySym, _dart__XimProcKeySym>(
            '_XimProcKeySym');
    return __XimProcKeySym(
      ic,
      sym,
      xim_keysym,
      xim_keysym_len,
    );
  }

  _dart__XimProcKeySym __XimProcKeySym;

  int _XimProcCommit(
    int ic,
    ffi.Pointer<ffi.Int32> buf,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> xim_string,
    ffi.Pointer<ffi.Int32> xim_string_len,
  ) {
    __XimProcCommit ??=
        _dylib.lookupFunction<_c__XimProcCommit, _dart__XimProcCommit>(
            '_XimProcCommit');
    return __XimProcCommit(
      ic,
      buf,
      len,
      xim_string,
      xim_string_len,
    );
  }

  _dart__XimProcCommit __XimProcCommit;

  int _XimCommitRecv(
    int im,
    int ic,
    int buf,
  ) {
    __XimCommitRecv ??=
        _dylib.lookupFunction<_c__XimCommitRecv, _dart__XimCommitRecv>(
            '_XimCommitRecv');
    return __XimCommitRecv(
      im,
      ic,
      buf,
    );
  }

  _dart__XimCommitRecv __XimCommitRecv;

  int _XimCommitCallback(
    int xim,
    int len,
    int data,
    int call_data,
  ) {
    __XimCommitCallback ??=
        _dylib.lookupFunction<_c__XimCommitCallback, _dart__XimCommitCallback>(
            '_XimCommitCallback');
    return __XimCommitCallback(
      xim,
      len,
      data,
      call_data,
    );
  }

  _dart__XimCommitCallback __XimCommitCallback;

  void _XimProcError(
    int im,
    int ic,
    int data,
  ) {
    __XimProcError ??= _dylib
        .lookupFunction<_c__XimProcError, _dart__XimProcError>('_XimProcError');
    return __XimProcError(
      im,
      ic,
      data,
    );
  }

  _dart__XimProcError __XimProcError;

  int _XimErrorCallback(
    int xim,
    int len,
    int data,
    int call_data,
  ) {
    __XimErrorCallback ??=
        _dylib.lookupFunction<_c__XimErrorCallback, _dart__XimErrorCallback>(
            '_XimErrorCallback');
    return __XimErrorCallback(
      xim,
      len,
      data,
      call_data,
    );
  }

  _dart__XimErrorCallback __XimErrorCallback;

  int _XimError(
    int im,
    int ic,
    int error_code,
    int detail_length,
    int type,
    ffi.Pointer<ffi.Int8> detail,
  ) {
    __XimError ??=
        _dylib.lookupFunction<_c__XimError, _dart__XimError>('_XimError');
    return __XimError(
      im,
      ic,
      error_code,
      detail_length,
      type,
      detail,
    );
  }

  _dart__XimError __XimError;

  int _Ximctsconvert(
    int conv,
    ffi.Pointer<ffi.Int8> from,
    int from_len,
    ffi.Pointer<ffi.Int8> to,
    int to_len,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __Ximctsconvert ??=
        _dylib.lookupFunction<_c__Ximctsconvert, _dart__Ximctsconvert>(
            '_Ximctsconvert');
    return __Ximctsconvert(
      conv,
      from,
      from_len,
      to,
      to_len,
      state,
    );
  }

  _dart__Ximctsconvert __Ximctsconvert;

  int _Ximctstombs(
    int xim,
    ffi.Pointer<ffi.Int8> from,
    int from_len,
    ffi.Pointer<ffi.Int8> to,
    int to_len,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __Ximctstombs ??= _dylib
        .lookupFunction<_c__Ximctstombs, _dart__Ximctstombs>('_Ximctstombs');
    return __Ximctstombs(
      xim,
      from,
      from_len,
      to,
      to_len,
      state,
    );
  }

  _dart__Ximctstombs __Ximctstombs;

  int _Ximctstowcs(
    int xim,
    ffi.Pointer<ffi.Int8> from,
    int from_len,
    ffi.Pointer<ffi.Int32> to,
    int to_len,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __Ximctstowcs ??= _dylib
        .lookupFunction<_c__Ximctstowcs, _dart__Ximctstowcs>('_Ximctstowcs');
    return __Ximctstowcs(
      xim,
      from,
      from_len,
      to,
      to_len,
      state,
    );
  }

  _dart__Ximctstowcs __Ximctstowcs;

  int _Ximctstoutf8(
    int xim,
    ffi.Pointer<ffi.Int8> from,
    int from_len,
    ffi.Pointer<ffi.Int8> to,
    int to_len,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __Ximctstoutf8 ??= _dylib
        .lookupFunction<_c__Ximctstoutf8, _dart__Ximctstoutf8>('_Ximctstoutf8');
    return __Ximctstoutf8(
      xim,
      from,
      from_len,
      to,
      to_len,
      state,
    );
  }

  _dart__Ximctstoutf8 __Ximctstoutf8;

  int _XimProtoMbLookupString(
    int xic,
    ffi.Pointer<ffi.Int32> ev,
    ffi.Pointer<ffi.Int8> buffer,
    int bytes,
    ffi.Pointer<ffi.Int32> keysym,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __XimProtoMbLookupString ??= _dylib.lookupFunction<
        _c__XimProtoMbLookupString,
        _dart__XimProtoMbLookupString>('_XimProtoMbLookupString');
    return __XimProtoMbLookupString(
      xic,
      ev,
      buffer,
      bytes,
      keysym,
      state,
    );
  }

  _dart__XimProtoMbLookupString __XimProtoMbLookupString;

  int _XimProtoWcLookupString(
    int xic,
    ffi.Pointer<ffi.Int32> ev,
    ffi.Pointer<ffi.Int32> buffer,
    int bytes,
    ffi.Pointer<ffi.Int32> keysym,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __XimProtoWcLookupString ??= _dylib.lookupFunction<
        _c__XimProtoWcLookupString,
        _dart__XimProtoWcLookupString>('_XimProtoWcLookupString');
    return __XimProtoWcLookupString(
      xic,
      ev,
      buffer,
      bytes,
      keysym,
      state,
    );
  }

  _dart__XimProtoWcLookupString __XimProtoWcLookupString;

  int _XimProtoUtf8LookupString(
    int xic,
    ffi.Pointer<ffi.Int32> ev,
    ffi.Pointer<ffi.Int8> buffer,
    int bytes,
    ffi.Pointer<ffi.Int32> keysym,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __XimProtoUtf8LookupString ??= _dylib.lookupFunction<
        _c__XimProtoUtf8LookupString,
        _dart__XimProtoUtf8LookupString>('_XimProtoUtf8LookupString');
    return __XimProtoUtf8LookupString(
      xic,
      ev,
      buffer,
      bytes,
      keysym,
      state,
    );
  }

  _dart__XimProtoUtf8LookupString __XimProtoUtf8LookupString;

  int _XimRegProtoIntrCallback(
    int im,
    int major_code,
    int minor_code,
    ffi.Pointer<ffi.NativeFunction<_typedefC_58>> proc,
    ffi.Pointer<ffi.Int8> call_data,
  ) {
    __XimRegProtoIntrCallback ??= _dylib.lookupFunction<
        _c__XimRegProtoIntrCallback,
        _dart__XimRegProtoIntrCallback>('_XimRegProtoIntrCallback');
    return __XimRegProtoIntrCallback(
      im,
      major_code,
      minor_code,
      proc,
      call_data,
    );
  }

  _dart__XimRegProtoIntrCallback __XimRegProtoIntrCallback;

  void _XimFreeProtoIntrCallback(
    int im,
  ) {
    __XimFreeProtoIntrCallback ??= _dylib.lookupFunction<
        _c__XimFreeProtoIntrCallback,
        _dart__XimFreeProtoIntrCallback>('_XimFreeProtoIntrCallback');
    return __XimFreeProtoIntrCallback(
      im,
    );
  }

  _dart__XimFreeProtoIntrCallback __XimFreeProtoIntrCallback;

  int _XimTransportIntr(
    int im,
    int len,
    ffi.Pointer<ffi.Int8> data,
    ffi.Pointer<ffi.Int8> call_data,
  ) {
    __XimTransportIntr ??=
        _dylib.lookupFunction<_c__XimTransportIntr, _dart__XimTransportIntr>(
            '_XimTransportIntr');
    return __XimTransportIntr(
      im,
      len,
      data,
      call_data,
    );
  }

  _dart__XimTransportIntr __XimTransportIntr;

  int _XimDispatchInit(
    int im,
  ) {
    __XimDispatchInit ??=
        _dylib.lookupFunction<_c__XimDispatchInit, _dart__XimDispatchInit>(
            '_XimDispatchInit');
    return __XimDispatchInit(
      im,
    );
  }

  _dart__XimDispatchInit __XimDispatchInit;

  int _XimIsSupportExt(
    int idx,
  ) {
    __XimIsSupportExt ??=
        _dylib.lookupFunction<_c__XimIsSupportExt, _dart__XimIsSupportExt>(
            '_XimIsSupportExt');
    return __XimIsSupportExt(
      idx,
    );
  }

  _dart__XimIsSupportExt __XimIsSupportExt;

  int _XimProcExtSetEventMask(
    int im,
    int ic,
    int buf,
  ) {
    __XimProcExtSetEventMask ??= _dylib.lookupFunction<
        _c__XimProcExtSetEventMask,
        _dart__XimProcExtSetEventMask>('_XimProcExtSetEventMask');
    return __XimProcExtSetEventMask(
      im,
      ic,
      buf,
    );
  }

  _dart__XimProcExtSetEventMask __XimProcExtSetEventMask;

  int _XimExtSetEventMaskCallback(
    int xim,
    int len,
    int data,
    int call_data,
  ) {
    __XimExtSetEventMaskCallback ??= _dylib.lookupFunction<
        _c__XimExtSetEventMaskCallback,
        _dart__XimExtSetEventMaskCallback>('_XimExtSetEventMaskCallback');
    return __XimExtSetEventMaskCallback(
      xim,
      len,
      data,
      call_data,
    );
  }

  _dart__XimExtSetEventMaskCallback __XimExtSetEventMaskCallback;

  int _XimCheckExtensionListSize() {
    __XimCheckExtensionListSize ??= _dylib.lookupFunction<
        _c__XimCheckExtensionListSize,
        _dart__XimCheckExtensionListSize>('_XimCheckExtensionListSize');
    return __XimCheckExtensionListSize();
  }

  _dart__XimCheckExtensionListSize __XimCheckExtensionListSize;

  void _XimSetExtensionList(
    ffi.Pointer<ffi.Int32> buf,
  ) {
    __XimSetExtensionList ??= _dylib.lookupFunction<_c__XimSetExtensionList,
        _dart__XimSetExtensionList>('_XimSetExtensionList');
    return __XimSetExtensionList(
      buf,
    );
  }

  _dart__XimSetExtensionList __XimSetExtensionList;

  int _XimCountNumberOfExtension(
    int total,
    ffi.Pointer<ffi.Int32> ext,
  ) {
    __XimCountNumberOfExtension ??= _dylib.lookupFunction<
        _c__XimCountNumberOfExtension,
        _dart__XimCountNumberOfExtension>('_XimCountNumberOfExtension');
    return __XimCountNumberOfExtension(
      total,
      ext,
    );
  }

  _dart__XimCountNumberOfExtension __XimCountNumberOfExtension;

  int _XimParseExtensionList(
    int im,
    ffi.Pointer<ffi.Int32> data,
  ) {
    __XimParseExtensionList ??= _dylib.lookupFunction<_c__XimParseExtensionList,
        _dart__XimParseExtensionList>('_XimParseExtensionList');
    return __XimParseExtensionList(
      im,
      data,
    );
  }

  _dart__XimParseExtensionList __XimParseExtensionList;

  int _XimQueryExtensionCheck(
    int im,
    int len,
    int data,
    int arg,
  ) {
    __XimQueryExtensionCheck ??= _dylib.lookupFunction<
        _c__XimQueryExtensionCheck,
        _dart__XimQueryExtensionCheck>('_XimQueryExtensionCheck');
    return __XimQueryExtensionCheck(
      im,
      len,
      data,
      arg,
    );
  }

  _dart__XimQueryExtensionCheck __XimQueryExtensionCheck;

  int _XimExtension(
    int im,
  ) {
    __XimExtension ??= _dylib
        .lookupFunction<_c__XimExtension, _dart__XimExtension>('_XimExtension');
    return __XimExtension(
      im,
    );
  }

  _dart__XimExtension __XimExtension;

  int _XimCheckIfDefault(
    int im,
  ) {
    __XimCheckIfDefault ??=
        _dylib.lookupFunction<_c__XimCheckIfDefault, _dart__XimCheckIfDefault>(
            '_XimCheckIfDefault');
    return __XimCheckIfDefault(
      im,
    );
  }

  _dart__XimCheckIfDefault __XimCheckIfDefault;

  void MakeLocale(
    int lcd,
    ffi.Pointer<ffi.Int8> locale,
  ) {
    _MakeLocale ??=
        _dylib.lookupFunction<_c_MakeLocale, _dart_MakeLocale>('MakeLocale');
    return _MakeLocale(
      lcd,
      locale,
    );
  }

  _dart_MakeLocale _MakeLocale;

  int _XimFilterPropertyNotify(
    ffi.Pointer<ffi.Int32> display,
    int window,
    ffi.Pointer<ffi.Int32> event,
    int client_data,
  ) {
    __XimFilterPropertyNotify ??= _dylib.lookupFunction<
        _c__XimFilterPropertyNotify,
        _dart__XimFilterPropertyNotify>('_XimFilterPropertyNotify');
    return __XimFilterPropertyNotify(
      display,
      window,
      event,
      client_data,
    );
  }

  _dart__XimFilterPropertyNotify __XimFilterPropertyNotify;

  int _XimRegisterIMInstantiateCallback(
    int lcd,
    ffi.Pointer<ffi.Int32> display,
    int rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
    int callback,
    int client_data,
  ) {
    __XimRegisterIMInstantiateCallback ??= _dylib.lookupFunction<
            _c__XimRegisterIMInstantiateCallback,
            _dart__XimRegisterIMInstantiateCallback>(
        '_XimRegisterIMInstantiateCallback');
    return __XimRegisterIMInstantiateCallback(
      lcd,
      display,
      rdb,
      res_name,
      res_class,
      callback,
      client_data,
    );
  }

  _dart__XimRegisterIMInstantiateCallback __XimRegisterIMInstantiateCallback;

  int _XimUnRegisterIMInstantiateCallback(
    int lcd,
    ffi.Pointer<ffi.Int32> display,
    int rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
    int callback,
    int client_data,
  ) {
    __XimUnRegisterIMInstantiateCallback ??= _dylib.lookupFunction<
            _c__XimUnRegisterIMInstantiateCallback,
            _dart__XimUnRegisterIMInstantiateCallback>(
        '_XimUnRegisterIMInstantiateCallback');
    return __XimUnRegisterIMInstantiateCallback(
      lcd,
      display,
      rdb,
      res_name,
      res_class,
      callback,
      client_data,
    );
  }

  _dart__XimUnRegisterIMInstantiateCallback
      __XimUnRegisterIMInstantiateCallback;

  void _XimResetIMInstantiateCallback(
    int xim,
  ) {
    __XimResetIMInstantiateCallback ??= _dylib.lookupFunction<
        _c__XimResetIMInstantiateCallback,
        _dart__XimResetIMInstantiateCallback>('_XimResetIMInstantiateCallback');
    return __XimResetIMInstantiateCallback(
      xim,
    );
  }

  _dart__XimResetIMInstantiateCallback __XimResetIMInstantiateCallback;

  int _XimSetIMStructureList(
    int im,
  ) {
    __XimSetIMStructureList ??= _dylib.lookupFunction<_c__XimSetIMStructureList,
        _dart__XimSetIMStructureList>('_XimSetIMStructureList');
    return __XimSetIMStructureList(
      im,
    );
  }

  _dart__XimSetIMStructureList __XimSetIMStructureList;

  void _XimDestroyIMStructureList(
    int im,
  ) {
    __XimDestroyIMStructureList ??= _dylib.lookupFunction<
        _c__XimDestroyIMStructureList,
        _dart__XimDestroyIMStructureList>('_XimDestroyIMStructureList');
    return __XimDestroyIMStructureList(
      im,
    );
  }

  _dart__XimDestroyIMStructureList __XimDestroyIMStructureList;

  void _XimServerDestroy(
    int im_2_destroy,
  ) {
    __XimServerDestroy ??=
        _dylib.lookupFunction<_c__XimServerDestroy, _dart__XimServerDestroy>(
            '_XimServerDestroy');
    return __XimServerDestroy(
      im_2_destroy,
    );
  }

  _dart__XimServerDestroy __XimServerDestroy;

  ffi.Pointer<ffi.Int8> _XimStrstr(
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Int8> dest,
  ) {
    __XimStrstr ??=
        _dylib.lookupFunction<_c__XimStrstr, _dart__XimStrstr>('_XimStrstr');
    return __XimStrstr(
      src,
      dest,
    );
  }

  _dart__XimStrstr __XimStrstr;

  ffi.Pointer<ffi.Int8> _XimMakeImName(
    int lcd,
  ) {
    __XimMakeImName ??=
        _dylib.lookupFunction<_c__XimMakeImName, _dart__XimMakeImName>(
            '_XimMakeImName');
    return __XimMakeImName(
      lcd,
    );
  }

  _dart__XimMakeImName __XimMakeImName;

  ffi.Pointer<_XIM> _XimOpenIM(
    int lcd,
    ffi.Pointer<_XDisplay> dpy,
    int rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
  ) {
    __XimOpenIM ??=
        _dylib.lookupFunction<_c__XimOpenIM, _dart__XimOpenIM>('_XimOpenIM');
    return __XimOpenIM(
      lcd,
      dpy,
      rdb,
      res_name,
      res_class,
    );
  }

  _dart__XimOpenIM __XimOpenIM;

  int _XInitIM(
    int lcd,
  ) {
    __XInitIM ??=
        _dylib.lookupFunction<_c__XInitIM, _dart__XInitIM>('_XInitIM');
    return __XInitIM(
      lcd,
    );
  }

  _dart__XInitIM __XInitIM;

  int _XimLocalFilter(
    ffi.Pointer<ffi.Int32> d,
    int w,
    ffi.Pointer<ffi.Int32> ev,
    int client_data,
  ) {
    __XimLocalFilter ??=
        _dylib.lookupFunction<_c__XimLocalFilter, _dart__XimLocalFilter>(
            '_XimLocalFilter');
    return __XimLocalFilter(
      d,
      w,
      ev,
      client_data,
    );
  }

  _dart__XimLocalFilter __XimLocalFilter;

  ffi.Pointer<ffi.Int8> _XimLocalGetICValues(
    int xic,
    ffi.Pointer<ffi.Int32> values,
  ) {
    __XimLocalGetICValues ??= _dylib.lookupFunction<_c__XimLocalGetICValues,
        _dart__XimLocalGetICValues>('_XimLocalGetICValues');
    return __XimLocalGetICValues(
      xic,
      values,
    );
  }

  _dart__XimLocalGetICValues __XimLocalGetICValues;

  int remove(
    ffi.Pointer<ffi.Int8> __filename,
  ) {
    _remove ??= _dylib.lookupFunction<_c_remove, _dart_remove>('remove');
    return _remove(
      __filename,
    );
  }

  _dart_remove _remove;

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    _rename ??= _dylib.lookupFunction<_c_rename, _dart_rename>('rename');
    return _rename(
      __old,
      __new,
    );
  }

  _dart_rename _rename;

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Int8> __old,
    int __newfd,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    _renameat ??=
        _dylib.lookupFunction<_c_renameat, _dart_renameat>('renameat');
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  _dart_renameat _renameat;

  ffi.Pointer<_IO_FILE> tmpfile() {
    _tmpfile ??= _dylib.lookupFunction<_c_tmpfile, _dart_tmpfile>('tmpfile');
    return _tmpfile();
  }

  _dart_tmpfile _tmpfile;

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _tmpnam ??= _dylib.lookupFunction<_c_tmpnam, _dart_tmpnam>('tmpnam');
    return _tmpnam(
      __s,
    );
  }

  _dart_tmpnam _tmpnam;

  ffi.Pointer<ffi.Int8> tmpnam_r(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _tmpnam_r ??=
        _dylib.lookupFunction<_c_tmpnam_r, _dart_tmpnam_r>('tmpnam_r');
    return _tmpnam_r(
      __s,
    );
  }

  _dart_tmpnam_r _tmpnam_r;

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __pfx,
  ) {
    _tempnam ??= _dylib.lookupFunction<_c_tempnam, _dart_tempnam>('tempnam');
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  _dart_tempnam _tempnam;

  int fclose(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fclose ??= _dylib.lookupFunction<_c_fclose, _dart_fclose>('fclose');
    return _fclose(
      __stream,
    );
  }

  _dart_fclose _fclose;

  int fflush(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fflush ??= _dylib.lookupFunction<_c_fflush, _dart_fflush>('fflush');
    return _fflush(
      __stream,
    );
  }

  _dart_fflush _fflush;

  int fflush_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fflush_unlocked ??=
        _dylib.lookupFunction<_c_fflush_unlocked, _dart_fflush_unlocked>(
            'fflush_unlocked');
    return _fflush_unlocked(
      __stream,
    );
  }

  _dart_fflush_unlocked _fflush_unlocked;

  ffi.Pointer<_IO_FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    _fopen ??= _dylib.lookupFunction<_c_fopen, _dart_fopen>('fopen');
    return _fopen(
      __filename,
      __modes,
    );
  }

  _dart_fopen _fopen;

  ffi.Pointer<_IO_FILE> freopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __modes,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _freopen ??= _dylib.lookupFunction<_c_freopen, _dart_freopen>('freopen');
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  _dart_freopen _freopen;

  ffi.Pointer<_IO_FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    _fdopen ??= _dylib.lookupFunction<_c_fdopen, _dart_fdopen>('fdopen');
    return _fdopen(
      __fd,
      __modes,
    );
  }

  _dart_fdopen _fdopen;

  ffi.Pointer<_IO_FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    _fmemopen ??=
        _dylib.lookupFunction<_c_fmemopen, _dart_fmemopen>('fmemopen');
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  _dart_fmemopen _fmemopen;

  ffi.Pointer<_IO_FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
    ffi.Pointer<ffi.Uint64> __sizeloc,
  ) {
    _open_memstream ??=
        _dylib.lookupFunction<_c_open_memstream, _dart_open_memstream>(
            'open_memstream');
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  _dart_open_memstream _open_memstream;

  void setbuf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _setbuf ??= _dylib.lookupFunction<_c_setbuf, _dart_setbuf>('setbuf');
    return _setbuf(
      __stream,
      __buf,
    );
  }

  _dart_setbuf _setbuf;

  int setvbuf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __modes,
    int __n,
  ) {
    _setvbuf ??= _dylib.lookupFunction<_c_setvbuf, _dart_setvbuf>('setvbuf');
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  _dart_setvbuf _setvbuf;

  void setbuffer(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    _setbuffer ??=
        _dylib.lookupFunction<_c_setbuffer, _dart_setbuffer>('setbuffer');
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  _dart_setbuffer _setbuffer;

  void setlinebuf(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _setlinebuf ??=
        _dylib.lookupFunction<_c_setlinebuf, _dart_setlinebuf>('setlinebuf');
    return _setlinebuf(
      __stream,
    );
  }

  _dart_setlinebuf _setlinebuf;

  int fprintf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _fprintf ??= _dylib.lookupFunction<_c_fprintf, _dart_fprintf>('fprintf');
    return _fprintf(
      __stream,
      __format,
    );
  }

  _dart_fprintf _fprintf;

  int printf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _printf ??= _dylib.lookupFunction<_c_printf, _dart_printf>('printf');
    return _printf(
      __format,
    );
  }

  _dart_printf _printf;

  int sprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _sprintf ??= _dylib.lookupFunction<_c_sprintf, _dart_sprintf>('sprintf');
    return _sprintf(
      __s,
      __format,
    );
  }

  _dart_sprintf _sprintf;

  int vfprintf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vfprintf ??=
        _dylib.lookupFunction<_c_vfprintf, _dart_vfprintf>('vfprintf');
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vfprintf _vfprintf;

  int vprintf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vprintf ??= _dylib.lookupFunction<_c_vprintf, _dart_vprintf>('vprintf');
    return _vprintf(
      __format,
      __arg,
    );
  }

  _dart_vprintf _vprintf;

  int vsprintf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vsprintf ??=
        _dylib.lookupFunction<_c_vsprintf, _dart_vsprintf>('vsprintf');
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vsprintf _vsprintf;

  int snprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _snprintf ??=
        _dylib.lookupFunction<_c_snprintf, _dart_snprintf>('snprintf');
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  _dart_snprintf _snprintf;

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __s,
    int __maxlen,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vsnprintf ??=
        _dylib.lookupFunction<_c_vsnprintf, _dart_vsnprintf>('vsnprintf');
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  _dart_vsnprintf _vsnprintf;

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vdprintf ??=
        _dylib.lookupFunction<_c_vdprintf, _dart_vdprintf>('vdprintf');
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  _dart_vdprintf _vdprintf;

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Int8> __fmt,
  ) {
    _dprintf ??= _dylib.lookupFunction<_c_dprintf, _dart_dprintf>('dprintf');
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  _dart_dprintf _dprintf;

  int fscanf(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _fscanf ??= _dylib.lookupFunction<_c_fscanf, _dart_fscanf>('fscanf');
    return _fscanf(
      __stream,
      __format,
    );
  }

  _dart_fscanf _fscanf;

  int scanf(
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _scanf ??= _dylib.lookupFunction<_c_scanf, _dart_scanf>('scanf');
    return _scanf(
      __format,
    );
  }

  _dart_scanf _scanf;

  int sscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _sscanf ??= _dylib.lookupFunction<_c_sscanf, _dart_sscanf>('sscanf');
    return _sscanf(
      __s,
      __format,
    );
  }

  _dart_sscanf _sscanf;

  int vfscanf(
    ffi.Pointer<_IO_FILE> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vfscanf ??= _dylib.lookupFunction<_c_vfscanf, _dart_vfscanf>('vfscanf');
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vfscanf _vfscanf;

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vscanf ??= _dylib.lookupFunction<_c_vscanf, _dart_vscanf>('vscanf');
    return _vscanf(
      __format,
      __arg,
    );
  }

  _dart_vscanf _vscanf;

  int vsscanf(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    _vsscanf ??= _dylib.lookupFunction<_c_vsscanf, _dart_vsscanf>('vsscanf');
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  _dart_vsscanf _vsscanf;

  int fgetc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgetc ??= _dylib.lookupFunction<_c_fgetc, _dart_fgetc>('fgetc');
    return _fgetc(
      __stream,
    );
  }

  _dart_fgetc _fgetc;

  int getc(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getc ??= _dylib.lookupFunction<_c_getc, _dart_getc>('getc');
    return _getc(
      __stream,
    );
  }

  _dart_getc _getc;

  int getchar() {
    _getchar ??= _dylib.lookupFunction<_c_getchar, _dart_getchar>('getchar');
    return _getchar();
  }

  _dart_getchar _getchar;

  int getc_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getc_unlocked ??= _dylib
        .lookupFunction<_c_getc_unlocked, _dart_getc_unlocked>('getc_unlocked');
    return _getc_unlocked(
      __stream,
    );
  }

  _dart_getc_unlocked _getc_unlocked;

  int getchar_unlocked() {
    _getchar_unlocked ??=
        _dylib.lookupFunction<_c_getchar_unlocked, _dart_getchar_unlocked>(
            'getchar_unlocked');
    return _getchar_unlocked();
  }

  _dart_getchar_unlocked _getchar_unlocked;

  int fgetc_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgetc_unlocked ??=
        _dylib.lookupFunction<_c_fgetc_unlocked, _dart_fgetc_unlocked>(
            'fgetc_unlocked');
    return _fgetc_unlocked(
      __stream,
    );
  }

  _dart_fgetc_unlocked _fgetc_unlocked;

  int fputc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fputc ??= _dylib.lookupFunction<_c_fputc, _dart_fputc>('fputc');
    return _fputc(
      __c,
      __stream,
    );
  }

  _dart_fputc _fputc;

  int putc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _putc ??= _dylib.lookupFunction<_c_putc, _dart_putc>('putc');
    return _putc(
      __c,
      __stream,
    );
  }

  _dart_putc _putc;

  int putchar(
    int __c,
  ) {
    _putchar ??= _dylib.lookupFunction<_c_putchar, _dart_putchar>('putchar');
    return _putchar(
      __c,
    );
  }

  _dart_putchar _putchar;

  int fputc_unlocked(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fputc_unlocked ??=
        _dylib.lookupFunction<_c_fputc_unlocked, _dart_fputc_unlocked>(
            'fputc_unlocked');
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  _dart_fputc_unlocked _fputc_unlocked;

  int putc_unlocked(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _putc_unlocked ??= _dylib
        .lookupFunction<_c_putc_unlocked, _dart_putc_unlocked>('putc_unlocked');
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  _dart_putc_unlocked _putc_unlocked;

  int putchar_unlocked(
    int __c,
  ) {
    _putchar_unlocked ??=
        _dylib.lookupFunction<_c_putchar_unlocked, _dart_putchar_unlocked>(
            'putchar_unlocked');
    return _putchar_unlocked(
      __c,
    );
  }

  _dart_putchar_unlocked _putchar_unlocked;

  int getw(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getw ??= _dylib.lookupFunction<_c_getw, _dart_getw>('getw');
    return _getw(
      __stream,
    );
  }

  _dart_getw _getw;

  int putw(
    int __w,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _putw ??= _dylib.lookupFunction<_c_putw, _dart_putw>('putw');
    return _putw(
      __w,
      __stream,
    );
  }

  _dart_putw _putw;

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgets ??= _dylib.lookupFunction<_c_fgets, _dart_fgets>('fgets');
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  _dart_fgets _fgets;

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    int __delimiter,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    ___getdelim ??=
        _dylib.lookupFunction<_c___getdelim, _dart___getdelim>('__getdelim');
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  _dart___getdelim ___getdelim;

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    int __delimiter,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getdelim ??=
        _dylib.lookupFunction<_c_getdelim, _dart_getdelim>('getdelim');
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  _dart_getdelim _getdelim;

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
    ffi.Pointer<ffi.Uint64> __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _getline ??= _dylib.lookupFunction<_c_getline, _dart_getline>('getline');
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  _dart_getline _getline;

  int fputs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fputs ??= _dylib.lookupFunction<_c_fputs, _dart_fputs>('fputs');
    return _fputs(
      __s,
      __stream,
    );
  }

  _dart_fputs _fputs;

  int puts(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _puts ??= _dylib.lookupFunction<_c_puts, _dart_puts>('puts');
    return _puts(
      __s,
    );
  }

  _dart_puts _puts;

  int ungetc(
    int __c,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ungetc ??= _dylib.lookupFunction<_c_ungetc, _dart_ungetc>('ungetc');
    return _ungetc(
      __c,
      __stream,
    );
  }

  _dart_ungetc _ungetc;

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fread ??= _dylib.lookupFunction<_c_fread, _dart_fread>('fread');
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  _dart_fread _fread;

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __s,
  ) {
    _fwrite ??= _dylib.lookupFunction<_c_fwrite, _dart_fwrite>('fwrite');
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  _dart_fwrite _fwrite;

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fread_unlocked ??=
        _dylib.lookupFunction<_c_fread_unlocked, _dart_fread_unlocked>(
            'fread_unlocked');
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  _dart_fread_unlocked _fread_unlocked;

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fwrite_unlocked ??=
        _dylib.lookupFunction<_c_fwrite_unlocked, _dart_fwrite_unlocked>(
            'fwrite_unlocked');
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  _dart_fwrite_unlocked _fwrite_unlocked;

  int fseek(
    ffi.Pointer<_IO_FILE> __stream,
    int __off,
    int __whence,
  ) {
    _fseek ??= _dylib.lookupFunction<_c_fseek, _dart_fseek>('fseek');
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  _dart_fseek _fseek;

  int ftell(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ftell ??= _dylib.lookupFunction<_c_ftell, _dart_ftell>('ftell');
    return _ftell(
      __stream,
    );
  }

  _dart_ftell _ftell;

  void rewind(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _rewind ??= _dylib.lookupFunction<_c_rewind, _dart_rewind>('rewind');
    return _rewind(
      __stream,
    );
  }

  _dart_rewind _rewind;

  int fseeko(
    ffi.Pointer<_IO_FILE> __stream,
    int __off,
    int __whence,
  ) {
    _fseeko ??= _dylib.lookupFunction<_c_fseeko, _dart_fseeko>('fseeko');
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  _dart_fseeko _fseeko;

  int ftello(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ftello ??= _dylib.lookupFunction<_c_ftello, _dart_ftello>('ftello');
    return _ftello(
      __stream,
    );
  }

  _dart_ftello _ftello;

  int fgetpos(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<__fpos_t> __pos,
  ) {
    _fgetpos ??= _dylib.lookupFunction<_c_fgetpos, _dart_fgetpos>('fgetpos');
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  _dart_fgetpos _fgetpos;

  int fsetpos(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<__fpos_t> __pos,
  ) {
    _fsetpos ??= _dylib.lookupFunction<_c_fsetpos, _dart_fsetpos>('fsetpos');
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  _dart_fsetpos _fsetpos;

  void clearerr(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _clearerr ??=
        _dylib.lookupFunction<_c_clearerr, _dart_clearerr>('clearerr');
    return _clearerr(
      __stream,
    );
  }

  _dart_clearerr _clearerr;

  int feof(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _feof ??= _dylib.lookupFunction<_c_feof, _dart_feof>('feof');
    return _feof(
      __stream,
    );
  }

  _dart_feof _feof;

  int ferror(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ferror ??= _dylib.lookupFunction<_c_ferror, _dart_ferror>('ferror');
    return _ferror(
      __stream,
    );
  }

  _dart_ferror _ferror;

  void clearerr_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _clearerr_unlocked ??=
        _dylib.lookupFunction<_c_clearerr_unlocked, _dart_clearerr_unlocked>(
            'clearerr_unlocked');
    return _clearerr_unlocked(
      __stream,
    );
  }

  _dart_clearerr_unlocked _clearerr_unlocked;

  int feof_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _feof_unlocked ??= _dylib
        .lookupFunction<_c_feof_unlocked, _dart_feof_unlocked>('feof_unlocked');
    return _feof_unlocked(
      __stream,
    );
  }

  _dart_feof_unlocked _feof_unlocked;

  int ferror_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ferror_unlocked ??=
        _dylib.lookupFunction<_c_ferror_unlocked, _dart_ferror_unlocked>(
            'ferror_unlocked');
    return _ferror_unlocked(
      __stream,
    );
  }

  _dart_ferror_unlocked _ferror_unlocked;

  void perror(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _perror ??= _dylib.lookupFunction<_c_perror, _dart_perror>('perror');
    return _perror(
      __s,
    );
  }

  _dart_perror _perror;

  int fileno(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fileno ??= _dylib.lookupFunction<_c_fileno, _dart_fileno>('fileno');
    return _fileno(
      __stream,
    );
  }

  _dart_fileno _fileno;

  int fileno_unlocked(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fileno_unlocked ??=
        _dylib.lookupFunction<_c_fileno_unlocked, _dart_fileno_unlocked>(
            'fileno_unlocked');
    return _fileno_unlocked(
      __stream,
    );
  }

  _dart_fileno_unlocked _fileno_unlocked;

  ffi.Pointer<_IO_FILE> popen(
    ffi.Pointer<ffi.Int8> __command,
    ffi.Pointer<ffi.Int8> __modes,
  ) {
    _popen ??= _dylib.lookupFunction<_c_popen, _dart_popen>('popen');
    return _popen(
      __command,
      __modes,
    );
  }

  _dart_popen _popen;

  int pclose(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _pclose ??= _dylib.lookupFunction<_c_pclose, _dart_pclose>('pclose');
    return _pclose(
      __stream,
    );
  }

  _dart_pclose _pclose;

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _ctermid ??= _dylib.lookupFunction<_c_ctermid, _dart_ctermid>('ctermid');
    return _ctermid(
      __s,
    );
  }

  _dart_ctermid _ctermid;

  void flockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _flockfile ??=
        _dylib.lookupFunction<_c_flockfile, _dart_flockfile>('flockfile');
    return _flockfile(
      __stream,
    );
  }

  _dart_flockfile _flockfile;

  int ftrylockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _ftrylockfile ??= _dylib
        .lookupFunction<_c_ftrylockfile, _dart_ftrylockfile>('ftrylockfile');
    return _ftrylockfile(
      __stream,
    );
  }

  _dart_ftrylockfile _ftrylockfile;

  void funlockfile(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _funlockfile ??=
        _dylib.lookupFunction<_c_funlockfile, _dart_funlockfile>('funlockfile');
    return _funlockfile(
      __stream,
    );
  }

  _dart_funlockfile _funlockfile;

  int __uflow(
    ffi.Pointer<_IO_FILE> arg0,
  ) {
    ___uflow ??= _dylib.lookupFunction<_c___uflow, _dart___uflow>('__uflow');
    return ___uflow(
      arg0,
    );
  }

  _dart___uflow ___uflow;

  int __overflow(
    ffi.Pointer<_IO_FILE> arg0,
    int arg1,
  ) {
    ___overflow ??=
        _dylib.lookupFunction<_c___overflow, _dart___overflow>('__overflow');
    return ___overflow(
      arg0,
      arg1,
    );
  }

  _dart___overflow ___overflow;

  void _XimLocalUnSetFocus(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimLocalUnSetFocus ??= _dylib.lookupFunction<_c__XimLocalUnSetFocus,
        _dart__XimLocalUnSetFocus>('_XimLocalUnSetFocus');
    return __XimLocalUnSetFocus(
      xic,
    );
  }

  _dart__XimLocalUnSetFocus __XimLocalUnSetFocus;

  void _XimLocalDestroyIC(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimLocalDestroyIC ??=
        _dylib.lookupFunction<_c__XimLocalDestroyIC, _dart__XimLocalDestroyIC>(
            '_XimLocalDestroyIC');
    return __XimLocalDestroyIC(
      xic,
    );
  }

  _dart__XimLocalDestroyIC __XimLocalDestroyIC;

  void _XimLocalSetFocus(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimLocalSetFocus ??=
        _dylib.lookupFunction<_c__XimLocalSetFocus, _dart__XimLocalSetFocus>(
            '_XimLocalSetFocus');
    return __XimLocalSetFocus(
      xic,
    );
  }

  _dart__XimLocalSetFocus __XimLocalSetFocus;

  void _XimLocalReset(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimLocalReset ??=
        _dylib.lookupFunction<_c__XimLocalReset, _dart__XimLocalReset>(
            '_XimLocalReset');
    return __XimLocalReset(
      xic,
    );
  }

  _dart__XimLocalReset __XimLocalReset;

  ffi.Pointer<ffi.Int8> _XimLocalMbReset(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimLocalMbReset ??=
        _dylib.lookupFunction<_c__XimLocalMbReset, _dart__XimLocalMbReset>(
            '_XimLocalMbReset');
    return __XimLocalMbReset(
      xic,
    );
  }

  _dart__XimLocalMbReset __XimLocalMbReset;

  ffi.Pointer<ffi.Int32> _XimLocalWcReset(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimLocalWcReset ??=
        _dylib.lookupFunction<_c__XimLocalWcReset, _dart__XimLocalWcReset>(
            '_XimLocalWcReset');
    return __XimLocalWcReset(
      xic,
    );
  }

  _dart__XimLocalWcReset __XimLocalWcReset;

  ffi.Pointer<_XIC> _XimLocalCreateIC(
    ffi.Pointer<_XIM> im,
    ffi.Pointer<ffi.Int32> values,
  ) {
    __XimLocalCreateIC ??=
        _dylib.lookupFunction<_c__XimLocalCreateIC, _dart__XimLocalCreateIC>(
            '_XimLocalCreateIC');
    return __XimLocalCreateIC(
      im,
      values,
    );
  }

  _dart__XimLocalCreateIC __XimLocalCreateIC;

  int fcntl(
    int __fd,
    int __cmd,
  ) {
    _fcntl ??= _dylib.lookupFunction<_c_fcntl, _dart_fcntl>('fcntl');
    return _fcntl(
      __fd,
      __cmd,
    );
  }

  _dart_fcntl _fcntl;

  int open(
    ffi.Pointer<ffi.Int8> __file,
    int __oflag,
  ) {
    _open ??= _dylib.lookupFunction<_c_open, _dart_open>('open');
    return _open(
      __file,
      __oflag,
    );
  }

  _dart_open _open;

  int openat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __oflag,
  ) {
    _openat ??= _dylib.lookupFunction<_c_openat, _dart_openat>('openat');
    return _openat(
      __fd,
      __file,
      __oflag,
    );
  }

  _dart_openat _openat;

  int creat(
    ffi.Pointer<ffi.Int8> __file,
    int __mode,
  ) {
    _creat ??= _dylib.lookupFunction<_c_creat, _dart_creat>('creat');
    return _creat(
      __file,
      __mode,
    );
  }

  _dart_creat _creat;

  int lockf(
    int __fd,
    int __cmd,
    int __len,
  ) {
    _lockf ??= _dylib.lookupFunction<_c_lockf, _dart_lockf>('lockf');
    return _lockf(
      __fd,
      __cmd,
      __len,
    );
  }

  _dart_lockf _lockf;

  int posix_fadvise(
    int __fd,
    int __offset,
    int __len,
    int __advise,
  ) {
    _posix_fadvise ??= _dylib
        .lookupFunction<_c_posix_fadvise, _dart_posix_fadvise>('posix_fadvise');
    return _posix_fadvise(
      __fd,
      __offset,
      __len,
      __advise,
    );
  }

  _dart_posix_fadvise _posix_fadvise;

  int posix_fallocate(
    int __fd,
    int __offset,
    int __len,
  ) {
    _posix_fallocate ??=
        _dylib.lookupFunction<_c_posix_fallocate, _dart_posix_fallocate>(
            'posix_fallocate');
    return _posix_fallocate(
      __fd,
      __offset,
      __len,
    );
  }

  _dart_posix_fallocate _posix_fallocate;

  int access(
    ffi.Pointer<ffi.Int8> __name,
    int __type,
  ) {
    _access ??= _dylib.lookupFunction<_c_access, _dart_access>('access');
    return _access(
      __name,
      __type,
    );
  }

  _dart_access _access;

  int faccessat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __type,
    int __flag,
  ) {
    _faccessat ??=
        _dylib.lookupFunction<_c_faccessat, _dart_faccessat>('faccessat');
    return _faccessat(
      __fd,
      __file,
      __type,
      __flag,
    );
  }

  _dart_faccessat _faccessat;

  int lseek(
    int __fd,
    int __offset,
    int __whence,
  ) {
    _lseek ??= _dylib.lookupFunction<_c_lseek, _dart_lseek>('lseek');
    return _lseek(
      __fd,
      __offset,
      __whence,
    );
  }

  _dart_lseek _lseek;

  int close(
    int __fd,
  ) {
    _close ??= _dylib.lookupFunction<_c_close, _dart_close>('close');
    return _close(
      __fd,
    );
  }

  _dart_close _close;

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    _read ??= _dylib.lookupFunction<_c_read, _dart_read>('read');
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  _dart_read _read;

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    _write ??= _dylib.lookupFunction<_c_write, _dart_write>('write');
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  _dart_write _write;

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
    int __offset,
  ) {
    _pread ??= _dylib.lookupFunction<_c_pread, _dart_pread>('pread');
    return _pread(
      __fd,
      __buf,
      __nbytes,
      __offset,
    );
  }

  _dart_pread _pread;

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __offset,
  ) {
    _pwrite ??= _dylib.lookupFunction<_c_pwrite, _dart_pwrite>('pwrite');
    return _pwrite(
      __fd,
      __buf,
      __n,
      __offset,
    );
  }

  _dart_pwrite _pwrite;

  int pipe(
    ffi.Pointer<ffi.Int32> __pipedes,
  ) {
    _pipe ??= _dylib.lookupFunction<_c_pipe, _dart_pipe>('pipe');
    return _pipe(
      __pipedes,
    );
  }

  _dart_pipe _pipe;

  int alarm(
    int __seconds,
  ) {
    _alarm ??= _dylib.lookupFunction<_c_alarm, _dart_alarm>('alarm');
    return _alarm(
      __seconds,
    );
  }

  _dart_alarm _alarm;

  int sleep(
    int __seconds,
  ) {
    _sleep ??= _dylib.lookupFunction<_c_sleep, _dart_sleep>('sleep');
    return _sleep(
      __seconds,
    );
  }

  _dart_sleep _sleep;

  int ualarm(
    int __value,
    int __interval,
  ) {
    _ualarm ??= _dylib.lookupFunction<_c_ualarm, _dart_ualarm>('ualarm');
    return _ualarm(
      __value,
      __interval,
    );
  }

  _dart_ualarm _ualarm;

  int usleep(
    int __useconds,
  ) {
    _usleep ??= _dylib.lookupFunction<_c_usleep, _dart_usleep>('usleep');
    return _usleep(
      __useconds,
    );
  }

  _dart_usleep _usleep;

  int pause() {
    _pause ??= _dylib.lookupFunction<_c_pause, _dart_pause>('pause');
    return _pause();
  }

  _dart_pause _pause;

  int chown(
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
  ) {
    _chown ??= _dylib.lookupFunction<_c_chown, _dart_chown>('chown');
    return _chown(
      __file,
      __owner,
      __group,
    );
  }

  _dart_chown _chown;

  int fchown(
    int __fd,
    int __owner,
    int __group,
  ) {
    _fchown ??= _dylib.lookupFunction<_c_fchown, _dart_fchown>('fchown');
    return _fchown(
      __fd,
      __owner,
      __group,
    );
  }

  _dart_fchown _fchown;

  int lchown(
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
  ) {
    _lchown ??= _dylib.lookupFunction<_c_lchown, _dart_lchown>('lchown');
    return _lchown(
      __file,
      __owner,
      __group,
    );
  }

  _dart_lchown _lchown;

  int fchownat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __owner,
    int __group,
    int __flag,
  ) {
    _fchownat ??=
        _dylib.lookupFunction<_c_fchownat, _dart_fchownat>('fchownat');
    return _fchownat(
      __fd,
      __file,
      __owner,
      __group,
      __flag,
    );
  }

  _dart_fchownat _fchownat;

  int chdir(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    _chdir ??= _dylib.lookupFunction<_c_chdir, _dart_chdir>('chdir');
    return _chdir(
      __path,
    );
  }

  _dart_chdir _chdir;

  int fchdir(
    int __fd,
  ) {
    _fchdir ??= _dylib.lookupFunction<_c_fchdir, _dart_fchdir>('fchdir');
    return _fchdir(
      __fd,
    );
  }

  _dart_fchdir _fchdir;

  ffi.Pointer<ffi.Int8> getcwd(
    ffi.Pointer<ffi.Int8> __buf,
    int __size,
  ) {
    _getcwd ??= _dylib.lookupFunction<_c_getcwd, _dart_getcwd>('getcwd');
    return _getcwd(
      __buf,
      __size,
    );
  }

  _dart_getcwd _getcwd;

  ffi.Pointer<ffi.Int8> getwd(
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _getwd ??= _dylib.lookupFunction<_c_getwd, _dart_getwd>('getwd');
    return _getwd(
      __buf,
    );
  }

  _dart_getwd _getwd;

  int dup(
    int __fd,
  ) {
    _dup ??= _dylib.lookupFunction<_c_dup, _dart_dup>('dup');
    return _dup(
      __fd,
    );
  }

  _dart_dup _dup;

  int dup2(
    int __fd,
    int __fd2,
  ) {
    _dup2 ??= _dylib.lookupFunction<_c_dup2, _dart_dup2>('dup2');
    return _dup2(
      __fd,
      __fd2,
    );
  }

  _dart_dup2 _dup2;

  int execve(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
  ) {
    _execve ??= _dylib.lookupFunction<_c_execve, _dart_execve>('execve');
    return _execve(
      __path,
      __argv,
      __envp,
    );
  }

  _dart_execve _execve;

  int fexecve(
    int __fd,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
  ) {
    _fexecve ??= _dylib.lookupFunction<_c_fexecve, _dart_fexecve>('fexecve');
    return _fexecve(
      __fd,
      __argv,
      __envp,
    );
  }

  _dart_fexecve _fexecve;

  int execv(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    _execv ??= _dylib.lookupFunction<_c_execv, _dart_execv>('execv');
    return _execv(
      __path,
      __argv,
    );
  }

  _dart_execv _execv;

  int execle(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    _execle ??= _dylib.lookupFunction<_c_execle, _dart_execle>('execle');
    return _execle(
      __path,
      __arg,
    );
  }

  _dart_execle _execle;

  int execl(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    _execl ??= _dylib.lookupFunction<_c_execl, _dart_execl>('execl');
    return _execl(
      __path,
      __arg,
    );
  }

  _dart_execl _execl;

  int execvp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    _execvp ??= _dylib.lookupFunction<_c_execvp, _dart_execvp>('execvp');
    return _execvp(
      __file,
      __argv,
    );
  }

  _dart_execvp _execvp;

  int execlp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Int8> __arg,
  ) {
    _execlp ??= _dylib.lookupFunction<_c_execlp, _dart_execlp>('execlp');
    return _execlp(
      __file,
      __arg,
    );
  }

  _dart_execlp _execlp;

  int nice(
    int __inc,
  ) {
    _nice ??= _dylib.lookupFunction<_c_nice, _dart_nice>('nice');
    return _nice(
      __inc,
    );
  }

  _dart_nice _nice;

  void _exit(
    int __status,
  ) {
    __exit ??= _dylib.lookupFunction<_c__exit, _dart__exit>('_exit');
    return __exit(
      __status,
    );
  }

  _dart__exit __exit;

  int pathconf(
    ffi.Pointer<ffi.Int8> __path,
    int __name,
  ) {
    _pathconf ??=
        _dylib.lookupFunction<_c_pathconf, _dart_pathconf>('pathconf');
    return _pathconf(
      __path,
      __name,
    );
  }

  _dart_pathconf _pathconf;

  int fpathconf(
    int __fd,
    int __name,
  ) {
    _fpathconf ??=
        _dylib.lookupFunction<_c_fpathconf, _dart_fpathconf>('fpathconf');
    return _fpathconf(
      __fd,
      __name,
    );
  }

  _dart_fpathconf _fpathconf;

  int sysconf(
    int __name,
  ) {
    _sysconf ??= _dylib.lookupFunction<_c_sysconf, _dart_sysconf>('sysconf');
    return _sysconf(
      __name,
    );
  }

  _dart_sysconf _sysconf;

  int confstr(
    int __name,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _confstr ??= _dylib.lookupFunction<_c_confstr, _dart_confstr>('confstr');
    return _confstr(
      __name,
      __buf,
      __len,
    );
  }

  _dart_confstr _confstr;

  int getpid() {
    _getpid ??= _dylib.lookupFunction<_c_getpid, _dart_getpid>('getpid');
    return _getpid();
  }

  _dart_getpid _getpid;

  int getppid() {
    _getppid ??= _dylib.lookupFunction<_c_getppid, _dart_getppid>('getppid');
    return _getppid();
  }

  _dart_getppid _getppid;

  int getpgrp() {
    _getpgrp ??= _dylib.lookupFunction<_c_getpgrp, _dart_getpgrp>('getpgrp');
    return _getpgrp();
  }

  _dart_getpgrp _getpgrp;

  int __getpgid(
    int __pid,
  ) {
    ___getpgid ??=
        _dylib.lookupFunction<_c___getpgid, _dart___getpgid>('__getpgid');
    return ___getpgid(
      __pid,
    );
  }

  _dart___getpgid ___getpgid;

  int getpgid(
    int __pid,
  ) {
    _getpgid ??= _dylib.lookupFunction<_c_getpgid, _dart_getpgid>('getpgid');
    return _getpgid(
      __pid,
    );
  }

  _dart_getpgid _getpgid;

  int setpgid(
    int __pid,
    int __pgid,
  ) {
    _setpgid ??= _dylib.lookupFunction<_c_setpgid, _dart_setpgid>('setpgid');
    return _setpgid(
      __pid,
      __pgid,
    );
  }

  _dart_setpgid _setpgid;

  int setpgrp() {
    _setpgrp ??= _dylib.lookupFunction<_c_setpgrp, _dart_setpgrp>('setpgrp');
    return _setpgrp();
  }

  _dart_setpgrp _setpgrp;

  int setsid() {
    _setsid ??= _dylib.lookupFunction<_c_setsid, _dart_setsid>('setsid');
    return _setsid();
  }

  _dart_setsid _setsid;

  int getsid(
    int __pid,
  ) {
    _getsid ??= _dylib.lookupFunction<_c_getsid, _dart_getsid>('getsid');
    return _getsid(
      __pid,
    );
  }

  _dart_getsid _getsid;

  int getuid() {
    _getuid ??= _dylib.lookupFunction<_c_getuid, _dart_getuid>('getuid');
    return _getuid();
  }

  _dart_getuid _getuid;

  int geteuid() {
    _geteuid ??= _dylib.lookupFunction<_c_geteuid, _dart_geteuid>('geteuid');
    return _geteuid();
  }

  _dart_geteuid _geteuid;

  int getgid() {
    _getgid ??= _dylib.lookupFunction<_c_getgid, _dart_getgid>('getgid');
    return _getgid();
  }

  _dart_getgid _getgid;

  int getegid() {
    _getegid ??= _dylib.lookupFunction<_c_getegid, _dart_getegid>('getegid');
    return _getegid();
  }

  _dart_getegid _getegid;

  int getgroups(
    int __size,
    ffi.Pointer<ffi.Uint32> __list,
  ) {
    _getgroups ??=
        _dylib.lookupFunction<_c_getgroups, _dart_getgroups>('getgroups');
    return _getgroups(
      __size,
      __list,
    );
  }

  _dart_getgroups _getgroups;

  int setuid(
    int __uid,
  ) {
    _setuid ??= _dylib.lookupFunction<_c_setuid, _dart_setuid>('setuid');
    return _setuid(
      __uid,
    );
  }

  _dart_setuid _setuid;

  int setreuid(
    int __ruid,
    int __euid,
  ) {
    _setreuid ??=
        _dylib.lookupFunction<_c_setreuid, _dart_setreuid>('setreuid');
    return _setreuid(
      __ruid,
      __euid,
    );
  }

  _dart_setreuid _setreuid;

  int seteuid(
    int __uid,
  ) {
    _seteuid ??= _dylib.lookupFunction<_c_seteuid, _dart_seteuid>('seteuid');
    return _seteuid(
      __uid,
    );
  }

  _dart_seteuid _seteuid;

  int setgid(
    int __gid,
  ) {
    _setgid ??= _dylib.lookupFunction<_c_setgid, _dart_setgid>('setgid');
    return _setgid(
      __gid,
    );
  }

  _dart_setgid _setgid;

  int setregid(
    int __rgid,
    int __egid,
  ) {
    _setregid ??=
        _dylib.lookupFunction<_c_setregid, _dart_setregid>('setregid');
    return _setregid(
      __rgid,
      __egid,
    );
  }

  _dart_setregid _setregid;

  int setegid(
    int __gid,
  ) {
    _setegid ??= _dylib.lookupFunction<_c_setegid, _dart_setegid>('setegid');
    return _setegid(
      __gid,
    );
  }

  _dart_setegid _setegid;

  int fork() {
    _fork ??= _dylib.lookupFunction<_c_fork, _dart_fork>('fork');
    return _fork();
  }

  _dart_fork _fork;

  int vfork() {
    _vfork ??= _dylib.lookupFunction<_c_vfork, _dart_vfork>('vfork');
    return _vfork();
  }

  _dart_vfork _vfork;

  ffi.Pointer<ffi.Int8> ttyname(
    int __fd,
  ) {
    _ttyname ??= _dylib.lookupFunction<_c_ttyname, _dart_ttyname>('ttyname');
    return _ttyname(
      __fd,
    );
  }

  _dart_ttyname _ttyname;

  int ttyname_r(
    int __fd,
    ffi.Pointer<ffi.Int8> __buf,
    int __buflen,
  ) {
    _ttyname_r ??=
        _dylib.lookupFunction<_c_ttyname_r, _dart_ttyname_r>('ttyname_r');
    return _ttyname_r(
      __fd,
      __buf,
      __buflen,
    );
  }

  _dart_ttyname_r _ttyname_r;

  int isatty(
    int __fd,
  ) {
    _isatty ??= _dylib.lookupFunction<_c_isatty, _dart_isatty>('isatty');
    return _isatty(
      __fd,
    );
  }

  _dart_isatty _isatty;

  int ttyslot() {
    _ttyslot ??= _dylib.lookupFunction<_c_ttyslot, _dart_ttyslot>('ttyslot');
    return _ttyslot();
  }

  _dart_ttyslot _ttyslot;

  int link(
    ffi.Pointer<ffi.Int8> __from,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    _link ??= _dylib.lookupFunction<_c_link, _dart_link>('link');
    return _link(
      __from,
      __to,
    );
  }

  _dart_link _link;

  int linkat(
    int __fromfd,
    ffi.Pointer<ffi.Int8> __from,
    int __tofd,
    ffi.Pointer<ffi.Int8> __to,
    int __flags,
  ) {
    _linkat ??= _dylib.lookupFunction<_c_linkat, _dart_linkat>('linkat');
    return _linkat(
      __fromfd,
      __from,
      __tofd,
      __to,
      __flags,
    );
  }

  _dart_linkat _linkat;

  int symlink(
    ffi.Pointer<ffi.Int8> __from,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    _symlink ??= _dylib.lookupFunction<_c_symlink, _dart_symlink>('symlink');
    return _symlink(
      __from,
      __to,
    );
  }

  _dart_symlink _symlink;

  int readlink(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _readlink ??=
        _dylib.lookupFunction<_c_readlink, _dart_readlink>('readlink');
    return _readlink(
      __path,
      __buf,
      __len,
    );
  }

  _dart_readlink _readlink;

  int symlinkat(
    ffi.Pointer<ffi.Int8> __from,
    int __tofd,
    ffi.Pointer<ffi.Int8> __to,
  ) {
    _symlinkat ??=
        _dylib.lookupFunction<_c_symlinkat, _dart_symlinkat>('symlinkat');
    return _symlinkat(
      __from,
      __tofd,
      __to,
    );
  }

  _dart_symlinkat _symlinkat;

  int readlinkat(
    int __fd,
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _readlinkat ??=
        _dylib.lookupFunction<_c_readlinkat, _dart_readlinkat>('readlinkat');
    return _readlinkat(
      __fd,
      __path,
      __buf,
      __len,
    );
  }

  _dart_readlinkat _readlinkat;

  int unlink(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _unlink ??= _dylib.lookupFunction<_c_unlink, _dart_unlink>('unlink');
    return _unlink(
      __name,
    );
  }

  _dart_unlink _unlink;

  int unlinkat(
    int __fd,
    ffi.Pointer<ffi.Int8> __name,
    int __flag,
  ) {
    _unlinkat ??=
        _dylib.lookupFunction<_c_unlinkat, _dart_unlinkat>('unlinkat');
    return _unlinkat(
      __fd,
      __name,
      __flag,
    );
  }

  _dart_unlinkat _unlinkat;

  int rmdir(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    _rmdir ??= _dylib.lookupFunction<_c_rmdir, _dart_rmdir>('rmdir');
    return _rmdir(
      __path,
    );
  }

  _dart_rmdir _rmdir;

  int tcgetpgrp(
    int __fd,
  ) {
    _tcgetpgrp ??=
        _dylib.lookupFunction<_c_tcgetpgrp, _dart_tcgetpgrp>('tcgetpgrp');
    return _tcgetpgrp(
      __fd,
    );
  }

  _dart_tcgetpgrp _tcgetpgrp;

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    _tcsetpgrp ??=
        _dylib.lookupFunction<_c_tcsetpgrp, _dart_tcsetpgrp>('tcsetpgrp');
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  _dart_tcsetpgrp _tcsetpgrp;

  ffi.Pointer<ffi.Int8> getlogin() {
    _getlogin ??=
        _dylib.lookupFunction<_c_getlogin, _dart_getlogin>('getlogin');
    return _getlogin();
  }

  _dart_getlogin _getlogin;

  int getlogin_r(
    ffi.Pointer<ffi.Int8> __name,
    int __name_len,
  ) {
    _getlogin_r ??=
        _dylib.lookupFunction<_c_getlogin_r, _dart_getlogin_r>('getlogin_r');
    return _getlogin_r(
      __name,
      __name_len,
    );
  }

  _dart_getlogin_r _getlogin_r;

  int setlogin(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _setlogin ??=
        _dylib.lookupFunction<_c_setlogin, _dart_setlogin>('setlogin');
    return _setlogin(
      __name,
    );
  }

  _dart_setlogin _setlogin;

  int getopt(
    int ___argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
    ffi.Pointer<ffi.Int8> __shortopts,
  ) {
    _getopt ??= _dylib.lookupFunction<_c_getopt, _dart_getopt>('getopt');
    return _getopt(
      ___argc,
      ___argv,
      __shortopts,
    );
  }

  _dart_getopt _getopt;

  int gethostname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    _gethostname ??=
        _dylib.lookupFunction<_c_gethostname, _dart_gethostname>('gethostname');
    return _gethostname(
      __name,
      __len,
    );
  }

  _dart_gethostname _gethostname;

  int sethostname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    _sethostname ??=
        _dylib.lookupFunction<_c_sethostname, _dart_sethostname>('sethostname');
    return _sethostname(
      __name,
      __len,
    );
  }

  _dart_sethostname _sethostname;

  int sethostid(
    int __id,
  ) {
    _sethostid ??=
        _dylib.lookupFunction<_c_sethostid, _dart_sethostid>('sethostid');
    return _sethostid(
      __id,
    );
  }

  _dart_sethostid _sethostid;

  int getdomainname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    _getdomainname ??= _dylib
        .lookupFunction<_c_getdomainname, _dart_getdomainname>('getdomainname');
    return _getdomainname(
      __name,
      __len,
    );
  }

  _dart_getdomainname _getdomainname;

  int setdomainname(
    ffi.Pointer<ffi.Int8> __name,
    int __len,
  ) {
    _setdomainname ??= _dylib
        .lookupFunction<_c_setdomainname, _dart_setdomainname>('setdomainname');
    return _setdomainname(
      __name,
      __len,
    );
  }

  _dart_setdomainname _setdomainname;

  int vhangup() {
    _vhangup ??= _dylib.lookupFunction<_c_vhangup, _dart_vhangup>('vhangup');
    return _vhangup();
  }

  _dart_vhangup _vhangup;

  int revoke(
    ffi.Pointer<ffi.Int8> __file,
  ) {
    _revoke ??= _dylib.lookupFunction<_c_revoke, _dart_revoke>('revoke');
    return _revoke(
      __file,
    );
  }

  _dart_revoke _revoke;

  int profil(
    ffi.Pointer<ffi.Uint16> __sample_buffer,
    int __size,
    int __offset,
    int __scale,
  ) {
    _profil ??= _dylib.lookupFunction<_c_profil, _dart_profil>('profil');
    return _profil(
      __sample_buffer,
      __size,
      __offset,
      __scale,
    );
  }

  _dart_profil _profil;

  int acct(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _acct ??= _dylib.lookupFunction<_c_acct, _dart_acct>('acct');
    return _acct(
      __name,
    );
  }

  _dart_acct _acct;

  ffi.Pointer<ffi.Int8> getusershell() {
    _getusershell ??= _dylib
        .lookupFunction<_c_getusershell, _dart_getusershell>('getusershell');
    return _getusershell();
  }

  _dart_getusershell _getusershell;

  void endusershell() {
    _endusershell ??= _dylib
        .lookupFunction<_c_endusershell, _dart_endusershell>('endusershell');
    return _endusershell();
  }

  _dart_endusershell _endusershell;

  void setusershell() {
    _setusershell ??= _dylib
        .lookupFunction<_c_setusershell, _dart_setusershell>('setusershell');
    return _setusershell();
  }

  _dart_setusershell _setusershell;

  int daemon(
    int __nochdir,
    int __noclose,
  ) {
    _daemon ??= _dylib.lookupFunction<_c_daemon, _dart_daemon>('daemon');
    return _daemon(
      __nochdir,
      __noclose,
    );
  }

  _dart_daemon _daemon;

  int chroot(
    ffi.Pointer<ffi.Int8> __path,
  ) {
    _chroot ??= _dylib.lookupFunction<_c_chroot, _dart_chroot>('chroot');
    return _chroot(
      __path,
    );
  }

  _dart_chroot _chroot;

  ffi.Pointer<ffi.Int8> getpass(
    ffi.Pointer<ffi.Int8> __prompt,
  ) {
    _getpass ??= _dylib.lookupFunction<_c_getpass, _dart_getpass>('getpass');
    return _getpass(
      __prompt,
    );
  }

  _dart_getpass _getpass;

  int fsync(
    int __fd,
  ) {
    _fsync ??= _dylib.lookupFunction<_c_fsync, _dart_fsync>('fsync');
    return _fsync(
      __fd,
    );
  }

  _dart_fsync _fsync;

  int gethostid() {
    _gethostid ??=
        _dylib.lookupFunction<_c_gethostid, _dart_gethostid>('gethostid');
    return _gethostid();
  }

  _dart_gethostid _gethostid;

  void sync_1() {
    _sync_1 ??= _dylib.lookupFunction<_c_sync_1, _dart_sync_1>('sync');
    return _sync_1();
  }

  _dart_sync_1 _sync_1;

  int getpagesize() {
    _getpagesize ??=
        _dylib.lookupFunction<_c_getpagesize, _dart_getpagesize>('getpagesize');
    return _getpagesize();
  }

  _dart_getpagesize _getpagesize;

  int getdtablesize() {
    _getdtablesize ??= _dylib
        .lookupFunction<_c_getdtablesize, _dart_getdtablesize>('getdtablesize');
    return _getdtablesize();
  }

  _dart_getdtablesize _getdtablesize;

  int truncate(
    ffi.Pointer<ffi.Int8> __file,
    int __length,
  ) {
    _truncate ??=
        _dylib.lookupFunction<_c_truncate, _dart_truncate>('truncate');
    return _truncate(
      __file,
      __length,
    );
  }

  _dart_truncate _truncate;

  int ftruncate(
    int __fd,
    int __length,
  ) {
    _ftruncate ??=
        _dylib.lookupFunction<_c_ftruncate, _dart_ftruncate>('ftruncate');
    return _ftruncate(
      __fd,
      __length,
    );
  }

  _dart_ftruncate _ftruncate;

  int brk(
    ffi.Pointer<ffi.Void> __addr,
  ) {
    _brk ??= _dylib.lookupFunction<_c_brk, _dart_brk>('brk');
    return _brk(
      __addr,
    );
  }

  _dart_brk _brk;

  ffi.Pointer<ffi.Void> sbrk(
    int __delta,
  ) {
    _sbrk ??= _dylib.lookupFunction<_c_sbrk, _dart_sbrk>('sbrk');
    return _sbrk(
      __delta,
    );
  }

  _dart_sbrk _sbrk;

  int syscall(
    int __sysno,
  ) {
    _syscall ??= _dylib.lookupFunction<_c_syscall, _dart_syscall>('syscall');
    return _syscall(
      __sysno,
    );
  }

  _dart_syscall _syscall;

  int fdatasync(
    int __fildes,
  ) {
    _fdatasync ??=
        _dylib.lookupFunction<_c_fdatasync, _dart_fdatasync>('fdatasync');
    return _fdatasync(
      __fildes,
    );
  }

  _dart_fdatasync _fdatasync;

  ffi.Pointer<ffi.Int8> crypt(
    ffi.Pointer<ffi.Int8> __key,
    ffi.Pointer<ffi.Int8> __salt,
  ) {
    _crypt ??= _dylib.lookupFunction<_c_crypt, _dart_crypt>('crypt');
    return _crypt(
      __key,
      __salt,
    );
  }

  _dart_crypt _crypt;

  int getentropy(
    ffi.Pointer<ffi.Void> __buffer,
    int __length,
  ) {
    _getentropy ??=
        _dylib.lookupFunction<_c_getentropy, _dart_getentropy>('getentropy');
    return _getentropy(
      __buffer,
      __length,
    );
  }

  _dart_getentropy _getentropy;

  int gettimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<ffi.Void> __tz,
  ) {
    _gettimeofday ??= _dylib
        .lookupFunction<_c_gettimeofday, _dart_gettimeofday>('gettimeofday');
    return _gettimeofday(
      __tv,
      __tz,
    );
  }

  _dart_gettimeofday _gettimeofday;

  int settimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<timezone> __tz,
  ) {
    _settimeofday ??= _dylib
        .lookupFunction<_c_settimeofday, _dart_settimeofday>('settimeofday');
    return _settimeofday(
      __tv,
      __tz,
    );
  }

  _dart_settimeofday _settimeofday;

  int adjtime(
    ffi.Pointer<timeval> __delta,
    ffi.Pointer<timeval> __olddelta,
  ) {
    _adjtime ??= _dylib.lookupFunction<_c_adjtime, _dart_adjtime>('adjtime');
    return _adjtime(
      __delta,
      __olddelta,
    );
  }

  _dart_adjtime _adjtime;

  int getitimer(
    int __which,
    ffi.Pointer<itimerval> __value,
  ) {
    _getitimer ??=
        _dylib.lookupFunction<_c_getitimer, _dart_getitimer>('getitimer');
    return _getitimer(
      __which,
      __value,
    );
  }

  _dart_getitimer _getitimer;

  int setitimer(
    int __which,
    ffi.Pointer<itimerval> __new,
    ffi.Pointer<itimerval> __old,
  ) {
    _setitimer ??=
        _dylib.lookupFunction<_c_setitimer, _dart_setitimer>('setitimer');
    return _setitimer(
      __which,
      __new,
      __old,
    );
  }

  _dart_setitimer _setitimer;

  int utimes(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    _utimes ??= _dylib.lookupFunction<_c_utimes, _dart_utimes>('utimes');
    return _utimes(
      __file,
      __tvp,
    );
  }

  _dart_utimes _utimes;

  int lutimes(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    _lutimes ??= _dylib.lookupFunction<_c_lutimes, _dart_lutimes>('lutimes');
    return _lutimes(
      __file,
      __tvp,
    );
  }

  _dart_lutimes _lutimes;

  int futimes(
    int __fd,
    ffi.Pointer<timeval> __tvp,
  ) {
    _futimes ??= _dylib.lookupFunction<_c_futimes, _dart_futimes>('futimes');
    return _futimes(
      __fd,
      __tvp,
    );
  }

  _dart_futimes _futimes;

  ffi.Pointer<ffi.Pointer<ffi.Uint16>> __ctype_b_loc() {
    ___ctype_b_loc ??= _dylib
        .lookupFunction<_c___ctype_b_loc, _dart___ctype_b_loc>('__ctype_b_loc');
    return ___ctype_b_loc();
  }

  _dart___ctype_b_loc ___ctype_b_loc;

  ffi.Pointer<ffi.Pointer<ffi.Int32>> __ctype_tolower_loc() {
    ___ctype_tolower_loc ??= _dylib.lookupFunction<_c___ctype_tolower_loc,
        _dart___ctype_tolower_loc>('__ctype_tolower_loc');
    return ___ctype_tolower_loc();
  }

  _dart___ctype_tolower_loc ___ctype_tolower_loc;

  ffi.Pointer<ffi.Pointer<ffi.Int32>> __ctype_toupper_loc() {
    ___ctype_toupper_loc ??= _dylib.lookupFunction<_c___ctype_toupper_loc,
        _dart___ctype_toupper_loc>('__ctype_toupper_loc');
    return ___ctype_toupper_loc();
  }

  _dart___ctype_toupper_loc ___ctype_toupper_loc;

  int isalnum(
    int arg0,
  ) {
    _isalnum ??= _dylib.lookupFunction<_c_isalnum, _dart_isalnum>('isalnum');
    return _isalnum(
      arg0,
    );
  }

  _dart_isalnum _isalnum;

  int isalpha(
    int arg0,
  ) {
    _isalpha ??= _dylib.lookupFunction<_c_isalpha, _dart_isalpha>('isalpha');
    return _isalpha(
      arg0,
    );
  }

  _dart_isalpha _isalpha;

  int iscntrl(
    int arg0,
  ) {
    _iscntrl ??= _dylib.lookupFunction<_c_iscntrl, _dart_iscntrl>('iscntrl');
    return _iscntrl(
      arg0,
    );
  }

  _dart_iscntrl _iscntrl;

  int isdigit(
    int arg0,
  ) {
    _isdigit ??= _dylib.lookupFunction<_c_isdigit, _dart_isdigit>('isdigit');
    return _isdigit(
      arg0,
    );
  }

  _dart_isdigit _isdigit;

  int islower(
    int arg0,
  ) {
    _islower ??= _dylib.lookupFunction<_c_islower, _dart_islower>('islower');
    return _islower(
      arg0,
    );
  }

  _dart_islower _islower;

  int isgraph(
    int arg0,
  ) {
    _isgraph ??= _dylib.lookupFunction<_c_isgraph, _dart_isgraph>('isgraph');
    return _isgraph(
      arg0,
    );
  }

  _dart_isgraph _isgraph;

  int isprint(
    int arg0,
  ) {
    _isprint ??= _dylib.lookupFunction<_c_isprint, _dart_isprint>('isprint');
    return _isprint(
      arg0,
    );
  }

  _dart_isprint _isprint;

  int ispunct(
    int arg0,
  ) {
    _ispunct ??= _dylib.lookupFunction<_c_ispunct, _dart_ispunct>('ispunct');
    return _ispunct(
      arg0,
    );
  }

  _dart_ispunct _ispunct;

  int isspace(
    int arg0,
  ) {
    _isspace ??= _dylib.lookupFunction<_c_isspace, _dart_isspace>('isspace');
    return _isspace(
      arg0,
    );
  }

  _dart_isspace _isspace;

  int isupper(
    int arg0,
  ) {
    _isupper ??= _dylib.lookupFunction<_c_isupper, _dart_isupper>('isupper');
    return _isupper(
      arg0,
    );
  }

  _dart_isupper _isupper;

  int isxdigit(
    int arg0,
  ) {
    _isxdigit ??=
        _dylib.lookupFunction<_c_isxdigit, _dart_isxdigit>('isxdigit');
    return _isxdigit(
      arg0,
    );
  }

  _dart_isxdigit _isxdigit;

  int tolower(
    int __c,
  ) {
    _tolower_1 ??= _dylib.lookupFunction<_c_tolower, _dart_tolower>('tolower');
    return _tolower_1(
      __c,
    );
  }

  _dart_tolower _tolower_1;

  int toupper(
    int __c,
  ) {
    _toupper_1 ??= _dylib.lookupFunction<_c_toupper, _dart_toupper>('toupper');
    return _toupper_1(
      __c,
    );
  }

  _dart_toupper _toupper_1;

  int isblank(
    int arg0,
  ) {
    _isblank ??= _dylib.lookupFunction<_c_isblank, _dart_isblank>('isblank');
    return _isblank(
      arg0,
    );
  }

  _dart_isblank _isblank;

  int isascii(
    int __c,
  ) {
    _isascii ??= _dylib.lookupFunction<_c_isascii, _dart_isascii>('isascii');
    return _isascii(
      __c,
    );
  }

  _dart_isascii _isascii;

  int toascii(
    int __c,
  ) {
    _toascii ??= _dylib.lookupFunction<_c_toascii, _dart_toascii>('toascii');
    return _toascii(
      __c,
    );
  }

  _dart_toascii _toascii;

  int _toupper(
    int arg0,
  ) {
    __toupper ??=
        _dylib.lookupFunction<_c__toupper, _dart__toupper>('_toupper');
    return __toupper(
      arg0,
    );
  }

  _dart__toupper __toupper;

  int _tolower(
    int arg0,
  ) {
    __tolower ??=
        _dylib.lookupFunction<_c__tolower, _dart__tolower>('_tolower');
    return __tolower(
      arg0,
    );
  }

  _dart__tolower __tolower;

  int isalnum_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isalnum_l ??=
        _dylib.lookupFunction<_c_isalnum_l, _dart_isalnum_l>('isalnum_l');
    return _isalnum_l(
      arg0,
      arg1,
    );
  }

  _dart_isalnum_l _isalnum_l;

  int isalpha_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isalpha_l ??=
        _dylib.lookupFunction<_c_isalpha_l, _dart_isalpha_l>('isalpha_l');
    return _isalpha_l(
      arg0,
      arg1,
    );
  }

  _dart_isalpha_l _isalpha_l;

  int iscntrl_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _iscntrl_l ??=
        _dylib.lookupFunction<_c_iscntrl_l, _dart_iscntrl_l>('iscntrl_l');
    return _iscntrl_l(
      arg0,
      arg1,
    );
  }

  _dart_iscntrl_l _iscntrl_l;

  int isdigit_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isdigit_l ??=
        _dylib.lookupFunction<_c_isdigit_l, _dart_isdigit_l>('isdigit_l');
    return _isdigit_l(
      arg0,
      arg1,
    );
  }

  _dart_isdigit_l _isdigit_l;

  int islower_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _islower_l ??=
        _dylib.lookupFunction<_c_islower_l, _dart_islower_l>('islower_l');
    return _islower_l(
      arg0,
      arg1,
    );
  }

  _dart_islower_l _islower_l;

  int isgraph_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isgraph_l ??=
        _dylib.lookupFunction<_c_isgraph_l, _dart_isgraph_l>('isgraph_l');
    return _isgraph_l(
      arg0,
      arg1,
    );
  }

  _dart_isgraph_l _isgraph_l;

  int isprint_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isprint_l ??=
        _dylib.lookupFunction<_c_isprint_l, _dart_isprint_l>('isprint_l');
    return _isprint_l(
      arg0,
      arg1,
    );
  }

  _dart_isprint_l _isprint_l;

  int ispunct_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _ispunct_l ??=
        _dylib.lookupFunction<_c_ispunct_l, _dart_ispunct_l>('ispunct_l');
    return _ispunct_l(
      arg0,
      arg1,
    );
  }

  _dart_ispunct_l _ispunct_l;

  int isspace_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isspace_l ??=
        _dylib.lookupFunction<_c_isspace_l, _dart_isspace_l>('isspace_l');
    return _isspace_l(
      arg0,
      arg1,
    );
  }

  _dart_isspace_l _isspace_l;

  int isupper_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isupper_l ??=
        _dylib.lookupFunction<_c_isupper_l, _dart_isupper_l>('isupper_l');
    return _isupper_l(
      arg0,
      arg1,
    );
  }

  _dart_isupper_l _isupper_l;

  int isxdigit_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isxdigit_l ??=
        _dylib.lookupFunction<_c_isxdigit_l, _dart_isxdigit_l>('isxdigit_l');
    return _isxdigit_l(
      arg0,
      arg1,
    );
  }

  _dart_isxdigit_l _isxdigit_l;

  int isblank_l(
    int arg0,
    ffi.Pointer<__locale_struct> arg1,
  ) {
    _isblank_l ??=
        _dylib.lookupFunction<_c_isblank_l, _dart_isblank_l>('isblank_l');
    return _isblank_l(
      arg0,
      arg1,
    );
  }

  _dart_isblank_l _isblank_l;

  int __tolower_l(
    int __c,
    ffi.Pointer<__locale_struct> __l,
  ) {
    ___tolower_l ??=
        _dylib.lookupFunction<_c___tolower_l, _dart___tolower_l>('__tolower_l');
    return ___tolower_l(
      __c,
      __l,
    );
  }

  _dart___tolower_l ___tolower_l;

  int tolower_l(
    int __c,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _tolower_l ??=
        _dylib.lookupFunction<_c_tolower_l, _dart_tolower_l>('tolower_l');
    return _tolower_l(
      __c,
      __l,
    );
  }

  _dart_tolower_l _tolower_l;

  int __toupper_l(
    int __c,
    ffi.Pointer<__locale_struct> __l,
  ) {
    ___toupper_l ??=
        _dylib.lookupFunction<_c___toupper_l, _dart___toupper_l>('__toupper_l');
    return ___toupper_l(
      __c,
      __l,
    );
  }

  _dart___toupper_l ___toupper_l;

  int toupper_l(
    int __c,
    ffi.Pointer<__locale_struct> __l,
  ) {
    _toupper_l ??=
        _dylib.lookupFunction<_c_toupper_l, _dart_toupper_l>('toupper_l');
    return _toupper_l(
      __c,
      __l,
    );
  }

  _dart_toupper_l _toupper_l;

  void __assert_fail(
    ffi.Pointer<ffi.Int8> __assertion,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
    ffi.Pointer<ffi.Int8> __function,
  ) {
    ___assert_fail ??= _dylib
        .lookupFunction<_c___assert_fail, _dart___assert_fail>('__assert_fail');
    return ___assert_fail(
      __assertion,
      __file,
      __line,
      __function,
    );
  }

  _dart___assert_fail ___assert_fail;

  void __assert_perror_fail(
    int __errnum,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
    ffi.Pointer<ffi.Int8> __function,
  ) {
    ___assert_perror_fail ??= _dylib.lookupFunction<_c___assert_perror_fail,
        _dart___assert_perror_fail>('__assert_perror_fail');
    return ___assert_perror_fail(
      __errnum,
      __file,
      __line,
      __function,
    );
  }

  _dart___assert_perror_fail ___assert_perror_fail;

  void __assert(
    ffi.Pointer<ffi.Int8> __assertion,
    ffi.Pointer<ffi.Int8> __file,
    int __line,
  ) {
    ___assert ??=
        _dylib.lookupFunction<_c___assert, _dart___assert>('__assert');
    return ___assert(
      __assertion,
      __file,
      __line,
    );
  }

  _dart___assert ___assert;

  int _XimCheckIfLocalProcessing(
    int im,
  ) {
    __XimCheckIfLocalProcessing ??= _dylib.lookupFunction<
        _c__XimCheckIfLocalProcessing,
        _dart__XimCheckIfLocalProcessing>('_XimCheckIfLocalProcessing');
    return __XimCheckIfLocalProcessing(
      im,
    );
  }

  _dart__XimCheckIfLocalProcessing __XimCheckIfLocalProcessing;

  void XimFreeDefaultTree(
    ffi.Pointer<ffi.Int32> b,
  ) {
    _XimFreeDefaultTree ??=
        _dylib.lookupFunction<_c_XimFreeDefaultTree, _dart_XimFreeDefaultTree>(
            'XimFreeDefaultTree');
    return _XimFreeDefaultTree(
      b,
    );
  }

  _dart_XimFreeDefaultTree _XimFreeDefaultTree;

  void _XimLocalIMFree(
    int im,
  ) {
    __XimLocalIMFree ??=
        _dylib.lookupFunction<_c__XimLocalIMFree, _dart__XimLocalIMFree>(
            '_XimLocalIMFree');
    return __XimLocalIMFree(
      im,
    );
  }

  _dart__XimLocalIMFree __XimLocalIMFree;

  int _XimLocalCloseIM(
    int xim,
  ) {
    __XimLocalCloseIM ??=
        _dylib.lookupFunction<_c__XimLocalCloseIM, _dart__XimLocalCloseIM>(
            '_XimLocalCloseIM');
    return __XimLocalCloseIM(
      xim,
    );
  }

  _dart__XimLocalCloseIM __XimLocalCloseIM;

  ffi.Pointer<ffi.Int8> _XimLocalGetIMValues(
    int xim,
    ffi.Pointer<ffi.Int32> values,
  ) {
    __XimLocalGetIMValues ??= _dylib.lookupFunction<_c__XimLocalGetIMValues,
        _dart__XimLocalGetIMValues>('_XimLocalGetIMValues');
    return __XimLocalGetIMValues(
      xim,
      values,
    );
  }

  _dart__XimLocalGetIMValues __XimLocalGetIMValues;

  ffi.Pointer<ffi.Int8> _XimLocalSetIMValues(
    int xim,
    ffi.Pointer<ffi.Int32> values,
  ) {
    __XimLocalSetIMValues ??= _dylib.lookupFunction<_c__XimLocalSetIMValues,
        _dart__XimLocalSetIMValues>('_XimLocalSetIMValues');
    return __XimLocalSetIMValues(
      xim,
      values,
    );
  }

  _dart__XimLocalSetIMValues __XimLocalSetIMValues;

  void _XimCreateDefaultTree(
    int im,
  ) {
    __XimCreateDefaultTree ??= _dylib.lookupFunction<_c__XimCreateDefaultTree,
        _dart__XimCreateDefaultTree>('_XimCreateDefaultTree');
    return __XimCreateDefaultTree(
      im,
    );
  }

  _dart__XimCreateDefaultTree __XimCreateDefaultTree;

  int _XimLocalOpenIM(
    int im,
  ) {
    __XimLocalOpenIM ??=
        _dylib.lookupFunction<_c__XimLocalOpenIM, _dart__XimLocalOpenIM>(
            '_XimLocalOpenIM');
    return __XimLocalOpenIM(
      im,
    );
  }

  _dart__XimLocalOpenIM __XimLocalOpenIM;

  int _XimLocalMbLookupString(
    ffi.Pointer<_XIC> xic,
    ffi.Pointer<XKeyEvent> ev,
    ffi.Pointer<ffi.Int8> buffer,
    int bytes,
    ffi.Pointer<ffi.Uint64> keysym,
    ffi.Pointer<ffi.Int32> status,
  ) {
    __XimLocalMbLookupString ??= _dylib.lookupFunction<
        _c__XimLocalMbLookupString,
        _dart__XimLocalMbLookupString>('_XimLocalMbLookupString');
    return __XimLocalMbLookupString(
      xic,
      ev,
      buffer,
      bytes,
      keysym,
      status,
    );
  }

  _dart__XimLocalMbLookupString __XimLocalMbLookupString;

  int _XimLocalWcLookupString(
    ffi.Pointer<_XIC> xic,
    ffi.Pointer<XKeyEvent> ev,
    ffi.Pointer<ffi.Int32> buffer,
    int wlen,
    ffi.Pointer<ffi.Uint64> keysym,
    ffi.Pointer<ffi.Int32> status,
  ) {
    __XimLocalWcLookupString ??= _dylib.lookupFunction<
        _c__XimLocalWcLookupString,
        _dart__XimLocalWcLookupString>('_XimLocalWcLookupString');
    return __XimLocalWcLookupString(
      xic,
      ev,
      buffer,
      wlen,
      keysym,
      status,
    );
  }

  _dart__XimLocalWcLookupString __XimLocalWcLookupString;

  int _XimLocalUtf8LookupString(
    ffi.Pointer<_XIC> xic,
    ffi.Pointer<XKeyEvent> ev,
    ffi.Pointer<ffi.Int8> buffer,
    int bytes,
    ffi.Pointer<ffi.Uint64> keysym,
    ffi.Pointer<ffi.Int32> status,
  ) {
    __XimLocalUtf8LookupString ??= _dylib.lookupFunction<
        _c__XimLocalUtf8LookupString,
        _dart__XimLocalUtf8LookupString>('_XimLocalUtf8LookupString');
    return __XimLocalUtf8LookupString(
      xic,
      ev,
      buffer,
      bytes,
      keysym,
      status,
    );
  }

  _dart__XimLocalUtf8LookupString __XimLocalUtf8LookupString;

  int _XimLcctsconvert(
    int conv,
    ffi.Pointer<ffi.Int8> from,
    int from_len,
    ffi.Pointer<ffi.Int8> to,
    int to_len,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __XimLcctsconvert ??=
        _dylib.lookupFunction<_c__XimLcctsconvert, _dart__XimLcctsconvert>(
            '_XimLcctsconvert');
    return __XimLcctsconvert(
      conv,
      from,
      from_len,
      to,
      to_len,
      state,
    );
  }

  _dart__XimLcctsconvert __XimLcctsconvert;

  int _XimLcctstombs(
    ffi.Pointer<_XIM> xim,
    ffi.Pointer<ffi.Int8> from,
    int from_len,
    ffi.Pointer<ffi.Int8> to,
    int to_len,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __XimLcctstombs ??=
        _dylib.lookupFunction<_c__XimLcctstombs, _dart__XimLcctstombs>(
            '_XimLcctstombs');
    return __XimLcctstombs(
      xim,
      from,
      from_len,
      to,
      to_len,
      state,
    );
  }

  _dart__XimLcctstombs __XimLcctstombs;

  int _XimLcctstowcs(
    ffi.Pointer<_XIM> xim,
    ffi.Pointer<ffi.Int8> from,
    int from_len,
    ffi.Pointer<ffi.Int32> to,
    int to_len,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __XimLcctstowcs ??=
        _dylib.lookupFunction<_c__XimLcctstowcs, _dart__XimLcctstowcs>(
            '_XimLcctstowcs');
    return __XimLcctstowcs(
      xim,
      from,
      from_len,
      to,
      to_len,
      state,
    );
  }

  _dart__XimLcctstowcs __XimLcctstowcs;

  int _XimLcctstoutf8(
    ffi.Pointer<_XIM> xim,
    ffi.Pointer<ffi.Int8> from,
    int from_len,
    ffi.Pointer<ffi.Int8> to,
    int to_len,
    ffi.Pointer<ffi.Int32> state,
  ) {
    __XimLcctstoutf8 ??=
        _dylib.lookupFunction<_c__XimLcctstoutf8, _dart__XimLcctstoutf8>(
            '_XimLcctstoutf8');
    return __XimLcctstoutf8(
      xim,
      from,
      from_len,
      to,
      to_len,
      state,
    );
  }

  _dart__XimLcctstoutf8 __XimLcctstoutf8;

  int stat(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<stat> __buf,
  ) {
    _stat ??= _dylib.lookupFunction<_c_stat, _dart_stat>('stat');
    return _stat(
      __file,
      __buf,
    );
  }

  _dart_stat _stat;

  int fstat(
    int __fd,
    ffi.Pointer<stat> __buf,
  ) {
    _fstat ??= _dylib.lookupFunction<_c_fstat, _dart_fstat>('fstat');
    return _fstat(
      __fd,
      __buf,
    );
  }

  _dart_fstat _fstat;

  int fstatat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<stat> __buf,
    int __flag,
  ) {
    _fstatat ??= _dylib.lookupFunction<_c_fstatat, _dart_fstatat>('fstatat');
    return _fstatat(
      __fd,
      __file,
      __buf,
      __flag,
    );
  }

  _dart_fstatat _fstatat;

  int lstat(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<stat> __buf,
  ) {
    _lstat ??= _dylib.lookupFunction<_c_lstat, _dart_lstat>('lstat');
    return _lstat(
      __file,
      __buf,
    );
  }

  _dart_lstat _lstat;

  int chmod(
    ffi.Pointer<ffi.Int8> __file,
    int __mode,
  ) {
    _chmod ??= _dylib.lookupFunction<_c_chmod, _dart_chmod>('chmod');
    return _chmod(
      __file,
      __mode,
    );
  }

  _dart_chmod _chmod;

  int lchmod(
    ffi.Pointer<ffi.Int8> __file,
    int __mode,
  ) {
    _lchmod ??= _dylib.lookupFunction<_c_lchmod, _dart_lchmod>('lchmod');
    return _lchmod(
      __file,
      __mode,
    );
  }

  _dart_lchmod _lchmod;

  int fchmod(
    int __fd,
    int __mode,
  ) {
    _fchmod ??= _dylib.lookupFunction<_c_fchmod, _dart_fchmod>('fchmod');
    return _fchmod(
      __fd,
      __mode,
    );
  }

  _dart_fchmod _fchmod;

  int fchmodat(
    int __fd,
    ffi.Pointer<ffi.Int8> __file,
    int __mode,
    int __flag,
  ) {
    _fchmodat ??=
        _dylib.lookupFunction<_c_fchmodat, _dart_fchmodat>('fchmodat');
    return _fchmodat(
      __fd,
      __file,
      __mode,
      __flag,
    );
  }

  _dart_fchmodat _fchmodat;

  int umask(
    int __mask,
  ) {
    _umask ??= _dylib.lookupFunction<_c_umask, _dart_umask>('umask');
    return _umask(
      __mask,
    );
  }

  _dart_umask _umask;

  int mkdir(
    ffi.Pointer<ffi.Int8> __path,
    int __mode,
  ) {
    _mkdir ??= _dylib.lookupFunction<_c_mkdir, _dart_mkdir>('mkdir');
    return _mkdir(
      __path,
      __mode,
    );
  }

  _dart_mkdir _mkdir;

  int mkdirat(
    int __fd,
    ffi.Pointer<ffi.Int8> __path,
    int __mode,
  ) {
    _mkdirat ??= _dylib.lookupFunction<_c_mkdirat, _dart_mkdirat>('mkdirat');
    return _mkdirat(
      __fd,
      __path,
      __mode,
    );
  }

  _dart_mkdirat _mkdirat;

  int mknod(
    ffi.Pointer<ffi.Int8> __path,
    int __mode,
    int __dev,
  ) {
    _mknod ??= _dylib.lookupFunction<_c_mknod, _dart_mknod>('mknod');
    return _mknod(
      __path,
      __mode,
      __dev,
    );
  }

  _dart_mknod _mknod;

  int mknodat(
    int __fd,
    ffi.Pointer<ffi.Int8> __path,
    int __mode,
    int __dev,
  ) {
    _mknodat ??= _dylib.lookupFunction<_c_mknodat, _dart_mknodat>('mknodat');
    return _mknodat(
      __fd,
      __path,
      __mode,
      __dev,
    );
  }

  _dart_mknodat _mknodat;

  int mkfifo(
    ffi.Pointer<ffi.Int8> __path,
    int __mode,
  ) {
    _mkfifo ??= _dylib.lookupFunction<_c_mkfifo, _dart_mkfifo>('mkfifo');
    return _mkfifo(
      __path,
      __mode,
    );
  }

  _dart_mkfifo _mkfifo;

  int mkfifoat(
    int __fd,
    ffi.Pointer<ffi.Int8> __path,
    int __mode,
  ) {
    _mkfifoat ??=
        _dylib.lookupFunction<_c_mkfifoat, _dart_mkfifoat>('mkfifoat');
    return _mkfifoat(
      __fd,
      __path,
      __mode,
    );
  }

  _dart_mkfifoat _mkfifoat;

  int utimensat(
    int __fd,
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<timespec> __times,
    int __flags,
  ) {
    _utimensat ??=
        _dylib.lookupFunction<_c_utimensat, _dart_utimensat>('utimensat');
    return _utimensat(
      __fd,
      __path,
      __times,
      __flags,
    );
  }

  _dart_utimensat _utimensat;

  int futimens(
    int __fd,
    ffi.Pointer<timespec> __times,
  ) {
    _futimens ??=
        _dylib.lookupFunction<_c_futimens, _dart_futimens>('futimens');
    return _futimens(
      __fd,
      __times,
    );
  }

  _dart_futimens _futimens;

  int __fxstat(
    int __ver,
    int __fildes,
    ffi.Pointer<stat> __stat_buf,
  ) {
    ___fxstat ??=
        _dylib.lookupFunction<_c___fxstat, _dart___fxstat>('__fxstat');
    return ___fxstat(
      __ver,
      __fildes,
      __stat_buf,
    );
  }

  _dart___fxstat ___fxstat;

  int __xstat(
    int __ver,
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<stat> __stat_buf,
  ) {
    ___xstat ??= _dylib.lookupFunction<_c___xstat, _dart___xstat>('__xstat');
    return ___xstat(
      __ver,
      __filename,
      __stat_buf,
    );
  }

  _dart___xstat ___xstat;

  int __lxstat(
    int __ver,
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<stat> __stat_buf,
  ) {
    ___lxstat ??=
        _dylib.lookupFunction<_c___lxstat, _dart___lxstat>('__lxstat');
    return ___lxstat(
      __ver,
      __filename,
      __stat_buf,
    );
  }

  _dart___lxstat ___lxstat;

  int __fxstatat(
    int __ver,
    int __fildes,
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<stat> __stat_buf,
    int __flag,
  ) {
    ___fxstatat ??=
        _dylib.lookupFunction<_c___fxstatat, _dart___fxstatat>('__fxstatat');
    return ___fxstatat(
      __ver,
      __fildes,
      __filename,
      __stat_buf,
      __flag,
    );
  }

  _dart___fxstatat ___fxstatat;

  int __xmknod(
    int __ver,
    ffi.Pointer<ffi.Int8> __path,
    int __mode,
    ffi.Pointer<ffi.Uint64> __dev,
  ) {
    ___xmknod ??=
        _dylib.lookupFunction<_c___xmknod, _dart___xmknod>('__xmknod');
    return ___xmknod(
      __ver,
      __path,
      __mode,
      __dev,
    );
  }

  _dart___xmknod ___xmknod;

  int __xmknodat(
    int __ver,
    int __fd,
    ffi.Pointer<ffi.Int8> __path,
    int __mode,
    ffi.Pointer<ffi.Uint64> __dev,
  ) {
    ___xmknodat ??=
        _dylib.lookupFunction<_c___xmknodat, _dart___xmknodat>('__xmknodat');
    return ___xmknodat(
      __ver,
      __fd,
      __path,
      __mode,
      __dev,
    );
  }

  _dart___xmknodat ___xmknodat;

  int _Xmbstowcs(
    ffi.Pointer<ffi.Int32> wstr,
    ffi.Pointer<ffi.Int8> str,
    int len,
  ) {
    __Xmbstowcs ??=
        _dylib.lookupFunction<_c__Xmbstowcs, _dart__Xmbstowcs>('_Xmbstowcs');
    return __Xmbstowcs(
      wstr,
      str,
      len,
    );
  }

  _dart__Xmbstowcs __Xmbstowcs;

  int _Xmbstoutf8(
    ffi.Pointer<ffi.Int8> ustr,
    ffi.Pointer<ffi.Int8> str,
    int len,
  ) {
    __Xmbstoutf8 ??=
        _dylib.lookupFunction<_c__Xmbstoutf8, _dart__Xmbstoutf8>('_Xmbstoutf8');
    return __Xmbstoutf8(
      ustr,
      str,
      len,
    );
  }

  _dart__Xmbstoutf8 __Xmbstoutf8;

  void parsestringfile(
    ffi.Pointer<_IO_FILE> fp,
    int im,
    int depth,
  ) {
    _parsestringfile ??=
        _dylib.lookupFunction<_c_parsestringfile, _dart_parsestringfile>(
            'parsestringfile');
    return _parsestringfile(
      fp,
      im,
      depth,
    );
  }

  _dart_parsestringfile _parsestringfile;

  int nextch(
    ffi.Pointer<_IO_FILE> fp,
    ffi.Pointer<ffi.Int32> lastch,
  ) {
    _nextch ??= _dylib.lookupFunction<_c_nextch, _dart_nextch>('nextch');
    return _nextch(
      fp,
      lastch,
    );
  }

  _dart_nextch _nextch;

  void putbackch(
    int c,
    ffi.Pointer<ffi.Int32> lastch,
  ) {
    _putbackch ??=
        _dylib.lookupFunction<_c_putbackch, _dart_putbackch>('putbackch');
    return _putbackch(
      c,
      lastch,
    );
  }

  _dart_putbackch _putbackch;

  int nexttoken(
    ffi.Pointer<_IO_FILE> fp,
    ffi.Pointer<ffi.Int8> tokenbuf,
    ffi.Pointer<ffi.Int32> lastch,
  ) {
    _nexttoken ??=
        _dylib.lookupFunction<_c_nexttoken, _dart_nexttoken>('nexttoken');
    return _nexttoken(
      fp,
      tokenbuf,
      lastch,
    );
  }

  _dart_nexttoken _nexttoken;

  int modmask(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _modmask ??= _dylib.lookupFunction<_c_modmask, _dart_modmask>('modmask');
    return _modmask(
      name,
    );
  }

  _dart_modmask _modmask;

  ffi.Pointer<ffi.Int8> TransFileName(
    int im,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _TransFileName ??= _dylib
        .lookupFunction<_c_TransFileName, _dart_TransFileName>('TransFileName');
    return _TransFileName(
      im,
      name,
    );
  }

  _dart_TransFileName _TransFileName;

  int get_mb_string(
    int im,
    ffi.Pointer<ffi.Int8> buf,
    int ks,
  ) {
    _get_mb_string ??= _dylib
        .lookupFunction<_c_get_mb_string, _dart_get_mb_string>('get_mb_string');
    return _get_mb_string(
      im,
      buf,
      ks,
    );
  }

  _dart_get_mb_string _get_mb_string;

  int parseline(
    ffi.Pointer<_IO_FILE> fp,
    int im,
    ffi.Pointer<ffi.Int8> tokenbuf,
    int depth,
  ) {
    _parseline ??=
        _dylib.lookupFunction<_c_parseline, _dart_parseline>('parseline');
    return _parseline(
      fp,
      im,
      tokenbuf,
      depth,
    );
  }

  _dart_parseline _parseline;

  void _XimParseStringFile(
    ffi.Pointer<_IO_FILE> fp,
    int im,
  ) {
    __XimParseStringFile ??= _dylib.lookupFunction<_c__XimParseStringFile,
        _dart__XimParseStringFile>('_XimParseStringFile');
    return __XimParseStringFile(
      fp,
      im,
    );
  }

  _dart__XimParseStringFile __XimParseStringFile;

  ffi.Pointer<ffi.Int8> _XimLocalSetICValues(
    ffi.Pointer<_XIC> xic,
    ffi.Pointer<ffi.Int32> values,
  ) {
    __XimLocalSetICValues ??= _dylib.lookupFunction<_c__XimLocalSetICValues,
        _dart__XimLocalSetICValues>('_XimLocalSetICValues');
    return __XimLocalSetICValues(
      xic,
      values,
    );
  }

  _dart__XimLocalSetICValues __XimLocalSetICValues;

  int _XimDefaultStyles(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultStyles ??=
        _dylib.lookupFunction<_c__XimDefaultStyles, _dart__XimDefaultStyles>(
            '_XimDefaultStyles');
    return __XimDefaultStyles(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultStyles __XimDefaultStyles;

  int _XimDefaultIMValues(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultIMValues ??= _dylib.lookupFunction<_c__XimDefaultIMValues,
        _dart__XimDefaultIMValues>('_XimDefaultIMValues');
    return __XimDefaultIMValues(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultIMValues __XimDefaultIMValues;

  int _XimDefaultICValues(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultICValues ??= _dylib.lookupFunction<_c__XimDefaultICValues,
        _dart__XimDefaultICValues>('_XimDefaultICValues');
    return __XimDefaultICValues(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultICValues __XimDefaultICValues;

  int _XimDefaultVisiblePos(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultVisiblePos ??= _dylib.lookupFunction<_c__XimDefaultVisiblePos,
        _dart__XimDefaultVisiblePos>('_XimDefaultVisiblePos');
    return __XimDefaultVisiblePos(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultVisiblePos __XimDefaultVisiblePos;

  int _XimDefaultFocusWindow(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultFocusWindow ??= _dylib.lookupFunction<_c__XimDefaultFocusWindow,
        _dart__XimDefaultFocusWindow>('_XimDefaultFocusWindow');
    return __XimDefaultFocusWindow(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultFocusWindow __XimDefaultFocusWindow;

  int _XimDefaultResName(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultResName ??=
        _dylib.lookupFunction<_c__XimDefaultResName, _dart__XimDefaultResName>(
            '_XimDefaultResName');
    return __XimDefaultResName(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultResName __XimDefaultResName;

  int _XimDefaultResClass(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultResClass ??= _dylib.lookupFunction<_c__XimDefaultResClass,
        _dart__XimDefaultResClass>('_XimDefaultResClass');
    return __XimDefaultResClass(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultResClass __XimDefaultResClass;

  int _XimDefaultDestroyCB(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultDestroyCB ??= _dylib.lookupFunction<_c__XimDefaultDestroyCB,
        _dart__XimDefaultDestroyCB>('_XimDefaultDestroyCB');
    return __XimDefaultDestroyCB(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultDestroyCB __XimDefaultDestroyCB;

  int _XimDefaultResetState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultResetState ??= _dylib.lookupFunction<_c__XimDefaultResetState,
        _dart__XimDefaultResetState>('_XimDefaultResetState');
    return __XimDefaultResetState(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultResetState __XimDefaultResetState;

  int _XimDefaultHotKeyState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultHotKeyState ??= _dylib.lookupFunction<_c__XimDefaultHotKeyState,
        _dart__XimDefaultHotKeyState>('_XimDefaultHotKeyState');
    return __XimDefaultHotKeyState(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultHotKeyState __XimDefaultHotKeyState;

  int _XimDefaultArea(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultArea ??=
        _dylib.lookupFunction<_c__XimDefaultArea, _dart__XimDefaultArea>(
            '_XimDefaultArea');
    return __XimDefaultArea(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultArea __XimDefaultArea;

  int _XimDefaultColormap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultColormap ??= _dylib.lookupFunction<_c__XimDefaultColormap,
        _dart__XimDefaultColormap>('_XimDefaultColormap');
    return __XimDefaultColormap(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultColormap __XimDefaultColormap;

  int _XimDefaultStdColormap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultStdColormap ??= _dylib.lookupFunction<_c__XimDefaultStdColormap,
        _dart__XimDefaultStdColormap>('_XimDefaultStdColormap');
    return __XimDefaultStdColormap(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultStdColormap __XimDefaultStdColormap;

  int _XimDefaultFg(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultFg ??= _dylib
        .lookupFunction<_c__XimDefaultFg, _dart__XimDefaultFg>('_XimDefaultFg');
    return __XimDefaultFg(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultFg __XimDefaultFg;

  int _XimDefaultBg(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultBg ??= _dylib
        .lookupFunction<_c__XimDefaultBg, _dart__XimDefaultBg>('_XimDefaultBg');
    return __XimDefaultBg(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultBg __XimDefaultBg;

  int _XimDefaultBgPixmap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultBgPixmap ??= _dylib.lookupFunction<_c__XimDefaultBgPixmap,
        _dart__XimDefaultBgPixmap>('_XimDefaultBgPixmap');
    return __XimDefaultBgPixmap(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultBgPixmap __XimDefaultBgPixmap;

  int _XimDefaultFontSet(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultFontSet ??=
        _dylib.lookupFunction<_c__XimDefaultFontSet, _dart__XimDefaultFontSet>(
            '_XimDefaultFontSet');
    return __XimDefaultFontSet(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultFontSet __XimDefaultFontSet;

  int _XimDefaultLineSpace(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultLineSpace ??= _dylib.lookupFunction<_c__XimDefaultLineSpace,
        _dart__XimDefaultLineSpace>('_XimDefaultLineSpace');
    return __XimDefaultLineSpace(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultLineSpace __XimDefaultLineSpace;

  int _XimDefaultCursor(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultCursor ??=
        _dylib.lookupFunction<_c__XimDefaultCursor, _dart__XimDefaultCursor>(
            '_XimDefaultCursor');
    return __XimDefaultCursor(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultCursor __XimDefaultCursor;

  int _XimDefaultPreeditState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultPreeditState ??= _dylib.lookupFunction<
        _c__XimDefaultPreeditState,
        _dart__XimDefaultPreeditState>('_XimDefaultPreeditState');
    return __XimDefaultPreeditState(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultPreeditState __XimDefaultPreeditState;

  int _XimDefaultNest(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> parm,
    int mode,
  ) {
    __XimDefaultNest ??=
        _dylib.lookupFunction<_c__XimDefaultNest, _dart__XimDefaultNest>(
            '_XimDefaultNest');
    return __XimDefaultNest(
      info,
      top,
      parm,
      mode,
    );
  }

  _dart__XimDefaultNest __XimDefaultNest;

  int _XimEncodeCallback(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeCallback ??=
        _dylib.lookupFunction<_c__XimEncodeCallback, _dart__XimEncodeCallback>(
            '_XimEncodeCallback');
    return __XimEncodeCallback(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeCallback __XimEncodeCallback;

  int _XimEncodeString(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeString ??=
        _dylib.lookupFunction<_c__XimEncodeString, _dart__XimEncodeString>(
            '_XimEncodeString');
    return __XimEncodeString(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeString __XimEncodeString;

  int _XimEncodeStyle(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeStyle ??=
        _dylib.lookupFunction<_c__XimEncodeStyle, _dart__XimEncodeStyle>(
            '_XimEncodeStyle');
    return __XimEncodeStyle(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeStyle __XimEncodeStyle;

  int _XimEncodeWindow(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeWindow ??=
        _dylib.lookupFunction<_c__XimEncodeWindow, _dart__XimEncodeWindow>(
            '_XimEncodeWindow');
    return __XimEncodeWindow(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeWindow __XimEncodeWindow;

  int _XimEncodeStringConv(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeStringConv ??= _dylib.lookupFunction<_c__XimEncodeStringConv,
        _dart__XimEncodeStringConv>('_XimEncodeStringConv');
    return __XimEncodeStringConv(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeStringConv __XimEncodeStringConv;

  int _XimEncodeResetState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeResetState ??= _dylib.lookupFunction<_c__XimEncodeResetState,
        _dart__XimEncodeResetState>('_XimEncodeResetState');
    return __XimEncodeResetState(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeResetState __XimEncodeResetState;

  int _XimEncodeHotKey(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeHotKey ??=
        _dylib.lookupFunction<_c__XimEncodeHotKey, _dart__XimEncodeHotKey>(
            '_XimEncodeHotKey');
    return __XimEncodeHotKey(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeHotKey __XimEncodeHotKey;

  int _XimEncodeHotKetState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeHotKetState ??= _dylib.lookupFunction<_c__XimEncodeHotKetState,
        _dart__XimEncodeHotKetState>('_XimEncodeHotKetState');
    return __XimEncodeHotKetState(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeHotKetState __XimEncodeHotKetState;

  int _XimEncodeRectangle(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeRectangle ??= _dylib.lookupFunction<_c__XimEncodeRectangle,
        _dart__XimEncodeRectangle>('_XimEncodeRectangle');
    return __XimEncodeRectangle(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeRectangle __XimEncodeRectangle;

  int _XimEncodeSpot(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeSpot ??=
        _dylib.lookupFunction<_c__XimEncodeSpot, _dart__XimEncodeSpot>(
            '_XimEncodeSpot');
    return __XimEncodeSpot(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeSpot __XimEncodeSpot;

  int _XimEncodeColormap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeColormap ??=
        _dylib.lookupFunction<_c__XimEncodeColormap, _dart__XimEncodeColormap>(
            '_XimEncodeColormap');
    return __XimEncodeColormap(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeColormap __XimEncodeColormap;

  int _XimEncodeStdColormap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeStdColormap ??= _dylib.lookupFunction<_c__XimEncodeStdColormap,
        _dart__XimEncodeStdColormap>('_XimEncodeStdColormap');
    return __XimEncodeStdColormap(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeStdColormap __XimEncodeStdColormap;

  int _XimEncodeLong(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeLong ??=
        _dylib.lookupFunction<_c__XimEncodeLong, _dart__XimEncodeLong>(
            '_XimEncodeLong');
    return __XimEncodeLong(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeLong __XimEncodeLong;

  int _XimEncodeBgPixmap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeBgPixmap ??=
        _dylib.lookupFunction<_c__XimEncodeBgPixmap, _dart__XimEncodeBgPixmap>(
            '_XimEncodeBgPixmap');
    return __XimEncodeBgPixmap(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeBgPixmap __XimEncodeBgPixmap;

  int _XimEncodeFontSet(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeFontSet ??=
        _dylib.lookupFunction<_c__XimEncodeFontSet, _dart__XimEncodeFontSet>(
            '_XimEncodeFontSet');
    return __XimEncodeFontSet(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeFontSet __XimEncodeFontSet;

  int _XimEncodeLineSpace(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeLineSpace ??= _dylib.lookupFunction<_c__XimEncodeLineSpace,
        _dart__XimEncodeLineSpace>('_XimEncodeLineSpace');
    return __XimEncodeLineSpace(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeLineSpace __XimEncodeLineSpace;

  int _XimEncodeCursor(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeCursor ??=
        _dylib.lookupFunction<_c__XimEncodeCursor, _dart__XimEncodeCursor>(
            '_XimEncodeCursor');
    return __XimEncodeCursor(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeCursor __XimEncodeCursor;

  int _XimEncodePreeditState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodePreeditState ??= _dylib.lookupFunction<_c__XimEncodePreeditState,
        _dart__XimEncodePreeditState>('_XimEncodePreeditState');
    return __XimEncodePreeditState(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodePreeditState __XimEncodePreeditState;

  int _XimEncodeNest(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeNest ??=
        _dylib.lookupFunction<_c__XimEncodeNest, _dart__XimEncodeNest>(
            '_XimEncodeNest');
    return __XimEncodeNest(
      info,
      top,
      val,
    );
  }

  _dart__XimEncodeNest __XimEncodeNest;

  int _XimDecodeStyles(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeStyles ??=
        _dylib.lookupFunction<_c__XimDecodeStyles, _dart__XimDecodeStyles>(
            '_XimDecodeStyles');
    return __XimDecodeStyles(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeStyles __XimDecodeStyles;

  int _XimDecodeValues(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeValues ??=
        _dylib.lookupFunction<_c__XimDecodeValues, _dart__XimDecodeValues>(
            '_XimDecodeValues');
    return __XimDecodeValues(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeValues __XimDecodeValues;

  int _XimDecodeCallback(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeCallback ??=
        _dylib.lookupFunction<_c__XimDecodeCallback, _dart__XimDecodeCallback>(
            '_XimDecodeCallback');
    return __XimDecodeCallback(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeCallback __XimDecodeCallback;

  int _XimDecodeString(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeString ??=
        _dylib.lookupFunction<_c__XimDecodeString, _dart__XimDecodeString>(
            '_XimDecodeString');
    return __XimDecodeString(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeString __XimDecodeString;

  int _XimDecodeBool(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeBool ??=
        _dylib.lookupFunction<_c__XimDecodeBool, _dart__XimDecodeBool>(
            '_XimDecodeBool');
    return __XimDecodeBool(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeBool __XimDecodeBool;

  int _XimDecodeStyle(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeStyle ??=
        _dylib.lookupFunction<_c__XimDecodeStyle, _dart__XimDecodeStyle>(
            '_XimDecodeStyle');
    return __XimDecodeStyle(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeStyle __XimDecodeStyle;

  int _XimDecodeWindow(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeWindow ??=
        _dylib.lookupFunction<_c__XimDecodeWindow, _dart__XimDecodeWindow>(
            '_XimDecodeWindow');
    return __XimDecodeWindow(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeWindow __XimDecodeWindow;

  int _XimDecodeStringConv(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeStringConv ??= _dylib.lookupFunction<_c__XimDecodeStringConv,
        _dart__XimDecodeStringConv>('_XimDecodeStringConv');
    return __XimDecodeStringConv(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeStringConv __XimDecodeStringConv;

  int _XimDecodeResetState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeResetState ??= _dylib.lookupFunction<_c__XimDecodeResetState,
        _dart__XimDecodeResetState>('_XimDecodeResetState');
    return __XimDecodeResetState(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeResetState __XimDecodeResetState;

  int _XimDecodeHotKey(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeHotKey ??=
        _dylib.lookupFunction<_c__XimDecodeHotKey, _dart__XimDecodeHotKey>(
            '_XimDecodeHotKey');
    return __XimDecodeHotKey(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeHotKey __XimDecodeHotKey;

  int _XimDecodeHotKetState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeHotKetState ??= _dylib.lookupFunction<_c__XimDecodeHotKetState,
        _dart__XimDecodeHotKetState>('_XimDecodeHotKetState');
    return __XimDecodeHotKetState(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeHotKetState __XimDecodeHotKetState;

  int _XimDecodeRectangle(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeRectangle ??= _dylib.lookupFunction<_c__XimDecodeRectangle,
        _dart__XimDecodeRectangle>('_XimDecodeRectangle');
    return __XimDecodeRectangle(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeRectangle __XimDecodeRectangle;

  int _XimDecodeSpot(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeSpot ??=
        _dylib.lookupFunction<_c__XimDecodeSpot, _dart__XimDecodeSpot>(
            '_XimDecodeSpot');
    return __XimDecodeSpot(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeSpot __XimDecodeSpot;

  int _XimDecodeColormap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeColormap ??=
        _dylib.lookupFunction<_c__XimDecodeColormap, _dart__XimDecodeColormap>(
            '_XimDecodeColormap');
    return __XimDecodeColormap(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeColormap __XimDecodeColormap;

  int _XimDecodeStdColormap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeStdColormap ??= _dylib.lookupFunction<_c__XimDecodeStdColormap,
        _dart__XimDecodeStdColormap>('_XimDecodeStdColormap');
    return __XimDecodeStdColormap(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeStdColormap __XimDecodeStdColormap;

  int _XimDecodeLong(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeLong ??=
        _dylib.lookupFunction<_c__XimDecodeLong, _dart__XimDecodeLong>(
            '_XimDecodeLong');
    return __XimDecodeLong(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeLong __XimDecodeLong;

  int _XimDecodeBgPixmap(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeBgPixmap ??=
        _dylib.lookupFunction<_c__XimDecodeBgPixmap, _dart__XimDecodeBgPixmap>(
            '_XimDecodeBgPixmap');
    return __XimDecodeBgPixmap(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeBgPixmap __XimDecodeBgPixmap;

  int _XimDecodeFontSet(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeFontSet ??=
        _dylib.lookupFunction<_c__XimDecodeFontSet, _dart__XimDecodeFontSet>(
            '_XimDecodeFontSet');
    return __XimDecodeFontSet(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeFontSet __XimDecodeFontSet;

  int _XimDecodeLineSpace(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeLineSpace ??= _dylib.lookupFunction<_c__XimDecodeLineSpace,
        _dart__XimDecodeLineSpace>('_XimDecodeLineSpace');
    return __XimDecodeLineSpace(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeLineSpace __XimDecodeLineSpace;

  int _XimDecodeCursor(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeCursor ??=
        _dylib.lookupFunction<_c__XimDecodeCursor, _dart__XimDecodeCursor>(
            '_XimDecodeCursor');
    return __XimDecodeCursor(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeCursor __XimDecodeCursor;

  int _XimDecodePreeditState(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodePreeditState ??= _dylib.lookupFunction<_c__XimDecodePreeditState,
        _dart__XimDecodePreeditState>('_XimDecodePreeditState');
    return __XimDecodePreeditState(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodePreeditState __XimDecodePreeditState;

  int _XimDecodeNest(
    ffi.Pointer<XimValueOffsetInfo> info,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeNest ??=
        _dylib.lookupFunction<_c__XimDecodeNest, _dart__XimDecodeNest>(
            '_XimDecodeNest');
    return __XimDecodeNest(
      info,
      top,
      val,
    );
  }

  _dart__XimDecodeNest __XimDecodeNest;

  int _XimSetResourceList(
    ffi.Pointer<ffi.Int32> res_list,
    ffi.Pointer<ffi.Uint32> list_num,
    int resource,
    int num_resource,
    int id,
  ) {
    __XimSetResourceList ??= _dylib.lookupFunction<_c__XimSetResourceList,
        _dart__XimSetResourceList>('_XimSetResourceList');
    return __XimSetResourceList(
      res_list,
      list_num,
      resource,
      num_resource,
      id,
    );
  }

  _dart__XimSetResourceList __XimSetResourceList;

  int _XimSetIMResourceList(
    ffi.Pointer<ffi.Int32> res_list,
    ffi.Pointer<ffi.Uint32> list_num,
  ) {
    __XimSetIMResourceList ??= _dylib.lookupFunction<_c__XimSetIMResourceList,
        _dart__XimSetIMResourceList>('_XimSetIMResourceList');
    return __XimSetIMResourceList(
      res_list,
      list_num,
    );
  }

  _dart__XimSetIMResourceList __XimSetIMResourceList;

  int _XimSetICResourceList(
    ffi.Pointer<ffi.Int32> res_list,
    ffi.Pointer<ffi.Uint32> list_num,
  ) {
    __XimSetICResourceList ??= _dylib.lookupFunction<_c__XimSetICResourceList,
        _dart__XimSetICResourceList>('_XimSetICResourceList');
    return __XimSetICResourceList(
      res_list,
      list_num,
    );
  }

  _dart__XimSetICResourceList __XimSetICResourceList;

  int _XimSetInnerIMResourceList(
    ffi.Pointer<ffi.Int32> res_list,
    ffi.Pointer<ffi.Uint32> list_num,
  ) {
    __XimSetInnerIMResourceList ??= _dylib.lookupFunction<
        _c__XimSetInnerIMResourceList,
        _dart__XimSetInnerIMResourceList>('_XimSetInnerIMResourceList');
    return __XimSetInnerIMResourceList(
      res_list,
      list_num,
    );
  }

  _dart__XimSetInnerIMResourceList __XimSetInnerIMResourceList;

  int _XimSetInnerICResourceList(
    ffi.Pointer<ffi.Int32> res_list,
    ffi.Pointer<ffi.Uint32> list_num,
  ) {
    __XimSetInnerICResourceList ??= _dylib.lookupFunction<
        _c__XimSetInnerICResourceList,
        _dart__XimSetInnerICResourceList>('_XimSetInnerICResourceList');
    return __XimSetInnerICResourceList(
      res_list,
      list_num,
    );
  }

  _dart__XimSetInnerICResourceList __XimSetInnerICResourceList;

  int _XimGetResourceListRecByMode(
    int res_list,
    int list_num,
    int mode,
  ) {
    __XimGetResourceListRecByMode ??= _dylib.lookupFunction<
        _c__XimGetResourceListRecByMode,
        _dart__XimGetResourceListRecByMode>('_XimGetResourceListRecByMode');
    return __XimGetResourceListRecByMode(
      res_list,
      list_num,
      mode,
    );
  }

  _dart__XimGetResourceListRecByMode __XimGetResourceListRecByMode;

  int _XimCheckCreateICValues(
    int res_list,
    int list_num,
  ) {
    __XimCheckCreateICValues ??= _dylib.lookupFunction<
        _c__XimCheckCreateICValues,
        _dart__XimCheckCreateICValues>('_XimCheckCreateICValues');
    return __XimCheckCreateICValues(
      res_list,
      list_num,
    );
  }

  _dart__XimCheckCreateICValues __XimCheckCreateICValues;

  int _XimGetResourceListRecByQuark(
    int res_list,
    int list_num,
    int quark,
  ) {
    __XimGetResourceListRecByQuark ??= _dylib.lookupFunction<
        _c__XimGetResourceListRecByQuark,
        _dart__XimGetResourceListRecByQuark>('_XimGetResourceListRecByQuark');
    return __XimGetResourceListRecByQuark(
      res_list,
      list_num,
      quark,
    );
  }

  _dart__XimGetResourceListRecByQuark __XimGetResourceListRecByQuark;

  int _XimGetResourceListRec(
    int res_list,
    int list_num,
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XimGetResourceListRec ??= _dylib.lookupFunction<_c__XimGetResourceListRec,
        _dart__XimGetResourceListRec>('_XimGetResourceListRec');
    return __XimGetResourceListRec(
      res_list,
      list_num,
      name,
    );
  }

  _dart__XimGetResourceListRec __XimGetResourceListRec;

  ffi.Pointer<ffi.Int8> _XimSetIMValueData(
    int im,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int32> values,
    int res_list,
    int list_num,
  ) {
    __XimSetIMValueData ??=
        _dylib.lookupFunction<_c__XimSetIMValueData, _dart__XimSetIMValueData>(
            '_XimSetIMValueData');
    return __XimSetIMValueData(
      im,
      top,
      values,
      res_list,
      list_num,
    );
  }

  _dart__XimSetIMValueData __XimSetIMValueData;

  ffi.Pointer<ffi.Int8> _XimGetIMValueData(
    int im,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int32> values,
    int res_list,
    int list_num,
  ) {
    __XimGetIMValueData ??=
        _dylib.lookupFunction<_c__XimGetIMValueData, _dart__XimGetIMValueData>(
            '_XimGetIMValueData');
    return __XimGetIMValueData(
      im,
      top,
      values,
      res_list,
      list_num,
    );
  }

  _dart__XimGetIMValueData __XimGetIMValueData;

  void _XimSetIMMode(
    int res_list,
    int list_num,
  ) {
    __XimSetIMMode ??= _dylib
        .lookupFunction<_c__XimSetIMMode, _dart__XimSetIMMode>('_XimSetIMMode');
    return __XimSetIMMode(
      res_list,
      list_num,
    );
  }

  _dart__XimSetIMMode __XimSetIMMode;

  int _XimCheckSetIMDefaultsMode(
    int res,
  ) {
    __XimCheckSetIMDefaultsMode ??= _dylib.lookupFunction<
        _c__XimCheckSetIMDefaultsMode,
        _dart__XimCheckSetIMDefaultsMode>('_XimCheckSetIMDefaultsMode');
    return __XimCheckSetIMDefaultsMode(
      res,
    );
  }

  _dart__XimCheckSetIMDefaultsMode __XimCheckSetIMDefaultsMode;

  int _XimCheckSetIMValuesMode(
    int res,
  ) {
    __XimCheckSetIMValuesMode ??= _dylib.lookupFunction<
        _c__XimCheckSetIMValuesMode,
        _dart__XimCheckSetIMValuesMode>('_XimCheckSetIMValuesMode');
    return __XimCheckSetIMValuesMode(
      res,
    );
  }

  _dart__XimCheckSetIMValuesMode __XimCheckSetIMValuesMode;

  int _XimCheckGetIMValuesMode(
    int res,
  ) {
    __XimCheckGetIMValuesMode ??= _dylib.lookupFunction<
        _c__XimCheckGetIMValuesMode,
        _dart__XimCheckGetIMValuesMode>('_XimCheckGetIMValuesMode');
    return __XimCheckGetIMValuesMode(
      res,
    );
  }

  _dart__XimCheckGetIMValuesMode __XimCheckGetIMValuesMode;

  int _XimCheckIMMode(
    int res,
    int mode,
  ) {
    __XimCheckIMMode ??=
        _dylib.lookupFunction<_c__XimCheckIMMode, _dart__XimCheckIMMode>(
            '_XimCheckIMMode');
    return __XimCheckIMMode(
      res,
      mode,
    );
  }

  _dart__XimCheckIMMode __XimCheckIMMode;

  void _XimSetICMode(
    int res_list,
    int list_num,
    int style,
  ) {
    __XimSetICMode ??= _dylib
        .lookupFunction<_c__XimSetICMode, _dart__XimSetICMode>('_XimSetICMode');
    return __XimSetICMode(
      res_list,
      list_num,
      style,
    );
  }

  _dart__XimSetICMode __XimSetICMode;

  int _XimCheckSetICDefaultsMode(
    int res,
    int mode,
  ) {
    __XimCheckSetICDefaultsMode ??= _dylib.lookupFunction<
        _c__XimCheckSetICDefaultsMode,
        _dart__XimCheckSetICDefaultsMode>('_XimCheckSetICDefaultsMode');
    return __XimCheckSetICDefaultsMode(
      res,
      mode,
    );
  }

  _dart__XimCheckSetICDefaultsMode __XimCheckSetICDefaultsMode;

  int _XimCheckCreateICMode(
    int res,
    int mode,
  ) {
    __XimCheckCreateICMode ??= _dylib.lookupFunction<_c__XimCheckCreateICMode,
        _dart__XimCheckCreateICMode>('_XimCheckCreateICMode');
    return __XimCheckCreateICMode(
      res,
      mode,
    );
  }

  _dart__XimCheckCreateICMode __XimCheckCreateICMode;

  int _XimCheckSetICValuesMode(
    int res,
    int mode,
  ) {
    __XimCheckSetICValuesMode ??= _dylib.lookupFunction<
        _c__XimCheckSetICValuesMode,
        _dart__XimCheckSetICValuesMode>('_XimCheckSetICValuesMode');
    return __XimCheckSetICValuesMode(
      res,
      mode,
    );
  }

  _dart__XimCheckSetICValuesMode __XimCheckSetICValuesMode;

  int _XimCheckGetICValuesMode(
    int res,
    int mode,
  ) {
    __XimCheckGetICValuesMode ??= _dylib.lookupFunction<
        _c__XimCheckGetICValuesMode,
        _dart__XimCheckGetICValuesMode>('_XimCheckGetICValuesMode');
    return __XimCheckGetICValuesMode(
      res,
      mode,
    );
  }

  _dart__XimCheckGetICValuesMode __XimCheckGetICValuesMode;

  int _XimCheckICMode(
    int res,
    int mode,
  ) {
    __XimCheckICMode ??=
        _dylib.lookupFunction<_c__XimCheckICMode, _dart__XimCheckICMode>(
            '_XimCheckICMode');
    return __XimCheckICMode(
      res,
      mode,
    );
  }

  _dart__XimCheckICMode __XimCheckICMode;

  int _XimSetLocalIMDefaults(
    int im,
    ffi.Pointer<ffi.Int8> top,
    int res_list,
    int list_num,
  ) {
    __XimSetLocalIMDefaults ??= _dylib.lookupFunction<_c__XimSetLocalIMDefaults,
        _dart__XimSetLocalIMDefaults>('_XimSetLocalIMDefaults');
    return __XimSetLocalIMDefaults(
      im,
      top,
      res_list,
      list_num,
    );
  }

  _dart__XimSetLocalIMDefaults __XimSetLocalIMDefaults;

  int _XimSetICDefaults(
    int ic,
    ffi.Pointer<ffi.Int8> top,
    int mode,
    int res_list,
    int list_num,
  ) {
    __XimSetICDefaults ??=
        _dylib.lookupFunction<_c__XimSetICDefaults, _dart__XimSetICDefaults>(
            '_XimSetICDefaults');
    return __XimSetICDefaults(
      ic,
      top,
      mode,
      res_list,
      list_num,
    );
  }

  _dart__XimSetICDefaults __XimSetICDefaults;

  int _XimEncodeAttr(
    ffi.Pointer<XimValueOffsetInfo> info,
    int num,
    int res,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeAttr ??=
        _dylib.lookupFunction<_c__XimEncodeAttr, _dart__XimEncodeAttr>(
            '_XimEncodeAttr');
    return __XimEncodeAttr(
      info,
      num,
      res,
      top,
      val,
    );
  }

  _dart__XimEncodeAttr __XimEncodeAttr;

  int _XimEncodeLocalIMAttr(
    int res,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeLocalIMAttr ??= _dylib.lookupFunction<_c__XimEncodeLocalIMAttr,
        _dart__XimEncodeLocalIMAttr>('_XimEncodeLocalIMAttr');
    return __XimEncodeLocalIMAttr(
      res,
      top,
      val,
    );
  }

  _dart__XimEncodeLocalIMAttr __XimEncodeLocalIMAttr;

  int _XimEncodeLocalICAttr(
    int ic,
    int res,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int32> arg,
    int mode,
  ) {
    __XimEncodeLocalICAttr ??= _dylib.lookupFunction<_c__XimEncodeLocalICAttr,
        _dart__XimEncodeLocalICAttr>('_XimEncodeLocalICAttr');
    return __XimEncodeLocalICAttr(
      ic,
      res,
      top,
      arg,
      mode,
    );
  }

  _dart__XimEncodeLocalICAttr __XimEncodeLocalICAttr;

  int _XimEncodeLocalTopValue(
    int ic,
    int res,
    ffi.Pointer<ffi.Int8> val,
    int flag,
  ) {
    __XimEncodeLocalTopValue ??= _dylib.lookupFunction<
        _c__XimEncodeLocalTopValue,
        _dart__XimEncodeLocalTopValue>('_XimEncodeLocalTopValue');
    return __XimEncodeLocalTopValue(
      ic,
      res,
      val,
      flag,
    );
  }

  _dart__XimEncodeLocalTopValue __XimEncodeLocalTopValue;

  int _XimEncodeLocalPreeditValue(
    int ic,
    int res,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeLocalPreeditValue ??= _dylib.lookupFunction<
        _c__XimEncodeLocalPreeditValue,
        _dart__XimEncodeLocalPreeditValue>('_XimEncodeLocalPreeditValue');
    return __XimEncodeLocalPreeditValue(
      ic,
      res,
      val,
    );
  }

  _dart__XimEncodeLocalPreeditValue __XimEncodeLocalPreeditValue;

  int _XimEncodeLocalStatusValue(
    int ic,
    int res,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimEncodeLocalStatusValue ??= _dylib.lookupFunction<
        _c__XimEncodeLocalStatusValue,
        _dart__XimEncodeLocalStatusValue>('_XimEncodeLocalStatusValue');
    return __XimEncodeLocalStatusValue(
      ic,
      res,
      val,
    );
  }

  _dart__XimEncodeLocalStatusValue __XimEncodeLocalStatusValue;

  ffi.Pointer<ffi.Int8> _XimSetICValueData(
    int ic,
    ffi.Pointer<ffi.Int8> top,
    int res_list,
    int list_num,
    ffi.Pointer<ffi.Int32> values,
    int mode,
    int flag,
  ) {
    __XimSetICValueData ??=
        _dylib.lookupFunction<_c__XimSetICValueData, _dart__XimSetICValueData>(
            '_XimSetICValueData');
    return __XimSetICValueData(
      ic,
      top,
      res_list,
      list_num,
      values,
      mode,
      flag,
    );
  }

  _dart__XimSetICValueData __XimSetICValueData;

  int _XimCheckInputStyle(
    ffi.Pointer<XIMStyles> styles,
    int style,
  ) {
    __XimCheckInputStyle ??= _dylib.lookupFunction<_c__XimCheckInputStyle,
        _dart__XimCheckInputStyle>('_XimCheckInputStyle');
    return __XimCheckInputStyle(
      styles,
      style,
    );
  }

  _dart__XimCheckInputStyle __XimCheckInputStyle;

  int _XimCheckLocalInputStyle(
    int ic,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int32> values,
    ffi.Pointer<XIMStyles> styles,
    int res_list,
    int list_num,
  ) {
    __XimCheckLocalInputStyle ??= _dylib.lookupFunction<
        _c__XimCheckLocalInputStyle,
        _dart__XimCheckLocalInputStyle>('_XimCheckLocalInputStyle');
    return __XimCheckLocalInputStyle(
      ic,
      top,
      values,
      styles,
      res_list,
      list_num,
    );
  }

  _dart__XimCheckLocalInputStyle __XimCheckLocalInputStyle;

  int _XimDecodeAttr(
    ffi.Pointer<XimValueOffsetInfo> info,
    int num,
    int res,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeAttr ??=
        _dylib.lookupFunction<_c__XimDecodeAttr, _dart__XimDecodeAttr>(
            '_XimDecodeAttr');
    return __XimDecodeAttr(
      info,
      num,
      res,
      top,
      val,
    );
  }

  _dart__XimDecodeAttr __XimDecodeAttr;

  int _XimDecodeLocalIMAttr(
    int res,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
  ) {
    __XimDecodeLocalIMAttr ??= _dylib.lookupFunction<_c__XimDecodeLocalIMAttr,
        _dart__XimDecodeLocalIMAttr>('_XimDecodeLocalIMAttr');
    return __XimDecodeLocalIMAttr(
      res,
      top,
      val,
    );
  }

  _dart__XimDecodeLocalIMAttr __XimDecodeLocalIMAttr;

  int _XimDecodeLocalICAttr(
    int res,
    ffi.Pointer<ffi.Int8> top,
    ffi.Pointer<ffi.Int8> val,
    int mode,
  ) {
    __XimDecodeLocalICAttr ??= _dylib.lookupFunction<_c__XimDecodeLocalICAttr,
        _dart__XimDecodeLocalICAttr>('_XimDecodeLocalICAttr');
    return __XimDecodeLocalICAttr(
      res,
      top,
      val,
      mode,
    );
  }

  _dart__XimDecodeLocalICAttr __XimDecodeLocalICAttr;

  ffi.Pointer<ffi.Int8> _XimGetICValueData(
    int ic,
    ffi.Pointer<ffi.Int8> top,
    int res_list,
    int list_num,
    ffi.Pointer<ffi.Int32> values,
    int mode,
  ) {
    __XimGetICValueData ??=
        _dylib.lookupFunction<_c__XimGetICValueData, _dart__XimGetICValueData>(
            '_XimGetICValueData');
    return __XimGetICValueData(
      ic,
      top,
      res_list,
      list_num,
      values,
      mode,
    );
  }

  _dart__XimGetICValueData __XimGetICValueData;

  void _XimGetCurrentIMValues(
    int im,
    ffi.Pointer<ffi.Int32> im_values,
  ) {
    __XimGetCurrentIMValues ??= _dylib.lookupFunction<_c__XimGetCurrentIMValues,
        _dart__XimGetCurrentIMValues>('_XimGetCurrentIMValues');
    return __XimGetCurrentIMValues(
      im,
      im_values,
    );
  }

  _dart__XimGetCurrentIMValues __XimGetCurrentIMValues;

  void _XimSetCurrentIMValues(
    int im,
    ffi.Pointer<ffi.Int32> im_values,
  ) {
    __XimSetCurrentIMValues ??= _dylib.lookupFunction<_c__XimSetCurrentIMValues,
        _dart__XimSetCurrentIMValues>('_XimSetCurrentIMValues');
    return __XimSetCurrentIMValues(
      im,
      im_values,
    );
  }

  _dart__XimSetCurrentIMValues __XimSetCurrentIMValues;

  void _XimGetCurrentICValues(
    int ic,
    ffi.Pointer<ffi.Int32> ic_values,
  ) {
    __XimGetCurrentICValues ??= _dylib.lookupFunction<_c__XimGetCurrentICValues,
        _dart__XimGetCurrentICValues>('_XimGetCurrentICValues');
    return __XimGetCurrentICValues(
      ic,
      ic_values,
    );
  }

  _dart__XimGetCurrentICValues __XimGetCurrentICValues;

  void _XimSetCurrentICValues(
    int ic,
    ffi.Pointer<ffi.Int32> ic_values,
  ) {
    __XimSetCurrentICValues ??= _dylib.lookupFunction<_c__XimSetCurrentICValues,
        _dart__XimSetCurrentICValues>('_XimSetCurrentICValues');
    return __XimSetCurrentICValues(
      ic,
      ic_values,
    );
  }

  _dart__XimSetCurrentICValues __XimSetCurrentICValues;

  void _XimInitialIMOffsetInfo() {
    __XimInitialIMOffsetInfo ??= _dylib.lookupFunction<
        _c__XimInitialIMOffsetInfo,
        _dart__XimInitialIMOffsetInfo>('_XimInitialIMOffsetInfo');
    return __XimInitialIMOffsetInfo();
  }

  _dart__XimInitialIMOffsetInfo __XimInitialIMOffsetInfo;

  void _XimInitialICOffsetInfo() {
    __XimInitialICOffsetInfo ??= _dylib.lookupFunction<
        _c__XimInitialICOffsetInfo,
        _dart__XimInitialICOffsetInfo>('_XimInitialICOffsetInfo');
    return __XimInitialICOffsetInfo();
  }

  _dart__XimInitialICOffsetInfo __XimInitialICOffsetInfo;

  void _XimInitialIMMode() {
    __XimInitialIMMode ??=
        _dylib.lookupFunction<_c__XimInitialIMMode, _dart__XimInitialIMMode>(
            '_XimInitialIMMode');
    return __XimInitialIMMode();
  }

  _dart__XimInitialIMMode __XimInitialIMMode;

  void _XimInitialICMode() {
    __XimInitialICMode ??=
        _dylib.lookupFunction<_c__XimInitialICMode, _dart__XimInitialICMode>(
            '_XimInitialICMode');
    return __XimInitialICMode();
  }

  _dart__XimInitialICMode __XimInitialICMode;

  void _XimInitialResourceInfo() {
    __XimInitialResourceInfo ??= _dylib.lookupFunction<
        _c__XimInitialResourceInfo,
        _dart__XimInitialResourceInfo>('_XimInitialResourceInfo');
    return __XimInitialResourceInfo();
  }

  _dart__XimInitialResourceInfo __XimInitialResourceInfo;

  int _XimGetNestedListSeparator(
    int res_list,
    int res_num,
  ) {
    __XimGetNestedListSeparator ??= _dylib.lookupFunction<
        _c__XimGetNestedListSeparator,
        _dart__XimGetNestedListSeparator>('_XimGetNestedListSeparator');
    return __XimGetNestedListSeparator(
      res_list,
      res_num,
    );
  }

  _dart__XimGetNestedListSeparator __XimGetNestedListSeparator;

  int _XimCheckInnerIMAttributes(
    int im,
    ffi.Pointer<ffi.Int32> arg,
    int mode,
  ) {
    __XimCheckInnerIMAttributes ??= _dylib.lookupFunction<
        _c__XimCheckInnerIMAttributes,
        _dart__XimCheckInnerIMAttributes>('_XimCheckInnerIMAttributes');
    return __XimCheckInnerIMAttributes(
      im,
      arg,
      mode,
    );
  }

  _dart__XimCheckInnerIMAttributes __XimCheckInnerIMAttributes;

  ffi.Pointer<ffi.Int8> _XimMakeIMAttrIDList(
    int im,
    int res_list,
    int res_num,
    ffi.Pointer<ffi.Int32> arg,
    ffi.Pointer<ffi.Int32> buf,
    ffi.Pointer<ffi.Int32> len,
    int mode,
  ) {
    __XimMakeIMAttrIDList ??= _dylib.lookupFunction<_c__XimMakeIMAttrIDList,
        _dart__XimMakeIMAttrIDList>('_XimMakeIMAttrIDList');
    return __XimMakeIMAttrIDList(
      im,
      res_list,
      res_num,
      arg,
      buf,
      len,
      mode,
    );
  }

  _dart__XimMakeIMAttrIDList __XimMakeIMAttrIDList;

  int _XimCheckInnerICAttributes(
    int ic,
    ffi.Pointer<ffi.Int32> arg,
    int mode,
  ) {
    __XimCheckInnerICAttributes ??= _dylib.lookupFunction<
        _c__XimCheckInnerICAttributes,
        _dart__XimCheckInnerICAttributes>('_XimCheckInnerICAttributes');
    return __XimCheckInnerICAttributes(
      ic,
      arg,
      mode,
    );
  }

  _dart__XimCheckInnerICAttributes __XimCheckInnerICAttributes;

  ffi.Pointer<ffi.Int8> _XimMakeICAttrIDList(
    int ic,
    int res_list,
    int res_num,
    ffi.Pointer<ffi.Int32> arg,
    ffi.Pointer<ffi.Int32> buf,
    ffi.Pointer<ffi.Int32> len,
    int mode,
  ) {
    __XimMakeICAttrIDList ??= _dylib.lookupFunction<_c__XimMakeICAttrIDList,
        _dart__XimMakeICAttrIDList>('_XimMakeICAttrIDList');
    return __XimMakeICAttrIDList(
      ic,
      res_list,
      res_num,
      arg,
      buf,
      len,
      mode,
    );
  }

  _dart__XimMakeICAttrIDList __XimMakeICAttrIDList;

  int _XimAttributeToValue(
    int ic,
    int res,
    ffi.Pointer<ffi.Int32> data,
    int data_len,
    int value,
    int mode,
  ) {
    __XimAttributeToValue ??= _dylib.lookupFunction<_c__XimAttributeToValue,
        _dart__XimAttributeToValue>('_XimAttributeToValue');
    return __XimAttributeToValue(
      ic,
      res,
      data,
      data_len,
      value,
      mode,
    );
  }

  _dart__XimAttributeToValue __XimAttributeToValue;

  int _XimDecodeInnerIMATTRIBUTE(
    int im,
    ffi.Pointer<ffi.Int32> arg,
  ) {
    __XimDecodeInnerIMATTRIBUTE ??= _dylib.lookupFunction<
        _c__XimDecodeInnerIMATTRIBUTE,
        _dart__XimDecodeInnerIMATTRIBUTE>('_XimDecodeInnerIMATTRIBUTE');
    return __XimDecodeInnerIMATTRIBUTE(
      im,
      arg,
    );
  }

  _dart__XimDecodeInnerIMATTRIBUTE __XimDecodeInnerIMATTRIBUTE;

  ffi.Pointer<ffi.Int8> _XimDecodeIMATTRIBUTE(
    int im,
    int res_list,
    int res_num,
    ffi.Pointer<ffi.Int32> data,
    int data_len,
    ffi.Pointer<ffi.Int32> arg,
    int mode,
  ) {
    __XimDecodeIMATTRIBUTE ??= _dylib.lookupFunction<_c__XimDecodeIMATTRIBUTE,
        _dart__XimDecodeIMATTRIBUTE>('_XimDecodeIMATTRIBUTE');
    return __XimDecodeIMATTRIBUTE(
      im,
      res_list,
      res_num,
      data,
      data_len,
      arg,
      mode,
    );
  }

  _dart__XimDecodeIMATTRIBUTE __XimDecodeIMATTRIBUTE;

  int _XimDecodeInnerICATTRIBUTE(
    int ic,
    ffi.Pointer<ffi.Int32> arg,
    int mode,
  ) {
    __XimDecodeInnerICATTRIBUTE ??= _dylib.lookupFunction<
        _c__XimDecodeInnerICATTRIBUTE,
        _dart__XimDecodeInnerICATTRIBUTE>('_XimDecodeInnerICATTRIBUTE');
    return __XimDecodeInnerICATTRIBUTE(
      ic,
      arg,
      mode,
    );
  }

  _dart__XimDecodeInnerICATTRIBUTE __XimDecodeInnerICATTRIBUTE;

  ffi.Pointer<ffi.Int8> _XimDecodeICATTRIBUTE(
    int ic,
    int res_list,
    int res_num,
    ffi.Pointer<ffi.Int32> data,
    int data_len,
    ffi.Pointer<ffi.Int32> arg,
    int mode,
  ) {
    __XimDecodeICATTRIBUTE ??= _dylib.lookupFunction<_c__XimDecodeICATTRIBUTE,
        _dart__XimDecodeICATTRIBUTE>('_XimDecodeICATTRIBUTE');
    return __XimDecodeICATTRIBUTE(
      ic,
      res_list,
      res_num,
      data,
      data_len,
      arg,
      mode,
    );
  }

  _dart__XimDecodeICATTRIBUTE __XimDecodeICATTRIBUTE;

  int _XimValueToAttribute(
    int res,
    int buf,
    int buf_size,
    int value,
    ffi.Pointer<ffi.Int32> len,
    int mode,
    int param,
  ) {
    __XimValueToAttribute ??= _dylib.lookupFunction<_c__XimValueToAttribute,
        _dart__XimValueToAttribute>('_XimValueToAttribute');
    return __XimValueToAttribute(
      res,
      buf,
      buf_size,
      value,
      len,
      mode,
      param,
    );
  }

  _dart__XimValueToAttribute __XimValueToAttribute;

  int _XimSetInnerIMAttributes(
    int im,
    int top,
    ffi.Pointer<ffi.Int32> arg,
    int mode,
  ) {
    __XimSetInnerIMAttributes ??= _dylib.lookupFunction<
        _c__XimSetInnerIMAttributes,
        _dart__XimSetInnerIMAttributes>('_XimSetInnerIMAttributes');
    return __XimSetInnerIMAttributes(
      im,
      top,
      arg,
      mode,
    );
  }

  _dart__XimSetInnerIMAttributes __XimSetInnerIMAttributes;

  ffi.Pointer<ffi.Int8> _XimEncodeIMATTRIBUTE(
    int im,
    int res_list,
    int res_num,
    ffi.Pointer<ffi.Int32> arg,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg_ret,
    ffi.Pointer<ffi.Int8> buf,
    int size,
    ffi.Pointer<ffi.Int32> ret_len,
    int top,
    int mode,
  ) {
    __XimEncodeIMATTRIBUTE ??= _dylib.lookupFunction<_c__XimEncodeIMATTRIBUTE,
        _dart__XimEncodeIMATTRIBUTE>('_XimEncodeIMATTRIBUTE');
    return __XimEncodeIMATTRIBUTE(
      im,
      res_list,
      res_num,
      arg,
      arg_ret,
      buf,
      size,
      ret_len,
      top,
      mode,
    );
  }

  _dart__XimEncodeIMATTRIBUTE __XimEncodeIMATTRIBUTE;

  int _XimEncodeTopValue(
    int ic,
    int res,
    ffi.Pointer<ffi.Int32> p,
  ) {
    __XimEncodeTopValue ??=
        _dylib.lookupFunction<_c__XimEncodeTopValue, _dart__XimEncodeTopValue>(
            '_XimEncodeTopValue');
    return __XimEncodeTopValue(
      ic,
      res,
      p,
    );
  }

  _dart__XimEncodeTopValue __XimEncodeTopValue;

  int _XimEncodePreeditValue(
    int ic,
    int res,
    ffi.Pointer<ffi.Int32> p,
  ) {
    __XimEncodePreeditValue ??= _dylib.lookupFunction<_c__XimEncodePreeditValue,
        _dart__XimEncodePreeditValue>('_XimEncodePreeditValue');
    return __XimEncodePreeditValue(
      ic,
      res,
      p,
    );
  }

  _dart__XimEncodePreeditValue __XimEncodePreeditValue;

  int _XimEncodeStatusValue(
    int ic,
    int res,
    ffi.Pointer<ffi.Int32> p,
  ) {
    __XimEncodeStatusValue ??= _dylib.lookupFunction<_c__XimEncodeStatusValue,
        _dart__XimEncodeStatusValue>('_XimEncodeStatusValue');
    return __XimEncodeStatusValue(
      ic,
      res,
      p,
    );
  }

  _dart__XimEncodeStatusValue __XimEncodeStatusValue;

  int _XimSetInnerICAttributes(
    int ic,
    int top,
    ffi.Pointer<ffi.Int32> arg,
    int mode,
  ) {
    __XimSetInnerICAttributes ??= _dylib.lookupFunction<
        _c__XimSetInnerICAttributes,
        _dart__XimSetInnerICAttributes>('_XimSetInnerICAttributes');
    return __XimSetInnerICAttributes(
      ic,
      top,
      arg,
      mode,
    );
  }

  _dart__XimSetInnerICAttributes __XimSetInnerICAttributes;

  ffi.Pointer<ffi.Int8> _XimEncodeICATTRIBUTE(
    int ic,
    int res_list,
    int res_num,
    ffi.Pointer<ffi.Int32> arg,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg_ret,
    ffi.Pointer<ffi.Int8> buf,
    int size,
    ffi.Pointer<ffi.Int32> ret_len,
    int top,
    ffi.Pointer<ffi.Int32> flag,
    int mode,
  ) {
    __XimEncodeICATTRIBUTE ??= _dylib.lookupFunction<_c__XimEncodeICATTRIBUTE,
        _dart__XimEncodeICATTRIBUTE>('_XimEncodeICATTRIBUTE');
    return __XimEncodeICATTRIBUTE(
      ic,
      res_list,
      res_num,
      arg,
      arg_ret,
      buf,
      size,
      ret_len,
      top,
      flag,
      mode,
    );
  }

  _dart__XimEncodeICATTRIBUTE __XimEncodeICATTRIBUTE;

  int _XimCountNumberOfAttr(
    int total,
    ffi.Pointer<ffi.Int32> attr,
    ffi.Pointer<ffi.Uint32> names_len,
  ) {
    __XimCountNumberOfAttr ??= _dylib.lookupFunction<_c__XimCountNumberOfAttr,
        _dart__XimCountNumberOfAttr>('_XimCountNumberOfAttr');
    return __XimCountNumberOfAttr(
      total,
      attr,
      names_len,
    );
  }

  _dart__XimCountNumberOfAttr __XimCountNumberOfAttr;

  int _XimGetAttributeID(
    int im,
    ffi.Pointer<ffi.Int32> buf,
  ) {
    __XimGetAttributeID ??=
        _dylib.lookupFunction<_c__XimGetAttributeID, _dart__XimGetAttributeID>(
            '_XimGetAttributeID');
    return __XimGetAttributeID(
      im,
      buf,
    );
  }

  _dart__XimGetAttributeID __XimGetAttributeID;

  int THAI_chtype(
    int ch,
  ) {
    _THAI_chtype ??=
        _dylib.lookupFunction<_c_THAI_chtype, _dart_THAI_chtype>('THAI_chtype');
    return _THAI_chtype(
      ch,
    );
  }

  _dart_THAI_chtype _THAI_chtype;

  int THAI_iscomposible(
    int follow_ch,
    int lead_ch,
  ) {
    _THAI_iscomposible ??=
        _dylib.lookupFunction<_c_THAI_iscomposible, _dart_THAI_iscomposible>(
            'THAI_iscomposible');
    return _THAI_iscomposible(
      follow_ch,
      lead_ch,
    );
  }

  _dart_THAI_iscomposible _THAI_iscomposible;

  int THAI_isaccepted(
    int follow_ch,
    int lead_ch,
    int mode,
  ) {
    _THAI_isaccepted ??=
        _dylib.lookupFunction<_c_THAI_isaccepted, _dart_THAI_isaccepted>(
            'THAI_isaccepted');
    return _THAI_isaccepted(
      follow_ch,
      lead_ch,
      mode,
    );
  }

  _dart_THAI_isaccepted _THAI_isaccepted;

  int IC_RealGetPreviousChar(
    int ic,
    int pos,
  ) {
    _IC_RealGetPreviousChar ??= _dylib.lookupFunction<_c_IC_RealGetPreviousChar,
        _dart_IC_RealGetPreviousChar>('IC_RealGetPreviousChar');
    return _IC_RealGetPreviousChar(
      ic,
      pos,
    );
  }

  _dart_IC_RealGetPreviousChar _IC_RealGetPreviousChar;

  int IC_RealDeletePreviousChar(
    int ic,
  ) {
    _IC_RealDeletePreviousChar ??= _dylib.lookupFunction<
        _c_IC_RealDeletePreviousChar,
        _dart_IC_RealDeletePreviousChar>('IC_RealDeletePreviousChar');
    return _IC_RealDeletePreviousChar(
      ic,
    );
  }

  _dart_IC_RealDeletePreviousChar _IC_RealDeletePreviousChar;

  void InitIscMode(
    int ic,
  ) {
    _InitIscMode ??=
        _dylib.lookupFunction<_c_InitIscMode, _dart_InitIscMode>('InitIscMode');
    return _InitIscMode(
      ic,
    );
  }

  _dart_InitIscMode _InitIscMode;

  int ThaiFltAcceptInput(
    int ic,
    int new_char,
    int symbol,
  ) {
    _ThaiFltAcceptInput ??=
        _dylib.lookupFunction<_c_ThaiFltAcceptInput, _dart_ThaiFltAcceptInput>(
            'ThaiFltAcceptInput');
    return _ThaiFltAcceptInput(
      ic,
      new_char,
      symbol,
    );
  }

  _dart_ThaiFltAcceptInput _ThaiFltAcceptInput;

  int ThaiFltReorderInput(
    int ic,
    int previous_char,
    int new_char,
  ) {
    _ThaiFltReorderInput ??= _dylib.lookupFunction<_c_ThaiFltReorderInput,
        _dart_ThaiFltReorderInput>('ThaiFltReorderInput');
    return _ThaiFltReorderInput(
      ic,
      previous_char,
      new_char,
    );
  }

  _dart_ThaiFltReorderInput _ThaiFltReorderInput;

  int ThaiFltReplaceInput(
    int ic,
    int new_char,
    int symbol,
  ) {
    _ThaiFltReplaceInput ??= _dylib.lookupFunction<_c_ThaiFltReplaceInput,
        _dart_ThaiFltReplaceInput>('ThaiFltReplaceInput');
    return _ThaiFltReplaceInput(
      ic,
      new_char,
      symbol,
    );
  }

  _dart_ThaiFltReplaceInput _ThaiFltReplaceInput;

  int NumLockMask(
    ffi.Pointer<_XDisplay> d,
  ) {
    _NumLockMask ??=
        _dylib.lookupFunction<_c_NumLockMask, _dart_NumLockMask>('NumLockMask');
    return _NumLockMask(
      d,
    );
  }

  _dart_NumLockMask _NumLockMask;

  void _XimThaiUnSetFocus(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimThaiUnSetFocus ??=
        _dylib.lookupFunction<_c__XimThaiUnSetFocus, _dart__XimThaiUnSetFocus>(
            '_XimThaiUnSetFocus');
    return __XimThaiUnSetFocus(
      xic,
    );
  }

  _dart__XimThaiUnSetFocus __XimThaiUnSetFocus;

  void _XimThaiDestroyIC(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimThaiDestroyIC ??=
        _dylib.lookupFunction<_c__XimThaiDestroyIC, _dart__XimThaiDestroyIC>(
            '_XimThaiDestroyIC');
    return __XimThaiDestroyIC(
      xic,
    );
  }

  _dart__XimThaiDestroyIC __XimThaiDestroyIC;

  void _XimThaiSetFocus(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimThaiSetFocus ??=
        _dylib.lookupFunction<_c__XimThaiSetFocus, _dart__XimThaiSetFocus>(
            '_XimThaiSetFocus');
    return __XimThaiSetFocus(
      xic,
    );
  }

  _dart__XimThaiSetFocus __XimThaiSetFocus;

  void _XimThaiReset(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimThaiReset ??= _dylib
        .lookupFunction<_c__XimThaiReset, _dart__XimThaiReset>('_XimThaiReset');
    return __XimThaiReset(
      xic,
    );
  }

  _dart__XimThaiReset __XimThaiReset;

  ffi.Pointer<ffi.Int8> _XimThaiMbReset(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimThaiMbReset ??=
        _dylib.lookupFunction<_c__XimThaiMbReset, _dart__XimThaiMbReset>(
            '_XimThaiMbReset');
    return __XimThaiMbReset(
      xic,
    );
  }

  _dart__XimThaiMbReset __XimThaiMbReset;

  ffi.Pointer<ffi.Int32> _XimThaiWcReset(
    ffi.Pointer<_XIC> xic,
  ) {
    __XimThaiWcReset ??=
        _dylib.lookupFunction<_c__XimThaiWcReset, _dart__XimThaiWcReset>(
            '_XimThaiWcReset');
    return __XimThaiWcReset(
      xic,
    );
  }

  _dart__XimThaiWcReset __XimThaiWcReset;

  ffi.Pointer<_XIC> _XimThaiCreateIC(
    ffi.Pointer<_XIM> im,
    ffi.Pointer<ffi.Int32> values,
  ) {
    __XimThaiCreateIC ??=
        _dylib.lookupFunction<_c__XimThaiCreateIC, _dart__XimThaiCreateIC>(
            '_XimThaiCreateIC');
    return __XimThaiCreateIC(
      im,
      values,
    );
  }

  _dart__XimThaiCreateIC __XimThaiCreateIC;

  int _XimCheckIfThaiProcessing(
    int im,
  ) {
    __XimCheckIfThaiProcessing ??= _dylib.lookupFunction<
        _c__XimCheckIfThaiProcessing,
        _dart__XimCheckIfThaiProcessing>('_XimCheckIfThaiProcessing');
    return __XimCheckIfThaiProcessing(
      im,
    );
  }

  _dart__XimCheckIfThaiProcessing __XimCheckIfThaiProcessing;

  int _XimThaiOpenIM(
    int im,
  ) {
    __XimThaiOpenIM ??=
        _dylib.lookupFunction<_c__XimThaiOpenIM, _dart__XimThaiOpenIM>(
            '_XimThaiOpenIM');
    return __XimThaiOpenIM(
      im,
    );
  }

  _dart__XimThaiOpenIM __XimThaiOpenIM;

  void _XimThaiIMFree(
    int im,
  ) {
    __XimThaiIMFree ??=
        _dylib.lookupFunction<_c__XimThaiIMFree, _dart__XimThaiIMFree>(
            '_XimThaiIMFree');
    return __XimThaiIMFree(
      im,
    );
  }

  _dart__XimThaiIMFree __XimThaiIMFree;

  int _XimThaiCloseIM(
    ffi.Pointer<_XIM> xim,
  ) {
    __XimThaiCloseIM ??=
        _dylib.lookupFunction<_c__XimThaiCloseIM, _dart__XimThaiCloseIM>(
            '_XimThaiCloseIM');
    return __XimThaiCloseIM(
      xim,
    );
  }

  _dart__XimThaiCloseIM __XimThaiCloseIM;

  ffi.Pointer<cmsghdr> __cmsg_nxthdr(
    ffi.Pointer<msghdr> __mhdr,
    ffi.Pointer<cmsghdr> __cmsg,
  ) {
    ___cmsg_nxthdr ??= _dylib
        .lookupFunction<_c___cmsg_nxthdr, _dart___cmsg_nxthdr>('__cmsg_nxthdr');
    return ___cmsg_nxthdr(
      __mhdr,
      __cmsg,
    );
  }

  _dart___cmsg_nxthdr ___cmsg_nxthdr;

  int socket(
    int __domain,
    int __type,
    int __protocol,
  ) {
    _socket ??= _dylib.lookupFunction<_c_socket, _dart_socket>('socket');
    return _socket(
      __domain,
      __type,
      __protocol,
    );
  }

  _dart_socket _socket;

  int socketpair(
    int __domain,
    int __type,
    int __protocol,
    ffi.Pointer<ffi.Int32> __fds,
  ) {
    _socketpair ??=
        _dylib.lookupFunction<_c_socketpair, _dart_socketpair>('socketpair');
    return _socketpair(
      __domain,
      __type,
      __protocol,
      __fds,
    );
  }

  _dart_socketpair _socketpair;

  int bind(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    _bind ??= _dylib.lookupFunction<_c_bind, _dart_bind>('bind');
    return _bind(
      __fd,
      __addr,
      __len,
    );
  }

  _dart_bind _bind;

  int getsockname(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<ffi.Uint32> __len,
  ) {
    _getsockname ??=
        _dylib.lookupFunction<_c_getsockname, _dart_getsockname>('getsockname');
    return _getsockname(
      __fd,
      __addr,
      __len,
    );
  }

  _dart_getsockname _getsockname;

  int connect(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    int __len,
  ) {
    _connect ??= _dylib.lookupFunction<_c_connect, _dart_connect>('connect');
    return _connect(
      __fd,
      __addr,
      __len,
    );
  }

  _dart_connect _connect;

  int getpeername(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<ffi.Uint32> __len,
  ) {
    _getpeername ??=
        _dylib.lookupFunction<_c_getpeername, _dart_getpeername>('getpeername');
    return _getpeername(
      __fd,
      __addr,
      __len,
    );
  }

  _dart_getpeername _getpeername;

  int send(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    _send ??= _dylib.lookupFunction<_c_send, _dart_send>('send');
    return _send(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  _dart_send _send;

  int recv(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
  ) {
    _recv ??= _dylib.lookupFunction<_c_recv, _dart_recv>('recv');
    return _recv(
      __fd,
      __buf,
      __n,
      __flags,
    );
  }

  _dart_recv _recv;

  int sendto(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    int __addr_len,
  ) {
    _sendto ??= _dylib.lookupFunction<_c_sendto, _dart_sendto>('sendto');
    return _sendto(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  _dart_sendto _sendto;

  int recvfrom(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __flags,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<ffi.Uint32> __addr_len,
  ) {
    _recvfrom ??=
        _dylib.lookupFunction<_c_recvfrom, _dart_recvfrom>('recvfrom');
    return _recvfrom(
      __fd,
      __buf,
      __n,
      __flags,
      __addr,
      __addr_len,
    );
  }

  _dart_recvfrom _recvfrom;

  int sendmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    _sendmsg ??= _dylib.lookupFunction<_c_sendmsg, _dart_sendmsg>('sendmsg');
    return _sendmsg(
      __fd,
      __message,
      __flags,
    );
  }

  _dart_sendmsg _sendmsg;

  int recvmsg(
    int __fd,
    ffi.Pointer<msghdr> __message,
    int __flags,
  ) {
    _recvmsg ??= _dylib.lookupFunction<_c_recvmsg, _dart_recvmsg>('recvmsg');
    return _recvmsg(
      __fd,
      __message,
      __flags,
    );
  }

  _dart_recvmsg _recvmsg;

  int getsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    ffi.Pointer<ffi.Uint32> __optlen,
  ) {
    _getsockopt ??=
        _dylib.lookupFunction<_c_getsockopt, _dart_getsockopt>('getsockopt');
    return _getsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  _dart_getsockopt _getsockopt;

  int setsockopt(
    int __fd,
    int __level,
    int __optname,
    ffi.Pointer<ffi.Void> __optval,
    int __optlen,
  ) {
    _setsockopt ??=
        _dylib.lookupFunction<_c_setsockopt, _dart_setsockopt>('setsockopt');
    return _setsockopt(
      __fd,
      __level,
      __optname,
      __optval,
      __optlen,
    );
  }

  _dart_setsockopt _setsockopt;

  int listen(
    int __fd,
    int __n,
  ) {
    _listen ??= _dylib.lookupFunction<_c_listen, _dart_listen>('listen');
    return _listen(
      __fd,
      __n,
    );
  }

  _dart_listen _listen;

  int accept(
    int __fd,
    ffi.Pointer<sockaddr> __addr,
    ffi.Pointer<ffi.Uint32> __addr_len,
  ) {
    _accept ??= _dylib.lookupFunction<_c_accept, _dart_accept>('accept');
    return _accept(
      __fd,
      __addr,
      __addr_len,
    );
  }

  _dart_accept _accept;

  int shutdown(
    int __fd,
    int __how,
  ) {
    _shutdown ??=
        _dylib.lookupFunction<_c_shutdown, _dart_shutdown>('shutdown');
    return _shutdown(
      __fd,
      __how,
    );
  }

  _dart_shutdown _shutdown;

  int sockatmark(
    int __fd,
  ) {
    _sockatmark ??=
        _dylib.lookupFunction<_c_sockatmark, _dart_sockatmark>('sockatmark');
    return _sockatmark(
      __fd,
    );
  }

  _dart_sockatmark _sockatmark;

  int isfdtype(
    int __fd,
    int __fdtype,
  ) {
    _isfdtype ??=
        _dylib.lookupFunction<_c_isfdtype, _dart_isfdtype>('isfdtype');
    return _isfdtype(
      __fd,
      __fdtype,
    );
  }

  _dart_isfdtype _isfdtype;

  void _XTransFreeConnInfo(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XTransFreeConnInfo ??= _dylib.lookupFunction<_c__XTransFreeConnInfo,
        _dart__XTransFreeConnInfo>('_XTransFreeConnInfo');
    return __XTransFreeConnInfo(
      arg0,
    );
  }

  _dart__XTransFreeConnInfo __XTransFreeConnInfo;

  int _XTransSetOption(
    ffi.Pointer<_XtransConnInfo> arg0,
    int arg1,
    int arg2,
  ) {
    __XTransSetOption ??=
        _dylib.lookupFunction<_c__XTransSetOption, _dart__XTransSetOption>(
            '_XTransSetOption');
    return __XTransSetOption(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XTransSetOption __XTransSetOption;

  int _XTransBytesReadable(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    __XTransBytesReadable ??= _dylib.lookupFunction<_c__XTransBytesReadable,
        _dart__XTransBytesReadable>('_XTransBytesReadable');
    return __XTransBytesReadable(
      arg0,
      arg1,
    );
  }

  _dart__XTransBytesReadable __XTransBytesReadable;

  int _XTransRead(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XTransRead ??=
        _dylib.lookupFunction<_c__XTransRead, _dart__XTransRead>('_XTransRead');
    return __XTransRead(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XTransRead __XTransRead;

  int _XTransWrite(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XTransWrite ??= _dylib
        .lookupFunction<_c__XTransWrite, _dart__XTransWrite>('_XTransWrite');
    return __XTransWrite(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XTransWrite __XTransWrite;

  int _XTransReadv(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<iovec> arg1,
    int arg2,
  ) {
    __XTransReadv ??= _dylib
        .lookupFunction<_c__XTransReadv, _dart__XTransReadv>('_XTransReadv');
    return __XTransReadv(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XTransReadv __XTransReadv;

  int _XTransWritev(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<iovec> arg1,
    int arg2,
  ) {
    __XTransWritev ??= _dylib
        .lookupFunction<_c__XTransWritev, _dart__XTransWritev>('_XTransWritev');
    return __XTransWritev(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XTransWritev __XTransWritev;

  int _XTransSendFd(
    ffi.Pointer<_XtransConnInfo> ciptr,
    int fd,
    int do_close,
  ) {
    __XTransSendFd ??= _dylib
        .lookupFunction<_c__XTransSendFd, _dart__XTransSendFd>('_XTransSendFd');
    return __XTransSendFd(
      ciptr,
      fd,
      do_close,
    );
  }

  _dart__XTransSendFd __XTransSendFd;

  int _XTransRecvFd(
    ffi.Pointer<_XtransConnInfo> ciptr,
  ) {
    __XTransRecvFd ??= _dylib
        .lookupFunction<_c__XTransRecvFd, _dart__XTransRecvFd>('_XTransRecvFd');
    return __XTransRecvFd(
      ciptr,
    );
  }

  _dart__XTransRecvFd __XTransRecvFd;

  int _XTransDisconnect(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XTransDisconnect ??=
        _dylib.lookupFunction<_c__XTransDisconnect, _dart__XTransDisconnect>(
            '_XTransDisconnect');
    return __XTransDisconnect(
      arg0,
    );
  }

  _dart__XTransDisconnect __XTransDisconnect;

  int _XTransClose(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XTransClose ??= _dylib
        .lookupFunction<_c__XTransClose, _dart__XTransClose>('_XTransClose');
    return __XTransClose(
      arg0,
    );
  }

  _dart__XTransClose __XTransClose;

  int _XTransCloseForCloning(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XTransCloseForCloning ??= _dylib.lookupFunction<_c__XTransCloseForCloning,
        _dart__XTransCloseForCloning>('_XTransCloseForCloning');
    return __XTransCloseForCloning(
      arg0,
    );
  }

  _dart__XTransCloseForCloning __XTransCloseForCloning;

  int _XTransIsLocal(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XTransIsLocal ??=
        _dylib.lookupFunction<_c__XTransIsLocal, _dart__XTransIsLocal>(
            '_XTransIsLocal');
    return __XTransIsLocal(
      arg0,
    );
  }

  _dart__XTransIsLocal __XTransIsLocal;

  int _XTransGetPeerAddr(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Pointer<Xtransaddr>> arg3,
  ) {
    __XTransGetPeerAddr ??=
        _dylib.lookupFunction<_c__XTransGetPeerAddr, _dart__XTransGetPeerAddr>(
            '_XTransGetPeerAddr');
    return __XTransGetPeerAddr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XTransGetPeerAddr __XTransGetPeerAddr;

  int _XTransGetConnectionNumber(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XTransGetConnectionNumber ??= _dylib.lookupFunction<
        _c__XTransGetConnectionNumber,
        _dart__XTransGetConnectionNumber>('_XTransGetConnectionNumber');
    return __XTransGetConnectionNumber(
      arg0,
    );
  }

  _dart__XTransGetConnectionNumber __XTransGetConnectionNumber;

  int _XTransGetHostname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    __XTransGetHostname ??=
        _dylib.lookupFunction<_c__XTransGetHostname, _dart__XTransGetHostname>(
            '_XTransGetHostname');
    return __XTransGetHostname(
      arg0,
      arg1,
    );
  }

  _dart__XTransGetHostname __XTransGetHostname;

  int _XimTransConnect(
    int im,
  ) {
    __XimTransConnect ??=
        _dylib.lookupFunction<_c__XimTransConnect, _dart__XimTransConnect>(
            '_XimTransConnect');
    return __XimTransConnect(
      im,
    );
  }

  _dart__XimTransConnect __XimTransConnect;

  int _XimTransShutdown(
    int im,
  ) {
    __XimTransShutdown ??=
        _dylib.lookupFunction<_c__XimTransShutdown, _dart__XimTransShutdown>(
            '_XimTransShutdown');
    return __XimTransShutdown(
      im,
    );
  }

  _dart__XimTransShutdown __XimTransShutdown;

  int _XimTransRegisterDispatcher(
    int im,
    ffi.Pointer<ffi.NativeFunction<_typedefC_62>> Bool,
    int call_data,
  ) {
    __XimTransRegisterDispatcher ??= _dylib.lookupFunction<
        _c__XimTransRegisterDispatcher,
        _dart__XimTransRegisterDispatcher>('_XimTransRegisterDispatcher');
    return __XimTransRegisterDispatcher(
      im,
      Bool,
      call_data,
    );
  }

  _dart__XimTransRegisterDispatcher __XimTransRegisterDispatcher;

  void _XimFreeTransIntrCallback(
    int im,
  ) {
    __XimFreeTransIntrCallback ??= _dylib.lookupFunction<
        _c__XimFreeTransIntrCallback,
        _dart__XimFreeTransIntrCallback>('_XimFreeTransIntrCallback');
    return __XimFreeTransIntrCallback(
      im,
    );
  }

  _dart__XimFreeTransIntrCallback __XimFreeTransIntrCallback;

  int _XimTransCallDispatcher(
    int im,
    int len,
    int data,
  ) {
    __XimTransCallDispatcher ??= _dylib.lookupFunction<
        _c__XimTransCallDispatcher,
        _dart__XimTransCallDispatcher>('_XimTransCallDispatcher');
    return __XimTransCallDispatcher(
      im,
      len,
      data,
    );
  }

  _dart__XimTransCallDispatcher __XimTransCallDispatcher;

  int _XimTransFilterWaitEvent(
    ffi.Pointer<ffi.Int32> d,
    int w,
    ffi.Pointer<ffi.Int32> ev,
    int arg,
  ) {
    __XimTransFilterWaitEvent ??= _dylib.lookupFunction<
        _c__XimTransFilterWaitEvent,
        _dart__XimTransFilterWaitEvent>('_XimTransFilterWaitEvent');
    return __XimTransFilterWaitEvent(
      d,
      w,
      ev,
      arg,
    );
  }

  _dart__XimTransFilterWaitEvent __XimTransFilterWaitEvent;

  void _XimTransInternalConnection(
    ffi.Pointer<ffi.Int32> d,
    int fd,
    int arg,
  ) {
    __XimTransInternalConnection ??= _dylib.lookupFunction<
        _c__XimTransInternalConnection,
        _dart__XimTransInternalConnection>('_XimTransInternalConnection');
    return __XimTransInternalConnection(
      d,
      fd,
      arg,
    );
  }

  _dart__XimTransInternalConnection __XimTransInternalConnection;

  int _XimTransWrite(
    int im,
    int len,
    int data,
  ) {
    __XimTransWrite ??=
        _dylib.lookupFunction<_c__XimTransWrite, _dart__XimTransWrite>(
            '_XimTransWrite');
    return __XimTransWrite(
      im,
      len,
      data,
    );
  }

  _dart__XimTransWrite __XimTransWrite;

  int _XimTransRead(
    int im,
    int recv_buf,
    int buf_len,
    ffi.Pointer<ffi.Int32> ret_len,
  ) {
    __XimTransRead ??= _dylib
        .lookupFunction<_c__XimTransRead, _dart__XimTransRead>('_XimTransRead');
    return __XimTransRead(
      im,
      recv_buf,
      buf_len,
      ret_len,
    );
  }

  _dart__XimTransRead __XimTransRead;

  void _XimTransFlush(
    int im,
  ) {
    __XimTransFlush ??=
        _dylib.lookupFunction<_c__XimTransFlush, _dart__XimTransFlush>(
            '_XimTransFlush');
    return __XimTransFlush(
      im,
    );
  }

  _dart__XimTransFlush __XimTransFlush;

  int _XimTransConf(
    int im,
    ffi.Pointer<ffi.Int8> address,
  ) {
    __XimTransConf ??= _dylib
        .lookupFunction<_c__XimTransConf, _dart__XimTransConf>('_XimTransConf');
    return __XimTransConf(
      im,
      address,
    );
  }

  _dart__XimTransConf __XimTransConf;

  int _XimConnect(
    int im,
  ) {
    __XimConnect ??=
        _dylib.lookupFunction<_c__XimConnect, _dart__XimConnect>('_XimConnect');
    return __XimConnect(
      im,
    );
  }

  _dart__XimConnect __XimConnect;

  int _XimShutdown(
    int im,
  ) {
    __XimShutdown ??= _dylib
        .lookupFunction<_c__XimShutdown, _dart__XimShutdown>('_XimShutdown');
    return __XimShutdown(
      im,
    );
  }

  _dart__XimShutdown __XimShutdown;

  int _XimWrite(
    int im,
    int len,
    int data,
  ) {
    __XimWrite ??=
        _dylib.lookupFunction<_c__XimWrite, _dart__XimWrite>('_XimWrite');
    return __XimWrite(
      im,
      len,
      data,
    );
  }

  _dart__XimWrite __XimWrite;

  int _CheckProtocolData(
    int im,
    ffi.Pointer<ffi.Int8> recv_buf,
  ) {
    __CheckProtocolData ??=
        _dylib.lookupFunction<_c__CheckProtocolData, _dart__CheckProtocolData>(
            '_CheckProtocolData');
    return __CheckProtocolData(
      im,
      recv_buf,
    );
  }

  _dart__CheckProtocolData __CheckProtocolData;

  int _XimReadData(
    int im,
    ffi.Pointer<ffi.Int32> len,
    int buf,
    int buf_size,
  ) {
    __XimReadData ??= _dylib
        .lookupFunction<_c__XimReadData, _dart__XimReadData>('_XimReadData');
    return __XimReadData(
      im,
      len,
      buf,
      buf_size,
    );
  }

  _dart__XimReadData __XimReadData;

  int _XimCallDispatcher(
    int im,
    int len,
    int data,
  ) {
    __XimCallDispatcher ??=
        _dylib.lookupFunction<_c__XimCallDispatcher, _dart__XimCallDispatcher>(
            '_XimCallDispatcher');
    return __XimCallDispatcher(
      im,
      len,
      data,
    );
  }

  _dart__XimCallDispatcher __XimCallDispatcher;

  int _XimRead(
    int im,
    ffi.Pointer<ffi.Int32> len,
    int buf,
    int buf_size,
    ffi.Pointer<ffi.NativeFunction<_typedefC_64>> Bool,
    int arg,
  ) {
    __XimRead ??=
        _dylib.lookupFunction<_c__XimRead, _dart__XimRead>('_XimRead');
    return __XimRead(
      im,
      len,
      buf,
      buf_size,
      Bool,
      arg,
    );
  }

  _dart__XimRead __XimRead;

  int _XimRegisterDispatcher(
    int im,
    ffi.Pointer<ffi.NativeFunction<_typedefC_66>> Bool,
    int call_data,
  ) {
    __XimRegisterDispatcher ??= _dylib.lookupFunction<_c__XimRegisterDispatcher,
        _dart__XimRegisterDispatcher>('_XimRegisterDispatcher');
    return __XimRegisterDispatcher(
      im,
      Bool,
      call_data,
    );
  }

  _dart__XimRegisterDispatcher __XimRegisterDispatcher;

  void _XimFlush(
    int im,
  ) {
    __XimFlush ??=
        _dylib.lookupFunction<_c__XimFlush, _dart__XimFlush>('_XimFlush');
    return __XimFlush(
      im,
    );
  }

  _dart__XimFlush __XimFlush;

  int _XimFilterWaitEvent(
    int im,
  ) {
    __XimFilterWaitEvent ??= _dylib.lookupFunction<_c__XimFilterWaitEvent,
        _dart__XimFilterWaitEvent>('_XimFilterWaitEvent');
    return __XimFilterWaitEvent(
      im,
    );
  }

  _dart__XimFilterWaitEvent __XimFilterWaitEvent;

  int _XimXRegisterDispatcher(
    int im,
    ffi.Pointer<ffi.NativeFunction<_typedefC_68>> Bool,
    int call_data,
  ) {
    __XimXRegisterDispatcher ??= _dylib.lookupFunction<
        _c__XimXRegisterDispatcher,
        _dart__XimXRegisterDispatcher>('_XimXRegisterDispatcher');
    return __XimXRegisterDispatcher(
      im,
      Bool,
      call_data,
    );
  }

  _dart__XimXRegisterDispatcher __XimXRegisterDispatcher;

  void _XimXFreeIntrCallback(
    int im,
  ) {
    __XimXFreeIntrCallback ??= _dylib.lookupFunction<_c__XimXFreeIntrCallback,
        _dart__XimXFreeIntrCallback>('_XimXFreeIntrCallback');
    return __XimXFreeIntrCallback(
      im,
    );
  }

  _dart__XimXFreeIntrCallback __XimXFreeIntrCallback;

  int _XimXCallDispatcher(
    int im,
    int len,
    int data,
  ) {
    __XimXCallDispatcher ??= _dylib.lookupFunction<_c__XimXCallDispatcher,
        _dart__XimXCallDispatcher>('_XimXCallDispatcher');
    return __XimXCallDispatcher(
      im,
      len,
      data,
    );
  }

  _dart__XimXCallDispatcher __XimXCallDispatcher;

  int _XimXFilterWaitEvent(
    ffi.Pointer<ffi.Int32> d,
    int w,
    ffi.Pointer<ffi.Int32> ev,
    int arg,
  ) {
    __XimXFilterWaitEvent ??= _dylib.lookupFunction<_c__XimXFilterWaitEvent,
        _dart__XimXFilterWaitEvent>('_XimXFilterWaitEvent');
    return __XimXFilterWaitEvent(
      d,
      w,
      ev,
      arg,
    );
  }

  _dart__XimXFilterWaitEvent __XimXFilterWaitEvent;

  int _CheckConnect(
    ffi.Pointer<ffi.Int32> display,
    ffi.Pointer<ffi.Int32> event,
    int xim,
  ) {
    __CheckConnect ??= _dylib
        .lookupFunction<_c__CheckConnect, _dart__CheckConnect>('_CheckConnect');
    return __CheckConnect(
      display,
      event,
      xim,
    );
  }

  _dart__CheckConnect __CheckConnect;

  int _XimXConnect(
    int im,
  ) {
    __XimXConnect ??= _dylib
        .lookupFunction<_c__XimXConnect, _dart__XimXConnect>('_XimXConnect');
    return __XimXConnect(
      im,
    );
  }

  _dart__XimXConnect __XimXConnect;

  int _XimXShutdown(
    int im,
  ) {
    __XimXShutdown ??= _dylib
        .lookupFunction<_c__XimXShutdown, _dart__XimXShutdown>('_XimXShutdown');
    return __XimXShutdown(
      im,
    );
  }

  _dart__XimXShutdown __XimXShutdown;

  ffi.Pointer<ffi.Int8> _NewAtom(
    ffi.Pointer<ffi.Int8> atomName,
  ) {
    __NewAtom ??=
        _dylib.lookupFunction<_c__NewAtom, _dart__NewAtom>('_NewAtom');
    return __NewAtom(
      atomName,
    );
  }

  _dart__NewAtom __NewAtom;

  int _XimXWrite(
    int im,
    int len,
    int data,
  ) {
    __XimXWrite ??=
        _dylib.lookupFunction<_c__XimXWrite, _dart__XimXWrite>('_XimXWrite');
    return __XimXWrite(
      im,
      len,
      data,
    );
  }

  _dart__XimXWrite __XimXWrite;

  int _XimXGetReadData(
    int im,
    ffi.Pointer<ffi.Int8> buf,
    int buf_len,
    ffi.Pointer<ffi.Int32> ret_len,
    ffi.Pointer<ffi.Int32> event,
  ) {
    __XimXGetReadData ??=
        _dylib.lookupFunction<_c__XimXGetReadData, _dart__XimXGetReadData>(
            '_XimXGetReadData');
    return __XimXGetReadData(
      im,
      buf,
      buf_len,
      ret_len,
      event,
    );
  }

  _dart__XimXGetReadData __XimXGetReadData;

  int _CheckCMEvent(
    ffi.Pointer<ffi.Int32> display,
    ffi.Pointer<ffi.Int32> event,
    int xim,
  ) {
    __CheckCMEvent ??= _dylib
        .lookupFunction<_c__CheckCMEvent, _dart__CheckCMEvent>('_CheckCMEvent');
    return __CheckCMEvent(
      display,
      event,
      xim,
    );
  }

  _dart__CheckCMEvent __CheckCMEvent;

  int _XimXRead(
    int im,
    int recv_buf,
    int buf_len,
    ffi.Pointer<ffi.Int32> ret_len,
  ) {
    __XimXRead ??=
        _dylib.lookupFunction<_c__XimXRead, _dart__XimXRead>('_XimXRead');
    return __XimXRead(
      im,
      recv_buf,
      buf_len,
      ret_len,
    );
  }

  _dart__XimXRead __XimXRead;

  void _XimXFlush(
    int im,
  ) {
    __XimXFlush ??=
        _dylib.lookupFunction<_c__XimXFlush, _dart__XimXFlush>('_XimXFlush');
    return __XimXFlush(
      im,
    );
  }

  _dart__XimXFlush __XimXFlush;

  int _XimXConf(
    int im,
    ffi.Pointer<ffi.Int8> address,
  ) {
    __XimXConf ??=
        _dylib.lookupFunction<_c__XimXConf, _dart__XimXConf>('_XimXConf');
    return __XimXConf(
      im,
      address,
    );
  }

  _dart__XimXConf __XimXConf;

  int MBtoWCdef(
    ffi.Pointer<State> state,
    ffi.Pointer<ffi.Int8> ch,
    ffi.Pointer<ffi.Int32> wc,
  ) {
    _MBtoWCdef ??=
        _dylib.lookupFunction<_c_MBtoWCdef, _dart_MBtoWCdef>('MBtoWCdef');
    return _MBtoWCdef(
      state,
      ch,
      wc,
    );
  }

  _dart_MBtoWCdef _MBtoWCdef;

  int MBtoWCstd(
    ffi.Pointer<State> state,
    ffi.Pointer<ffi.Int8> ch,
    ffi.Pointer<ffi.Int32> wc,
  ) {
    _MBtoWCstd ??=
        _dylib.lookupFunction<_c_MBtoWCstd, _dart_MBtoWCstd>('MBtoWCstd');
    return _MBtoWCstd(
      state,
      ch,
      wc,
    );
  }

  _dart_MBtoWCstd _MBtoWCstd;

  int WCtoMBdef(
    ffi.Pointer<State> state,
    int wc,
    ffi.Pointer<ffi.Int8> ch,
  ) {
    _WCtoMBdef ??=
        _dylib.lookupFunction<_c_WCtoMBdef, _dart_WCtoMBdef>('WCtoMBdef');
    return _WCtoMBdef(
      state,
      wc,
      ch,
    );
  }

  _dart_WCtoMBdef _WCtoMBdef;

  int WCtoMBstd(
    ffi.Pointer<State> state,
    int wc,
    ffi.Pointer<ffi.Int8> ch,
  ) {
    _WCtoMBstd ??=
        _dylib.lookupFunction<_c_WCtoMBstd, _dart_WCtoMBstd>('WCtoMBstd');
    return _WCtoMBstd(
      state,
      wc,
      ch,
    );
  }

  _dart_WCtoMBstd _WCtoMBstd;

  int get_charset(
    ffi.Pointer<State> state,
    int side,
  ) {
    _get_charset ??=
        _dylib.lookupFunction<_c_get_charset, _dart_get_charset>('get_charset');
    return _get_charset(
      state,
      side,
    );
  }

  _dart_get_charset _get_charset;

  int def_mbstowcs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _def_mbstowcs ??= _dylib
        .lookupFunction<_c_def_mbstowcs, _dart_def_mbstowcs>('def_mbstowcs');
    return _def_mbstowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_def_mbstowcs _def_mbstowcs;

  int def_wcstombs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _def_wcstombs ??= _dylib
        .lookupFunction<_c_def_wcstombs, _dart_def_wcstombs>('def_wcstombs');
    return _def_wcstombs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_def_wcstombs _def_wcstombs;

  int mbstostr(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _mbstostr ??=
        _dylib.lookupFunction<_c_mbstostr, _dart_mbstostr>('mbstostr');
    return _mbstostr(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_mbstostr _mbstostr;

  int wcstostr(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _wcstostr ??=
        _dylib.lookupFunction<_c_wcstostr, _dart_wcstostr>('wcstostr');
    return _wcstostr(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstostr _wcstostr;

  int mbstocs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _mbstocs ??= _dylib.lookupFunction<_c_mbstocs, _dart_mbstocs>('mbstocs');
    return _mbstocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_mbstocs _mbstocs;

  int wcstocs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _wcstocs ??= _dylib.lookupFunction<_c_wcstocs, _dart_wcstocs>('wcstocs');
    return _wcstocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstocs _wcstocs;

  int cstombs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _cstombs ??= _dylib.lookupFunction<_c_cstombs, _dart_cstombs>('cstombs');
    return _cstombs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cstombs _cstombs;

  int cstowcs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _cstowcs ??= _dylib.lookupFunction<_c_cstowcs, _dart_cstowcs>('cstowcs');
    return _cstowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cstowcs _cstowcs;

  int strtombs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _strtombs ??=
        _dylib.lookupFunction<_c_strtombs, _dart_strtombs>('strtombs');
    return _strtombs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_strtombs _strtombs;

  void close_converter(
    int conv,
  ) {
    _close_converter ??=
        _dylib.lookupFunction<_c_close_converter, _dart_close_converter>(
            'close_converter');
    return _close_converter(
      conv,
    );
  }

  _dart_close_converter _close_converter;

  int create_conv(
    int lcd,
    int methods,
  ) {
    _create_conv ??=
        _dylib.lookupFunction<_c_create_conv, _dart_create_conv>('create_conv');
    return _create_conv(
      lcd,
      methods,
    );
  }

  _dart_create_conv _create_conv;

  int open_mbstowcs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_mbstowcs ??= _dylib
        .lookupFunction<_c_open_mbstowcs, _dart_open_mbstowcs>('open_mbstowcs');
    return _open_mbstowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_mbstowcs _open_mbstowcs;

  int open_mbstostr(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_mbstostr ??= _dylib
        .lookupFunction<_c_open_mbstostr, _dart_open_mbstostr>('open_mbstostr');
    return _open_mbstostr(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_mbstostr _open_mbstostr;

  int open_mbstocs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_mbstocs ??= _dylib
        .lookupFunction<_c_open_mbstocs, _dart_open_mbstocs>('open_mbstocs');
    return _open_mbstocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_mbstocs _open_mbstocs;

  int open_wcstombs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstombs ??= _dylib
        .lookupFunction<_c_open_wcstombs, _dart_open_wcstombs>('open_wcstombs');
    return _open_wcstombs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstombs _open_wcstombs;

  int open_wcstostr(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstostr ??= _dylib
        .lookupFunction<_c_open_wcstostr, _dart_open_wcstostr>('open_wcstostr');
    return _open_wcstostr(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstostr _open_wcstostr;

  int open_wcstocs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstocs ??= _dylib
        .lookupFunction<_c_open_wcstocs, _dart_open_wcstocs>('open_wcstocs');
    return _open_wcstocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstocs _open_wcstocs;

  int open_strtombs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_strtombs ??= _dylib
        .lookupFunction<_c_open_strtombs, _dart_open_strtombs>('open_strtombs');
    return _open_strtombs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_strtombs _open_strtombs;

  int open_cstombs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cstombs ??= _dylib
        .lookupFunction<_c_open_cstombs, _dart_open_cstombs>('open_cstombs');
    return _open_cstombs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cstombs _open_cstombs;

  int open_cstowcs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cstowcs ??= _dylib
        .lookupFunction<_c_open_cstowcs, _dart_open_cstowcs>('open_cstowcs');
    return _open_cstowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cstowcs _open_cstowcs;

  int _XlcDefaultLoader(
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XlcDefaultLoader ??=
        _dylib.lookupFunction<_c__XlcDefaultLoader, _dart__XlcDefaultLoader>(
            '_XlcDefaultLoader');
    return __XlcDefaultLoader(
      name,
    );
  }

  _dart__XlcDefaultLoader __XlcDefaultLoader;

  int mbstocts(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _mbstocts ??=
        _dylib.lookupFunction<_c_mbstocts, _dart_mbstocts>('mbstocts');
    return _mbstocts(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_mbstocts _mbstocts;

  int ctstombs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _ctstombs ??=
        _dylib.lookupFunction<_c_ctstombs, _dart_ctstombs>('ctstombs');
    return _ctstombs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_ctstombs _ctstombs;

  int cstombs_1(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _cstombs_1 ??=
        _dylib.lookupFunction<_c_cstombs_1, _dart_cstombs_1>('cstombs');
    return _cstombs_1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cstombs_1 _cstombs_1;

  int compare(
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Int8> encoding,
    int length,
  ) {
    _compare ??= _dylib.lookupFunction<_c_compare, _dart_compare>('compare');
    return _compare(
      src,
      encoding,
      length,
    );
  }

  _dart_compare _compare;

  int conv_to_dest(
    int conv,
    int code,
  ) {
    _conv_to_dest ??= _dylib
        .lookupFunction<_c_conv_to_dest, _dart_conv_to_dest>('conv_to_dest');
    return _conv_to_dest(
      conv,
      code,
    );
  }

  _dart_conv_to_dest _conv_to_dest;

  int conv_to_source(
    int conv,
    int code,
  ) {
    _conv_to_source ??=
        _dylib.lookupFunction<_c_conv_to_source, _dart_conv_to_source>(
            'conv_to_source');
    return _conv_to_source(
      conv,
      code,
    );
  }

  _dart_conv_to_source _conv_to_source;

  int mb_to_gi(
    int mb,
    int codeset,
  ) {
    _mb_to_gi ??=
        _dylib.lookupFunction<_c_mb_to_gi, _dart_mb_to_gi>('mb_to_gi');
    return _mb_to_gi(
      mb,
      codeset,
    );
  }

  _dart_mb_to_gi _mb_to_gi;

  int gi_to_mb(
    int glyph_index,
    int codeset,
  ) {
    _gi_to_mb ??=
        _dylib.lookupFunction<_c_gi_to_mb, _dart_gi_to_mb>('gi_to_mb');
    return _gi_to_mb(
      glyph_index,
      codeset,
    );
  }

  _dart_gi_to_mb _gi_to_mb;

  int gi_to_wc(
    int lcd,
    int glyph_index,
    int codeset,
    ffi.Pointer<ffi.Int32> wc,
  ) {
    _gi_to_wc ??=
        _dylib.lookupFunction<_c_gi_to_wc, _dart_gi_to_wc>('gi_to_wc');
    return _gi_to_wc(
      lcd,
      glyph_index,
      codeset,
      wc,
    );
  }

  _dart_gi_to_wc _gi_to_wc;

  int wc_to_gi(
    int lcd,
    int wc,
    ffi.Pointer<ffi.Uint64> glyph_index,
    ffi.Pointer<ffi.Int32> codeset,
  ) {
    _wc_to_gi ??=
        _dylib.lookupFunction<_c_wc_to_gi, _dart_wc_to_gi>('wc_to_gi');
    return _wc_to_gi(
      lcd,
      wc,
      glyph_index,
      codeset,
    );
  }

  _dart_wc_to_gi _wc_to_gi;

  int mb_parse_codeset(
    ffi.Pointer<State> state,
    int num,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> inbufptr,
    ffi.Pointer<ffi.Int32> from_left,
  ) {
    _mb_parse_codeset ??=
        _dylib.lookupFunction<_c_mb_parse_codeset, _dart_mb_parse_codeset>(
            'mb_parse_codeset');
    return _mb_parse_codeset(
      state,
      num,
      inbufptr,
      from_left,
    );
  }

  _dart_mb_parse_codeset _mb_parse_codeset;

  int byteM_parse_codeset(
    int lcd,
    ffi.Pointer<ffi.Int8> inbufptr,
  ) {
    _byteM_parse_codeset ??= _dylib.lookupFunction<_c_byteM_parse_codeset,
        _dart_byteM_parse_codeset>('byteM_parse_codeset');
    return _byteM_parse_codeset(
      lcd,
      inbufptr,
    );
  }

  _dart_byteM_parse_codeset _byteM_parse_codeset;

  int gi_parse_charset(
    int glyph_index,
    int codeset,
  ) {
    _gi_parse_charset ??=
        _dylib.lookupFunction<_c_gi_parse_charset, _dart_gi_parse_charset>(
            'gi_parse_charset');
    return _gi_parse_charset(
      glyph_index,
      codeset,
    );
  }

  _dart_gi_parse_charset _gi_parse_charset;

  int ct_parse_csi(
    ffi.Pointer<ffi.Int8> inbufptr,
    ffi.Pointer<ffi.Int32> ctr_seq_len,
  ) {
    _ct_parse_csi ??= _dylib
        .lookupFunction<_c_ct_parse_csi, _dart_ct_parse_csi>('ct_parse_csi');
    return _ct_parse_csi(
      inbufptr,
      ctr_seq_len,
    );
  }

  _dart_ct_parse_csi _ct_parse_csi;

  int cmp_esc_sequence(
    ffi.Pointer<ffi.Int8> inbufptr,
    int charset,
  ) {
    _cmp_esc_sequence ??=
        _dylib.lookupFunction<_c_cmp_esc_sequence, _dart_cmp_esc_sequence>(
            'cmp_esc_sequence');
    return _cmp_esc_sequence(
      inbufptr,
      charset,
    );
  }

  _dart_cmp_esc_sequence _cmp_esc_sequence;

  int ct_parse_charset(
    int lcd,
    ffi.Pointer<ffi.Int8> inbufptr,
    ffi.Pointer<ffi.Int32> charset,
    ffi.Pointer<ffi.Int32> ctr_seq_len,
  ) {
    _ct_parse_charset ??=
        _dylib.lookupFunction<_c_ct_parse_charset, _dart_ct_parse_charset>(
            'ct_parse_charset');
    return _ct_parse_charset(
      lcd,
      inbufptr,
      charset,
      ctr_seq_len,
    );
  }

  _dart_ct_parse_charset _ct_parse_charset;

  int segment_conversion(
    int lcd,
    ffi.Pointer<ffi.Int32> charset,
    ffi.Pointer<ffi.Uint64> glyph_index,
  ) {
    _segment_conversion ??=
        _dylib.lookupFunction<_c_segment_conversion, _dart_segment_conversion>(
            'segment_conversion');
    return _segment_conversion(
      lcd,
      charset,
      glyph_index,
    );
  }

  _dart_segment_conversion _segment_conversion;

  int _XlcGetCodeSetFromName(
    int lcd,
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XlcGetCodeSetFromName ??= _dylib.lookupFunction<_c__XlcGetCodeSetFromName,
        _dart__XlcGetCodeSetFromName>('_XlcGetCodeSetFromName');
    return __XlcGetCodeSetFromName(
      lcd,
      name,
    );
  }

  _dart__XlcGetCodeSetFromName __XlcGetCodeSetFromName;

  int _XlcGetCodeSetFromCharSet(
    int lcd,
    int charset,
    ffi.Pointer<ffi.Int32> codeset,
    ffi.Pointer<ffi.Uint64> glyph_index,
  ) {
    __XlcGetCodeSetFromCharSet ??= _dylib.lookupFunction<
        _c__XlcGetCodeSetFromCharSet,
        _dart__XlcGetCodeSetFromCharSet>('_XlcGetCodeSetFromCharSet');
    return __XlcGetCodeSetFromCharSet(
      lcd,
      charset,
      codeset,
      glyph_index,
    );
  }

  _dart__XlcGetCodeSetFromCharSet __XlcGetCodeSetFromCharSet;

  void output_ulong_value(
    ffi.Pointer<ffi.Int8> outbufptr,
    int code,
    int length,
    int side,
  ) {
    _output_ulong_value ??=
        _dylib.lookupFunction<_c_output_ulong_value, _dart_output_ulong_value>(
            'output_ulong_value');
    return _output_ulong_value(
      outbufptr,
      code,
      length,
      side,
    );
  }

  _dart_output_ulong_value _output_ulong_value;

  void init_state(
    int conv,
  ) {
    _init_state ??=
        _dylib.lookupFunction<_c_init_state, _dart_init_state>('init_state');
    return _init_state(
      conv,
    );
  }

  _dart_init_state _init_state;

  int mbstowcs_org(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _mbstowcs_org ??= _dylib
        .lookupFunction<_c_mbstowcs_org, _dart_mbstowcs_org>('mbstowcs_org');
    return _mbstowcs_org(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_mbstowcs_org _mbstowcs_org;

  int stdc_mbstowcs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_mbstowcs ??= _dylib
        .lookupFunction<_c_stdc_mbstowcs, _dart_stdc_mbstowcs>('stdc_mbstowcs');
    return _stdc_mbstowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_mbstowcs _stdc_mbstowcs;

  int wcstombs_org(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _wcstombs_org ??= _dylib
        .lookupFunction<_c_wcstombs_org, _dart_wcstombs_org>('wcstombs_org');
    return _wcstombs_org(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstombs_org _wcstombs_org;

  int stdc_wcstombs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_wcstombs ??= _dylib
        .lookupFunction<_c_stdc_wcstombs, _dart_stdc_wcstombs>('stdc_wcstombs');
    return _stdc_wcstombs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_wcstombs _stdc_wcstombs;

  int wcstocts(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _wcstocts ??=
        _dylib.lookupFunction<_c_wcstocts, _dart_wcstocts>('wcstocts');
    return _wcstocts(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstocts _wcstocts;

  int stdc_wcstocts(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_wcstocts ??= _dylib
        .lookupFunction<_c_stdc_wcstocts, _dart_stdc_wcstocts>('stdc_wcstocts');
    return _stdc_wcstocts(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_wcstocts _stdc_wcstocts;

  int ctstowcs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _ctstowcs ??=
        _dylib.lookupFunction<_c_ctstowcs, _dart_ctstowcs>('ctstowcs');
    return _ctstowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_ctstowcs _ctstowcs;

  int cstowcs_1(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _cstowcs_1 ??=
        _dylib.lookupFunction<_c_cstowcs_1, _dart_cstowcs_1>('cstowcs');
    return _cstowcs_1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cstowcs_1 _cstowcs_1;

  int stdc_ctstowcs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_ctstowcs ??= _dylib
        .lookupFunction<_c_stdc_ctstowcs, _dart_stdc_ctstowcs>('stdc_ctstowcs');
    return _stdc_ctstowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_ctstowcs _stdc_ctstowcs;

  int stdc_cstowcs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_cstowcs ??= _dylib
        .lookupFunction<_c_stdc_cstowcs, _dart_stdc_cstowcs>('stdc_cstowcs');
    return _stdc_cstowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_cstowcs _stdc_cstowcs;

  int mbstostr_1(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _mbstostr_1 ??=
        _dylib.lookupFunction<_c_mbstostr_1, _dart_mbstostr_1>('mbstostr');
    return _mbstostr_1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_mbstostr_1 _mbstostr_1;

  int mbtocs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _mbtocs ??= _dylib.lookupFunction<_c_mbtocs, _dart_mbtocs>('mbtocs');
    return _mbtocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_mbtocs _mbtocs;

  int mbstocs_1(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _mbstocs_1 ??=
        _dylib.lookupFunction<_c_mbstocs_1, _dart_mbstocs_1>('mbstocs');
    return _mbstocs_1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_mbstocs_1 _mbstocs_1;

  int wcstostr_1(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _wcstostr_1 ??=
        _dylib.lookupFunction<_c_wcstostr_1, _dart_wcstostr_1>('wcstostr');
    return _wcstostr_1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstostr_1 _wcstostr_1;

  int stdc_wcstostr(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_wcstostr ??= _dylib
        .lookupFunction<_c_stdc_wcstostr, _dart_stdc_wcstostr>('stdc_wcstostr');
    return _stdc_wcstostr(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_wcstostr _stdc_wcstostr;

  int wctocs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _wctocs ??= _dylib.lookupFunction<_c_wctocs, _dart_wctocs>('wctocs');
    return _wctocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wctocs _wctocs;

  int stdc_wctocs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_wctocs ??=
        _dylib.lookupFunction<_c_stdc_wctocs, _dart_stdc_wctocs>('stdc_wctocs');
    return _stdc_wctocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_wctocs _stdc_wctocs;

  int wcstocs_1(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _wcstocs_1 ??=
        _dylib.lookupFunction<_c_wcstocs_1, _dart_wcstocs_1>('wcstocs');
    return _wcstocs_1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstocs_1 _wcstocs_1;

  int stdc_wcstocs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_wcstocs ??= _dylib
        .lookupFunction<_c_stdc_wcstocs, _dart_stdc_wcstocs>('stdc_wcstocs');
    return _stdc_wcstocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_wcstocs _stdc_wcstocs;

  int strtombs_1(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _strtombs_1 ??=
        _dylib.lookupFunction<_c_strtombs_1, _dart_strtombs_1>('strtombs');
    return _strtombs_1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_strtombs_1 _strtombs_1;

  int strtowcs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _strtowcs ??=
        _dylib.lookupFunction<_c_strtowcs, _dart_strtowcs>('strtowcs');
    return _strtowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_strtowcs _strtowcs;

  int stdc_strtowcs(
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    _stdc_strtowcs ??= _dylib
        .lookupFunction<_c_stdc_strtowcs, _dart_stdc_strtowcs>('stdc_strtowcs');
    return _stdc_strtowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_stdc_strtowcs _stdc_strtowcs;

  void close_converter_1(
    int conv,
  ) {
    _close_converter_1 ??=
        _dylib.lookupFunction<_c_close_converter_1, _dart_close_converter_1>(
            'close_converter');
    return _close_converter_1(
      conv,
    );
  }

  _dart_close_converter_1 _close_converter_1;

  int create_conv_1(
    int lcd,
    int methods,
  ) {
    _create_conv_1 ??= _dylib
        .lookupFunction<_c_create_conv_1, _dart_create_conv_1>('create_conv');
    return _create_conv_1(
      lcd,
      methods,
    );
  }

  _dart_create_conv_1 _create_conv_1;

  int open_mbstocts(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_mbstocts ??= _dylib
        .lookupFunction<_c_open_mbstocts, _dart_open_mbstocts>('open_mbstocts');
    return _open_mbstocts(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_mbstocts _open_mbstocts;

  int open_mbstostr_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_mbstostr_1 ??=
        _dylib.lookupFunction<_c_open_mbstostr_1, _dart_open_mbstostr_1>(
            'open_mbstostr');
    return _open_mbstostr_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_mbstostr_1 _open_mbstostr_1;

  int open_mbstocs_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_mbstocs_1 ??=
        _dylib.lookupFunction<_c_open_mbstocs_1, _dart_open_mbstocs_1>(
            'open_mbstocs');
    return _open_mbstocs_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_mbstocs_1 _open_mbstocs_1;

  int open_mbtocs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_mbtocs ??=
        _dylib.lookupFunction<_c_open_mbtocs, _dart_open_mbtocs>('open_mbtocs');
    return _open_mbtocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_mbtocs _open_mbtocs;

  int open_ctstombs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_ctstombs ??= _dylib
        .lookupFunction<_c_open_ctstombs, _dart_open_ctstombs>('open_ctstombs');
    return _open_ctstombs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_ctstombs _open_ctstombs;

  int open_cstombs_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cstombs_1 ??=
        _dylib.lookupFunction<_c_open_cstombs_1, _dart_open_cstombs_1>(
            'open_cstombs');
    return _open_cstombs_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cstombs_1 _open_cstombs_1;

  int open_strtombs_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_strtombs_1 ??=
        _dylib.lookupFunction<_c_open_strtombs_1, _dart_open_strtombs_1>(
            'open_strtombs');
    return _open_strtombs_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_strtombs_1 _open_strtombs_1;

  int open_stdc_mbstowcs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_mbstowcs ??=
        _dylib.lookupFunction<_c_open_stdc_mbstowcs, _dart_open_stdc_mbstowcs>(
            'open_stdc_mbstowcs');
    return _open_stdc_mbstowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_mbstowcs _open_stdc_mbstowcs;

  int open_stdc_wcstombs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_wcstombs ??=
        _dylib.lookupFunction<_c_open_stdc_wcstombs, _dart_open_stdc_wcstombs>(
            'open_stdc_wcstombs');
    return _open_stdc_wcstombs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_wcstombs _open_stdc_wcstombs;

  int open_stdc_wcstocts(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_wcstocts ??=
        _dylib.lookupFunction<_c_open_stdc_wcstocts, _dart_open_stdc_wcstocts>(
            'open_stdc_wcstocts');
    return _open_stdc_wcstocts(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_wcstocts _open_stdc_wcstocts;

  int open_stdc_wcstostr(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_wcstostr ??=
        _dylib.lookupFunction<_c_open_stdc_wcstostr, _dart_open_stdc_wcstostr>(
            'open_stdc_wcstostr');
    return _open_stdc_wcstostr(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_wcstostr _open_stdc_wcstostr;

  int open_stdc_wcstocs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_wcstocs ??=
        _dylib.lookupFunction<_c_open_stdc_wcstocs, _dart_open_stdc_wcstocs>(
            'open_stdc_wcstocs');
    return _open_stdc_wcstocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_wcstocs _open_stdc_wcstocs;

  int open_stdc_wctocs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_wctocs ??=
        _dylib.lookupFunction<_c_open_stdc_wctocs, _dart_open_stdc_wctocs>(
            'open_stdc_wctocs');
    return _open_stdc_wctocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_wctocs _open_stdc_wctocs;

  int open_stdc_ctstowcs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_ctstowcs ??=
        _dylib.lookupFunction<_c_open_stdc_ctstowcs, _dart_open_stdc_ctstowcs>(
            'open_stdc_ctstowcs');
    return _open_stdc_ctstowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_ctstowcs _open_stdc_ctstowcs;

  int open_stdc_cstowcs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_cstowcs ??=
        _dylib.lookupFunction<_c_open_stdc_cstowcs, _dart_open_stdc_cstowcs>(
            'open_stdc_cstowcs');
    return _open_stdc_cstowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_cstowcs _open_stdc_cstowcs;

  int open_stdc_strtowcs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_stdc_strtowcs ??=
        _dylib.lookupFunction<_c_open_stdc_strtowcs, _dart_open_stdc_strtowcs>(
            'open_stdc_strtowcs');
    return _open_stdc_strtowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_stdc_strtowcs _open_stdc_strtowcs;

  int open_mbstowcs_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_mbstowcs_1 ??=
        _dylib.lookupFunction<_c_open_mbstowcs_1, _dart_open_mbstowcs_1>(
            'open_mbstowcs');
    return _open_mbstowcs_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_mbstowcs_1 _open_mbstowcs_1;

  int open_wcstombs_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstombs_1 ??=
        _dylib.lookupFunction<_c_open_wcstombs_1, _dart_open_wcstombs_1>(
            'open_wcstombs');
    return _open_wcstombs_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstombs_1 _open_wcstombs_1;

  int open_wcstocts(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstocts ??= _dylib
        .lookupFunction<_c_open_wcstocts, _dart_open_wcstocts>('open_wcstocts');
    return _open_wcstocts(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstocts _open_wcstocts;

  int open_wcstostr_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstostr_1 ??=
        _dylib.lookupFunction<_c_open_wcstostr_1, _dart_open_wcstostr_1>(
            'open_wcstostr');
    return _open_wcstostr_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstostr_1 _open_wcstostr_1;

  int open_wcstocs_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstocs_1 ??=
        _dylib.lookupFunction<_c_open_wcstocs_1, _dart_open_wcstocs_1>(
            'open_wcstocs');
    return _open_wcstocs_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstocs_1 _open_wcstocs_1;

  int open_wctocs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wctocs ??=
        _dylib.lookupFunction<_c_open_wctocs, _dart_open_wctocs>('open_wctocs');
    return _open_wctocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wctocs _open_wctocs;

  int open_ctstowcs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_ctstowcs ??= _dylib
        .lookupFunction<_c_open_ctstowcs, _dart_open_ctstowcs>('open_ctstowcs');
    return _open_ctstowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_ctstowcs _open_ctstowcs;

  int open_cstowcs_1(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cstowcs_1 ??=
        _dylib.lookupFunction<_c_open_cstowcs_1, _dart_open_cstowcs_1>(
            'open_cstowcs');
    return _open_cstowcs_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cstowcs_1 _open_cstowcs_1;

  int open_strtowcs(
    int from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    int to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_strtowcs ??= _dylib
        .lookupFunction<_c_open_strtowcs, _dart_open_strtowcs>('open_strtowcs');
    return _open_strtowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_strtowcs _open_strtowcs;

  int _XlcGenericLoader(
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XlcGenericLoader ??=
        _dylib.lookupFunction<_c__XlcGenericLoader, _dart__XlcGenericLoader>(
            '_XlcGenericLoader');
    return __XlcGenericLoader(
      name,
    );
  }

  _dart__XlcGenericLoader __XlcGenericLoader;

  int _XlcUtf8Loader(
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XlcUtf8Loader ??=
        _dylib.lookupFunction<_c__XlcUtf8Loader, _dart__XlcUtf8Loader>(
            '_XlcUtf8Loader');
    return __XlcUtf8Loader(
      name,
    );
  }

  _dart__XlcUtf8Loader __XlcUtf8Loader;

  int wcs_to_mbs(
    int oc,
    ffi.Pointer<ffi.Int8> to,
    int wchar_t,
  ) {
    _wcs_to_mbs ??=
        _dylib.lookupFunction<_c_wcs_to_mbs, _dart_wcs_to_mbs>('wcs_to_mbs');
    return _wcs_to_mbs(
      oc,
      to,
      wchar_t,
    );
  }

  _dart_wcs_to_mbs _wcs_to_mbs;

  int utf8_to_mbs(
    int oc,
    ffi.Pointer<ffi.Int8> to,
    ffi.Pointer<ffi.Int32> from,
    int length,
  ) {
    _utf8_to_mbs ??=
        _dylib.lookupFunction<_c_utf8_to_mbs, _dart_utf8_to_mbs>('utf8_to_mbs');
    return _utf8_to_mbs(
      oc,
      to,
      from,
      length,
    );
  }

  _dart_utf8_to_mbs _utf8_to_mbs;

  int _XmbDefaultTextEscapement(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XmbDefaultTextEscapement ??= _dylib.lookupFunction<
        _c__XmbDefaultTextEscapement,
        _dart__XmbDefaultTextEscapement>('_XmbDefaultTextEscapement');
    return __XmbDefaultTextEscapement(
      oc,
      text,
      length,
    );
  }

  _dart__XmbDefaultTextEscapement __XmbDefaultTextEscapement;

  int _XwcDefaultTextEscapement(
    int oc,
    int wchar_t,
  ) {
    __XwcDefaultTextEscapement ??= _dylib.lookupFunction<
        _c__XwcDefaultTextEscapement,
        _dart__XwcDefaultTextEscapement>('_XwcDefaultTextEscapement');
    return __XwcDefaultTextEscapement(
      oc,
      wchar_t,
    );
  }

  _dart__XwcDefaultTextEscapement __XwcDefaultTextEscapement;

  int _Xutf8DefaultTextEscapement(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __Xutf8DefaultTextEscapement ??= _dylib.lookupFunction<
        _c__Xutf8DefaultTextEscapement,
        _dart__Xutf8DefaultTextEscapement>('_Xutf8DefaultTextEscapement');
    return __Xutf8DefaultTextEscapement(
      oc,
      text,
      length,
    );
  }

  _dart__Xutf8DefaultTextEscapement __Xutf8DefaultTextEscapement;

  int _XmbDefaultTextExtents(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __XmbDefaultTextExtents ??= _dylib.lookupFunction<_c__XmbDefaultTextExtents,
        _dart__XmbDefaultTextExtents>('_XmbDefaultTextExtents');
    return __XmbDefaultTextExtents(
      oc,
      text,
      length,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XmbDefaultTextExtents __XmbDefaultTextExtents;

  int _XwcDefaultTextExtents(
    int oc,
    int wchar_t,
  ) {
    __XwcDefaultTextExtents ??= _dylib.lookupFunction<_c__XwcDefaultTextExtents,
        _dart__XwcDefaultTextExtents>('_XwcDefaultTextExtents');
    return __XwcDefaultTextExtents(
      oc,
      wchar_t,
    );
  }

  _dart__XwcDefaultTextExtents __XwcDefaultTextExtents;

  int _Xutf8DefaultTextExtents(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __Xutf8DefaultTextExtents ??= _dylib.lookupFunction<
        _c__Xutf8DefaultTextExtents,
        _dart__Xutf8DefaultTextExtents>('_Xutf8DefaultTextExtents');
    return __Xutf8DefaultTextExtents(
      oc,
      text,
      length,
      overall_ink,
      overall_logical,
    );
  }

  _dart__Xutf8DefaultTextExtents __Xutf8DefaultTextExtents;

  int _XmbDefaultTextPerCharExtents(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<ffi.Int32> ink_buf,
    ffi.Pointer<ffi.Int32> logical_buf,
    int buf_size,
    ffi.Pointer<ffi.Int32> num_chars,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __XmbDefaultTextPerCharExtents ??= _dylib.lookupFunction<
        _c__XmbDefaultTextPerCharExtents,
        _dart__XmbDefaultTextPerCharExtents>('_XmbDefaultTextPerCharExtents');
    return __XmbDefaultTextPerCharExtents(
      oc,
      text,
      length,
      ink_buf,
      logical_buf,
      buf_size,
      num_chars,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XmbDefaultTextPerCharExtents __XmbDefaultTextPerCharExtents;

  int _XwcDefaultTextPerCharExtents(
    int oc,
    int wchar_t,
  ) {
    __XwcDefaultTextPerCharExtents ??= _dylib.lookupFunction<
        _c__XwcDefaultTextPerCharExtents,
        _dart__XwcDefaultTextPerCharExtents>('_XwcDefaultTextPerCharExtents');
    return __XwcDefaultTextPerCharExtents(
      oc,
      wchar_t,
    );
  }

  _dart__XwcDefaultTextPerCharExtents __XwcDefaultTextPerCharExtents;

  int _Xutf8DefaultTextPerCharExtents(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<ffi.Int32> ink_buf,
    ffi.Pointer<ffi.Int32> logical_buf,
    int buf_size,
    ffi.Pointer<ffi.Int32> num_chars,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __Xutf8DefaultTextPerCharExtents ??= _dylib.lookupFunction<
            _c__Xutf8DefaultTextPerCharExtents,
            _dart__Xutf8DefaultTextPerCharExtents>(
        '_Xutf8DefaultTextPerCharExtents');
    return __Xutf8DefaultTextPerCharExtents(
      oc,
      text,
      length,
      ink_buf,
      logical_buf,
      buf_size,
      num_chars,
      overall_ink,
      overall_logical,
    );
  }

  _dart__Xutf8DefaultTextPerCharExtents __Xutf8DefaultTextPerCharExtents;

  int _XmbDefaultDrawString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XmbDefaultDrawString ??= _dylib.lookupFunction<_c__XmbDefaultDrawString,
        _dart__XmbDefaultDrawString>('_XmbDefaultDrawString');
    return __XmbDefaultDrawString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__XmbDefaultDrawString __XmbDefaultDrawString;

  int _XwcDefaultDrawString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    int wchar_t,
  ) {
    __XwcDefaultDrawString ??= _dylib.lookupFunction<_c__XwcDefaultDrawString,
        _dart__XwcDefaultDrawString>('_XwcDefaultDrawString');
    return __XwcDefaultDrawString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      wchar_t,
    );
  }

  _dart__XwcDefaultDrawString __XwcDefaultDrawString;

  int _Xutf8DefaultDrawString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __Xutf8DefaultDrawString ??= _dylib.lookupFunction<
        _c__Xutf8DefaultDrawString,
        _dart__Xutf8DefaultDrawString>('_Xutf8DefaultDrawString');
    return __Xutf8DefaultDrawString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__Xutf8DefaultDrawString __Xutf8DefaultDrawString;

  void _XmbDefaultDrawImageString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XmbDefaultDrawImageString ??= _dylib.lookupFunction<
        _c__XmbDefaultDrawImageString,
        _dart__XmbDefaultDrawImageString>('_XmbDefaultDrawImageString');
    return __XmbDefaultDrawImageString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__XmbDefaultDrawImageString __XmbDefaultDrawImageString;

  void _XwcDefaultDrawImageString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    int wchar_t,
  ) {
    __XwcDefaultDrawImageString ??= _dylib.lookupFunction<
        _c__XwcDefaultDrawImageString,
        _dart__XwcDefaultDrawImageString>('_XwcDefaultDrawImageString');
    return __XwcDefaultDrawImageString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      wchar_t,
    );
  }

  _dart__XwcDefaultDrawImageString __XwcDefaultDrawImageString;

  void _Xutf8DefaultDrawImageString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __Xutf8DefaultDrawImageString ??= _dylib.lookupFunction<
        _c__Xutf8DefaultDrawImageString,
        _dart__Xutf8DefaultDrawImageString>('_Xutf8DefaultDrawImageString');
    return __Xutf8DefaultDrawImageString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__Xutf8DefaultDrawImageString __Xutf8DefaultDrawImageString;

  int init_fontdata(
    int font_data,
    int font_data_count,
  ) {
    _init_fontdata ??= _dylib
        .lookupFunction<_c_init_fontdata, _dart_init_fontdata>('init_fontdata');
    return _init_fontdata(
      font_data,
      font_data_count,
    );
  }

  _dart_init_fontdata _init_fontdata;

  int init_vrotate(
    int font_data,
    int font_data_count,
    int type,
    int code_range,
    int code_range_num,
  ) {
    _init_vrotate ??= _dylib
        .lookupFunction<_c_init_vrotate, _dart_init_vrotate>('init_vrotate');
    return _init_vrotate(
      font_data,
      font_data_count,
      type,
      code_range,
      code_range_num,
    );
  }

  _dart_init_vrotate _init_vrotate;

  int init_fontset(
    int oc,
  ) {
    _init_fontset ??= _dylib
        .lookupFunction<_c_init_fontset, _dart_init_fontset>('init_fontset');
    return _init_fontset(
      oc,
    );
  }

  _dart_init_fontset _init_fontset;

  ffi.Pointer<ffi.Int8> get_prop_name(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> fs,
  ) {
    _get_prop_name ??= _dylib
        .lookupFunction<_c_get_prop_name, _dart_get_prop_name>('get_prop_name');
    return _get_prop_name(
      dpy,
      fs,
    );
  }

  _dart_get_prop_name _get_prop_name;

  int load_fontdata(
    int oc,
    int font_data,
    int font_data_num,
  ) {
    _load_fontdata ??= _dylib
        .lookupFunction<_c_load_fontdata, _dart_load_fontdata>('load_fontdata');
    return _load_fontdata(
      oc,
      font_data,
      font_data_num,
    );
  }

  _dart_load_fontdata _load_fontdata;

  int load_fontset_data(
    int oc,
    int font_set,
  ) {
    _load_fontset_data ??=
        _dylib.lookupFunction<_c_load_fontset_data, _dart_load_fontset_data>(
            'load_fontset_data');
    return _load_fontset_data(
      oc,
      font_set,
    );
  }

  _dart_load_fontset_data _load_fontset_data;

  int load_font(
    int oc,
  ) {
    _load_font ??=
        _dylib.lookupFunction<_c_load_font, _dart_load_font>('load_font');
    return _load_font(
      oc,
    );
  }

  _dart_load_font _load_font;

  int load_font_info(
    int oc,
  ) {
    _load_font_info ??=
        _dylib.lookupFunction<_c_load_font_info, _dart_load_font_info>(
            'load_font_info');
    return _load_font_info(
      oc,
    );
  }

  _dart_load_font_info _load_font_info;

  void check_fontset_extents(
    ffi.Pointer<ffi.Int32> overall,
    ffi.Pointer<ffi.Int32> logical_ascent,
    ffi.Pointer<ffi.Int32> logical_descent,
    ffi.Pointer<ffi.Int32> font,
  ) {
    _check_fontset_extents ??= _dylib.lookupFunction<_c_check_fontset_extents,
        _dart_check_fontset_extents>('check_fontset_extents');
    return _check_fontset_extents(
      overall,
      logical_ascent,
      logical_descent,
      font,
    );
  }

  _dart_check_fontset_extents _check_fontset_extents;

  void set_fontset_extents(
    int oc,
  ) {
    _set_fontset_extents ??= _dylib.lookupFunction<_c_set_fontset_extents,
        _dart_set_fontset_extents>('set_fontset_extents');
    return _set_fontset_extents(
      oc,
    );
  }

  _dart_set_fontset_extents _set_fontset_extents;

  int init_core_part(
    int oc,
  ) {
    _init_core_part ??=
        _dylib.lookupFunction<_c_init_core_part, _dart_init_core_part>(
            'init_core_part');
    return _init_core_part(
      oc,
    );
  }

  _dart_init_core_part _init_core_part;

  ffi.Pointer<ffi.Int8> get_font_name(
    int oc,
    ffi.Pointer<ffi.Int8> pattern,
  ) {
    _get_font_name ??= _dylib
        .lookupFunction<_c_get_font_name, _dart_get_font_name>('get_font_name');
    return _get_font_name(
      oc,
      pattern,
    );
  }

  _dart_get_font_name _get_font_name;

  ffi.Pointer<ffi.Int8> get_rotate_fontname(
    ffi.Pointer<ffi.Int8> font_name,
  ) {
    _get_rotate_fontname ??= _dylib.lookupFunction<_c_get_rotate_fontname,
        _dart_get_rotate_fontname>('get_rotate_fontname');
    return _get_rotate_fontname(
      font_name,
    );
  }

  _dart_get_rotate_fontname _get_rotate_fontname;

  int is_match_charset(
    int font_data,
    ffi.Pointer<ffi.Int8> font_name,
  ) {
    _is_match_charset ??=
        _dylib.lookupFunction<_c_is_match_charset, _dart_is_match_charset>(
            'is_match_charset');
    return _is_match_charset(
      font_data,
      font_name,
    );
  }

  _dart_is_match_charset _is_match_charset;

  int parse_all_name(
    int oc,
    int font_data,
    ffi.Pointer<ffi.Int8> pattern,
  ) {
    _parse_all_name ??=
        _dylib.lookupFunction<_c_parse_all_name, _dart_parse_all_name>(
            'parse_all_name');
    return _parse_all_name(
      oc,
      font_data,
      pattern,
    );
  }

  _dart_parse_all_name _parse_all_name;

  int parse_omit_name(
    int oc,
    int font_data,
    ffi.Pointer<ffi.Int8> pattern,
  ) {
    _parse_omit_name ??=
        _dylib.lookupFunction<_c_parse_omit_name, _dart_parse_omit_name>(
            'parse_omit_name');
    return _parse_omit_name(
      oc,
      font_data,
      pattern,
    );
  }

  _dart_parse_omit_name _parse_omit_name;

  int parse_fontdata(
    int oc,
    int font_set,
    int font_data,
    int font_data_count,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name_list,
    int name_list_count,
    int class_1,
    ffi.Pointer<ffi.Int32> font_data_return,
  ) {
    _parse_fontdata ??=
        _dylib.lookupFunction<_c_parse_fontdata, _dart_parse_fontdata>(
            'parse_fontdata');
    return _parse_fontdata(
      oc,
      font_set,
      font_data,
      font_data_count,
      name_list,
      name_list_count,
      class_1,
      font_data_return,
    );
  }

  _dart_parse_fontdata _parse_fontdata;

  int parse_vw(
    int oc,
    int font_set,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name_list,
    int count,
  ) {
    _parse_vw ??=
        _dylib.lookupFunction<_c_parse_vw, _dart_parse_vw>('parse_vw');
    return _parse_vw(
      oc,
      font_set,
      name_list,
      count,
    );
  }

  _dart_parse_vw _parse_vw;

  int parse_fontname(
    int oc,
  ) {
    _parse_fontname ??=
        _dylib.lookupFunction<_c_parse_fontname, _dart_parse_fontname>(
            'parse_fontname');
    return _parse_fontname(
      oc,
    );
  }

  _dart_parse_fontname _parse_fontname;

  int set_missing_list(
    int oc,
  ) {
    _set_missing_list ??=
        _dylib.lookupFunction<_c_set_missing_list, _dart_set_missing_list>(
            'set_missing_list');
    return _set_missing_list(
      oc,
    );
  }

  _dart_set_missing_list _set_missing_list;

  int create_fontset(
    int oc,
  ) {
    _create_fontset ??=
        _dylib.lookupFunction<_c_create_fontset, _dart_create_fontset>(
            'create_fontset');
    return _create_fontset(
      oc,
    );
  }

  _dart_create_fontset _create_fontset;

  void free_fontdataOC(
    ffi.Pointer<ffi.Int32> dpy,
    int font_data,
    int font_data_count,
  ) {
    _free_fontdataOC ??=
        _dylib.lookupFunction<_c_free_fontdataOC, _dart_free_fontdataOC>(
            'free_fontdataOC');
    return _free_fontdataOC(
      dpy,
      font_data,
      font_data_count,
    );
  }

  _dart_free_fontdataOC _free_fontdataOC;

  void destroy_fontdata(
    ffi.Pointer<ffi.Int32> gen,
    ffi.Pointer<ffi.Int32> dpy,
  ) {
    _destroy_fontdata ??=
        _dylib.lookupFunction<_c_destroy_fontdata, _dart_destroy_fontdata>(
            'destroy_fontdata');
    return _destroy_fontdata(
      gen,
      dpy,
    );
  }

  _dart_destroy_fontdata _destroy_fontdata;

  void destroy_oc(
    int oc,
  ) {
    _destroy_oc ??=
        _dylib.lookupFunction<_c_destroy_oc, _dart_destroy_oc>('destroy_oc');
    return _destroy_oc(
      oc,
    );
  }

  _dart_destroy_oc _destroy_oc;

  ffi.Pointer<ffi.Int8> set_oc_values(
    int oc,
    int args,
    int num_args,
  ) {
    _set_oc_values ??= _dylib
        .lookupFunction<_c_set_oc_values, _dart_set_oc_values>('set_oc_values');
    return _set_oc_values(
      oc,
      args,
      num_args,
    );
  }

  _dart_set_oc_values _set_oc_values;

  ffi.Pointer<ffi.Int8> get_oc_values(
    int oc,
    int args,
    int num_args,
  ) {
    _get_oc_values ??= _dylib
        .lookupFunction<_c_get_oc_values, _dart_get_oc_values>('get_oc_values');
    return _get_oc_values(
      oc,
      args,
      num_args,
    );
  }

  _dart_get_oc_values _get_oc_values;

  int create_oc(
    int om,
    int args,
    int num_args,
  ) {
    _create_oc ??=
        _dylib.lookupFunction<_c_create_oc, _dart_create_oc>('create_oc');
    return _create_oc(
      om,
      args,
      num_args,
    );
  }

  _dart_create_oc _create_oc;

  void free_fontdataOM(
    int font_data,
    int font_data_count,
  ) {
    _free_fontdataOM ??=
        _dylib.lookupFunction<_c_free_fontdataOM, _dart_free_fontdataOM>(
            'free_fontdataOM');
    return _free_fontdataOM(
      font_data,
      font_data_count,
    );
  }

  _dart_free_fontdataOM _free_fontdataOM;

  int close_om(
    int om,
  ) {
    _close_om ??=
        _dylib.lookupFunction<_c_close_om, _dart_close_om>('close_om');
    return _close_om(
      om,
    );
  }

  _dart_close_om _close_om;

  ffi.Pointer<ffi.Int8> set_om_values(
    int om,
    int args,
    int num_args,
  ) {
    _set_om_values ??= _dylib
        .lookupFunction<_c_set_om_values, _dart_set_om_values>('set_om_values');
    return _set_om_values(
      om,
      args,
      num_args,
    );
  }

  _dart_set_om_values _set_om_values;

  ffi.Pointer<ffi.Int8> get_om_values(
    int om,
    int args,
    int num_args,
  ) {
    _get_om_values ??= _dylib
        .lookupFunction<_c_get_om_values, _dart_get_om_values>('get_om_values');
    return _get_om_values(
      om,
      args,
      num_args,
    );
  }

  _dart_get_om_values _get_om_values;

  int create_om(
    int lcd,
    ffi.Pointer<ffi.Int32> dpy,
    int rdb,
    ffi.Pointer<ffi.Int32> res_name,
    ffi.Pointer<ffi.Int32> res_class,
  ) {
    _create_om ??=
        _dylib.lookupFunction<_c_create_om, _dart_create_om>('create_om');
    return _create_om(
      lcd,
      dpy,
      rdb,
      res_name,
      res_class,
    );
  }

  _dart_create_om _create_om;

  int add_data(
    int om,
  ) {
    _add_data ??=
        _dylib.lookupFunction<_c_add_data, _dart_add_data>('add_data');
    return _add_data(
      om,
    );
  }

  _dart_add_data _add_data;

  int read_EncodingInfo(
    int count,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ) {
    _read_EncodingInfo ??=
        _dylib.lookupFunction<_c_read_EncodingInfo, _dart_read_EncodingInfo>(
            'read_EncodingInfo');
    return _read_EncodingInfo(
      count,
      value,
    );
  }

  _dart_read_EncodingInfo _read_EncodingInfo;

  int read_vrotate(
    int count,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<ffi.Int32> vrotate_num,
  ) {
    _read_vrotate ??= _dylib
        .lookupFunction<_c_read_vrotate, _dart_read_vrotate>('read_vrotate');
    return _read_vrotate(
      count,
      value,
      type,
      vrotate_num,
    );
  }

  _dart_read_vrotate _read_vrotate;

  void read_vw(
    int lcd,
    int font_set,
    int num,
  ) {
    _read_vw ??= _dylib.lookupFunction<_c_read_vw, _dart_read_vw>('read_vw');
    return _read_vw(
      lcd,
      font_set,
      num,
    );
  }

  _dart_read_vw _read_vw;

  int init_om(
    int om,
  ) {
    _init_om ??= _dylib.lookupFunction<_c_init_om, _dart_init_om>('init_om');
    return _init_om(
      om,
    );
  }

  _dart_init_om _init_om;

  int _XomGenericOpenOM(
    int lcd,
    ffi.Pointer<ffi.Int32> dpy,
    int rdb,
    ffi.Pointer<ffi.Int32> res_name,
    ffi.Pointer<ffi.Int32> res_class,
  ) {
    __XomGenericOpenOM ??=
        _dylib.lookupFunction<_c__XomGenericOpenOM, _dart__XomGenericOpenOM>(
            '_XomGenericOpenOM');
    return __XomGenericOpenOM(
      lcd,
      dpy,
      rdb,
      res_name,
      res_class,
    );
  }

  _dart__XomGenericOpenOM __XomGenericOpenOM;

  int _XInitOM(
    int lcd,
  ) {
    __XInitOM ??=
        _dylib.lookupFunction<_c__XInitOM, _dart__XInitOM>('_XInitOM');
    return __XInitOM(
      lcd,
    );
  }

  _dart__XInitOM __XInitOM;

  void _XomGenericDrawImageString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    int type,
    int text,
    int length,
  ) {
    __XomGenericDrawImageString ??= _dylib.lookupFunction<
        _c__XomGenericDrawImageString,
        _dart__XomGenericDrawImageString>('_XomGenericDrawImageString');
    return __XomGenericDrawImageString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      type,
      text,
      length,
    );
  }

  _dart__XomGenericDrawImageString __XomGenericDrawImageString;

  void _XmbGenericDrawImageString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XmbGenericDrawImageString ??= _dylib.lookupFunction<
        _c__XmbGenericDrawImageString,
        _dart__XmbGenericDrawImageString>('_XmbGenericDrawImageString');
    return __XmbGenericDrawImageString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__XmbGenericDrawImageString __XmbGenericDrawImageString;

  void _XwcGenericDrawImageString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    int wchar_t,
  ) {
    __XwcGenericDrawImageString ??= _dylib.lookupFunction<
        _c__XwcGenericDrawImageString,
        _dart__XwcGenericDrawImageString>('_XwcGenericDrawImageString');
    return __XwcGenericDrawImageString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      wchar_t,
    );
  }

  _dart__XwcGenericDrawImageString __XwcGenericDrawImageString;

  void _Xutf8GenericDrawImageString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __Xutf8GenericDrawImageString ??= _dylib.lookupFunction<
        _c__Xutf8GenericDrawImageString,
        _dart__Xutf8GenericDrawImageString>('_Xutf8GenericDrawImageString');
    return __Xutf8GenericDrawImageString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__Xutf8GenericDrawImageString __Xutf8GenericDrawImageString;

  int is_rotate(
    int oc,
    ffi.Pointer<ffi.Int32> font,
  ) {
    _is_rotate ??=
        _dylib.lookupFunction<_c_is_rotate, _dart_is_rotate>('is_rotate');
    return _is_rotate(
      oc,
      font,
    );
  }

  _dart_is_rotate _is_rotate;

  int is_codemap(
    int oc,
    ffi.Pointer<ffi.Int32> font,
  ) {
    _is_codemap ??=
        _dylib.lookupFunction<_c_is_codemap, _dart_is_codemap>('is_codemap');
    return _is_codemap(
      oc,
      font,
    );
  }

  _dart_is_codemap _is_codemap;

  int draw_vertical(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    ffi.Pointer<ffi.Int32> font,
    int is_xchar2b,
    int x,
    int y,
    int text,
    int length,
  ) {
    _draw_vertical ??= _dylib
        .lookupFunction<_c_draw_vertical, _dart_draw_vertical>('draw_vertical');
    return _draw_vertical(
      dpy,
      d,
      oc,
      gc,
      font,
      is_xchar2b,
      x,
      y,
      text,
      length,
    );
  }

  _dart_draw_vertical _draw_vertical;

  int DrawStringWithFontSet(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int fs,
    int gc,
    int x,
    int y,
    int text,
    int length,
  ) {
    _DrawStringWithFontSet ??= _dylib.lookupFunction<_c_DrawStringWithFontSet,
        _dart_DrawStringWithFontSet>('DrawStringWithFontSet');
    return _DrawStringWithFontSet(
      dpy,
      d,
      oc,
      fs,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart_DrawStringWithFontSet _DrawStringWithFontSet;

  int _XomGenericDrawString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    int type,
    int text,
    int length,
  ) {
    __XomGenericDrawString ??= _dylib.lookupFunction<_c__XomGenericDrawString,
        _dart__XomGenericDrawString>('_XomGenericDrawString');
    return __XomGenericDrawString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      type,
      text,
      length,
    );
  }

  _dart__XomGenericDrawString __XomGenericDrawString;

  int _XmbGenericDrawString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XmbGenericDrawString ??= _dylib.lookupFunction<_c__XmbGenericDrawString,
        _dart__XmbGenericDrawString>('_XmbGenericDrawString');
    return __XmbGenericDrawString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__XmbGenericDrawString __XmbGenericDrawString;

  int _XwcGenericDrawString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    int wchar_t,
  ) {
    __XwcGenericDrawString ??= _dylib.lookupFunction<_c__XwcGenericDrawString,
        _dart__XwcGenericDrawString>('_XwcGenericDrawString');
    return __XwcGenericDrawString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      wchar_t,
    );
  }

  _dart__XwcGenericDrawString __XwcGenericDrawString;

  int _Xutf8GenericDrawString(
    ffi.Pointer<ffi.Int32> dpy,
    int d,
    int oc,
    int gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __Xutf8GenericDrawString ??= _dylib.lookupFunction<
        _c__Xutf8GenericDrawString,
        _dart__Xutf8GenericDrawString>('_Xutf8GenericDrawString');
    return __Xutf8GenericDrawString(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__Xutf8GenericDrawString __Xutf8GenericDrawString;

  int is_rotate_1(
    int oc,
    ffi.Pointer<ffi.Int32> font,
  ) {
    _is_rotate_1 ??=
        _dylib.lookupFunction<_c_is_rotate_1, _dart_is_rotate_1>('is_rotate');
    return _is_rotate_1(
      oc,
      font,
    );
  }

  _dart_is_rotate_1 _is_rotate_1;

  int is_codemap_1(
    int oc,
    ffi.Pointer<ffi.Int32> font,
  ) {
    _is_codemap_1 ??= _dylib
        .lookupFunction<_c_is_codemap_1, _dart_is_codemap_1>('is_codemap');
    return _is_codemap_1(
      oc,
      font,
    );
  }

  _dart_is_codemap_1 _is_codemap_1;

  int escapement_vertical(
    int oc,
    ffi.Pointer<ffi.Int32> font,
    int is_xchar2b,
    int text,
    int length,
  ) {
    _escapement_vertical ??= _dylib.lookupFunction<_c_escapement_vertical,
        _dart_escapement_vertical>('escapement_vertical');
    return _escapement_vertical(
      oc,
      font,
      is_xchar2b,
      text,
      length,
    );
  }

  _dart_escapement_vertical _escapement_vertical;

  int TextWidthWithFontSet(
    int font_set,
    int oc,
    int text,
    int length,
  ) {
    _TextWidthWithFontSet ??= _dylib.lookupFunction<_c_TextWidthWithFontSet,
        _dart_TextWidthWithFontSet>('TextWidthWithFontSet');
    return _TextWidthWithFontSet(
      font_set,
      oc,
      text,
      length,
    );
  }

  _dart_TextWidthWithFontSet _TextWidthWithFontSet;

  int _XomGenericTextEscapement(
    int oc,
    int type,
    int text,
    int length,
  ) {
    __XomGenericTextEscapement ??= _dylib.lookupFunction<
        _c__XomGenericTextEscapement,
        _dart__XomGenericTextEscapement>('_XomGenericTextEscapement');
    return __XomGenericTextEscapement(
      oc,
      type,
      text,
      length,
    );
  }

  _dart__XomGenericTextEscapement __XomGenericTextEscapement;

  int _XmbGenericTextEscapement(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XmbGenericTextEscapement ??= _dylib.lookupFunction<
        _c__XmbGenericTextEscapement,
        _dart__XmbGenericTextEscapement>('_XmbGenericTextEscapement');
    return __XmbGenericTextEscapement(
      oc,
      text,
      length,
    );
  }

  _dart__XmbGenericTextEscapement __XmbGenericTextEscapement;

  int _XwcGenericTextEscapement(
    int oc,
    int wchar_t,
  ) {
    __XwcGenericTextEscapement ??= _dylib.lookupFunction<
        _c__XwcGenericTextEscapement,
        _dart__XwcGenericTextEscapement>('_XwcGenericTextEscapement');
    return __XwcGenericTextEscapement(
      oc,
      wchar_t,
    );
  }

  _dart__XwcGenericTextEscapement __XwcGenericTextEscapement;

  int _Xutf8GenericTextEscapement(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __Xutf8GenericTextEscapement ??= _dylib.lookupFunction<
        _c__Xutf8GenericTextEscapement,
        _dart__Xutf8GenericTextEscapement>('_Xutf8GenericTextEscapement');
    return __Xutf8GenericTextEscapement(
      oc,
      text,
      length,
    );
  }

  _dart__Xutf8GenericTextEscapement __Xutf8GenericTextEscapement;

  int _XomGenericTextExtents(
    int oc,
    int type,
    int text,
    int length,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __XomGenericTextExtents ??= _dylib.lookupFunction<_c__XomGenericTextExtents,
        _dart__XomGenericTextExtents>('_XomGenericTextExtents');
    return __XomGenericTextExtents(
      oc,
      type,
      text,
      length,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XomGenericTextExtents __XomGenericTextExtents;

  int _XmbGenericTextExtents(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __XmbGenericTextExtents ??= _dylib.lookupFunction<_c__XmbGenericTextExtents,
        _dart__XmbGenericTextExtents>('_XmbGenericTextExtents');
    return __XmbGenericTextExtents(
      oc,
      text,
      length,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XmbGenericTextExtents __XmbGenericTextExtents;

  int _XwcGenericTextExtents(
    int oc,
    int wchar_t,
  ) {
    __XwcGenericTextExtents ??= _dylib.lookupFunction<_c__XwcGenericTextExtents,
        _dart__XwcGenericTextExtents>('_XwcGenericTextExtents');
    return __XwcGenericTextExtents(
      oc,
      wchar_t,
    );
  }

  _dart__XwcGenericTextExtents __XwcGenericTextExtents;

  int _Xutf8GenericTextExtents(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __Xutf8GenericTextExtents ??= _dylib.lookupFunction<
        _c__Xutf8GenericTextExtents,
        _dart__Xutf8GenericTextExtents>('_Xutf8GenericTextExtents');
    return __Xutf8GenericTextExtents(
      oc,
      text,
      length,
      overall_ink,
      overall_logical,
    );
  }

  _dart__Xutf8GenericTextExtents __Xutf8GenericTextExtents;

  int _XomGenericTextPerCharExtents(
    int oc,
    int type,
    int text,
    int length,
    ffi.Pointer<ffi.Int32> ink_buf,
    ffi.Pointer<ffi.Int32> logical_buf,
    int buf_size,
    ffi.Pointer<ffi.Int32> num_chars,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __XomGenericTextPerCharExtents ??= _dylib.lookupFunction<
        _c__XomGenericTextPerCharExtents,
        _dart__XomGenericTextPerCharExtents>('_XomGenericTextPerCharExtents');
    return __XomGenericTextPerCharExtents(
      oc,
      type,
      text,
      length,
      ink_buf,
      logical_buf,
      buf_size,
      num_chars,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XomGenericTextPerCharExtents __XomGenericTextPerCharExtents;

  int _XmbGenericTextPerCharExtents(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<ffi.Int32> ink_buf,
    ffi.Pointer<ffi.Int32> logical_buf,
    int buf_size,
    ffi.Pointer<ffi.Int32> num_chars,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __XmbGenericTextPerCharExtents ??= _dylib.lookupFunction<
        _c__XmbGenericTextPerCharExtents,
        _dart__XmbGenericTextPerCharExtents>('_XmbGenericTextPerCharExtents');
    return __XmbGenericTextPerCharExtents(
      oc,
      text,
      length,
      ink_buf,
      logical_buf,
      buf_size,
      num_chars,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XmbGenericTextPerCharExtents __XmbGenericTextPerCharExtents;

  int _XwcGenericTextPerCharExtents(
    int oc,
    int wchar_t,
  ) {
    __XwcGenericTextPerCharExtents ??= _dylib.lookupFunction<
        _c__XwcGenericTextPerCharExtents,
        _dart__XwcGenericTextPerCharExtents>('_XwcGenericTextPerCharExtents');
    return __XwcGenericTextPerCharExtents(
      oc,
      wchar_t,
    );
  }

  _dart__XwcGenericTextPerCharExtents __XwcGenericTextPerCharExtents;

  int _Xutf8GenericTextPerCharExtents(
    int oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<ffi.Int32> ink_buf,
    ffi.Pointer<ffi.Int32> logical_buf,
    int buf_size,
    ffi.Pointer<ffi.Int32> num_chars,
    ffi.Pointer<ffi.Int32> overall_ink,
    ffi.Pointer<ffi.Int32> overall_logical,
  ) {
    __Xutf8GenericTextPerCharExtents ??= _dylib.lookupFunction<
            _c__Xutf8GenericTextPerCharExtents,
            _dart__Xutf8GenericTextPerCharExtents>(
        '_Xutf8GenericTextPerCharExtents');
    return __Xutf8GenericTextPerCharExtents(
      oc,
      text,
      length,
      ink_buf,
      logical_buf,
      buf_size,
      num_chars,
      overall_ink,
      overall_logical,
    );
  }

  _dart__Xutf8GenericTextPerCharExtents __Xutf8GenericTextPerCharExtents;

  int ismatch_scopes(
    int fontdata,
    ffi.Pointer<ffi.Uint64> value,
    int is_shift,
  ) {
    _ismatch_scopes ??=
        _dylib.lookupFunction<_c_ismatch_scopes, _dart_ismatch_scopes>(
            'ismatch_scopes');
    return _ismatch_scopes(
      fontdata,
      value,
      is_shift,
    );
  }

  _dart_ismatch_scopes _ismatch_scopes;

  int check_vertical_fonttype(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _check_vertical_fonttype ??= _dylib.lookupFunction<
        _c_check_vertical_fonttype,
        _dart_check_vertical_fonttype>('check_vertical_fonttype');
    return _check_vertical_fonttype(
      name,
    );
  }

  _dart_check_vertical_fonttype _check_vertical_fonttype;

  int _XomGetFontDataFromFontSet(
    int fs,
    ffi.Pointer<ffi.Uint8> str,
    int len,
    ffi.Pointer<ffi.Int32> len_ret,
    int is2b,
    int type,
  ) {
    __XomGetFontDataFromFontSet ??= _dylib.lookupFunction<
        _c__XomGetFontDataFromFontSet,
        _dart__XomGetFontDataFromFontSet>('_XomGetFontDataFromFontSet');
    return __XomGetFontDataFromFontSet(
      fs,
      str,
      len,
      len_ret,
      is2b,
      type,
    );
  }

  _dart__XomGetFontDataFromFontSet __XomGetFontDataFromFontSet;

  int _XomGetFontSetFromCharSet(
    int oc,
    int charset,
  ) {
    __XomGetFontSetFromCharSet ??= _dylib.lookupFunction<
        _c__XomGetFontSetFromCharSet,
        _dart__XomGetFontSetFromCharSet>('_XomGetFontSetFromCharSet');
    return __XomGetFontSetFromCharSet(
      oc,
      charset,
    );
  }

  _dart__XomGetFontSetFromCharSet __XomGetFontSetFromCharSet;

  void shift_to_gl(
    ffi.Pointer<ffi.Int8> text,
    int length,
  ) {
    _shift_to_gl ??=
        _dylib.lookupFunction<_c_shift_to_gl, _dart_shift_to_gl>('shift_to_gl');
    return _shift_to_gl(
      text,
      length,
    );
  }

  _dart_shift_to_gl _shift_to_gl;

  void shift_to_gr(
    ffi.Pointer<ffi.Int8> text,
    int length,
  ) {
    _shift_to_gr ??=
        _dylib.lookupFunction<_c_shift_to_gr, _dart_shift_to_gr>('shift_to_gr');
    return _shift_to_gr(
      text,
      length,
    );
  }

  _dart_shift_to_gr _shift_to_gr;

  int load_font_1(
    int oc,
    int font_set,
  ) {
    _load_font_1 ??=
        _dylib.lookupFunction<_c_load_font_1, _dart_load_font_1>('load_font');
    return _load_font_1(
      oc,
      font_set,
    );
  }

  _dart_load_font_1 _load_font_1;

  int _XomConvert(
    int oc,
    int conv,
    ffi.Pointer<ffi.Int32> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Int32> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Int32> args,
    int num_args,
  ) {
    __XomConvert ??=
        _dylib.lookupFunction<_c__XomConvert, _dart__XomConvert>('_XomConvert');
    return __XomConvert(
      oc,
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart__XomConvert __XomConvert;

  int _XomInitConverter(
    int oc,
    int type,
  ) {
    __XomInitConverter ??=
        _dylib.lookupFunction<_c__XomInitConverter, _dart__XomInitConverter>(
            '_XomInitConverter');
    return __XomInitConverter(
      oc,
      type,
    );
  }

  _dart__XomInitConverter __XomInitConverter;

  int _XUpdateGCCache(
    ffi.Pointer<_XGC> gc,
    int mask,
    ffi.Pointer<XGCValues> attr,
  ) {
    __XUpdateGCCache ??=
        _dylib.lookupFunction<_c__XUpdateGCCache, _dart__XUpdateGCCache>(
            '_XUpdateGCCache');
    return __XUpdateGCCache(
      gc,
      mask,
      attr,
    );
  }

  _dart__XUpdateGCCache __XUpdateGCCache;

  void _XNoticeCreateBitmap(
    ffi.Pointer<_XDisplay> dpy,
    int pid,
    int width,
    int height,
  ) {
    __XNoticeCreateBitmap ??= _dylib.lookupFunction<_c__XNoticeCreateBitmap,
        _dart__XNoticeCreateBitmap>('_XNoticeCreateBitmap');
    return __XNoticeCreateBitmap(
      dpy,
      pid,
      width,
      height,
    );
  }

  _dart__XNoticeCreateBitmap __XNoticeCreateBitmap;

  void _XNoticePutBitmap(
    ffi.Pointer<_XDisplay> dpy,
    int draw,
    ffi.Pointer<XImage> image,
  ) {
    __XNoticePutBitmap ??=
        _dylib.lookupFunction<_c__XNoticePutBitmap, _dart__XNoticePutBitmap>(
            '_XNoticePutBitmap');
    return __XNoticePutBitmap(
      dpy,
      draw,
      image,
    );
  }

  _dart__XNoticePutBitmap __XNoticePutBitmap;

  int _XTryShapeBitmapCursor(
    ffi.Pointer<_XDisplay> dpy,
    int source,
    int mask,
    ffi.Pointer<XColor> foreground,
    ffi.Pointer<XColor> background,
    int x,
    int y,
  ) {
    __XTryShapeBitmapCursor ??= _dylib.lookupFunction<_c__XTryShapeBitmapCursor,
        _dart__XTryShapeBitmapCursor>('_XTryShapeBitmapCursor');
    return __XTryShapeBitmapCursor(
      dpy,
      source,
      mask,
      foreground,
      background,
      x,
      y,
    );
  }

  _dart__XTryShapeBitmapCursor __XTryShapeBitmapCursor;

  int XCheckIfEvent(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> event,
    ffi.Pointer<ffi.NativeFunction<_typedefC_70>> Bool,
    ffi.Pointer<ffi.Int8> arg,
  ) {
    _XCheckIfEvent ??= _dylib
        .lookupFunction<_c_XCheckIfEvent, _dart_XCheckIfEvent>('XCheckIfEvent');
    return _XCheckIfEvent(
      dpy,
      event,
      Bool,
      arg,
    );
  }

  _dart_XCheckIfEvent _XCheckIfEvent;

  int XCheckMaskEvent(
    ffi.Pointer<ffi.Int32> dpy,
    int mask,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XCheckMaskEvent ??=
        _dylib.lookupFunction<_c_XCheckMaskEvent, _dart_XCheckMaskEvent>(
            'XCheckMaskEvent');
    return _XCheckMaskEvent(
      dpy,
      mask,
      event,
    );
  }

  _dart_XCheckMaskEvent _XCheckMaskEvent;

  int XCheckTypedEvent(
    ffi.Pointer<ffi.Int32> dpy,
    int type,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XCheckTypedEvent ??=
        _dylib.lookupFunction<_c_XCheckTypedEvent, _dart_XCheckTypedEvent>(
            'XCheckTypedEvent');
    return _XCheckTypedEvent(
      dpy,
      type,
      event,
    );
  }

  _dart_XCheckTypedEvent _XCheckTypedEvent;

  int XCheckTypedWindowEvent(
    ffi.Pointer<ffi.Int32> dpy,
    int w,
    int type,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XCheckTypedWindowEvent ??= _dylib.lookupFunction<_c_XCheckTypedWindowEvent,
        _dart_XCheckTypedWindowEvent>('XCheckTypedWindowEvent');
    return _XCheckTypedWindowEvent(
      dpy,
      w,
      type,
      event,
    );
  }

  _dart_XCheckTypedWindowEvent _XCheckTypedWindowEvent;

  int XCheckWindowEvent(
    ffi.Pointer<ffi.Int32> dpy,
    int w,
    int mask,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XCheckWindowEvent ??=
        _dylib.lookupFunction<_c_XCheckWindowEvent, _dart_XCheckWindowEvent>(
            'XCheckWindowEvent');
    return _XCheckWindowEvent(
      dpy,
      w,
      mask,
      event,
    );
  }

  _dart_XCheckWindowEvent _XCheckWindowEvent;

  int _XConnectXCB(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int8> display,
    ffi.Pointer<ffi.Int32> screenp,
  ) {
    __XConnectXCB ??= _dylib
        .lookupFunction<_c__XConnectXCB, _dart__XConnectXCB>('_XConnectXCB');
    return __XConnectXCB(
      dpy,
      display,
      screenp,
    );
  }

  _dart__XConnectXCB __XConnectXCB;

  void _XFreeX11XCBStructure(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XFreeX11XCBStructure ??= _dylib.lookupFunction<_c__XFreeX11XCBStructure,
        _dart__XFreeX11XCBStructure>('_XFreeX11XCBStructure');
    return __XFreeX11XCBStructure(
      dpy,
    );
  }

  _dart__XFreeX11XCBStructure __XFreeX11XCBStructure;

  int _XNextRequest(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XNextRequest ??= _dylib
        .lookupFunction<_c__XNextRequest, _dart__XNextRequest>('_XNextRequest');
    return __XNextRequest(
      dpy,
    );
  }

  _dart__XNextRequest __XNextRequest;

  void _XFreeDisplayStructure(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XFreeDisplayStructure ??= _dylib.lookupFunction<_c__XFreeDisplayStructure,
        _dart__XFreeDisplayStructure>('_XFreeDisplayStructure');
    return __XFreeDisplayStructure(
      dpy,
    );
  }

  _dart__XFreeDisplayStructure __XFreeDisplayStructure;

  void _XcmsDeleteCmapRec(
    ffi.Pointer<_XDisplay> dpy,
    int cmap,
  ) {
    __XcmsDeleteCmapRec ??=
        _dylib.lookupFunction<_c__XcmsDeleteCmapRec, _dart__XcmsDeleteCmapRec>(
            '_XcmsDeleteCmapRec');
    return __XcmsDeleteCmapRec(
      dpy,
      cmap,
    );
  }

  _dart__XcmsDeleteCmapRec __XcmsDeleteCmapRec;

  void ResizeTable(
    ffi.Pointer<DB> db,
  ) {
    _ResizeTable ??=
        _dylib.lookupFunction<_c_ResizeTable, _dart_ResizeTable>('ResizeTable');
    return _ResizeTable(
      db,
    );
  }

  _dart_ResizeTable _ResizeTable;

  void _XFreeContextDB(
    ffi.Pointer<ffi.Int32> display,
  ) {
    __XFreeContextDB ??=
        _dylib.lookupFunction<_c__XFreeContextDB, _dart__XFreeContextDB>(
            '_XFreeContextDB');
    return __XFreeContextDB(
      display,
    );
  }

  _dart__XFreeContextDB __XFreeContextDB;

  ffi.Pointer<ffi.Int32> _XcmsCopyCmapRecAndFree(
    ffi.Pointer<ffi.Int32> dpy,
    int src_cmap,
    int copy_cmap,
  ) {
    __XcmsCopyCmapRecAndFree ??= _dylib.lookupFunction<
        _c__XcmsCopyCmapRecAndFree,
        _dart__XcmsCopyCmapRecAndFree>('_XcmsCopyCmapRecAndFree');
    return __XcmsCopyCmapRecAndFree(
      dpy,
      src_cmap,
      copy_cmap,
    );
  }

  _dart__XcmsCopyCmapRecAndFree __XcmsCopyCmapRecAndFree;

  void _XGenerateGCList(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<_XGC> gc,
    ffi.Pointer<ffi.Int32> req,
  ) {
    __XGenerateGCList ??=
        _dylib.lookupFunction<_c__XGenerateGCList, _dart__XGenerateGCList>(
            '_XGenerateGCList');
    return __XGenerateGCList(
      dpy,
      gc,
      req,
    );
  }

  _dart__XGenerateGCList __XGenerateGCList;

  ffi.Pointer<ffi.Void> xreallocarray(
    ffi.Pointer<ffi.Void> optr,
    int nmemb,
    int size,
  ) {
    _xreallocarray ??= _dylib
        .lookupFunction<_c_xreallocarray, _dart_xreallocarray>('xreallocarray');
    return _xreallocarray(
      optr,
      nmemb,
      size,
    );
  }

  _dart_xreallocarray _xreallocarray;

  int _XEventToWire(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> re,
    ffi.Pointer<ffi.Int32> event,
  ) {
    __XEventToWire ??= _dylib
        .lookupFunction<_c__XEventToWire, _dart__XEventToWire>('_XEventToWire');
    return __XEventToWire(
      dpy,
      re,
      event,
    );
  }

  _dart__XEventToWire __XEventToWire;

  int XFilterEvent(
    ffi.Pointer<ffi.Int32> ev,
    int window,
  ) {
    _XFilterEvent ??= _dylib
        .lookupFunction<_c_XFilterEvent, _dart_XFilterEvent>('XFilterEvent');
    return _XFilterEvent(
      ev,
      window,
    );
  }

  _dart_XFilterEvent _XFilterEvent;

  ffi.Pointer<ffi.Int32> _XQueryFont(
    ffi.Pointer<ffi.Int32> arg0,
    int Font,
    int arg2,
  ) {
    __XQueryFont ??=
        _dylib.lookupFunction<_c__XQueryFont, _dart__XQueryFont>('_XQueryFont');
    return __XQueryFont(
      arg0,
      Font,
      arg2,
    );
  }

  _dart__XQueryFont __XQueryFont;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> _XParseBaseFontNameList(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int32> num,
  ) {
    __XParseBaseFontNameList ??= _dylib.lookupFunction<
        _c__XParseBaseFontNameList,
        _dart__XParseBaseFontNameList>('_XParseBaseFontNameList');
    return __XParseBaseFontNameList(
      str,
      num,
    );
  }

  _dart__XParseBaseFontNameList __XParseBaseFontNameList;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> copy_string_list(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> string_list,
    int list_count,
  ) {
    _copy_string_list ??=
        _dylib.lookupFunction<_c_copy_string_list, _dart_copy_string_list>(
            'copy_string_list');
    return _copy_string_list(
      string_list,
      list_count,
    );
  }

  _dart_copy_string_list _copy_string_list;

  void _XUpdateAtomCache(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int8> name,
    int atom,
    int sig,
    int idx,
    int n,
  ) {
    __XUpdateAtomCache ??=
        _dylib.lookupFunction<_c__XUpdateAtomCache, _dart__XUpdateAtomCache>(
            '_XUpdateAtomCache');
    return __XUpdateAtomCache(
      dpy,
      name,
      atom,
      sig,
      idx,
      n,
    );
  }

  _dart__XUpdateAtomCache __XUpdateAtomCache;

  void _XFreeAtomTable(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XFreeAtomTable ??=
        _dylib.lookupFunction<_c__XFreeAtomTable, _dart__XFreeAtomTable>(
            '_XFreeAtomTable');
    return __XFreeAtomTable(
      dpy,
    );
  }

  _dart__XFreeAtomTable __XFreeAtomTable;

  ffi.Pointer<ffi.Int8> _XGetAtomName(
    ffi.Pointer<_XDisplay> dpy,
    int atom,
  ) {
    __XGetAtomName ??= _dylib
        .lookupFunction<_c__XGetAtomName, _dart__XGetAtomName>('_XGetAtomName');
    return __XGetAtomName(
      dpy,
      atom,
    );
  }

  _dart__XGetAtomName __XGetAtomName;

  int _XGetAtomNameHandler(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int32> rep,
    ffi.Pointer<ffi.Int8> buf,
    int len,
    ffi.Pointer<ffi.Int8> data,
  ) {
    __XGetAtomNameHandler ??= _dylib.lookupFunction<_c__XGetAtomNameHandler,
        _dart__XGetAtomNameHandler>('_XGetAtomNameHandler');
    return __XGetAtomNameHandler(
      dpy,
      rep,
      buf,
      len,
      data,
    );
  }

  _dart__XGetAtomNameHandler __XGetAtomNameHandler;

  void setpwent() {
    _setpwent ??=
        _dylib.lookupFunction<_c_setpwent, _dart_setpwent>('setpwent');
    return _setpwent();
  }

  _dart_setpwent _setpwent;

  void endpwent() {
    _endpwent ??=
        _dylib.lookupFunction<_c_endpwent, _dart_endpwent>('endpwent');
    return _endpwent();
  }

  _dart_endpwent _endpwent;

  ffi.Pointer<passwd> getpwent() {
    _getpwent ??=
        _dylib.lookupFunction<_c_getpwent, _dart_getpwent>('getpwent');
    return _getpwent();
  }

  _dart_getpwent _getpwent;

  ffi.Pointer<passwd> fgetpwent(
    ffi.Pointer<_IO_FILE> __stream,
  ) {
    _fgetpwent ??=
        _dylib.lookupFunction<_c_fgetpwent, _dart_fgetpwent>('fgetpwent');
    return _fgetpwent(
      __stream,
    );
  }

  _dart_fgetpwent _fgetpwent;

  int putpwent(
    ffi.Pointer<passwd> __p,
    ffi.Pointer<_IO_FILE> __f,
  ) {
    _putpwent ??=
        _dylib.lookupFunction<_c_putpwent, _dart_putpwent>('putpwent');
    return _putpwent(
      __p,
      __f,
    );
  }

  _dart_putpwent _putpwent;

  ffi.Pointer<passwd> getpwuid(
    int __uid,
  ) {
    _getpwuid ??=
        _dylib.lookupFunction<_c_getpwuid, _dart_getpwuid>('getpwuid');
    return _getpwuid(
      __uid,
    );
  }

  _dart_getpwuid _getpwuid;

  ffi.Pointer<passwd> getpwnam(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _getpwnam ??=
        _dylib.lookupFunction<_c_getpwnam, _dart_getpwnam>('getpwnam');
    return _getpwnam(
      __name,
    );
  }

  _dart_getpwnam _getpwnam;

  int getpwent_r(
    ffi.Pointer<passwd> __resultbuf,
    ffi.Pointer<ffi.Int8> __buffer,
    int __buflen,
    ffi.Pointer<ffi.Pointer<passwd>> __result,
  ) {
    _getpwent_r ??=
        _dylib.lookupFunction<_c_getpwent_r, _dart_getpwent_r>('getpwent_r');
    return _getpwent_r(
      __resultbuf,
      __buffer,
      __buflen,
      __result,
    );
  }

  _dart_getpwent_r _getpwent_r;

  int getpwuid_r(
    int __uid,
    ffi.Pointer<passwd> __resultbuf,
    ffi.Pointer<ffi.Int8> __buffer,
    int __buflen,
    ffi.Pointer<ffi.Pointer<passwd>> __result,
  ) {
    _getpwuid_r ??=
        _dylib.lookupFunction<_c_getpwuid_r, _dart_getpwuid_r>('getpwuid_r');
    return _getpwuid_r(
      __uid,
      __resultbuf,
      __buffer,
      __buflen,
      __result,
    );
  }

  _dart_getpwuid_r _getpwuid_r;

  int getpwnam_r(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<passwd> __resultbuf,
    ffi.Pointer<ffi.Int8> __buffer,
    int __buflen,
    ffi.Pointer<ffi.Pointer<passwd>> __result,
  ) {
    _getpwnam_r ??=
        _dylib.lookupFunction<_c_getpwnam_r, _dart_getpwnam_r>('getpwnam_r');
    return _getpwnam_r(
      __name,
      __resultbuf,
      __buffer,
      __buflen,
      __result,
    );
  }

  _dart_getpwnam_r _getpwnam_r;

  int fgetpwent_r(
    ffi.Pointer<_IO_FILE> __stream,
    ffi.Pointer<passwd> __resultbuf,
    ffi.Pointer<ffi.Int8> __buffer,
    int __buflen,
    ffi.Pointer<ffi.Pointer<passwd>> __result,
  ) {
    _fgetpwent_r ??=
        _dylib.lookupFunction<_c_fgetpwent_r, _dart_fgetpwent_r>('fgetpwent_r');
    return _fgetpwent_r(
      __stream,
      __resultbuf,
      __buffer,
      __buflen,
      __result,
    );
  }

  _dart_fgetpwent_r _fgetpwent_r;

  ffi.Pointer<ffi.Int8> GetHomeDir(
    ffi.Pointer<ffi.Int8> dest,
    int len,
  ) {
    _GetHomeDir ??=
        _dylib.lookupFunction<_c_GetHomeDir, _dart_GetHomeDir>('GetHomeDir');
    return _GetHomeDir(
      dest,
      len,
    );
  }

  _dart_GetHomeDir _GetHomeDir;

  ffi.Pointer<_XrmHashBucketRec> InitDefaults(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _InitDefaults ??= _dylib
        .lookupFunction<_c_InitDefaults, _dart_InitDefaults>('InitDefaults');
    return _InitDefaults(
      dpy,
    );
  }

  _dart_InitDefaults _InitDefaults;

  int Ones(
    int mask,
  ) {
    _Ones ??= _dylib.lookupFunction<_c_Ones, _dart_Ones>('Ones');
    return _Ones(
      mask,
    );
  }

  _dart_Ones _Ones;

  int _XWAttrsHandler(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> rep,
    ffi.Pointer<ffi.Int8> buf,
    int len,
    int data,
  ) {
    __XWAttrsHandler ??=
        _dylib.lookupFunction<_c__XWAttrsHandler, _dart__XWAttrsHandler>(
            '_XWAttrsHandler');
    return __XWAttrsHandler(
      dpy,
      rep,
      buf,
      len,
      data,
    );
  }

  _dart__XWAttrsHandler __XWAttrsHandler;

  int changehost(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> host,
    int mode,
  ) {
    _changehost ??=
        _dylib.lookupFunction<_c_changehost, _dart_changehost>('changehost');
    return _changehost(
      dpy,
      host,
      mode,
    );
  }

  _dart_changehost _changehost;

  int XIfEvent(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> event,
    ffi.Pointer<ffi.NativeFunction<_typedefC_79>> Bool,
    ffi.Pointer<ffi.Int8> arg,
  ) {
    _XIfEvent ??=
        _dylib.lookupFunction<_c_XIfEvent, _dart_XIfEvent>('XIfEvent');
    return _XIfEvent(
      dpy,
      event,
      Bool,
      arg,
    );
  }

  _dart_XIfEvent _XIfEvent;

  int _XimGetLocaleCode(
    ffi.Pointer<ffi.Int32> encoding_name,
  ) {
    __XimGetLocaleCode ??=
        _dylib.lookupFunction<_c__XimGetLocaleCode, _dart__XimGetLocaleCode>(
            '_XimGetLocaleCode');
    return __XimGetLocaleCode(
      encoding_name,
    );
  }

  _dart__XimGetLocaleCode __XimGetLocaleCode;

  int _XimGetCharCode(
    int ucs_conv,
    int keysym,
    ffi.Pointer<ffi.Uint8> buf,
    int nbytes,
  ) {
    __XimGetCharCode ??=
        _dylib.lookupFunction<_c__XimGetCharCode, _dart__XimGetCharCode>(
            '_XimGetCharCode');
    return __XimGetCharCode(
      ucs_conv,
      keysym,
      buf,
      nbytes,
    );
  }

  _dart__XimGetCharCode __XimGetCharCode;

  int _XimLookupMBText(
    int ic,
    ffi.Pointer<ffi.Int32> event,
    ffi.Pointer<ffi.Int8> buffer,
    int nbytes,
    ffi.Pointer<ffi.Int32> keysym,
    ffi.Pointer<ffi.Int32> status,
  ) {
    __XimLookupMBText ??=
        _dylib.lookupFunction<_c__XimLookupMBText, _dart__XimLookupMBText>(
            '_XimLookupMBText');
    return __XimLookupMBText(
      ic,
      event,
      buffer,
      nbytes,
      keysym,
      status,
    );
  }

  _dart__XimLookupMBText __XimLookupMBText;

  int _XimLookupWCText(
    int ic,
    ffi.Pointer<ffi.Int32> event,
    ffi.Pointer<ffi.Int32> buffer,
    int nbytes,
    ffi.Pointer<ffi.Int32> keysym,
    ffi.Pointer<ffi.Int32> status,
  ) {
    __XimLookupWCText ??=
        _dylib.lookupFunction<_c__XimLookupWCText, _dart__XimLookupWCText>(
            '_XimLookupWCText');
    return __XimLookupWCText(
      ic,
      event,
      buffer,
      nbytes,
      keysym,
      status,
    );
  }

  _dart__XimLookupWCText __XimLookupWCText;

  int _XimLookupUTF8Text(
    int ic,
    ffi.Pointer<ffi.Int32> event,
    ffi.Pointer<ffi.Int8> buffer,
    int nbytes,
    ffi.Pointer<ffi.Int32> keysym,
    ffi.Pointer<ffi.Int32> status,
  ) {
    __XimLookupUTF8Text ??=
        _dylib.lookupFunction<_c__XimLookupUTF8Text, _dart__XimLookupUTF8Text>(
            '_XimLookupUTF8Text');
    return __XimLookupUTF8Text(
      ic,
      event,
      buffer,
      nbytes,
      keysym,
      status,
    );
  }

  _dart__XimLookupUTF8Text __XimLookupUTF8Text;

  int _XDestroyImage(
    ffi.Pointer<XImage> arg0,
  ) {
    __XDestroyImage ??=
        _dylib.lookupFunction<_c__XDestroyImage, _dart__XDestroyImage>(
            '_XDestroyImage');
    return __XDestroyImage(
      arg0,
    );
  }

  _dart__XDestroyImage __XDestroyImage;

  int _XGetPixel(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
  ) {
    __XGetPixel ??=
        _dylib.lookupFunction<_c__XGetPixel, _dart__XGetPixel>('_XGetPixel');
    return __XGetPixel(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XGetPixel __XGetPixel;

  int _XGetPixel1(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
  ) {
    __XGetPixel1 ??=
        _dylib.lookupFunction<_c__XGetPixel1, _dart__XGetPixel1>('_XGetPixel1');
    return __XGetPixel1(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XGetPixel1 __XGetPixel1;

  int _XGetPixel8(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
  ) {
    __XGetPixel8 ??=
        _dylib.lookupFunction<_c__XGetPixel8, _dart__XGetPixel8>('_XGetPixel8');
    return __XGetPixel8(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XGetPixel8 __XGetPixel8;

  int _XGetPixel16(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
  ) {
    __XGetPixel16 ??= _dylib
        .lookupFunction<_c__XGetPixel16, _dart__XGetPixel16>('_XGetPixel16');
    return __XGetPixel16(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XGetPixel16 __XGetPixel16;

  int _XGetPixel32(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
  ) {
    __XGetPixel32 ??= _dylib
        .lookupFunction<_c__XGetPixel32, _dart__XGetPixel32>('_XGetPixel32');
    return __XGetPixel32(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XGetPixel32 __XGetPixel32;

  int _XPutPixel(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    __XPutPixel ??=
        _dylib.lookupFunction<_c__XPutPixel, _dart__XPutPixel>('_XPutPixel');
    return __XPutPixel(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XPutPixel __XPutPixel;

  int _XPutPixel1(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    __XPutPixel1 ??=
        _dylib.lookupFunction<_c__XPutPixel1, _dart__XPutPixel1>('_XPutPixel1');
    return __XPutPixel1(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XPutPixel1 __XPutPixel1;

  int _XPutPixel8(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    __XPutPixel8 ??=
        _dylib.lookupFunction<_c__XPutPixel8, _dart__XPutPixel8>('_XPutPixel8');
    return __XPutPixel8(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XPutPixel8 __XPutPixel8;

  int _XPutPixel16(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    __XPutPixel16 ??= _dylib
        .lookupFunction<_c__XPutPixel16, _dart__XPutPixel16>('_XPutPixel16');
    return __XPutPixel16(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XPutPixel16 __XPutPixel16;

  int _XPutPixel32(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    __XPutPixel32 ??= _dylib
        .lookupFunction<_c__XPutPixel32, _dart__XPutPixel32>('_XPutPixel32');
    return __XPutPixel32(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XPutPixel32 __XPutPixel32;

  ffi.Pointer<XImage> _XSubImage(
    ffi.Pointer<XImage> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    __XSubImage ??=
        _dylib.lookupFunction<_c__XSubImage, _dart__XSubImage>('_XSubImage');
    return __XSubImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart__XSubImage __XSubImage;

  int _XAddPixel(
    ffi.Pointer<XImage> arg0,
    int arg1,
  ) {
    __XAddPixel ??=
        _dylib.lookupFunction<_c__XAddPixel, _dart__XAddPixel>('_XAddPixel');
    return __XAddPixel(
      arg0,
      arg1,
    );
  }

  _dart__XAddPixel __XAddPixel;

  void _xynormalizeimagebits(
    ffi.Pointer<ffi.Uint8> bp,
    ffi.Pointer<XImage> img,
  ) {
    __xynormalizeimagebits ??= _dylib.lookupFunction<_c__xynormalizeimagebits,
        _dart__xynormalizeimagebits>('_xynormalizeimagebits');
    return __xynormalizeimagebits(
      bp,
      img,
    );
  }

  _dart__xynormalizeimagebits __xynormalizeimagebits;

  void _znormalizeimagebits(
    ffi.Pointer<ffi.Uint8> bp,
    ffi.Pointer<XImage> img,
  ) {
    __znormalizeimagebits ??= _dylib.lookupFunction<_c__znormalizeimagebits,
        _dart__znormalizeimagebits>('_znormalizeimagebits');
    return __znormalizeimagebits(
      bp,
      img,
    );
  }

  _dart__znormalizeimagebits __znormalizeimagebits;

  void _putbits(
    ffi.Pointer<ffi.Int8> src,
    int dstoffset,
    int numbits,
    ffi.Pointer<ffi.Int8> dst,
  ) {
    __putbits ??=
        _dylib.lookupFunction<_c__putbits, _dart__putbits>('_putbits');
    return __putbits(
      src,
      dstoffset,
      numbits,
      dst,
    );
  }

  _dart__putbits __putbits;

  ffi.Pointer<_XExtension> XLookupExtension(
    ffi.Pointer<_XDisplay> dpy,
    int extension_1,
  ) {
    _XLookupExtension ??=
        _dylib.lookupFunction<_c_XLookupExtension, _dart_XLookupExtension>(
            'XLookupExtension');
    return _XLookupExtension(
      dpy,
      extension_1,
    );
  }

  _dart_XLookupExtension _XLookupExtension;

  int _XInternAtom(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int8> name,
    int onlyIfExists,
    ffi.Pointer<ffi.Uint64> psig,
    ffi.Pointer<ffi.Int32> pidx,
    ffi.Pointer<ffi.Int32> pn,
  ) {
    __XInternAtom ??= _dylib
        .lookupFunction<_c__XInternAtom, _dart__XInternAtom>('_XInternAtom');
    return __XInternAtom(
      dpy,
      name,
      onlyIfExists,
      psig,
      pidx,
      pn,
    );
  }

  _dart__XInternAtom __XInternAtom;

  int _XIntAtomHandler(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int32> rep,
    ffi.Pointer<ffi.Int8> buf,
    int len,
    ffi.Pointer<ffi.Int8> data,
  ) {
    __XIntAtomHandler ??=
        _dylib.lookupFunction<_c__XIntAtomHandler, _dart__XIntAtomHandler>(
            '_XIntAtomHandler');
    return __XIntAtomHandler(
      dpy,
      rep,
      buf,
      len,
      data,
    );
  }

  _dart__XIntAtomHandler __XIntAtomHandler;

  int _XKeyInitialize(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XKeyInitialize ??=
        _dylib.lookupFunction<_c__XKeyInitialize, _dart__XKeyInitialize>(
            '_XKeyInitialize');
    return __XKeyInitialize(
      dpy,
    );
  }

  _dart__XKeyInitialize __XKeyInitialize;

  ffi.Pointer<_XrmHashBucketRec> _XInitKeysymDB() {
    __XInitKeysymDB ??=
        _dylib.lookupFunction<_c__XInitKeysymDB, _dart__XInitKeysymDB>(
            '_XInitKeysymDB');
    return __XInitKeysymDB();
  }

  _dart__XInitKeysymDB __XInitKeysymDB;

  void ComputeMaskFromKeytrans(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<_XKeytrans> p,
  ) {
    _ComputeMaskFromKeytrans ??= _dylib.lookupFunction<
        _c_ComputeMaskFromKeytrans,
        _dart_ComputeMaskFromKeytrans>('ComputeMaskFromKeytrans');
    return _ComputeMaskFromKeytrans(
      dpy,
      p,
    );
  }

  _dart_ComputeMaskFromKeytrans _ComputeMaskFromKeytrans;

  int KeyCodetoKeySym(
    ffi.Pointer<_XDisplay> dpy,
    int keycode,
    int col,
  ) {
    _KeyCodetoKeySym ??=
        _dylib.lookupFunction<_c_KeyCodetoKeySym, _dart_KeyCodetoKeySym>(
            'KeyCodetoKeySym');
    return _KeyCodetoKeySym(
      dpy,
      keycode,
      col,
    );
  }

  _dart_KeyCodetoKeySym _KeyCodetoKeySym;

  void ResetModMap(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _ResetModMap ??=
        _dylib.lookupFunction<_c_ResetModMap, _dart_ResetModMap>('ResetModMap');
    return _ResetModMap(
      dpy,
    );
  }

  _dart_ResetModMap _ResetModMap;

  int InitModMap(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _InitModMap ??=
        _dylib.lookupFunction<_c_InitModMap, _dart_InitModMap>('InitModMap');
    return _InitModMap(
      dpy,
    );
  }

  _dart_InitModMap _InitModMap;

  void UCSConvertCase(
    int code,
    ffi.Pointer<ffi.Uint64> lower,
    ffi.Pointer<ffi.Uint64> upper,
  ) {
    _UCSConvertCase ??=
        _dylib.lookupFunction<_c_UCSConvertCase, _dart_UCSConvertCase>(
            'UCSConvertCase');
    return _UCSConvertCase(
      code,
      lower,
      upper,
    );
  }

  _dart_UCSConvertCase _UCSConvertCase;

  int _XTranslateKey(
    ffi.Pointer<_XDisplay> dpy,
    int keycode,
    int modifiers,
    ffi.Pointer<ffi.Uint32> modifiers_return,
    ffi.Pointer<ffi.Uint64> keysym_return,
  ) {
    __XTranslateKey ??=
        _dylib.lookupFunction<_c__XTranslateKey, _dart__XTranslateKey>(
            '_XTranslateKey');
    return __XTranslateKey(
      dpy,
      keycode,
      modifiers,
      modifiers_return,
      keysym_return,
    );
  }

  _dart__XTranslateKey __XTranslateKey;

  int _XTranslateKeySym(
    ffi.Pointer<_XDisplay> dpy,
    int symbol,
    int modifiers,
    ffi.Pointer<ffi.Int8> buffer,
    int nbytes,
  ) {
    __XTranslateKeySym ??=
        _dylib.lookupFunction<_c__XTranslateKeySym, _dart__XTranslateKeySym>(
            '_XTranslateKeySym');
    return __XTranslateKeySym(
      dpy,
      symbol,
      modifiers,
      buffer,
      nbytes,
    );
  }

  _dart__XTranslateKeySym __XTranslateKeySym;

  void _XFreeKeyBindings(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XFreeKeyBindings ??=
        _dylib.lookupFunction<_c__XFreeKeyBindings, _dart__XFreeKeyBindings>(
            '_XFreeKeyBindings');
    return __XFreeKeyBindings(
      dpy,
    );
  }

  _dart__XFreeKeyBindings __XFreeKeyBindings;

  int _XKeysymToModifiers(
    ffi.Pointer<_XDisplay> dpy,
    int ks,
  ) {
    __XKeysymToModifiers ??= _dylib.lookupFunction<_c__XKeysymToModifiers,
        _dart__XKeysymToModifiers>('_XKeysymToModifiers');
    return __XKeysymToModifiers(
      dpy,
      ks,
    );
  }

  _dart__XKeysymToModifiers __XKeysymToModifiers;

  int imaxabs(
    int __n,
  ) {
    _imaxabs ??= _dylib.lookupFunction<_c_imaxabs, _dart_imaxabs>('imaxabs');
    return _imaxabs(
      __n,
    );
  }

  _dart_imaxabs _imaxabs;

  int strtoimax(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoimax ??=
        _dylib.lookupFunction<_c_strtoimax, _dart_strtoimax>('strtoimax');
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoimax _strtoimax;

  int strtoumax(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    _strtoumax ??=
        _dylib.lookupFunction<_c_strtoumax, _dart_strtoumax>('strtoumax');
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_strtoumax _strtoumax;

  int wcstoimax(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
    int __base,
  ) {
    _wcstoimax ??=
        _dylib.lookupFunction<_c_wcstoimax, _dart_wcstoimax>('wcstoimax');
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_wcstoimax _wcstoimax;

  int wcstoumax(
    ffi.Pointer<ffi.Int32> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
    int __base,
  ) {
    _wcstoumax ??=
        _dylib.lookupFunction<_c_wcstoumax, _dart_wcstoumax>('wcstoumax');
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  _dart_wcstoumax _wcstoumax;

  int _XrmInternalStringToQuark(
    ffi.Pointer<ffi.Int8> name,
    int len,
    int sig,
    int permstring,
  ) {
    __XrmInternalStringToQuark ??= _dylib.lookupFunction<
        _c__XrmInternalStringToQuark,
        _dart__XrmInternalStringToQuark>('_XrmInternalStringToQuark');
    return __XrmInternalStringToQuark(
      name,
      len,
      sig,
      permstring,
    );
  }

  _dart__XrmInternalStringToQuark __XrmInternalStringToQuark;

  int SameValue(
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> db,
    ffi.Pointer<ffi.Int32> bindings,
    ffi.Pointer<ffi.Int32> quarks,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<XrmValuePtr> value,
    ffi.Pointer<ffi.Int8> data,
  ) {
    _SameValue ??=
        _dylib.lookupFunction<_c_SameValue, _dart_SameValue>('SameValue');
    return _SameValue(
      db,
      bindings,
      quarks,
      type,
      value,
      data,
    );
  }

  _dart_SameValue _SameValue;

  int XDestroyImage(
    ffi.Pointer<XImage> ximage,
  ) {
    _XDestroyImage_1 ??= _dylib
        .lookupFunction<_c_XDestroyImage, _dart_XDestroyImage>('XDestroyImage');
    return _XDestroyImage_1(
      ximage,
    );
  }

  _dart_XDestroyImage _XDestroyImage_1;

  int XGetPixel(
    ffi.Pointer<XImage> ximage,
    int x,
    int y,
  ) {
    _XGetPixel_1 ??=
        _dylib.lookupFunction<_c_XGetPixel, _dart_XGetPixel>('XGetPixel');
    return _XGetPixel_1(
      ximage,
      x,
      y,
    );
  }

  _dart_XGetPixel _XGetPixel_1;

  int XPutPixel(
    ffi.Pointer<XImage> ximage,
    int x,
    int y,
    int pixel,
  ) {
    _XPutPixel_1 ??=
        _dylib.lookupFunction<_c_XPutPixel, _dart_XPutPixel>('XPutPixel');
    return _XPutPixel_1(
      ximage,
      x,
      y,
      pixel,
    );
  }

  _dart_XPutPixel _XPutPixel_1;

  ffi.Pointer<XImage> XSubImage(
    ffi.Pointer<XImage> ximage,
    int x,
    int y,
    int width,
    int height,
  ) {
    _XSubImage_1 ??=
        _dylib.lookupFunction<_c_XSubImage, _dart_XSubImage>('XSubImage');
    return _XSubImage_1(
      ximage,
      x,
      y,
      width,
      height,
    );
  }

  _dart_XSubImage _XSubImage_1;

  int XAddPixel(
    ffi.Pointer<XImage> ximage,
    int value,
  ) {
    _XAddPixel_1 ??=
        _dylib.lookupFunction<_c_XAddPixel, _dart_XAddPixel>('XAddPixel');
    return _XAddPixel_1(
      ximage,
      value,
    );
  }

  _dart_XAddPixel _XAddPixel_1;

  int XMaskEvent(
    ffi.Pointer<ffi.Int32> dpy,
    int mask,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XMaskEvent ??=
        _dylib.lookupFunction<_c_XMaskEvent, _dart_XMaskEvent>('XMaskEvent');
    return _XMaskEvent(
      dpy,
      mask,
      event,
    );
  }

  _dart_XMaskEvent _XMaskEvent;

  int XNextEvent(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XNextEvent ??=
        _dylib.lookupFunction<_c_XNextEvent, _dart_XNextEvent>('XNextEvent');
    return _XNextEvent(
      dpy,
      event,
    );
  }

  _dart_XNextEvent _XNextEvent;

  void OutOfMemory(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _OutOfMemory ??=
        _dylib.lookupFunction<_c_OutOfMemory, _dart_OutOfMemory>('OutOfMemory');
    return _OutOfMemory(
      dpy,
    );
  }

  _dart_OutOfMemory _OutOfMemory;

  ffi.Pointer<ffi.Int8> __XOS2RedirRoot(
    ffi.Pointer<ffi.Int8> fname,
  ) {
    ___XOS2RedirRoot ??=
        _dylib.lookupFunction<_c___XOS2RedirRoot, _dart___XOS2RedirRoot>(
            '__XOS2RedirRoot');
    return ___XOS2RedirRoot(
      fname,
    );
  }

  _dart___XOS2RedirRoot ___XOS2RedirRoot;

  ffi.Pointer<ffi.Int8> __XOS2RedirRoot1(
    ffi.Pointer<ffi.Int8> format,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    ___XOS2RedirRoot1 ??=
        _dylib.lookupFunction<_c___XOS2RedirRoot1, _dart___XOS2RedirRoot1>(
            '__XOS2RedirRoot1');
    return ___XOS2RedirRoot1(
      format,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart___XOS2RedirRoot1 ___XOS2RedirRoot1;

  int os2_get_sys_millis() {
    _os2_get_sys_millis ??=
        _dylib.lookupFunction<_c_os2_get_sys_millis, _dart_os2_get_sys_millis>(
            'os2_get_sys_millis');
    return _os2_get_sys_millis();
  }

  _dart_os2_get_sys_millis _os2_get_sys_millis;

  int os2ClientSelect(
    int nfds,
    ffi.Pointer<fd_set> readfds,
    ffi.Pointer<fd_set> writefds,
    ffi.Pointer<fd_set> exceptfds,
    ffi.Pointer<timeval> timeout,
  ) {
    _os2ClientSelect ??=
        _dylib.lookupFunction<_c_os2ClientSelect, _dart_os2ClientSelect>(
            'os2ClientSelect');
    return _os2ClientSelect(
      nfds,
      readfds,
      writefds,
      exceptfds,
      timeout,
    );
  }

  _dart_os2ClientSelect _os2ClientSelect;

  int os2_parse_select(
    ffi.Pointer<select_data> sd,
    int nfds,
  ) {
    _os2_parse_select ??=
        _dylib.lookupFunction<_c_os2_parse_select, _dart_os2_parse_select>(
            'os2_parse_select');
    return _os2_parse_select(
      sd,
      nfds,
    );
  }

  _dart_os2_parse_select _os2_parse_select;

  int os2_check_sockets(
    ffi.Pointer<select_data> sd,
    ffi.Pointer<fd_set> readfds,
    ffi.Pointer<fd_set> writefds,
  ) {
    _os2_check_sockets ??=
        _dylib.lookupFunction<_c_os2_check_sockets, _dart_os2_check_sockets>(
            'os2_check_sockets');
    return _os2_check_sockets(
      sd,
      readfds,
      writefds,
    );
  }

  _dart_os2_check_sockets _os2_check_sockets;

  int os2_check_pipes(
    ffi.Pointer<select_data> sd,
    ffi.Pointer<fd_set> readfds,
    ffi.Pointer<fd_set> writefds,
  ) {
    _os2_check_pipes ??=
        _dylib.lookupFunction<_c_os2_check_pipes, _dart_os2_check_pipes>(
            'os2_check_pipes');
    return _os2_check_pipes(
      sd,
      readfds,
      writefds,
    );
  }

  _dart_os2_check_pipes _os2_check_pipes;

  void _XReportParseError(
    ffi.Pointer<XrmOptionDescList> arg,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    __XReportParseError ??=
        _dylib.lookupFunction<_c__XReportParseError, _dart__XReportParseError>(
            '_XReportParseError');
    return __XReportParseError(
      arg,
      msg,
    );
  }

  _dart__XReportParseError __XReportParseError;

  int ReadInteger(
    ffi.Pointer<ffi.Int8> string,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> NextString,
  ) {
    _ReadInteger ??=
        _dylib.lookupFunction<_c_ReadInteger, _dart_ReadInteger>('ReadInteger');
    return _ReadInteger(
      string,
      NextString,
    );
  }

  _dart_ReadInteger _ReadInteger;

  int XPeekEvent(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XPeekEvent ??=
        _dylib.lookupFunction<_c_XPeekEvent, _dart_XPeekEvent>('XPeekEvent');
    return _XPeekEvent(
      dpy,
      event,
    );
  }

  _dart_XPeekEvent _XPeekEvent;

  int XPeekIfEvent(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> event,
    ffi.Pointer<ffi.NativeFunction<_typedefC_83>> Bool,
    ffi.Pointer<ffi.Int8> arg,
  ) {
    _XPeekIfEvent ??= _dylib
        .lookupFunction<_c_XPeekIfEvent, _dart_XPeekIfEvent>('XPeekIfEvent');
    return _XPeekIfEvent(
      dpy,
      event,
      Bool,
      arg,
    );
  }

  _dart_XPeekIfEvent _XPeekIfEvent;

  void InsertEdgeInET(
    ffi.Pointer<EdgeTable> ET,
    ffi.Pointer<EdgeTableEntry> ETE,
    int scanline,
    ffi.Pointer<ffi.Pointer<ScanLineListBlock>> SLLBlock,
    ffi.Pointer<ffi.Int32> iSLLBlock,
  ) {
    _InsertEdgeInET ??=
        _dylib.lookupFunction<_c_InsertEdgeInET, _dart_InsertEdgeInET>(
            'InsertEdgeInET');
    return _InsertEdgeInET(
      ET,
      ETE,
      scanline,
      SLLBlock,
      iSLLBlock,
    );
  }

  _dart_InsertEdgeInET _InsertEdgeInET;

  void CreateETandAET(
    int count,
    ffi.Pointer<ffi.Int32> pts,
    ffi.Pointer<EdgeTable> ET,
    ffi.Pointer<EdgeTableEntry> AET,
    ffi.Pointer<EdgeTableEntry> pETEs,
    ffi.Pointer<ScanLineListBlock> pSLLBlock,
  ) {
    _CreateETandAET ??=
        _dylib.lookupFunction<_c_CreateETandAET, _dart_CreateETandAET>(
            'CreateETandAET');
    return _CreateETandAET(
      count,
      pts,
      ET,
      AET,
      pETEs,
      pSLLBlock,
    );
  }

  _dart_CreateETandAET _CreateETandAET;

  void loadAET(
    ffi.Pointer<EdgeTableEntry> AET,
    ffi.Pointer<EdgeTableEntry> ETEs,
  ) {
    _loadAET ??= _dylib.lookupFunction<_c_loadAET, _dart_loadAET>('loadAET');
    return _loadAET(
      AET,
      ETEs,
    );
  }

  _dart_loadAET _loadAET;

  void computeWAET(
    ffi.Pointer<EdgeTableEntry> AET,
  ) {
    _computeWAET ??=
        _dylib.lookupFunction<_c_computeWAET, _dart_computeWAET>('computeWAET');
    return _computeWAET(
      AET,
    );
  }

  _dart_computeWAET _computeWAET;

  int InsertionSort(
    ffi.Pointer<EdgeTableEntry> AET,
  ) {
    _InsertionSort ??= _dylib
        .lookupFunction<_c_InsertionSort, _dart_InsertionSort>('InsertionSort');
    return _InsertionSort(
      AET,
    );
  }

  _dart_InsertionSort _InsertionSort;

  void FreeStorage(
    ffi.Pointer<ScanLineListBlock> pSLLBlock,
  ) {
    _FreeStorage ??=
        _dylib.lookupFunction<_c_FreeStorage, _dart_FreeStorage>('FreeStorage');
    return _FreeStorage(
      pSLLBlock,
    );
  }

  _dart_FreeStorage _FreeStorage;

  int PtsToRegion(
    int numFullPtBlocks,
    int iCurPtBlock,
    ffi.Pointer<POINTBLOCK> FirstPtBlock,
    ffi.Pointer<_XRegion> reg,
  ) {
    _PtsToRegion ??=
        _dylib.lookupFunction<_c_PtsToRegion, _dart_PtsToRegion>('PtsToRegion');
    return _PtsToRegion(
      numFullPtBlocks,
      iCurPtBlock,
      FirstPtBlock,
      reg,
    );
  }

  _dart_PtsToRegion _PtsToRegion;

  int _XPutBackEvent(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> event,
  ) {
    __XPutBackEvent ??=
        _dylib.lookupFunction<_c__XPutBackEvent, _dart__XPutBackEvent>(
            '_XPutBackEvent');
    return __XPutBackEvent(
      dpy,
      event,
    );
  }

  _dart__XPutBackEvent __XPutBackEvent;

  int XPutBackEvent(
    ffi.Pointer<ffi.Int32> dpy,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XPutBackEvent_1 ??= _dylib
        .lookupFunction<_c_XPutBackEvent, _dart_XPutBackEvent>('XPutBackEvent');
    return _XPutBackEvent_1(
      dpy,
      event,
    );
  }

  _dart_XPutBackEvent _XPutBackEvent_1;

  void NoSwap(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int half_order,
  ) {
    _NoSwap ??= _dylib.lookupFunction<_c_NoSwap, _dart_NoSwap>('NoSwap');
    return _NoSwap(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      half_order,
    );
  }

  _dart_NoSwap _NoSwap;

  void SwapTwoBytes(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int half_order,
  ) {
    _SwapTwoBytes ??= _dylib
        .lookupFunction<_c_SwapTwoBytes, _dart_SwapTwoBytes>('SwapTwoBytes');
    return _SwapTwoBytes(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      half_order,
    );
  }

  _dart_SwapTwoBytes _SwapTwoBytes;

  void SwapThreeBytes(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int byte_order,
  ) {
    _SwapThreeBytes ??=
        _dylib.lookupFunction<_c_SwapThreeBytes, _dart_SwapThreeBytes>(
            'SwapThreeBytes');
    return _SwapThreeBytes(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      byte_order,
    );
  }

  _dart_SwapThreeBytes _SwapThreeBytes;

  void SwapFourBytes(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int half_order,
  ) {
    _SwapFourBytes ??= _dylib
        .lookupFunction<_c_SwapFourBytes, _dart_SwapFourBytes>('SwapFourBytes');
    return _SwapFourBytes(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      half_order,
    );
  }

  _dart_SwapFourBytes _SwapFourBytes;

  void SwapWords(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int half_order,
  ) {
    _SwapWords ??=
        _dylib.lookupFunction<_c_SwapWords, _dart_SwapWords>('SwapWords');
    return _SwapWords(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      half_order,
    );
  }

  _dart_SwapWords _SwapWords;

  void SwapNibbles(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
  ) {
    _SwapNibbles ??=
        _dylib.lookupFunction<_c_SwapNibbles, _dart_SwapNibbles>('SwapNibbles');
    return _SwapNibbles(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
    );
  }

  _dart_SwapNibbles _SwapNibbles;

  void ShiftNibblesLeft(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int nibble_order,
  ) {
    _ShiftNibblesLeft ??=
        _dylib.lookupFunction<_c_ShiftNibblesLeft, _dart_ShiftNibblesLeft>(
            'ShiftNibblesLeft');
    return _ShiftNibblesLeft(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      nibble_order,
    );
  }

  _dart_ShiftNibblesLeft _ShiftNibblesLeft;

  void SwapBits(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int half_order,
  ) {
    _SwapBits ??=
        _dylib.lookupFunction<_c_SwapBits, _dart_SwapBits>('SwapBits');
    return _SwapBits(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      half_order,
    );
  }

  _dart_SwapBits _SwapBits;

  void SwapBitsAndTwoBytes(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int half_order,
  ) {
    _SwapBitsAndTwoBytes ??= _dylib.lookupFunction<_c_SwapBitsAndTwoBytes,
        _dart_SwapBitsAndTwoBytes>('SwapBitsAndTwoBytes');
    return _SwapBitsAndTwoBytes(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      half_order,
    );
  }

  _dart_SwapBitsAndTwoBytes _SwapBitsAndTwoBytes;

  void SwapBitsAndFourBytes(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int half_order,
  ) {
    _SwapBitsAndFourBytes ??= _dylib.lookupFunction<_c_SwapBitsAndFourBytes,
        _dart_SwapBitsAndFourBytes>('SwapBitsAndFourBytes');
    return _SwapBitsAndFourBytes(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      half_order,
    );
  }

  _dart_SwapBitsAndFourBytes _SwapBitsAndFourBytes;

  void SwapBitsAndWords(
    ffi.Pointer<ffi.Uint8> src,
    ffi.Pointer<ffi.Uint8> dest,
    int srclen,
    int srcinc,
    int destinc,
    int height,
    int half_order,
  ) {
    _SwapBitsAndWords ??=
        _dylib.lookupFunction<_c_SwapBitsAndWords, _dart_SwapBitsAndWords>(
            'SwapBitsAndWords');
    return _SwapBitsAndWords(
      src,
      dest,
      srclen,
      srcinc,
      destinc,
      height,
      half_order,
    );
  }

  _dart_SwapBitsAndWords _SwapBitsAndWords;

  void SendXYImage(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int32> req,
    ffi.Pointer<XImage> image,
    int req_xoffset,
    int req_yoffset,
  ) {
    _SendXYImage ??=
        _dylib.lookupFunction<_c_SendXYImage, _dart_SendXYImage>('SendXYImage');
    return _SendXYImage(
      dpy,
      req,
      image,
      req_xoffset,
      req_yoffset,
    );
  }

  _dart_SendXYImage _SendXYImage;

  void SendZImage(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int32> req,
    ffi.Pointer<XImage> image,
    int req_xoffset,
    int req_yoffset,
    int dest_bits_per_pixel,
    int dest_scanline_pad,
  ) {
    _SendZImage ??=
        _dylib.lookupFunction<_c_SendZImage, _dart_SendZImage>('SendZImage');
    return _SendZImage(
      dpy,
      req,
      image,
      req_xoffset,
      req_yoffset,
      dest_bits_per_pixel,
      dest_scanline_pad,
    );
  }

  _dart_SendZImage _SendZImage;

  void PutImageRequest(
    ffi.Pointer<_XDisplay> dpy,
    int d,
    ffi.Pointer<_XGC> gc,
    ffi.Pointer<XImage> image,
    int req_xoffset,
    int req_yoffset,
    int x,
    int y,
    int req_width,
    int req_height,
    int dest_bits_per_pixel,
    int dest_scanline_pad,
  ) {
    _PutImageRequest ??=
        _dylib.lookupFunction<_c_PutImageRequest, _dart_PutImageRequest>(
            'PutImageRequest');
    return _PutImageRequest(
      dpy,
      d,
      gc,
      image,
      req_xoffset,
      req_yoffset,
      x,
      y,
      req_width,
      req_height,
      dest_bits_per_pixel,
      dest_scanline_pad,
    );
  }

  _dart_PutImageRequest _PutImageRequest;

  void PutSubImage(
    ffi.Pointer<_XDisplay> dpy,
    int d,
    ffi.Pointer<_XGC> gc,
    ffi.Pointer<XImage> image,
    int req_xoffset,
    int req_yoffset,
    int x,
    int y,
    int req_width,
    int req_height,
    int dest_bits_per_pixel,
    int dest_scanline_pad,
  ) {
    _PutSubImage ??=
        _dylib.lookupFunction<_c_PutSubImage, _dart_PutSubImage>('PutSubImage');
    return _PutSubImage(
      dpy,
      d,
      gc,
      image,
      req_xoffset,
      req_yoffset,
      x,
      y,
      req_width,
      req_height,
      dest_bits_per_pixel,
      dest_scanline_pad,
    );
  }

  _dart_PutSubImage _PutSubImage;

  ffi.Pointer<ffi.Int8> permalloc(
    int length,
  ) {
    _permalloc ??=
        _dylib.lookupFunction<_c_permalloc, _dart_permalloc>('permalloc');
    return _permalloc(
      length,
    );
  }

  _dart_permalloc _permalloc;

  int ExpandQuarkTable() {
    _ExpandQuarkTable ??=
        _dylib.lookupFunction<_c_ExpandQuarkTable, _dart_ExpandQuarkTable>(
            'ExpandQuarkTable');
    return _ExpandQuarkTable();
  }

  _dart_ExpandQuarkTable _ExpandQuarkTable;

  void _XQueryColors(
    ffi.Pointer<ffi.Int32> dpy,
    int cmap,
    ffi.Pointer<ffi.Int32> defs,
    int ncolors,
  ) {
    __XQueryColors ??= _dylib
        .lookupFunction<_c__XQueryColors, _dart__XQueryColors>('_XQueryColors');
    return __XQueryColors(
      dpy,
      cmap,
      defs,
      ncolors,
    );
  }

  _dart__XQueryColors __XQueryColors;

  int NextInt(
    ffi.Pointer<_IO_FILE> fstream,
  ) {
    _NextInt ??= _dylib.lookupFunction<_c_NextInt, _dart_NextInt>('NextInt');
    return _NextInt(
      fstream,
    );
  }

  _dart_NextInt _NextInt;

  void miRegionOp(
    int newReg,
    int reg1,
    int reg2,
    ffi.Pointer<ffi.NativeFunction<_typedefC_84>> overlapFunc,
    ffi.Pointer<ffi.NativeFunction<_typedefC_85>> nonOverlap1Func,
    ffi.Pointer<ffi.NativeFunction<_typedefC_86>> nonOverlap2Func,
  ) {
    _miRegionOp ??=
        _dylib.lookupFunction<_c_miRegionOp, _dart_miRegionOp>('miRegionOp');
    return _miRegionOp(
      newReg,
      reg1,
      reg2,
      overlapFunc,
      nonOverlap1Func,
      nonOverlap2Func,
    );
  }

  _dart_miRegionOp _miRegionOp;

  void miSetExtents(
    int pReg,
  ) {
    _miSetExtents ??= _dylib
        .lookupFunction<_c_miSetExtents, _dart_miSetExtents>('miSetExtents');
    return _miSetExtents(
      pReg,
    );
  }

  _dart_miSetExtents _miSetExtents;

  void Compress(
    int r,
    int s,
    int t,
    int dx,
    int xdir,
    int grow,
  ) {
    _Compress ??=
        _dylib.lookupFunction<_c_Compress, _dart_Compress>('Compress');
    return _Compress(
      r,
      s,
      t,
      dx,
      xdir,
      grow,
    );
  }

  _dart_Compress _Compress;

  int miIntersectO(
    int pReg,
    ffi.Pointer<BoxPtr> r1,
    ffi.Pointer<BoxPtr> r1End,
    ffi.Pointer<BoxPtr> r2,
    ffi.Pointer<BoxPtr> r2End,
    int y1,
    int y2,
  ) {
    _miIntersectO ??= _dylib
        .lookupFunction<_c_miIntersectO, _dart_miIntersectO>('miIntersectO');
    return _miIntersectO(
      pReg,
      r1,
      r1End,
      r2,
      r2End,
      y1,
      y2,
    );
  }

  _dart_miIntersectO _miIntersectO;

  int miRegionCopy(
    int dstrgn,
    int rgn,
  ) {
    _miRegionCopy ??= _dylib
        .lookupFunction<_c_miRegionCopy, _dart_miRegionCopy>('miRegionCopy');
    return _miRegionCopy(
      dstrgn,
      rgn,
    );
  }

  _dart_miRegionCopy _miRegionCopy;

  int miCoalesce(
    int pReg,
    int prevStart,
    int curStart,
  ) {
    _miCoalesce ??=
        _dylib.lookupFunction<_c_miCoalesce, _dart_miCoalesce>('miCoalesce');
    return _miCoalesce(
      pReg,
      prevStart,
      curStart,
    );
  }

  _dart_miCoalesce _miCoalesce;

  int miUnionNonO(
    int pReg,
    ffi.Pointer<BoxPtr> r,
    ffi.Pointer<BoxPtr> rEnd,
    int y1,
    int y2,
  ) {
    _miUnionNonO ??=
        _dylib.lookupFunction<_c_miUnionNonO, _dart_miUnionNonO>('miUnionNonO');
    return _miUnionNonO(
      pReg,
      r,
      rEnd,
      y1,
      y2,
    );
  }

  _dart_miUnionNonO _miUnionNonO;

  int miUnionO(
    int pReg,
    ffi.Pointer<BoxPtr> r1,
    ffi.Pointer<BoxPtr> r1End,
    ffi.Pointer<BoxPtr> r2,
    ffi.Pointer<BoxPtr> r2End,
    int y1,
    int y2,
  ) {
    _miUnionO ??=
        _dylib.lookupFunction<_c_miUnionO, _dart_miUnionO>('miUnionO');
    return _miUnionO(
      pReg,
      r1,
      r1End,
      r2,
      r2End,
      y1,
      y2,
    );
  }

  _dart_miUnionO _miUnionO;

  int miSubtractNonO1(
    int pReg,
    ffi.Pointer<BoxPtr> r,
    ffi.Pointer<BoxPtr> rEnd,
    int y1,
    int y2,
  ) {
    _miSubtractNonO1 ??=
        _dylib.lookupFunction<_c_miSubtractNonO1, _dart_miSubtractNonO1>(
            'miSubtractNonO1');
    return _miSubtractNonO1(
      pReg,
      r,
      rEnd,
      y1,
      y2,
    );
  }

  _dart_miSubtractNonO1 _miSubtractNonO1;

  int miSubtractO(
    int pReg,
    ffi.Pointer<BoxPtr> r1,
    ffi.Pointer<BoxPtr> r1End,
    ffi.Pointer<BoxPtr> r2,
    ffi.Pointer<BoxPtr> r2End,
    int y1,
    int y2,
  ) {
    _miSubtractO ??=
        _dylib.lookupFunction<_c_miSubtractO, _dart_miSubtractO>('miSubtractO');
    return _miSubtractO(
      pReg,
      r1,
      r1End,
      r2,
      r2End,
      y1,
      y2,
    );
  }

  _dart_miSubtractO _miSubtractO;

  void _XFreeIMFilters(
    ffi.Pointer<ffi.Int32> display,
  ) {
    __XFreeIMFilters ??=
        _dylib.lookupFunction<_c__XFreeIMFilters, _dart__XFreeIMFilters>(
            '_XFreeIMFilters');
    return __XFreeIMFilters(
      display,
    );
  }

  _dart__XFreeIMFilters __XFreeIMFilters;

  void _XRegisterFilterByMask(
    ffi.Pointer<ffi.Int32> display,
    int window,
    int event_mask,
    ffi.Pointer<ffi.NativeFunction<_typedefC_87>> Bool,
    int client_data,
  ) {
    __XRegisterFilterByMask ??= _dylib.lookupFunction<_c__XRegisterFilterByMask,
        _dart__XRegisterFilterByMask>('_XRegisterFilterByMask');
    return __XRegisterFilterByMask(
      display,
      window,
      event_mask,
      Bool,
      client_data,
    );
  }

  _dart__XRegisterFilterByMask __XRegisterFilterByMask;

  void _XRegisterFilterByType(
    ffi.Pointer<ffi.Int32> display,
    int window,
    int start_type,
    int end_type,
    ffi.Pointer<ffi.NativeFunction<_typedefC_88>> Bool,
    int client_data,
  ) {
    __XRegisterFilterByType ??= _dylib.lookupFunction<_c__XRegisterFilterByType,
        _dart__XRegisterFilterByType>('_XRegisterFilterByType');
    return __XRegisterFilterByType(
      display,
      window,
      start_type,
      end_type,
      Bool,
      client_data,
    );
  }

  _dart__XRegisterFilterByType __XRegisterFilterByType;

  void _XUnregisterFilter(
    ffi.Pointer<ffi.Int32> display,
    int window,
    ffi.Pointer<ffi.NativeFunction<_typedefC_89>> Bool,
    int client_data,
  ) {
    __XUnregisterFilter ??=
        _dylib.lookupFunction<_c__XUnregisterFilter, _dart__XUnregisterFilter>(
            '_XUnregisterFilter');
    return __XUnregisterFilter(
      display,
      window,
      Bool,
      client_data,
    );
  }

  _dart__XUnregisterFilter __XUnregisterFilter;

  int XSendEvent(
    ffi.Pointer<ffi.Int32> dpy,
    int w,
    int propagate,
    int event_mask,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XSendEvent ??=
        _dylib.lookupFunction<_c_XSendEvent, _dart_XSendEvent>('XSendEvent');
    return _XSendEvent(
      dpy,
      w,
      propagate,
      event_mask,
      event,
    );
  }

  _dart_XSendEvent _XSendEvent;

  ffi.Pointer<ffi.Int8> _XlcMapOSLocaleName(
    ffi.Pointer<ffi.Int8> osname,
    ffi.Pointer<ffi.Int8> siname,
  ) {
    __XlcMapOSLocaleName ??= _dylib.lookupFunction<_c__XlcMapOSLocaleName,
        _dart__XlcMapOSLocaleName>('_XlcMapOSLocaleName');
    return __XlcMapOSLocaleName(
      osname,
      siname,
    );
  }

  _dart__XlcMapOSLocaleName __XlcMapOSLocaleName;

  int _XSyncFunction(
    ffi.Pointer<ffi.Int32> dpy,
  ) {
    __XSyncFunction ??=
        _dylib.lookupFunction<_c__XSyncFunction, _dart__XSyncFunction>(
            '_XSyncFunction');
    return __XSyncFunction(
      dpy,
    );
  }

  _dart__XSyncFunction __XSyncFunction;

  int _Xthr_equal_stub_() {
    __Xthr_equal_stub_ ??=
        _dylib.lookupFunction<_c__Xthr_equal_stub_, _dart__Xthr_equal_stub_>(
            '_Xthr_equal_stub_');
    return __Xthr_equal_stub_();
  }

  _dart__Xthr_equal_stub_ __Xthr_equal_stub_;

  int _Xthr_self_stub_() {
    __Xthr_self_stub_ ??=
        _dylib.lookupFunction<_c__Xthr_self_stub_, _dart__Xthr_self_stub_>(
            '_Xthr_self_stub_');
    return __Xthr_self_stub_();
  }

  _dart__Xthr_self_stub_ __Xthr_self_stub_;

  int _Xthr_zero_stub_() {
    __Xthr_zero_stub_ ??=
        _dylib.lookupFunction<_c__Xthr_zero_stub_, _dart__Xthr_zero_stub_>(
            '_Xthr_zero_stub_');
    return __Xthr_zero_stub_();
  }

  _dart__Xthr_zero_stub_ __Xthr_zero_stub_;

  int parse_line(
    ffi.Pointer<ffi.Int8> buf,
    ffi.Pointer<ffi.Int8> key,
    ffi.Pointer<ffi.Uint64> val,
    ffi.Pointer<ffi.Int8> prefix,
  ) {
    _parse_line ??=
        _dylib.lookupFunction<_c_parse_line, _dart_parse_line>('parse_line');
    return _parse_line(
      buf,
      key,
      val,
      prefix,
    );
  }

  _dart_parse_line _parse_line;

  int main(
    int argc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ) {
    _main ??= _dylib.lookupFunction<_c_main, _dart_main>('main');
    return _main(
      argc,
      argv,
    );
  }

  _dart_main _main;

  int XWindowEvent(
    ffi.Pointer<ffi.Int32> dpy,
    int w,
    int mask,
    ffi.Pointer<ffi.Int32> event,
  ) {
    _XWindowEvent ??= _dylib
        .lookupFunction<_c_XWindowEvent, _dart_XWindowEvent>('XWindowEvent');
    return _XWindowEvent(
      dpy,
      w,
      mask,
      event,
    );
  }

  _dart_XWindowEvent _XWindowEvent;

  int _GeometryMaskToGravity(
    int mask,
  ) {
    __GeometryMaskToGravity ??= _dylib.lookupFunction<_c__GeometryMaskToGravity,
        _dart__GeometryMaskToGravity>('_GeometryMaskToGravity');
    return __GeometryMaskToGravity(
      mask,
    );
  }

  _dart__GeometryMaskToGravity __GeometryMaskToGravity;

  ffi.Pointer<ffi.Int8> Format_Image(
    ffi.Pointer<ffi.Int32> image,
    ffi.Pointer<ffi.Int32> resultsize,
  ) {
    _Format_Image ??= _dylib
        .lookupFunction<_c_Format_Image, _dart_Format_Image>('Format_Image');
    return _Format_Image(
      image,
      resultsize,
    );
  }

  _dart_Format_Image _Format_Image;

  int xcb_send_request(
    ffi.Pointer<xcb_connection_t> c,
    int flags,
    ffi.Pointer<iovec> vector,
    ffi.Pointer<xcb_protocol_request_t> request,
  ) {
    _xcb_send_request ??=
        _dylib.lookupFunction<_c_xcb_send_request, _dart_xcb_send_request>(
            'xcb_send_request');
    return _xcb_send_request(
      c,
      flags,
      vector,
      request,
    );
  }

  _dart_xcb_send_request _xcb_send_request;

  int xcb_send_request_with_fds(
    ffi.Pointer<xcb_connection_t> c,
    int flags,
    ffi.Pointer<iovec> vector,
    ffi.Pointer<xcb_protocol_request_t> request,
    int num_fds,
    ffi.Pointer<ffi.Int32> fds,
  ) {
    _xcb_send_request_with_fds ??= _dylib.lookupFunction<
        _c_xcb_send_request_with_fds,
        _dart_xcb_send_request_with_fds>('xcb_send_request_with_fds');
    return _xcb_send_request_with_fds(
      c,
      flags,
      vector,
      request,
      num_fds,
      fds,
    );
  }

  _dart_xcb_send_request_with_fds _xcb_send_request_with_fds;

  int xcb_send_request64(
    ffi.Pointer<xcb_connection_t> c,
    int flags,
    ffi.Pointer<iovec> vector,
    ffi.Pointer<xcb_protocol_request_t> request,
  ) {
    _xcb_send_request64 ??=
        _dylib.lookupFunction<_c_xcb_send_request64, _dart_xcb_send_request64>(
            'xcb_send_request64');
    return _xcb_send_request64(
      c,
      flags,
      vector,
      request,
    );
  }

  _dart_xcb_send_request64 _xcb_send_request64;

  int xcb_send_request_with_fds64(
    ffi.Pointer<xcb_connection_t> c,
    int flags,
    ffi.Pointer<iovec> vector,
    ffi.Pointer<xcb_protocol_request_t> request,
    int num_fds,
    ffi.Pointer<ffi.Int32> fds,
  ) {
    _xcb_send_request_with_fds64 ??= _dylib.lookupFunction<
        _c_xcb_send_request_with_fds64,
        _dart_xcb_send_request_with_fds64>('xcb_send_request_with_fds64');
    return _xcb_send_request_with_fds64(
      c,
      flags,
      vector,
      request,
      num_fds,
      fds,
    );
  }

  _dart_xcb_send_request_with_fds64 _xcb_send_request_with_fds64;

  void xcb_send_fd(
    ffi.Pointer<xcb_connection_t> c,
    int fd,
  ) {
    _xcb_send_fd ??=
        _dylib.lookupFunction<_c_xcb_send_fd, _dart_xcb_send_fd>('xcb_send_fd');
    return _xcb_send_fd(
      c,
      fd,
    );
  }

  _dart_xcb_send_fd _xcb_send_fd;

  int xcb_take_socket(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<ffi.NativeFunction<_typedefC_93>> return_socket,
    ffi.Pointer<ffi.Void> closure,
    int flags,
    ffi.Pointer<ffi.Uint64> sent,
  ) {
    _xcb_take_socket ??=
        _dylib.lookupFunction<_c_xcb_take_socket, _dart_xcb_take_socket>(
            'xcb_take_socket');
    return _xcb_take_socket(
      c,
      return_socket,
      closure,
      flags,
      sent,
    );
  }

  _dart_xcb_take_socket _xcb_take_socket;

  int xcb_writev(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<iovec> vector,
    int count,
    int requests,
  ) {
    _xcb_writev ??=
        _dylib.lookupFunction<_c_xcb_writev, _dart_xcb_writev>('xcb_writev');
    return _xcb_writev(
      c,
      vector,
      count,
      requests,
    );
  }

  _dart_xcb_writev _xcb_writev;

  ffi.Pointer<ffi.Void> xcb_wait_for_reply(
    ffi.Pointer<xcb_connection_t> c,
    int request,
    ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> e,
  ) {
    _xcb_wait_for_reply ??=
        _dylib.lookupFunction<_c_xcb_wait_for_reply, _dart_xcb_wait_for_reply>(
            'xcb_wait_for_reply');
    return _xcb_wait_for_reply(
      c,
      request,
      e,
    );
  }

  _dart_xcb_wait_for_reply _xcb_wait_for_reply;

  ffi.Pointer<ffi.Void> xcb_wait_for_reply64(
    ffi.Pointer<xcb_connection_t> c,
    int request,
    ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> e,
  ) {
    _xcb_wait_for_reply64 ??= _dylib.lookupFunction<_c_xcb_wait_for_reply64,
        _dart_xcb_wait_for_reply64>('xcb_wait_for_reply64');
    return _xcb_wait_for_reply64(
      c,
      request,
      e,
    );
  }

  _dart_xcb_wait_for_reply64 _xcb_wait_for_reply64;

  int xcb_poll_for_reply(
    ffi.Pointer<xcb_connection_t> c,
    int request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> reply,
    ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> error,
  ) {
    _xcb_poll_for_reply ??=
        _dylib.lookupFunction<_c_xcb_poll_for_reply, _dart_xcb_poll_for_reply>(
            'xcb_poll_for_reply');
    return _xcb_poll_for_reply(
      c,
      request,
      reply,
      error,
    );
  }

  _dart_xcb_poll_for_reply _xcb_poll_for_reply;

  int xcb_poll_for_reply64(
    ffi.Pointer<xcb_connection_t> c,
    int request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> reply,
    ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> error,
  ) {
    _xcb_poll_for_reply64 ??= _dylib.lookupFunction<_c_xcb_poll_for_reply64,
        _dart_xcb_poll_for_reply64>('xcb_poll_for_reply64');
    return _xcb_poll_for_reply64(
      c,
      request,
      reply,
      error,
    );
  }

  _dart_xcb_poll_for_reply64 _xcb_poll_for_reply64;

  ffi.Pointer<ffi.Int32> xcb_get_reply_fds(
    ffi.Pointer<xcb_connection_t> c,
    ffi.Pointer<ffi.Void> reply,
    int replylen,
  ) {
    _xcb_get_reply_fds ??=
        _dylib.lookupFunction<_c_xcb_get_reply_fds, _dart_xcb_get_reply_fds>(
            'xcb_get_reply_fds');
    return _xcb_get_reply_fds(
      c,
      reply,
      replylen,
    );
  }

  _dart_xcb_get_reply_fds _xcb_get_reply_fds;

  int xcb_popcount(
    int mask,
  ) {
    _xcb_popcount ??= _dylib
        .lookupFunction<_c_xcb_popcount, _dart_xcb_popcount>('xcb_popcount');
    return _xcb_popcount(
      mask,
    );
  }

  _dart_xcb_popcount _xcb_popcount;

  int xcb_sumof(
    ffi.Pointer<ffi.Uint8> list,
    int len,
  ) {
    _xcb_sumof ??=
        _dylib.lookupFunction<_c_xcb_sumof, _dart_xcb_sumof>('xcb_sumof');
    return _xcb_sumof(
      list,
      len,
    );
  }

  _dart_xcb_sumof _xcb_sumof;

  ffi.Pointer<ffi.Void> alloc_copy(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<ffi.Int32> dstn,
    int n,
  ) {
    _alloc_copy ??=
        _dylib.lookupFunction<_c_alloc_copy, _dart_alloc_copy>('alloc_copy');
    return _alloc_copy(
      src,
      dstn,
      n,
    );
  }

  _dart_alloc_copy _alloc_copy;

  void _XIDHandler(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XIDHandler ??=
        _dylib.lookupFunction<_c__XIDHandler, _dart__XIDHandler>('_XIDHandler');
    return __XIDHandler(
      dpy,
    );
  }

  _dart__XIDHandler __XIDHandler;

  void _XSeqSyncFunction(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XSeqSyncFunction ??=
        _dylib.lookupFunction<_c__XSeqSyncFunction, _dart__XSeqSyncFunction>(
            '_XSeqSyncFunction');
    return __XSeqSyncFunction(
      dpy,
    );
  }

  _dart__XSeqSyncFunction __XSeqSyncFunction;

  void _XSetPrivSyncFunction(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XSetPrivSyncFunction ??= _dylib.lookupFunction<_c__XSetPrivSyncFunction,
        _dart__XSetPrivSyncFunction>('_XSetPrivSyncFunction');
    return __XSetPrivSyncFunction(
      dpy,
    );
  }

  _dart__XSetPrivSyncFunction __XSetPrivSyncFunction;

  void _XSetSeqSyncFunction(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XSetSeqSyncFunction ??= _dylib.lookupFunction<_c__XSetSeqSyncFunction,
        _dart__XSetSeqSyncFunction>('_XSetSeqSyncFunction');
    return __XSetSeqSyncFunction(
      dpy,
    );
  }

  _dart__XSetSeqSyncFunction __XSetSeqSyncFunction;

  void return_socket(
    ffi.Pointer<ffi.Void> closure,
  ) {
    _return_socket ??= _dylib
        .lookupFunction<_c_return_socket, _dart_return_socket>('return_socket');
    return _return_socket(
      closure,
    );
  }

  _dart_return_socket _return_socket;

  void require_socket(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _require_socket ??=
        _dylib.lookupFunction<_c_require_socket, _dart_require_socket>(
            'require_socket');
    return _require_socket(
      dpy,
    );
  }

  _dart_require_socket _require_socket;

  void check_internal_connections(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _check_internal_connections ??= _dylib.lookupFunction<
        _c_check_internal_connections,
        _dart_check_internal_connections>('check_internal_connections');
    return _check_internal_connections(
      dpy,
    );
  }

  _dart_check_internal_connections _check_internal_connections;

  ffi.Pointer<PendingRequest> append_pending_request(
    ffi.Pointer<_XDisplay> dpy,
    int sequence,
  ) {
    _append_pending_request ??= _dylib.lookupFunction<_c_append_pending_request,
        _dart_append_pending_request>('append_pending_request');
    return _append_pending_request(
      dpy,
      sequence,
    );
  }

  _dart_append_pending_request _append_pending_request;

  void dequeue_pending_request(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<PendingRequest> req,
  ) {
    _dequeue_pending_request ??= _dylib.lookupFunction<
        _c_dequeue_pending_request,
        _dart_dequeue_pending_request>('dequeue_pending_request');
    return _dequeue_pending_request(
      dpy,
      req,
    );
  }

  _dart_dequeue_pending_request _dequeue_pending_request;

  int handle_error(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<xError> err,
    int in_XReply,
  ) {
    _handle_error ??= _dylib
        .lookupFunction<_c_handle_error, _dart_handle_error>('handle_error');
    return _handle_error(
      dpy,
      err,
      in_XReply,
    );
  }

  _dart_handle_error _handle_error;

  void widen(
    ffi.Pointer<ffi.Uint64> wide,
    int narrow,
  ) {
    _widen ??= _dylib.lookupFunction<_c_widen, _dart_widen>('widen');
    return _widen(
      wide,
      narrow,
    );
  }

  _dart_widen _widen;

  ffi.Pointer<xcb_generic_reply_t> poll_for_event(
    ffi.Pointer<_XDisplay> dpy,
    int queued_only,
  ) {
    _poll_for_event ??=
        _dylib.lookupFunction<_c_poll_for_event, _dart_poll_for_event>(
            'poll_for_event');
    return _poll_for_event(
      dpy,
      queued_only,
    );
  }

  _dart_poll_for_event _poll_for_event;

  ffi.Pointer<xcb_generic_reply_t> poll_for_response(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _poll_for_response ??=
        _dylib.lookupFunction<_c_poll_for_response, _dart_poll_for_response>(
            'poll_for_response');
    return _poll_for_response(
      dpy,
    );
  }

  _dart_poll_for_response _poll_for_response;

  void handle_response(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<xcb_generic_reply_t> response,
    int in_XReply,
  ) {
    _handle_response ??=
        _dylib.lookupFunction<_c_handle_response, _dart_handle_response>(
            'handle_response');
    return _handle_response(
      dpy,
      response,
      in_XReply,
    );
  }

  _dart_handle_response _handle_response;

  void _XFreeReplyData(
    ffi.Pointer<_XDisplay> dpy,
    int force,
  ) {
    __XFreeReplyData ??=
        _dylib.lookupFunction<_c__XFreeReplyData, _dart__XFreeReplyData>(
            '_XFreeReplyData');
    return __XFreeReplyData(
      dpy,
      force,
    );
  }

  _dart__XFreeReplyData __XFreeReplyData;

  ffi.Pointer<XcmsCmapRec> _XcmsAddCmapRec(
    ffi.Pointer<_XDisplay> dpy,
    int cmap,
    int windowID,
    ffi.Pointer<Visual> visual,
  ) {
    __XcmsAddCmapRec ??=
        _dylib.lookupFunction<_c__XcmsAddCmapRec, _dart__XcmsAddCmapRec>(
            '_XcmsAddCmapRec');
    return __XcmsAddCmapRec(
      dpy,
      cmap,
      windowID,
      visual,
    );
  }

  _dart__XcmsAddCmapRec __XcmsAddCmapRec;

  void _XcmsRGB_to_XColor(
    ffi.Pointer<XcmsColor> pColors,
    ffi.Pointer<XColor> pXColors,
    int nColors,
  ) {
    __XcmsRGB_to_XColor ??=
        _dylib.lookupFunction<_c__XcmsRGB_to_XColor, _dart__XcmsRGB_to_XColor>(
            '_XcmsRGB_to_XColor');
    return __XcmsRGB_to_XColor(
      pColors,
      pXColors,
      nColors,
    );
  }

  _dart__XcmsRGB_to_XColor __XcmsRGB_to_XColor;

  int _XcmsResolveColorString(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> color_string,
    ffi.Pointer<XcmsColor> pColor_exact_return,
    int result_format,
  ) {
    __XcmsResolveColorString ??= _dylib.lookupFunction<
        _c__XcmsResolveColorString,
        _dart__XcmsResolveColorString>('_XcmsResolveColorString');
    return __XcmsResolveColorString(
      ccc,
      color_string,
      pColor_exact_return,
      result_format,
    );
  }

  _dart__XcmsResolveColorString __XcmsResolveColorString;

  void _XUnresolveColor(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XColor> pXColor,
  ) {
    __XUnresolveColor ??=
        _dylib.lookupFunction<_c__XUnresolveColor, _dart__XUnresolveColor>(
            '_XUnresolveColor');
    return __XUnresolveColor(
      ccc,
      pXColor,
    );
  }

  _dart__XUnresolveColor __XUnresolveColor;

  double _XcmsArcTangent(
    double a,
  ) {
    __XcmsArcTangent ??=
        _dylib.lookupFunction<_c__XcmsArcTangent, _dart__XcmsArcTangent>(
            '_XcmsArcTangent');
    return __XcmsArcTangent(
      a,
    );
  }

  _dart__XcmsArcTangent __XcmsArcTangent;

  double _XcmsCosine(
    double a,
  ) {
    __XcmsCosine ??=
        _dylib.lookupFunction<_c__XcmsCosine, _dart__XcmsCosine>('_XcmsCosine');
    return __XcmsCosine(
      a,
    );
  }

  _dart__XcmsCosine __XcmsCosine;

  double _XcmsCubeRoot(
    double a,
  ) {
    __XcmsCubeRoot ??= _dylib
        .lookupFunction<_c__XcmsCubeRoot, _dart__XcmsCubeRoot>('_XcmsCubeRoot');
    return __XcmsCubeRoot(
      a,
    );
  }

  _dart__XcmsCubeRoot __XcmsCubeRoot;

  double _XcmsSine(
    double a,
  ) {
    __XcmsSine ??=
        _dylib.lookupFunction<_c__XcmsSine, _dart__XcmsSine>('_XcmsSine');
    return __XcmsSine(
      a,
    );
  }

  _dart__XcmsSine __XcmsSine;

  double _XcmsSquareRoot(
    double a,
  ) {
    __XcmsSquareRoot ??=
        _dylib.lookupFunction<_c__XcmsSquareRoot, _dart__XcmsSquareRoot>(
            '_XcmsSquareRoot');
    return __XcmsSquareRoot(
      a,
    );
  }

  _dart__XcmsSquareRoot __XcmsSquareRoot;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> _XcmsCopyPointerArray(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
  ) {
    __XcmsCopyPointerArray ??= _dylib.lookupFunction<_c__XcmsCopyPointerArray,
        _dart__XcmsCopyPointerArray>('_XcmsCopyPointerArray');
    return __XcmsCopyPointerArray(
      pap,
    );
  }

  _dart__XcmsCopyPointerArray __XcmsCopyPointerArray;

  void _XcmsFreePointerArray(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
  ) {
    __XcmsFreePointerArray ??= _dylib.lookupFunction<_c__XcmsFreePointerArray,
        _dart__XcmsFreePointerArray>('_XcmsFreePointerArray');
    return __XcmsFreePointerArray(
      pap,
    );
  }

  _dart__XcmsFreePointerArray __XcmsFreePointerArray;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> _XcmsPushPointerArray(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
    ffi.Pointer<ffi.Int8> p,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> papNoFree,
  ) {
    __XcmsPushPointerArray ??= _dylib.lookupFunction<_c__XcmsPushPointerArray,
        _dart__XcmsPushPointerArray>('_XcmsPushPointerArray');
    return __XcmsPushPointerArray(
      pap,
      p,
      papNoFree,
    );
  }

  _dart__XcmsPushPointerArray __XcmsPushPointerArray;

  int _XcmsCIEXYZ_ValidSpec(
    ffi.Pointer<XcmsColor> pColor,
  ) {
    __XcmsCIEXYZ_ValidSpec ??= _dylib.lookupFunction<_c__XcmsCIEXYZ_ValidSpec,
        _dart__XcmsCIEXYZ_ValidSpec>('_XcmsCIEXYZ_ValidSpec');
    return __XcmsCIEXYZ_ValidSpec(
      pColor,
    );
  }

  _dart__XcmsCIEXYZ_ValidSpec __XcmsCIEXYZ_ValidSpec;

  int _XcmsCIEuvY_ValidSpec(
    ffi.Pointer<XcmsColor> pColor,
  ) {
    __XcmsCIEuvY_ValidSpec ??= _dylib.lookupFunction<_c__XcmsCIEuvY_ValidSpec,
        _dart__XcmsCIEuvY_ValidSpec>('_XcmsCIEuvY_ValidSpec');
    return __XcmsCIEuvY_ValidSpec(
      pColor,
    );
  }

  _dart__XcmsCIEuvY_ValidSpec __XcmsCIEuvY_ValidSpec;

  int _XcmsTekHVC_CheckModify(
    ffi.Pointer<XcmsColor> pColor,
  ) {
    __XcmsTekHVC_CheckModify ??= _dylib.lookupFunction<
        _c__XcmsTekHVC_CheckModify,
        _dart__XcmsTekHVC_CheckModify>('_XcmsTekHVC_CheckModify');
    return __XcmsTekHVC_CheckModify(
      pColor,
    );
  }

  _dart__XcmsTekHVC_CheckModify __XcmsTekHVC_CheckModify;

  int _XcmsTekHVCQueryMaxVCRGB(
    ffi.Pointer<XcmsCCCRec> ccc,
    double hue,
    ffi.Pointer<XcmsColor> pColor_return,
    ffi.Pointer<XcmsRGBi> pRGB_return,
  ) {
    __XcmsTekHVCQueryMaxVCRGB ??= _dylib.lookupFunction<
        _c__XcmsTekHVCQueryMaxVCRGB,
        _dart__XcmsTekHVCQueryMaxVCRGB>('_XcmsTekHVCQueryMaxVCRGB');
    return __XcmsTekHVCQueryMaxVCRGB(
      ccc,
      hue,
      pColor_return,
      pRGB_return,
    );
  }

  _dart__XcmsTekHVCQueryMaxVCRGB __XcmsTekHVCQueryMaxVCRGB;

  int _XcmsCIELabQueryMaxLCRGB(
    ffi.Pointer<XcmsCCCRec> ccc,
    double hue,
    ffi.Pointer<XcmsColor> pColor_return,
    ffi.Pointer<XcmsRGBi> pRGB_return,
  ) {
    __XcmsCIELabQueryMaxLCRGB ??= _dylib.lookupFunction<
        _c__XcmsCIELabQueryMaxLCRGB,
        _dart__XcmsCIELabQueryMaxLCRGB>('_XcmsCIELabQueryMaxLCRGB');
    return __XcmsCIELabQueryMaxLCRGB(
      ccc,
      hue,
      pColor_return,
      pRGB_return,
    );
  }

  _dart__XcmsCIELabQueryMaxLCRGB __XcmsCIELabQueryMaxLCRGB;

  int _XcmsConvertColorsWithWhitePt(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XcmsColor> pColors_in_out,
    ffi.Pointer<XcmsColor> pWhitePt,
    int nColors,
    int newFormat,
    ffi.Pointer<ffi.Int32> pCompressed,
  ) {
    __XcmsConvertColorsWithWhitePt ??= _dylib.lookupFunction<
        _c__XcmsConvertColorsWithWhitePt,
        _dart__XcmsConvertColorsWithWhitePt>('_XcmsConvertColorsWithWhitePt');
    return __XcmsConvertColorsWithWhitePt(
      ccc,
      pColors_in_out,
      pWhitePt,
      nColors,
      newFormat,
      pCompressed,
    );
  }

  _dart__XcmsConvertColorsWithWhitePt __XcmsConvertColorsWithWhitePt;

  int _XcmsDIConvertColors(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XcmsColor> pColors_in_out,
    ffi.Pointer<XcmsColor> pWhitePt,
    int nColors,
    int newFormat,
  ) {
    __XcmsDIConvertColors ??= _dylib.lookupFunction<_c__XcmsDIConvertColors,
        _dart__XcmsDIConvertColors>('_XcmsDIConvertColors');
    return __XcmsDIConvertColors(
      ccc,
      pColors_in_out,
      pWhitePt,
      nColors,
      newFormat,
    );
  }

  _dart__XcmsDIConvertColors __XcmsDIConvertColors;

  int _XcmsDDConvertColors(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XcmsColor> pColors_in_out,
    int nColors,
    int newFormat,
    ffi.Pointer<ffi.Int32> pCompressed,
  ) {
    __XcmsDDConvertColors ??= _dylib.lookupFunction<_c__XcmsDDConvertColors,
        _dart__XcmsDDConvertColors>('_XcmsDDConvertColors');
    return __XcmsDDConvertColors(
      ccc,
      pColors_in_out,
      nColors,
      newFormat,
      pCompressed,
    );
  }

  _dart__XcmsDDConvertColors __XcmsDDConvertColors;

  int _XcmsRegFormatOfPrefix(
    ffi.Pointer<ffi.Int8> prefix,
  ) {
    __XcmsRegFormatOfPrefix ??= _dylib.lookupFunction<_c__XcmsRegFormatOfPrefix,
        _dart__XcmsRegFormatOfPrefix>('_XcmsRegFormatOfPrefix');
    return __XcmsRegFormatOfPrefix(
      prefix,
    );
  }

  _dart__XcmsRegFormatOfPrefix __XcmsRegFormatOfPrefix;

  void _XColor_to_XcmsRGB(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XColor> pXColors,
    ffi.Pointer<XcmsColor> pColors,
    int nColors,
  ) {
    __XColor_to_XcmsRGB ??=
        _dylib.lookupFunction<_c__XColor_to_XcmsRGB, _dart__XColor_to_XcmsRGB>(
            '_XColor_to_XcmsRGB');
    return __XColor_to_XcmsRGB(
      ccc,
      pXColors,
      pColors,
      nColors,
    );
  }

  _dart__XColor_to_XcmsRGB __XColor_to_XcmsRGB;

  int _XcmsSetGetColor(
    ffi.Pointer<ffi.NativeFunction<_typedefC_96>> xColorProc,
    ffi.Pointer<_XDisplay> dpy,
    int cmap,
    ffi.Pointer<XcmsColor> pColors_in_out,
    int result_format,
    ffi.Pointer<ffi.Int32> pCompressed,
  ) {
    __XcmsSetGetColor ??=
        _dylib.lookupFunction<_c__XcmsSetGetColor, _dart__XcmsSetGetColor>(
            '_XcmsSetGetColor');
    return __XcmsSetGetColor(
      xColorProc,
      dpy,
      cmap,
      pColors_in_out,
      result_format,
      pCompressed,
    );
  }

  _dart__XcmsSetGetColor __XcmsSetGetColor;

  int _XcmsSetGetColors(
    ffi.Pointer<ffi.NativeFunction<_typedefC_97>> xColorProc,
    ffi.Pointer<_XDisplay> dpy,
    int cmap,
    ffi.Pointer<XcmsColor> pColors_in_out,
    int nColors,
    int result_format,
    ffi.Pointer<ffi.Int32> pCompressed,
  ) {
    __XcmsSetGetColors ??=
        _dylib.lookupFunction<_c__XcmsSetGetColors, _dart__XcmsSetGetColors>(
            '_XcmsSetGetColors');
    return __XcmsSetGetColors(
      xColorProc,
      dpy,
      cmap,
      pColors_in_out,
      nColors,
      result_format,
      pCompressed,
    );
  }

  _dart__XcmsSetGetColors __XcmsSetGetColors;

  int _XcmsCIELuvQueryMaxLCRGB(
    ffi.Pointer<XcmsCCCRec> ccc,
    double hue,
    ffi.Pointer<XcmsColor> pColor_return,
    ffi.Pointer<XcmsRGBi> pRGB_return,
  ) {
    __XcmsCIELuvQueryMaxLCRGB ??= _dylib.lookupFunction<
        _c__XcmsCIELuvQueryMaxLCRGB,
        _dart__XcmsCIELuvQueryMaxLCRGB>('_XcmsCIELuvQueryMaxLCRGB');
    return __XcmsCIELuvQueryMaxLCRGB(
      ccc,
      hue,
      pColor_return,
      pRGB_return,
    );
  }

  _dart__XcmsCIELuvQueryMaxLCRGB __XcmsCIELuvQueryMaxLCRGB;

  ffi.Pointer<XcmsIntensityMap> _XcmsGetIntensityMap(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<Visual> visual,
  ) {
    __XcmsGetIntensityMap ??= _dylib.lookupFunction<_c__XcmsGetIntensityMap,
        _dart__XcmsGetIntensityMap>('_XcmsGetIntensityMap');
    return __XcmsGetIntensityMap(
      dpy,
      visual,
    );
  }

  _dart__XcmsGetIntensityMap __XcmsGetIntensityMap;

  int _XcmsInitDefaultCCCs(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XcmsInitDefaultCCCs ??= _dylib.lookupFunction<_c__XcmsInitDefaultCCCs,
        _dart__XcmsInitDefaultCCCs>('_XcmsInitDefaultCCCs');
    return __XcmsInitDefaultCCCs(
      dpy,
    );
  }

  _dart__XcmsInitDefaultCCCs __XcmsInitDefaultCCCs;

  int _XcmsInitScrnInfo(
    ffi.Pointer<_XDisplay> dpy,
    int screenNumber,
  ) {
    __XcmsInitScrnInfo ??=
        _dylib.lookupFunction<_c__XcmsInitScrnInfo, _dart__XcmsInitScrnInfo>(
            '_XcmsInitScrnInfo');
    return __XcmsInitScrnInfo(
      dpy,
      screenNumber,
    );
  }

  _dart__XcmsInitScrnInfo __XcmsInitScrnInfo;

  void _XcmsCopyISOLatin1Lowered(
    ffi.Pointer<ffi.Int8> dst,
    ffi.Pointer<ffi.Int8> src,
  ) {
    __XcmsCopyISOLatin1Lowered ??= _dylib.lookupFunction<
        _c__XcmsCopyISOLatin1Lowered,
        _dart__XcmsCopyISOLatin1Lowered>('_XcmsCopyISOLatin1Lowered');
    return __XcmsCopyISOLatin1Lowered(
      dst,
      src,
    );
  }

  _dart__XcmsCopyISOLatin1Lowered __XcmsCopyISOLatin1Lowered;

  int _XcmsEqualWhitePts(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XcmsColor> pWhitePt1,
    ffi.Pointer<XcmsColor> pWhitePt2,
  ) {
    __XcmsEqualWhitePts ??=
        _dylib.lookupFunction<_c__XcmsEqualWhitePts, _dart__XcmsEqualWhitePts>(
            '_XcmsEqualWhitePts');
    return __XcmsEqualWhitePts(
      ccc,
      pWhitePt1,
      pWhitePt2,
    );
  }

  _dart__XcmsEqualWhitePts __XcmsEqualWhitePts;

  int _XcmsLRGB_InitScrnDefault(
    ffi.Pointer<_XDisplay> dpy,
    int screenNumber,
    ffi.Pointer<XcmsPerScrnInfo> pPerScrnInfo,
  ) {
    __XcmsLRGB_InitScrnDefault ??= _dylib.lookupFunction<
        _c__XcmsLRGB_InitScrnDefault,
        _dart__XcmsLRGB_InitScrnDefault>('_XcmsLRGB_InitScrnDefault');
    return __XcmsLRGB_InitScrnDefault(
      dpy,
      screenNumber,
      pPerScrnInfo,
    );
  }

  _dart__XcmsLRGB_InitScrnDefault __XcmsLRGB_InitScrnDefault;

  void _XcmsFreeIntensityMaps(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XcmsFreeIntensityMaps ??= _dylib.lookupFunction<_c__XcmsFreeIntensityMaps,
        _dart__XcmsFreeIntensityMaps>('_XcmsFreeIntensityMaps');
    return __XcmsFreeIntensityMaps(
      dpy,
    );
  }

  _dart__XcmsFreeIntensityMaps __XcmsFreeIntensityMaps;

  int _XcmsGetProperty(
    ffi.Pointer<_XDisplay> pDpy,
    int w,
    int property,
    ffi.Pointer<ffi.Int32> pFormat,
    ffi.Pointer<ffi.Uint64> pNItems,
    ffi.Pointer<ffi.Uint64> pNBytes,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pValue,
  ) {
    __XcmsGetProperty ??=
        _dylib.lookupFunction<_c__XcmsGetProperty, _dart__XcmsGetProperty>(
            '_XcmsGetProperty');
    return __XcmsGetProperty(
      pDpy,
      w,
      property,
      pFormat,
      pNItems,
      pNBytes,
      pValue,
    );
  }

  _dart__XcmsGetProperty __XcmsGetProperty;

  int _XcmsGetElement(
    int format,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pValue,
    ffi.Pointer<ffi.Uint64> pCount,
  ) {
    __XcmsGetElement ??=
        _dylib.lookupFunction<_c__XcmsGetElement, _dart__XcmsGetElement>(
            '_XcmsGetElement');
    return __XcmsGetElement(
      format,
      pValue,
      pCount,
    );
  }

  _dart__XcmsGetElement __XcmsGetElement;

  void _XcmsUnresolveColor(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    __XcmsUnresolveColor ??= _dylib.lookupFunction<_c__XcmsUnresolveColor,
        _dart__XcmsUnresolveColor>('_XcmsUnresolveColor');
    return __XcmsUnresolveColor(
      ccc,
      pColor,
    );
  }

  _dart__XcmsUnresolveColor __XcmsUnresolveColor;

  void _XcmsResolveColor(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XcmsColor> pXcmsColor,
  ) {
    __XcmsResolveColor ??=
        _dylib.lookupFunction<_c__XcmsResolveColor, _dart__XcmsResolveColor>(
            '_XcmsResolveColor');
    return __XcmsResolveColor(
      ccc,
      pXcmsColor,
    );
  }

  _dart__XcmsResolveColor __XcmsResolveColor;

  void _XcmsFreeClientCmaps(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XcmsFreeClientCmaps ??= _dylib.lookupFunction<_c__XcmsFreeClientCmaps,
        _dart__XcmsFreeClientCmaps>('_XcmsFreeClientCmaps');
    return __XcmsFreeClientCmaps(
      dpy,
    );
  }

  _dart__XcmsFreeClientCmaps __XcmsFreeClientCmaps;

  /// *
  /// PRIVATE INTERFACES				*
  /// *
  ffi.Pointer<XcmsCmapRec> CmapRecForColormap(
    ffi.Pointer<_XDisplay> dpy,
    int cmap,
  ) {
    _CmapRecForColormap ??=
        _dylib.lookupFunction<_c_CmapRecForColormap, _dart_CmapRecForColormap>(
            'CmapRecForColormap');
    return _CmapRecForColormap(
      dpy,
      cmap,
    );
  }

  _dart_CmapRecForColormap _CmapRecForColormap;

  int LoadColornameDB() {
    _LoadColornameDB ??=
        _dylib.lookupFunction<_c_LoadColornameDB, _dart_LoadColornameDB>(
            'LoadColornameDB');
    return _LoadColornameDB();
  }

  _dart_LoadColornameDB _LoadColornameDB;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  ffi.Pointer<XcmsColorSpace> _XcmsColorSpaceOfString(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<ffi.Int8> color_string,
  ) {
    __XcmsColorSpaceOfString ??= _dylib.lookupFunction<
        _c__XcmsColorSpaceOfString,
        _dart__XcmsColorSpaceOfString>('_XcmsColorSpaceOfString');
    return __XcmsColorSpaceOfString(
      ccc,
      color_string,
    );
  }

  _dart__XcmsColorSpaceOfString __XcmsColorSpaceOfString;

  int _XcmsParseColorString(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<ffi.Int8> color_string,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    __XcmsParseColorString ??= _dylib.lookupFunction<_c__XcmsParseColorString,
        _dart__XcmsParseColorString>('_XcmsParseColorString');
    return __XcmsParseColorString(
      ccc,
      color_string,
      pColor,
    );
  }

  _dart__XcmsParseColorString __XcmsParseColorString;

  int FirstCmp(
    ffi.Pointer<ffi.Void> p1,
    ffi.Pointer<ffi.Void> p2,
  ) {
    _FirstCmp ??=
        _dylib.lookupFunction<_c_FirstCmp, _dart_FirstCmp>('FirstCmp');
    return _FirstCmp(
      p1,
      p2,
    );
  }

  _dart_FirstCmp _FirstCmp;

  void SetNoVisit() {
    _SetNoVisit ??=
        _dylib.lookupFunction<_c_SetNoVisit, _dart_SetNoVisit>('SetNoVisit');
    return _SetNoVisit();
  }

  _dart_SetNoVisit _SetNoVisit;

  int field2(
    ffi.Pointer<ffi.Int8> pBuf,
    int delim,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> p1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> p2,
  ) {
    _field2 ??= _dylib.lookupFunction<_c_field2, _dart_field2>('field2');
    return _field2(
      pBuf,
      delim,
      p1,
      p2,
    );
  }

  _dart_field2 _field2;

  int _XcmsLookupColorName(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    __XcmsLookupColorName ??= _dylib.lookupFunction<_c__XcmsLookupColorName,
        _dart__XcmsLookupColorName>('_XcmsLookupColorName');
    return __XcmsLookupColorName(
      ccc,
      name,
      pColor,
    );
  }

  _dart__XcmsLookupColorName __XcmsLookupColorName;

  int RemoveSpaces(
    ffi.Pointer<ffi.Int8> pString,
  ) {
    _RemoveSpaces ??= _dylib
        .lookupFunction<_c_RemoveSpaces, _dart_RemoveSpaces>('RemoveSpaces');
    return _RemoveSpaces(
      pString,
    );
  }

  _dart_RemoveSpaces _RemoveSpaces;

  int stringSectionSize(
    ffi.Pointer<_IO_FILE> stream,
    ffi.Pointer<ffi.Int32> pNumEntries,
    ffi.Pointer<ffi.Int32> pSectionSize,
  ) {
    _stringSectionSize ??=
        _dylib.lookupFunction<_c_stringSectionSize, _dart_stringSectionSize>(
            'stringSectionSize');
    return _stringSectionSize(
      stream,
      pNumEntries,
      pSectionSize,
    );
  }

  _dart_stringSectionSize _stringSectionSize;

  int ReadColornameDB(
    ffi.Pointer<_IO_FILE> stream,
    ffi.Pointer<XcmsPair> pRec,
    ffi.Pointer<ffi.Int8> pString,
  ) {
    _ReadColornameDB ??=
        _dylib.lookupFunction<_c_ReadColornameDB, _dart_ReadColornameDB>(
            'ReadColornameDB');
    return _ReadColornameDB(
      stream,
      pRec,
      pString,
    );
  }

  _dart_ReadColornameDB _ReadColornameDB;

  void _XcmsFreeDefaultCCCs(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XcmsFreeDefaultCCCs ??= _dylib.lookupFunction<_c__XcmsFreeDefaultCCCs,
        _dart__XcmsFreeDefaultCCCs>('_XcmsFreeDefaultCCCs');
    return __XcmsFreeDefaultCCCs(
      dpy,
    );
  }

  _dart__XcmsFreeDefaultCCCs __XcmsFreeDefaultCCCs;

  double _XcmsModulo(
    double value,
    double base,
  ) {
    __XcmsModulo ??=
        _dylib.lookupFunction<_c__XcmsModulo, _dart__XcmsModulo>('_XcmsModulo');
    return __XcmsModulo(
      value,
      base,
    );
  }

  _dart__XcmsModulo __XcmsModulo;

  double _XcmsPolynomial(
    int order,
    ffi.Pointer<ffi.Double> coeffs,
    double x,
  ) {
    __XcmsPolynomial ??=
        _dylib.lookupFunction<_c__XcmsPolynomial, _dart__XcmsPolynomial>(
            '_XcmsPolynomial');
    return __XcmsPolynomial(
      order,
      coeffs,
      x,
    );
  }

  _dart__XcmsPolynomial __XcmsPolynomial;

  double _XcmsModuloF(
    double val,
    ffi.Pointer<ffi.Double> dp,
  ) {
    __XcmsModuloF ??= _dylib
        .lookupFunction<_c__XcmsModuloF, _dart__XcmsModuloF>('_XcmsModuloF');
    return __XcmsModuloF(
      val,
      dp,
    );
  }

  _dart__XcmsModuloF __XcmsModuloF;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int EqualCIEXYZ(
    ffi.Pointer<XcmsColor> p1,
    ffi.Pointer<XcmsColor> p2,
  ) {
    _EqualCIEXYZ ??=
        _dylib.lookupFunction<_c_EqualCIEXYZ, _dart_EqualCIEXYZ>('EqualCIEXYZ');
    return _EqualCIEXYZ(
      p1,
      p2,
    );
  }

  _dart_EqualCIEXYZ _EqualCIEXYZ;

  ffi.Pointer<XcmsColorSpace> ColorSpaceOfID(
    ffi.Pointer<XcmsCCCRec> ccc,
    int id,
  ) {
    _ColorSpaceOfID ??=
        _dylib.lookupFunction<_c_ColorSpaceOfID, _dart_ColorSpaceOfID>(
            'ColorSpaceOfID');
    return _ColorSpaceOfID(
      ccc,
      id,
    );
  }

  _dart_ColorSpaceOfID _ColorSpaceOfID;

  int ValidDIColorSpaceID(
    int id,
  ) {
    _ValidDIColorSpaceID ??= _dylib.lookupFunction<_c_ValidDIColorSpaceID,
        _dart_ValidDIColorSpaceID>('ValidDIColorSpaceID');
    return _ValidDIColorSpaceID(
      id,
    );
  }

  _dart_ValidDIColorSpaceID _ValidDIColorSpaceID;

  int ValidDDColorSpaceID(
    ffi.Pointer<XcmsCCCRec> ccc,
    int id,
  ) {
    _ValidDDColorSpaceID ??= _dylib.lookupFunction<_c_ValidDDColorSpaceID,
        _dart_ValidDDColorSpaceID>('ValidDDColorSpaceID');
    return _ValidDDColorSpaceID(
      ccc,
      id,
    );
  }

  _dart_ValidDDColorSpaceID _ValidDDColorSpaceID;

  int ConvertMixedColors(
    ffi.Pointer<XcmsCCCRec> ccc,
    ffi.Pointer<XcmsColor> pColors_in_out,
    ffi.Pointer<XcmsColor> pWhitePt,
    int nColors,
    int targetFormat,
    int format_flag,
  ) {
    _ConvertMixedColors ??=
        _dylib.lookupFunction<_c_ConvertMixedColors, _dart_ConvertMixedColors>(
            'ConvertMixedColors');
    return _ConvertMixedColors(
      ccc,
      pColors_in_out,
      pWhitePt,
      nColors,
      targetFormat,
      format_flag,
    );
  }

  _dart_ConvertMixedColors _ConvertMixedColors;

  int __fpclassify(
    double __value,
  ) {
    ___fpclassify ??= _dylib
        .lookupFunction<_c___fpclassify, _dart___fpclassify>('__fpclassify');
    return ___fpclassify(
      __value,
    );
  }

  _dart___fpclassify ___fpclassify;

  int __signbit(
    double __value,
  ) {
    ___signbit ??=
        _dylib.lookupFunction<_c___signbit, _dart___signbit>('__signbit');
    return ___signbit(
      __value,
    );
  }

  _dart___signbit ___signbit;

  int __isinf(
    double __value,
  ) {
    ___isinf ??= _dylib.lookupFunction<_c___isinf, _dart___isinf>('__isinf');
    return ___isinf(
      __value,
    );
  }

  _dart___isinf ___isinf;

  int __finite(
    double __value,
  ) {
    ___finite ??=
        _dylib.lookupFunction<_c___finite, _dart___finite>('__finite');
    return ___finite(
      __value,
    );
  }

  _dart___finite ___finite;

  int __isnan(
    double __value,
  ) {
    ___isnan ??= _dylib.lookupFunction<_c___isnan, _dart___isnan>('__isnan');
    return ___isnan(
      __value,
    );
  }

  _dart___isnan ___isnan;

  int __iseqsig(
    double __x,
    double __y,
  ) {
    ___iseqsig ??=
        _dylib.lookupFunction<_c___iseqsig, _dart___iseqsig>('__iseqsig');
    return ___iseqsig(
      __x,
      __y,
    );
  }

  _dart___iseqsig ___iseqsig;

  int __issignaling(
    double __value,
  ) {
    ___issignaling ??= _dylib
        .lookupFunction<_c___issignaling, _dart___issignaling>('__issignaling');
    return ___issignaling(
      __value,
    );
  }

  _dart___issignaling ___issignaling;

  double acos(
    double __x,
  ) {
    _acos ??= _dylib.lookupFunction<_c_acos, _dart_acos>('acos');
    return _acos(
      __x,
    );
  }

  _dart_acos _acos;

  double __acos(
    double __x,
  ) {
    ___acos ??= _dylib.lookupFunction<_c___acos, _dart___acos>('__acos');
    return ___acos(
      __x,
    );
  }

  _dart___acos ___acos;

  double asin(
    double __x,
  ) {
    _asin ??= _dylib.lookupFunction<_c_asin, _dart_asin>('asin');
    return _asin(
      __x,
    );
  }

  _dart_asin _asin;

  double __asin(
    double __x,
  ) {
    ___asin ??= _dylib.lookupFunction<_c___asin, _dart___asin>('__asin');
    return ___asin(
      __x,
    );
  }

  _dart___asin ___asin;

  double atan(
    double __x,
  ) {
    _atan ??= _dylib.lookupFunction<_c_atan, _dart_atan>('atan');
    return _atan(
      __x,
    );
  }

  _dart_atan _atan;

  double __atan(
    double __x,
  ) {
    ___atan ??= _dylib.lookupFunction<_c___atan, _dart___atan>('__atan');
    return ___atan(
      __x,
    );
  }

  _dart___atan ___atan;

  double atan2(
    double __y,
    double __x,
  ) {
    _atan2 ??= _dylib.lookupFunction<_c_atan2, _dart_atan2>('atan2');
    return _atan2(
      __y,
      __x,
    );
  }

  _dart_atan2 _atan2;

  double __atan2(
    double __y,
    double __x,
  ) {
    ___atan2 ??= _dylib.lookupFunction<_c___atan2, _dart___atan2>('__atan2');
    return ___atan2(
      __y,
      __x,
    );
  }

  _dart___atan2 ___atan2;

  double cos(
    double __x,
  ) {
    _cos ??= _dylib.lookupFunction<_c_cos, _dart_cos>('cos');
    return _cos(
      __x,
    );
  }

  _dart_cos _cos;

  double __cos(
    double __x,
  ) {
    ___cos ??= _dylib.lookupFunction<_c___cos, _dart___cos>('__cos');
    return ___cos(
      __x,
    );
  }

  _dart___cos ___cos;

  double sin(
    double __x,
  ) {
    _sin ??= _dylib.lookupFunction<_c_sin, _dart_sin>('sin');
    return _sin(
      __x,
    );
  }

  _dart_sin _sin;

  double __sin(
    double __x,
  ) {
    ___sin ??= _dylib.lookupFunction<_c___sin, _dart___sin>('__sin');
    return ___sin(
      __x,
    );
  }

  _dart___sin ___sin;

  double tan(
    double __x,
  ) {
    _tan ??= _dylib.lookupFunction<_c_tan, _dart_tan>('tan');
    return _tan(
      __x,
    );
  }

  _dart_tan _tan;

  double __tan(
    double __x,
  ) {
    ___tan ??= _dylib.lookupFunction<_c___tan, _dart___tan>('__tan');
    return ___tan(
      __x,
    );
  }

  _dart___tan ___tan;

  double cosh(
    double __x,
  ) {
    _cosh ??= _dylib.lookupFunction<_c_cosh, _dart_cosh>('cosh');
    return _cosh(
      __x,
    );
  }

  _dart_cosh _cosh;

  double __cosh(
    double __x,
  ) {
    ___cosh ??= _dylib.lookupFunction<_c___cosh, _dart___cosh>('__cosh');
    return ___cosh(
      __x,
    );
  }

  _dart___cosh ___cosh;

  double sinh(
    double __x,
  ) {
    _sinh ??= _dylib.lookupFunction<_c_sinh, _dart_sinh>('sinh');
    return _sinh(
      __x,
    );
  }

  _dart_sinh _sinh;

  double __sinh(
    double __x,
  ) {
    ___sinh ??= _dylib.lookupFunction<_c___sinh, _dart___sinh>('__sinh');
    return ___sinh(
      __x,
    );
  }

  _dart___sinh ___sinh;

  double tanh(
    double __x,
  ) {
    _tanh ??= _dylib.lookupFunction<_c_tanh, _dart_tanh>('tanh');
    return _tanh(
      __x,
    );
  }

  _dart_tanh _tanh;

  double __tanh(
    double __x,
  ) {
    ___tanh ??= _dylib.lookupFunction<_c___tanh, _dart___tanh>('__tanh');
    return ___tanh(
      __x,
    );
  }

  _dart___tanh ___tanh;

  double acosh(
    double __x,
  ) {
    _acosh ??= _dylib.lookupFunction<_c_acosh, _dart_acosh>('acosh');
    return _acosh(
      __x,
    );
  }

  _dart_acosh _acosh;

  double __acosh(
    double __x,
  ) {
    ___acosh ??= _dylib.lookupFunction<_c___acosh, _dart___acosh>('__acosh');
    return ___acosh(
      __x,
    );
  }

  _dart___acosh ___acosh;

  double asinh(
    double __x,
  ) {
    _asinh ??= _dylib.lookupFunction<_c_asinh, _dart_asinh>('asinh');
    return _asinh(
      __x,
    );
  }

  _dart_asinh _asinh;

  double __asinh(
    double __x,
  ) {
    ___asinh ??= _dylib.lookupFunction<_c___asinh, _dart___asinh>('__asinh');
    return ___asinh(
      __x,
    );
  }

  _dart___asinh ___asinh;

  double atanh(
    double __x,
  ) {
    _atanh ??= _dylib.lookupFunction<_c_atanh, _dart_atanh>('atanh');
    return _atanh(
      __x,
    );
  }

  _dart_atanh _atanh;

  double __atanh(
    double __x,
  ) {
    ___atanh ??= _dylib.lookupFunction<_c___atanh, _dart___atanh>('__atanh');
    return ___atanh(
      __x,
    );
  }

  _dart___atanh ___atanh;

  double exp(
    double __x,
  ) {
    _exp ??= _dylib.lookupFunction<_c_exp, _dart_exp>('exp');
    return _exp(
      __x,
    );
  }

  _dart_exp _exp;

  double __exp(
    double __x,
  ) {
    ___exp ??= _dylib.lookupFunction<_c___exp, _dart___exp>('__exp');
    return ___exp(
      __x,
    );
  }

  _dart___exp ___exp;

  double frexp(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    _frexp ??= _dylib.lookupFunction<_c_frexp, _dart_frexp>('frexp');
    return _frexp(
      __x,
      __exponent,
    );
  }

  _dart_frexp _frexp;

  double __frexp(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    ___frexp ??= _dylib.lookupFunction<_c___frexp, _dart___frexp>('__frexp');
    return ___frexp(
      __x,
      __exponent,
    );
  }

  _dart___frexp ___frexp;

  double ldexp(
    double __x,
    int __exponent,
  ) {
    _ldexp ??= _dylib.lookupFunction<_c_ldexp, _dart_ldexp>('ldexp');
    return _ldexp(
      __x,
      __exponent,
    );
  }

  _dart_ldexp _ldexp;

  double __ldexp(
    double __x,
    int __exponent,
  ) {
    ___ldexp ??= _dylib.lookupFunction<_c___ldexp, _dart___ldexp>('__ldexp');
    return ___ldexp(
      __x,
      __exponent,
    );
  }

  _dart___ldexp ___ldexp;

  double log(
    double __x,
  ) {
    _log ??= _dylib.lookupFunction<_c_log, _dart_log>('log');
    return _log(
      __x,
    );
  }

  _dart_log _log;

  double __log(
    double __x,
  ) {
    ___log ??= _dylib.lookupFunction<_c___log, _dart___log>('__log');
    return ___log(
      __x,
    );
  }

  _dart___log ___log;

  double log10(
    double __x,
  ) {
    _log10 ??= _dylib.lookupFunction<_c_log10, _dart_log10>('log10');
    return _log10(
      __x,
    );
  }

  _dart_log10 _log10;

  double __log10(
    double __x,
  ) {
    ___log10 ??= _dylib.lookupFunction<_c___log10, _dart___log10>('__log10');
    return ___log10(
      __x,
    );
  }

  _dart___log10 ___log10;

  double modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    _modf ??= _dylib.lookupFunction<_c_modf, _dart_modf>('modf');
    return _modf(
      __x,
      __iptr,
    );
  }

  _dart_modf _modf;

  double __modf(
    double __x,
    ffi.Pointer<ffi.Double> __iptr,
  ) {
    ___modf ??= _dylib.lookupFunction<_c___modf, _dart___modf>('__modf');
    return ___modf(
      __x,
      __iptr,
    );
  }

  _dart___modf ___modf;

  double expm1(
    double __x,
  ) {
    _expm1 ??= _dylib.lookupFunction<_c_expm1, _dart_expm1>('expm1');
    return _expm1(
      __x,
    );
  }

  _dart_expm1 _expm1;

  double __expm1(
    double __x,
  ) {
    ___expm1 ??= _dylib.lookupFunction<_c___expm1, _dart___expm1>('__expm1');
    return ___expm1(
      __x,
    );
  }

  _dart___expm1 ___expm1;

  double log1p(
    double __x,
  ) {
    _log1p ??= _dylib.lookupFunction<_c_log1p, _dart_log1p>('log1p');
    return _log1p(
      __x,
    );
  }

  _dart_log1p _log1p;

  double __log1p(
    double __x,
  ) {
    ___log1p ??= _dylib.lookupFunction<_c___log1p, _dart___log1p>('__log1p');
    return ___log1p(
      __x,
    );
  }

  _dart___log1p ___log1p;

  double logb(
    double __x,
  ) {
    _logb ??= _dylib.lookupFunction<_c_logb, _dart_logb>('logb');
    return _logb(
      __x,
    );
  }

  _dart_logb _logb;

  double __logb(
    double __x,
  ) {
    ___logb ??= _dylib.lookupFunction<_c___logb, _dart___logb>('__logb');
    return ___logb(
      __x,
    );
  }

  _dart___logb ___logb;

  double exp2(
    double __x,
  ) {
    _exp2 ??= _dylib.lookupFunction<_c_exp2, _dart_exp2>('exp2');
    return _exp2(
      __x,
    );
  }

  _dart_exp2 _exp2;

  double __exp2(
    double __x,
  ) {
    ___exp2 ??= _dylib.lookupFunction<_c___exp2, _dart___exp2>('__exp2');
    return ___exp2(
      __x,
    );
  }

  _dart___exp2 ___exp2;

  double log2(
    double __x,
  ) {
    _log2 ??= _dylib.lookupFunction<_c_log2, _dart_log2>('log2');
    return _log2(
      __x,
    );
  }

  _dart_log2 _log2;

  double __log2(
    double __x,
  ) {
    ___log2 ??= _dylib.lookupFunction<_c___log2, _dart___log2>('__log2');
    return ___log2(
      __x,
    );
  }

  _dart___log2 ___log2;

  double pow(
    double __x,
    double __y,
  ) {
    _pow ??= _dylib.lookupFunction<_c_pow, _dart_pow>('pow');
    return _pow(
      __x,
      __y,
    );
  }

  _dart_pow _pow;

  double __pow(
    double __x,
    double __y,
  ) {
    ___pow ??= _dylib.lookupFunction<_c___pow, _dart___pow>('__pow');
    return ___pow(
      __x,
      __y,
    );
  }

  _dart___pow ___pow;

  double sqrt(
    double __x,
  ) {
    _sqrt ??= _dylib.lookupFunction<_c_sqrt, _dart_sqrt>('sqrt');
    return _sqrt(
      __x,
    );
  }

  _dart_sqrt _sqrt;

  double __sqrt(
    double __x,
  ) {
    ___sqrt ??= _dylib.lookupFunction<_c___sqrt, _dart___sqrt>('__sqrt');
    return ___sqrt(
      __x,
    );
  }

  _dart___sqrt ___sqrt;

  double hypot(
    double __x,
    double __y,
  ) {
    _hypot ??= _dylib.lookupFunction<_c_hypot, _dart_hypot>('hypot');
    return _hypot(
      __x,
      __y,
    );
  }

  _dart_hypot _hypot;

  double __hypot(
    double __x,
    double __y,
  ) {
    ___hypot ??= _dylib.lookupFunction<_c___hypot, _dart___hypot>('__hypot');
    return ___hypot(
      __x,
      __y,
    );
  }

  _dart___hypot ___hypot;

  double cbrt(
    double __x,
  ) {
    _cbrt ??= _dylib.lookupFunction<_c_cbrt, _dart_cbrt>('cbrt');
    return _cbrt(
      __x,
    );
  }

  _dart_cbrt _cbrt;

  double __cbrt(
    double __x,
  ) {
    ___cbrt ??= _dylib.lookupFunction<_c___cbrt, _dart___cbrt>('__cbrt');
    return ___cbrt(
      __x,
    );
  }

  _dart___cbrt ___cbrt;

  double ceil(
    double __x,
  ) {
    _ceil ??= _dylib.lookupFunction<_c_ceil, _dart_ceil>('ceil');
    return _ceil(
      __x,
    );
  }

  _dart_ceil _ceil;

  double __ceil(
    double __x,
  ) {
    ___ceil ??= _dylib.lookupFunction<_c___ceil, _dart___ceil>('__ceil');
    return ___ceil(
      __x,
    );
  }

  _dart___ceil ___ceil;

  double fabs(
    double __x,
  ) {
    _fabs ??= _dylib.lookupFunction<_c_fabs, _dart_fabs>('fabs');
    return _fabs(
      __x,
    );
  }

  _dart_fabs _fabs;

  double __fabs(
    double __x,
  ) {
    ___fabs ??= _dylib.lookupFunction<_c___fabs, _dart___fabs>('__fabs');
    return ___fabs(
      __x,
    );
  }

  _dart___fabs ___fabs;

  double floor(
    double __x,
  ) {
    _floor ??= _dylib.lookupFunction<_c_floor, _dart_floor>('floor');
    return _floor(
      __x,
    );
  }

  _dart_floor _floor;

  double __floor(
    double __x,
  ) {
    ___floor ??= _dylib.lookupFunction<_c___floor, _dart___floor>('__floor');
    return ___floor(
      __x,
    );
  }

  _dart___floor ___floor;

  double fmod(
    double __x,
    double __y,
  ) {
    _fmod ??= _dylib.lookupFunction<_c_fmod, _dart_fmod>('fmod');
    return _fmod(
      __x,
      __y,
    );
  }

  _dart_fmod _fmod;

  double __fmod(
    double __x,
    double __y,
  ) {
    ___fmod ??= _dylib.lookupFunction<_c___fmod, _dart___fmod>('__fmod');
    return ___fmod(
      __x,
      __y,
    );
  }

  _dart___fmod ___fmod;

  int isinf(
    double __value,
  ) {
    _isinf ??= _dylib.lookupFunction<_c_isinf, _dart_isinf>('isinf');
    return _isinf(
      __value,
    );
  }

  _dart_isinf _isinf;

  int finite(
    double __value,
  ) {
    _finite ??= _dylib.lookupFunction<_c_finite, _dart_finite>('finite');
    return _finite(
      __value,
    );
  }

  _dart_finite _finite;

  double drem(
    double __x,
    double __y,
  ) {
    _drem ??= _dylib.lookupFunction<_c_drem, _dart_drem>('drem');
    return _drem(
      __x,
      __y,
    );
  }

  _dart_drem _drem;

  double __drem(
    double __x,
    double __y,
  ) {
    ___drem ??= _dylib.lookupFunction<_c___drem, _dart___drem>('__drem');
    return ___drem(
      __x,
      __y,
    );
  }

  _dart___drem ___drem;

  double significand(
    double __x,
  ) {
    _significand ??=
        _dylib.lookupFunction<_c_significand, _dart_significand>('significand');
    return _significand(
      __x,
    );
  }

  _dart_significand _significand;

  double __significand(
    double __x,
  ) {
    ___significand ??= _dylib
        .lookupFunction<_c___significand, _dart___significand>('__significand');
    return ___significand(
      __x,
    );
  }

  _dart___significand ___significand;

  double copysign(
    double __x,
    double __y,
  ) {
    _copysign ??=
        _dylib.lookupFunction<_c_copysign, _dart_copysign>('copysign');
    return _copysign(
      __x,
      __y,
    );
  }

  _dart_copysign _copysign;

  double __copysign(
    double __x,
    double __y,
  ) {
    ___copysign ??=
        _dylib.lookupFunction<_c___copysign, _dart___copysign>('__copysign');
    return ___copysign(
      __x,
      __y,
    );
  }

  _dart___copysign ___copysign;

  double nan(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    _nan ??= _dylib.lookupFunction<_c_nan, _dart_nan>('nan');
    return _nan(
      __tagb,
    );
  }

  _dart_nan _nan;

  double __nan(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    ___nan ??= _dylib.lookupFunction<_c___nan, _dart___nan>('__nan');
    return ___nan(
      __tagb,
    );
  }

  _dart___nan ___nan;

  int isnan(
    double __value,
  ) {
    _isnan ??= _dylib.lookupFunction<_c_isnan, _dart_isnan>('isnan');
    return _isnan(
      __value,
    );
  }

  _dart_isnan _isnan;

  double j0(
    double arg0,
  ) {
    _j0 ??= _dylib.lookupFunction<_c_j0, _dart_j0>('j0');
    return _j0(
      arg0,
    );
  }

  _dart_j0 _j0;

  double __j0(
    double arg0,
  ) {
    ___j0 ??= _dylib.lookupFunction<_c___j0, _dart___j0>('__j0');
    return ___j0(
      arg0,
    );
  }

  _dart___j0 ___j0;

  double j1(
    double arg0,
  ) {
    _j1 ??= _dylib.lookupFunction<_c_j1, _dart_j1>('j1');
    return _j1(
      arg0,
    );
  }

  _dart_j1 _j1;

  double __j1(
    double arg0,
  ) {
    ___j1 ??= _dylib.lookupFunction<_c___j1, _dart___j1>('__j1');
    return ___j1(
      arg0,
    );
  }

  _dart___j1 ___j1;

  double jn(
    int arg0,
    double arg1,
  ) {
    _jn ??= _dylib.lookupFunction<_c_jn, _dart_jn>('jn');
    return _jn(
      arg0,
      arg1,
    );
  }

  _dart_jn _jn;

  double __jn(
    int arg0,
    double arg1,
  ) {
    ___jn ??= _dylib.lookupFunction<_c___jn, _dart___jn>('__jn');
    return ___jn(
      arg0,
      arg1,
    );
  }

  _dart___jn ___jn;

  double y0(
    double arg0,
  ) {
    _y0 ??= _dylib.lookupFunction<_c_y0, _dart_y0>('y0');
    return _y0(
      arg0,
    );
  }

  _dart_y0 _y0;

  double __y0(
    double arg0,
  ) {
    ___y0 ??= _dylib.lookupFunction<_c___y0, _dart___y0>('__y0');
    return ___y0(
      arg0,
    );
  }

  _dart___y0 ___y0;

  double y1(
    double arg0,
  ) {
    _y1 ??= _dylib.lookupFunction<_c_y1, _dart_y1>('y1');
    return _y1(
      arg0,
    );
  }

  _dart_y1 _y1;

  double __y1(
    double arg0,
  ) {
    ___y1 ??= _dylib.lookupFunction<_c___y1, _dart___y1>('__y1');
    return ___y1(
      arg0,
    );
  }

  _dart___y1 ___y1;

  double yn(
    int arg0,
    double arg1,
  ) {
    _yn ??= _dylib.lookupFunction<_c_yn, _dart_yn>('yn');
    return _yn(
      arg0,
      arg1,
    );
  }

  _dart_yn _yn;

  double __yn(
    int arg0,
    double arg1,
  ) {
    ___yn ??= _dylib.lookupFunction<_c___yn, _dart___yn>('__yn');
    return ___yn(
      arg0,
      arg1,
    );
  }

  _dart___yn ___yn;

  double erf(
    double arg0,
  ) {
    _erf ??= _dylib.lookupFunction<_c_erf, _dart_erf>('erf');
    return _erf(
      arg0,
    );
  }

  _dart_erf _erf;

  double __erf(
    double arg0,
  ) {
    ___erf ??= _dylib.lookupFunction<_c___erf, _dart___erf>('__erf');
    return ___erf(
      arg0,
    );
  }

  _dart___erf ___erf;

  double erfc(
    double arg0,
  ) {
    _erfc ??= _dylib.lookupFunction<_c_erfc, _dart_erfc>('erfc');
    return _erfc(
      arg0,
    );
  }

  _dart_erfc _erfc;

  double __erfc(
    double arg0,
  ) {
    ___erfc ??= _dylib.lookupFunction<_c___erfc, _dart___erfc>('__erfc');
    return ___erfc(
      arg0,
    );
  }

  _dart___erfc ___erfc;

  double lgamma(
    double arg0,
  ) {
    _lgamma ??= _dylib.lookupFunction<_c_lgamma, _dart_lgamma>('lgamma');
    return _lgamma(
      arg0,
    );
  }

  _dart_lgamma _lgamma;

  double __lgamma(
    double arg0,
  ) {
    ___lgamma ??=
        _dylib.lookupFunction<_c___lgamma, _dart___lgamma>('__lgamma');
    return ___lgamma(
      arg0,
    );
  }

  _dart___lgamma ___lgamma;

  double tgamma(
    double arg0,
  ) {
    _tgamma ??= _dylib.lookupFunction<_c_tgamma, _dart_tgamma>('tgamma');
    return _tgamma(
      arg0,
    );
  }

  _dart_tgamma _tgamma;

  double __tgamma(
    double arg0,
  ) {
    ___tgamma ??=
        _dylib.lookupFunction<_c___tgamma, _dart___tgamma>('__tgamma');
    return ___tgamma(
      arg0,
    );
  }

  _dart___tgamma ___tgamma;

  double gamma(
    double arg0,
  ) {
    _gamma ??= _dylib.lookupFunction<_c_gamma, _dart_gamma>('gamma');
    return _gamma(
      arg0,
    );
  }

  _dart_gamma _gamma;

  double __gamma(
    double arg0,
  ) {
    ___gamma ??= _dylib.lookupFunction<_c___gamma, _dart___gamma>('__gamma');
    return ___gamma(
      arg0,
    );
  }

  _dart___gamma ___gamma;

  double lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    _lgamma_r ??=
        _dylib.lookupFunction<_c_lgamma_r, _dart_lgamma_r>('lgamma_r');
    return _lgamma_r(
      arg0,
      __signgamp,
    );
  }

  _dart_lgamma_r _lgamma_r;

  double __lgamma_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    ___lgamma_r ??=
        _dylib.lookupFunction<_c___lgamma_r, _dart___lgamma_r>('__lgamma_r');
    return ___lgamma_r(
      arg0,
      __signgamp,
    );
  }

  _dart___lgamma_r ___lgamma_r;

  double rint(
    double __x,
  ) {
    _rint ??= _dylib.lookupFunction<_c_rint, _dart_rint>('rint');
    return _rint(
      __x,
    );
  }

  _dart_rint _rint;

  double __rint(
    double __x,
  ) {
    ___rint ??= _dylib.lookupFunction<_c___rint, _dart___rint>('__rint');
    return ___rint(
      __x,
    );
  }

  _dart___rint ___rint;

  double nextafter(
    double __x,
    double __y,
  ) {
    _nextafter ??=
        _dylib.lookupFunction<_c_nextafter, _dart_nextafter>('nextafter');
    return _nextafter(
      __x,
      __y,
    );
  }

  _dart_nextafter _nextafter;

  double __nextafter(
    double __x,
    double __y,
  ) {
    ___nextafter ??=
        _dylib.lookupFunction<_c___nextafter, _dart___nextafter>('__nextafter');
    return ___nextafter(
      __x,
      __y,
    );
  }

  _dart___nextafter ___nextafter;

  double remainder(
    double __x,
    double __y,
  ) {
    _remainder ??=
        _dylib.lookupFunction<_c_remainder, _dart_remainder>('remainder');
    return _remainder(
      __x,
      __y,
    );
  }

  _dart_remainder _remainder;

  double __remainder(
    double __x,
    double __y,
  ) {
    ___remainder ??=
        _dylib.lookupFunction<_c___remainder, _dart___remainder>('__remainder');
    return ___remainder(
      __x,
      __y,
    );
  }

  _dart___remainder ___remainder;

  double scalbn(
    double __x,
    int __n,
  ) {
    _scalbn ??= _dylib.lookupFunction<_c_scalbn, _dart_scalbn>('scalbn');
    return _scalbn(
      __x,
      __n,
    );
  }

  _dart_scalbn _scalbn;

  double __scalbn(
    double __x,
    int __n,
  ) {
    ___scalbn ??=
        _dylib.lookupFunction<_c___scalbn, _dart___scalbn>('__scalbn');
    return ___scalbn(
      __x,
      __n,
    );
  }

  _dart___scalbn ___scalbn;

  int ilogb(
    double __x,
  ) {
    _ilogb ??= _dylib.lookupFunction<_c_ilogb, _dart_ilogb>('ilogb');
    return _ilogb(
      __x,
    );
  }

  _dart_ilogb _ilogb;

  int __ilogb(
    double __x,
  ) {
    ___ilogb ??= _dylib.lookupFunction<_c___ilogb, _dart___ilogb>('__ilogb');
    return ___ilogb(
      __x,
    );
  }

  _dart___ilogb ___ilogb;

  double scalbln(
    double __x,
    int __n,
  ) {
    _scalbln ??= _dylib.lookupFunction<_c_scalbln, _dart_scalbln>('scalbln');
    return _scalbln(
      __x,
      __n,
    );
  }

  _dart_scalbln _scalbln;

  double __scalbln(
    double __x,
    int __n,
  ) {
    ___scalbln ??=
        _dylib.lookupFunction<_c___scalbln, _dart___scalbln>('__scalbln');
    return ___scalbln(
      __x,
      __n,
    );
  }

  _dart___scalbln ___scalbln;

  double nearbyint(
    double __x,
  ) {
    _nearbyint ??=
        _dylib.lookupFunction<_c_nearbyint, _dart_nearbyint>('nearbyint');
    return _nearbyint(
      __x,
    );
  }

  _dart_nearbyint _nearbyint;

  double __nearbyint(
    double __x,
  ) {
    ___nearbyint ??=
        _dylib.lookupFunction<_c___nearbyint, _dart___nearbyint>('__nearbyint');
    return ___nearbyint(
      __x,
    );
  }

  _dart___nearbyint ___nearbyint;

  double round(
    double __x,
  ) {
    _round ??= _dylib.lookupFunction<_c_round, _dart_round>('round');
    return _round(
      __x,
    );
  }

  _dart_round _round;

  double __round(
    double __x,
  ) {
    ___round ??= _dylib.lookupFunction<_c___round, _dart___round>('__round');
    return ___round(
      __x,
    );
  }

  _dart___round ___round;

  double trunc(
    double __x,
  ) {
    _trunc ??= _dylib.lookupFunction<_c_trunc, _dart_trunc>('trunc');
    return _trunc(
      __x,
    );
  }

  _dart_trunc _trunc;

  double __trunc(
    double __x,
  ) {
    ___trunc ??= _dylib.lookupFunction<_c___trunc, _dart___trunc>('__trunc');
    return ___trunc(
      __x,
    );
  }

  _dart___trunc ___trunc;

  double remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    _remquo ??= _dylib.lookupFunction<_c_remquo, _dart_remquo>('remquo');
    return _remquo(
      __x,
      __y,
      __quo,
    );
  }

  _dart_remquo _remquo;

  double __remquo(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    ___remquo ??=
        _dylib.lookupFunction<_c___remquo, _dart___remquo>('__remquo');
    return ___remquo(
      __x,
      __y,
      __quo,
    );
  }

  _dart___remquo ___remquo;

  int lrint(
    double __x,
  ) {
    _lrint ??= _dylib.lookupFunction<_c_lrint, _dart_lrint>('lrint');
    return _lrint(
      __x,
    );
  }

  _dart_lrint _lrint;

  int __lrint(
    double __x,
  ) {
    ___lrint ??= _dylib.lookupFunction<_c___lrint, _dart___lrint>('__lrint');
    return ___lrint(
      __x,
    );
  }

  _dart___lrint ___lrint;

  int llrint(
    double __x,
  ) {
    _llrint ??= _dylib.lookupFunction<_c_llrint, _dart_llrint>('llrint');
    return _llrint(
      __x,
    );
  }

  _dart_llrint _llrint;

  int __llrint(
    double __x,
  ) {
    ___llrint ??=
        _dylib.lookupFunction<_c___llrint, _dart___llrint>('__llrint');
    return ___llrint(
      __x,
    );
  }

  _dart___llrint ___llrint;

  int lround(
    double __x,
  ) {
    _lround ??= _dylib.lookupFunction<_c_lround, _dart_lround>('lround');
    return _lround(
      __x,
    );
  }

  _dart_lround _lround;

  int __lround(
    double __x,
  ) {
    ___lround ??=
        _dylib.lookupFunction<_c___lround, _dart___lround>('__lround');
    return ___lround(
      __x,
    );
  }

  _dart___lround ___lround;

  int llround(
    double __x,
  ) {
    _llround ??= _dylib.lookupFunction<_c_llround, _dart_llround>('llround');
    return _llround(
      __x,
    );
  }

  _dart_llround _llround;

  int __llround(
    double __x,
  ) {
    ___llround ??=
        _dylib.lookupFunction<_c___llround, _dart___llround>('__llround');
    return ___llround(
      __x,
    );
  }

  _dart___llround ___llround;

  double fdim(
    double __x,
    double __y,
  ) {
    _fdim ??= _dylib.lookupFunction<_c_fdim, _dart_fdim>('fdim');
    return _fdim(
      __x,
      __y,
    );
  }

  _dart_fdim _fdim;

  double __fdim(
    double __x,
    double __y,
  ) {
    ___fdim ??= _dylib.lookupFunction<_c___fdim, _dart___fdim>('__fdim');
    return ___fdim(
      __x,
      __y,
    );
  }

  _dart___fdim ___fdim;

  double fmax(
    double __x,
    double __y,
  ) {
    _fmax ??= _dylib.lookupFunction<_c_fmax, _dart_fmax>('fmax');
    return _fmax(
      __x,
      __y,
    );
  }

  _dart_fmax _fmax;

  double __fmax(
    double __x,
    double __y,
  ) {
    ___fmax ??= _dylib.lookupFunction<_c___fmax, _dart___fmax>('__fmax');
    return ___fmax(
      __x,
      __y,
    );
  }

  _dart___fmax ___fmax;

  double fmin(
    double __x,
    double __y,
  ) {
    _fmin ??= _dylib.lookupFunction<_c_fmin, _dart_fmin>('fmin');
    return _fmin(
      __x,
      __y,
    );
  }

  _dart_fmin _fmin;

  double __fmin(
    double __x,
    double __y,
  ) {
    ___fmin ??= _dylib.lookupFunction<_c___fmin, _dart___fmin>('__fmin');
    return ___fmin(
      __x,
      __y,
    );
  }

  _dart___fmin ___fmin;

  double fma(
    double __x,
    double __y,
    double __z,
  ) {
    _fma ??= _dylib.lookupFunction<_c_fma, _dart_fma>('fma');
    return _fma(
      __x,
      __y,
      __z,
    );
  }

  _dart_fma _fma;

  double __fma(
    double __x,
    double __y,
    double __z,
  ) {
    ___fma ??= _dylib.lookupFunction<_c___fma, _dart___fma>('__fma');
    return ___fma(
      __x,
      __y,
      __z,
    );
  }

  _dart___fma ___fma;

  double scalb(
    double __x,
    double __n,
  ) {
    _scalb ??= _dylib.lookupFunction<_c_scalb, _dart_scalb>('scalb');
    return _scalb(
      __x,
      __n,
    );
  }

  _dart_scalb _scalb;

  double __scalb(
    double __x,
    double __n,
  ) {
    ___scalb ??= _dylib.lookupFunction<_c___scalb, _dart___scalb>('__scalb');
    return ___scalb(
      __x,
      __n,
    );
  }

  _dart___scalb ___scalb;

  int __fpclassifyf(
    double __value,
  ) {
    ___fpclassifyf ??= _dylib
        .lookupFunction<_c___fpclassifyf, _dart___fpclassifyf>('__fpclassifyf');
    return ___fpclassifyf(
      __value,
    );
  }

  _dart___fpclassifyf ___fpclassifyf;

  int __signbitf(
    double __value,
  ) {
    ___signbitf ??=
        _dylib.lookupFunction<_c___signbitf, _dart___signbitf>('__signbitf');
    return ___signbitf(
      __value,
    );
  }

  _dart___signbitf ___signbitf;

  int __isinff(
    double __value,
  ) {
    ___isinff ??=
        _dylib.lookupFunction<_c___isinff, _dart___isinff>('__isinff');
    return ___isinff(
      __value,
    );
  }

  _dart___isinff ___isinff;

  int __finitef(
    double __value,
  ) {
    ___finitef ??=
        _dylib.lookupFunction<_c___finitef, _dart___finitef>('__finitef');
    return ___finitef(
      __value,
    );
  }

  _dart___finitef ___finitef;

  int __isnanf(
    double __value,
  ) {
    ___isnanf ??=
        _dylib.lookupFunction<_c___isnanf, _dart___isnanf>('__isnanf');
    return ___isnanf(
      __value,
    );
  }

  _dart___isnanf ___isnanf;

  int __iseqsigf(
    double __x,
    double __y,
  ) {
    ___iseqsigf ??=
        _dylib.lookupFunction<_c___iseqsigf, _dart___iseqsigf>('__iseqsigf');
    return ___iseqsigf(
      __x,
      __y,
    );
  }

  _dart___iseqsigf ___iseqsigf;

  int __issignalingf(
    double __value,
  ) {
    ___issignalingf ??=
        _dylib.lookupFunction<_c___issignalingf, _dart___issignalingf>(
            '__issignalingf');
    return ___issignalingf(
      __value,
    );
  }

  _dart___issignalingf ___issignalingf;

  double acosf(
    double __x,
  ) {
    _acosf ??= _dylib.lookupFunction<_c_acosf, _dart_acosf>('acosf');
    return _acosf(
      __x,
    );
  }

  _dart_acosf _acosf;

  double __acosf(
    double __x,
  ) {
    ___acosf ??= _dylib.lookupFunction<_c___acosf, _dart___acosf>('__acosf');
    return ___acosf(
      __x,
    );
  }

  _dart___acosf ___acosf;

  double asinf(
    double __x,
  ) {
    _asinf ??= _dylib.lookupFunction<_c_asinf, _dart_asinf>('asinf');
    return _asinf(
      __x,
    );
  }

  _dart_asinf _asinf;

  double __asinf(
    double __x,
  ) {
    ___asinf ??= _dylib.lookupFunction<_c___asinf, _dart___asinf>('__asinf');
    return ___asinf(
      __x,
    );
  }

  _dart___asinf ___asinf;

  double atanf(
    double __x,
  ) {
    _atanf ??= _dylib.lookupFunction<_c_atanf, _dart_atanf>('atanf');
    return _atanf(
      __x,
    );
  }

  _dart_atanf _atanf;

  double __atanf(
    double __x,
  ) {
    ___atanf ??= _dylib.lookupFunction<_c___atanf, _dart___atanf>('__atanf');
    return ___atanf(
      __x,
    );
  }

  _dart___atanf ___atanf;

  double atan2f(
    double __y,
    double __x,
  ) {
    _atan2f ??= _dylib.lookupFunction<_c_atan2f, _dart_atan2f>('atan2f');
    return _atan2f(
      __y,
      __x,
    );
  }

  _dart_atan2f _atan2f;

  double __atan2f(
    double __y,
    double __x,
  ) {
    ___atan2f ??=
        _dylib.lookupFunction<_c___atan2f, _dart___atan2f>('__atan2f');
    return ___atan2f(
      __y,
      __x,
    );
  }

  _dart___atan2f ___atan2f;

  double cosf(
    double __x,
  ) {
    _cosf ??= _dylib.lookupFunction<_c_cosf, _dart_cosf>('cosf');
    return _cosf(
      __x,
    );
  }

  _dart_cosf _cosf;

  double __cosf(
    double __x,
  ) {
    ___cosf ??= _dylib.lookupFunction<_c___cosf, _dart___cosf>('__cosf');
    return ___cosf(
      __x,
    );
  }

  _dart___cosf ___cosf;

  double sinf(
    double __x,
  ) {
    _sinf ??= _dylib.lookupFunction<_c_sinf, _dart_sinf>('sinf');
    return _sinf(
      __x,
    );
  }

  _dart_sinf _sinf;

  double __sinf(
    double __x,
  ) {
    ___sinf ??= _dylib.lookupFunction<_c___sinf, _dart___sinf>('__sinf');
    return ___sinf(
      __x,
    );
  }

  _dart___sinf ___sinf;

  double tanf(
    double __x,
  ) {
    _tanf ??= _dylib.lookupFunction<_c_tanf, _dart_tanf>('tanf');
    return _tanf(
      __x,
    );
  }

  _dart_tanf _tanf;

  double __tanf(
    double __x,
  ) {
    ___tanf ??= _dylib.lookupFunction<_c___tanf, _dart___tanf>('__tanf');
    return ___tanf(
      __x,
    );
  }

  _dart___tanf ___tanf;

  double coshf(
    double __x,
  ) {
    _coshf ??= _dylib.lookupFunction<_c_coshf, _dart_coshf>('coshf');
    return _coshf(
      __x,
    );
  }

  _dart_coshf _coshf;

  double __coshf(
    double __x,
  ) {
    ___coshf ??= _dylib.lookupFunction<_c___coshf, _dart___coshf>('__coshf');
    return ___coshf(
      __x,
    );
  }

  _dart___coshf ___coshf;

  double sinhf(
    double __x,
  ) {
    _sinhf ??= _dylib.lookupFunction<_c_sinhf, _dart_sinhf>('sinhf');
    return _sinhf(
      __x,
    );
  }

  _dart_sinhf _sinhf;

  double __sinhf(
    double __x,
  ) {
    ___sinhf ??= _dylib.lookupFunction<_c___sinhf, _dart___sinhf>('__sinhf');
    return ___sinhf(
      __x,
    );
  }

  _dart___sinhf ___sinhf;

  double tanhf(
    double __x,
  ) {
    _tanhf ??= _dylib.lookupFunction<_c_tanhf, _dart_tanhf>('tanhf');
    return _tanhf(
      __x,
    );
  }

  _dart_tanhf _tanhf;

  double __tanhf(
    double __x,
  ) {
    ___tanhf ??= _dylib.lookupFunction<_c___tanhf, _dart___tanhf>('__tanhf');
    return ___tanhf(
      __x,
    );
  }

  _dart___tanhf ___tanhf;

  double acoshf(
    double __x,
  ) {
    _acoshf ??= _dylib.lookupFunction<_c_acoshf, _dart_acoshf>('acoshf');
    return _acoshf(
      __x,
    );
  }

  _dart_acoshf _acoshf;

  double __acoshf(
    double __x,
  ) {
    ___acoshf ??=
        _dylib.lookupFunction<_c___acoshf, _dart___acoshf>('__acoshf');
    return ___acoshf(
      __x,
    );
  }

  _dart___acoshf ___acoshf;

  double asinhf(
    double __x,
  ) {
    _asinhf ??= _dylib.lookupFunction<_c_asinhf, _dart_asinhf>('asinhf');
    return _asinhf(
      __x,
    );
  }

  _dart_asinhf _asinhf;

  double __asinhf(
    double __x,
  ) {
    ___asinhf ??=
        _dylib.lookupFunction<_c___asinhf, _dart___asinhf>('__asinhf');
    return ___asinhf(
      __x,
    );
  }

  _dart___asinhf ___asinhf;

  double atanhf(
    double __x,
  ) {
    _atanhf ??= _dylib.lookupFunction<_c_atanhf, _dart_atanhf>('atanhf');
    return _atanhf(
      __x,
    );
  }

  _dart_atanhf _atanhf;

  double __atanhf(
    double __x,
  ) {
    ___atanhf ??=
        _dylib.lookupFunction<_c___atanhf, _dart___atanhf>('__atanhf');
    return ___atanhf(
      __x,
    );
  }

  _dart___atanhf ___atanhf;

  double expf(
    double __x,
  ) {
    _expf ??= _dylib.lookupFunction<_c_expf, _dart_expf>('expf');
    return _expf(
      __x,
    );
  }

  _dart_expf _expf;

  double __expf(
    double __x,
  ) {
    ___expf ??= _dylib.lookupFunction<_c___expf, _dart___expf>('__expf');
    return ___expf(
      __x,
    );
  }

  _dart___expf ___expf;

  double frexpf(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    _frexpf ??= _dylib.lookupFunction<_c_frexpf, _dart_frexpf>('frexpf');
    return _frexpf(
      __x,
      __exponent,
    );
  }

  _dart_frexpf _frexpf;

  double __frexpf(
    double __x,
    ffi.Pointer<ffi.Int32> __exponent,
  ) {
    ___frexpf ??=
        _dylib.lookupFunction<_c___frexpf, _dart___frexpf>('__frexpf');
    return ___frexpf(
      __x,
      __exponent,
    );
  }

  _dart___frexpf ___frexpf;

  double ldexpf(
    double __x,
    int __exponent,
  ) {
    _ldexpf ??= _dylib.lookupFunction<_c_ldexpf, _dart_ldexpf>('ldexpf');
    return _ldexpf(
      __x,
      __exponent,
    );
  }

  _dart_ldexpf _ldexpf;

  double __ldexpf(
    double __x,
    int __exponent,
  ) {
    ___ldexpf ??=
        _dylib.lookupFunction<_c___ldexpf, _dart___ldexpf>('__ldexpf');
    return ___ldexpf(
      __x,
      __exponent,
    );
  }

  _dart___ldexpf ___ldexpf;

  double logf(
    double __x,
  ) {
    _logf ??= _dylib.lookupFunction<_c_logf, _dart_logf>('logf');
    return _logf(
      __x,
    );
  }

  _dart_logf _logf;

  double __logf(
    double __x,
  ) {
    ___logf ??= _dylib.lookupFunction<_c___logf, _dart___logf>('__logf');
    return ___logf(
      __x,
    );
  }

  _dart___logf ___logf;

  double log10f(
    double __x,
  ) {
    _log10f ??= _dylib.lookupFunction<_c_log10f, _dart_log10f>('log10f');
    return _log10f(
      __x,
    );
  }

  _dart_log10f _log10f;

  double __log10f(
    double __x,
  ) {
    ___log10f ??=
        _dylib.lookupFunction<_c___log10f, _dart___log10f>('__log10f');
    return ___log10f(
      __x,
    );
  }

  _dart___log10f ___log10f;

  double modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    _modff ??= _dylib.lookupFunction<_c_modff, _dart_modff>('modff');
    return _modff(
      __x,
      __iptr,
    );
  }

  _dart_modff _modff;

  double __modff(
    double __x,
    ffi.Pointer<ffi.Float> __iptr,
  ) {
    ___modff ??= _dylib.lookupFunction<_c___modff, _dart___modff>('__modff');
    return ___modff(
      __x,
      __iptr,
    );
  }

  _dart___modff ___modff;

  double expm1f(
    double __x,
  ) {
    _expm1f ??= _dylib.lookupFunction<_c_expm1f, _dart_expm1f>('expm1f');
    return _expm1f(
      __x,
    );
  }

  _dart_expm1f _expm1f;

  double __expm1f(
    double __x,
  ) {
    ___expm1f ??=
        _dylib.lookupFunction<_c___expm1f, _dart___expm1f>('__expm1f');
    return ___expm1f(
      __x,
    );
  }

  _dart___expm1f ___expm1f;

  double log1pf(
    double __x,
  ) {
    _log1pf ??= _dylib.lookupFunction<_c_log1pf, _dart_log1pf>('log1pf');
    return _log1pf(
      __x,
    );
  }

  _dart_log1pf _log1pf;

  double __log1pf(
    double __x,
  ) {
    ___log1pf ??=
        _dylib.lookupFunction<_c___log1pf, _dart___log1pf>('__log1pf');
    return ___log1pf(
      __x,
    );
  }

  _dart___log1pf ___log1pf;

  double logbf(
    double __x,
  ) {
    _logbf ??= _dylib.lookupFunction<_c_logbf, _dart_logbf>('logbf');
    return _logbf(
      __x,
    );
  }

  _dart_logbf _logbf;

  double __logbf(
    double __x,
  ) {
    ___logbf ??= _dylib.lookupFunction<_c___logbf, _dart___logbf>('__logbf');
    return ___logbf(
      __x,
    );
  }

  _dart___logbf ___logbf;

  double exp2f(
    double __x,
  ) {
    _exp2f ??= _dylib.lookupFunction<_c_exp2f, _dart_exp2f>('exp2f');
    return _exp2f(
      __x,
    );
  }

  _dart_exp2f _exp2f;

  double __exp2f(
    double __x,
  ) {
    ___exp2f ??= _dylib.lookupFunction<_c___exp2f, _dart___exp2f>('__exp2f');
    return ___exp2f(
      __x,
    );
  }

  _dart___exp2f ___exp2f;

  double log2f(
    double __x,
  ) {
    _log2f ??= _dylib.lookupFunction<_c_log2f, _dart_log2f>('log2f');
    return _log2f(
      __x,
    );
  }

  _dart_log2f _log2f;

  double __log2f(
    double __x,
  ) {
    ___log2f ??= _dylib.lookupFunction<_c___log2f, _dart___log2f>('__log2f');
    return ___log2f(
      __x,
    );
  }

  _dart___log2f ___log2f;

  double powf(
    double __x,
    double __y,
  ) {
    _powf ??= _dylib.lookupFunction<_c_powf, _dart_powf>('powf');
    return _powf(
      __x,
      __y,
    );
  }

  _dart_powf _powf;

  double __powf(
    double __x,
    double __y,
  ) {
    ___powf ??= _dylib.lookupFunction<_c___powf, _dart___powf>('__powf');
    return ___powf(
      __x,
      __y,
    );
  }

  _dart___powf ___powf;

  double sqrtf(
    double __x,
  ) {
    _sqrtf ??= _dylib.lookupFunction<_c_sqrtf, _dart_sqrtf>('sqrtf');
    return _sqrtf(
      __x,
    );
  }

  _dart_sqrtf _sqrtf;

  double __sqrtf(
    double __x,
  ) {
    ___sqrtf ??= _dylib.lookupFunction<_c___sqrtf, _dart___sqrtf>('__sqrtf');
    return ___sqrtf(
      __x,
    );
  }

  _dart___sqrtf ___sqrtf;

  double hypotf(
    double __x,
    double __y,
  ) {
    _hypotf ??= _dylib.lookupFunction<_c_hypotf, _dart_hypotf>('hypotf');
    return _hypotf(
      __x,
      __y,
    );
  }

  _dart_hypotf _hypotf;

  double __hypotf(
    double __x,
    double __y,
  ) {
    ___hypotf ??=
        _dylib.lookupFunction<_c___hypotf, _dart___hypotf>('__hypotf');
    return ___hypotf(
      __x,
      __y,
    );
  }

  _dart___hypotf ___hypotf;

  double cbrtf(
    double __x,
  ) {
    _cbrtf ??= _dylib.lookupFunction<_c_cbrtf, _dart_cbrtf>('cbrtf');
    return _cbrtf(
      __x,
    );
  }

  _dart_cbrtf _cbrtf;

  double __cbrtf(
    double __x,
  ) {
    ___cbrtf ??= _dylib.lookupFunction<_c___cbrtf, _dart___cbrtf>('__cbrtf');
    return ___cbrtf(
      __x,
    );
  }

  _dart___cbrtf ___cbrtf;

  double ceilf(
    double __x,
  ) {
    _ceilf ??= _dylib.lookupFunction<_c_ceilf, _dart_ceilf>('ceilf');
    return _ceilf(
      __x,
    );
  }

  _dart_ceilf _ceilf;

  double __ceilf(
    double __x,
  ) {
    ___ceilf ??= _dylib.lookupFunction<_c___ceilf, _dart___ceilf>('__ceilf');
    return ___ceilf(
      __x,
    );
  }

  _dart___ceilf ___ceilf;

  double fabsf(
    double __x,
  ) {
    _fabsf ??= _dylib.lookupFunction<_c_fabsf, _dart_fabsf>('fabsf');
    return _fabsf(
      __x,
    );
  }

  _dart_fabsf _fabsf;

  double __fabsf(
    double __x,
  ) {
    ___fabsf ??= _dylib.lookupFunction<_c___fabsf, _dart___fabsf>('__fabsf');
    return ___fabsf(
      __x,
    );
  }

  _dart___fabsf ___fabsf;

  double floorf(
    double __x,
  ) {
    _floorf ??= _dylib.lookupFunction<_c_floorf, _dart_floorf>('floorf');
    return _floorf(
      __x,
    );
  }

  _dart_floorf _floorf;

  double __floorf(
    double __x,
  ) {
    ___floorf ??=
        _dylib.lookupFunction<_c___floorf, _dart___floorf>('__floorf');
    return ___floorf(
      __x,
    );
  }

  _dart___floorf ___floorf;

  double fmodf(
    double __x,
    double __y,
  ) {
    _fmodf ??= _dylib.lookupFunction<_c_fmodf, _dart_fmodf>('fmodf');
    return _fmodf(
      __x,
      __y,
    );
  }

  _dart_fmodf _fmodf;

  double __fmodf(
    double __x,
    double __y,
  ) {
    ___fmodf ??= _dylib.lookupFunction<_c___fmodf, _dart___fmodf>('__fmodf');
    return ___fmodf(
      __x,
      __y,
    );
  }

  _dart___fmodf ___fmodf;

  int isinff(
    double __value,
  ) {
    _isinff ??= _dylib.lookupFunction<_c_isinff, _dart_isinff>('isinff');
    return _isinff(
      __value,
    );
  }

  _dart_isinff _isinff;

  int finitef(
    double __value,
  ) {
    _finitef ??= _dylib.lookupFunction<_c_finitef, _dart_finitef>('finitef');
    return _finitef(
      __value,
    );
  }

  _dart_finitef _finitef;

  double dremf(
    double __x,
    double __y,
  ) {
    _dremf ??= _dylib.lookupFunction<_c_dremf, _dart_dremf>('dremf');
    return _dremf(
      __x,
      __y,
    );
  }

  _dart_dremf _dremf;

  double __dremf(
    double __x,
    double __y,
  ) {
    ___dremf ??= _dylib.lookupFunction<_c___dremf, _dart___dremf>('__dremf');
    return ___dremf(
      __x,
      __y,
    );
  }

  _dart___dremf ___dremf;

  double significandf(
    double __x,
  ) {
    _significandf ??= _dylib
        .lookupFunction<_c_significandf, _dart_significandf>('significandf');
    return _significandf(
      __x,
    );
  }

  _dart_significandf _significandf;

  double __significandf(
    double __x,
  ) {
    ___significandf ??=
        _dylib.lookupFunction<_c___significandf, _dart___significandf>(
            '__significandf');
    return ___significandf(
      __x,
    );
  }

  _dart___significandf ___significandf;

  double copysignf(
    double __x,
    double __y,
  ) {
    _copysignf ??=
        _dylib.lookupFunction<_c_copysignf, _dart_copysignf>('copysignf');
    return _copysignf(
      __x,
      __y,
    );
  }

  _dart_copysignf _copysignf;

  double __copysignf(
    double __x,
    double __y,
  ) {
    ___copysignf ??=
        _dylib.lookupFunction<_c___copysignf, _dart___copysignf>('__copysignf');
    return ___copysignf(
      __x,
      __y,
    );
  }

  _dart___copysignf ___copysignf;

  double nanf(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    _nanf ??= _dylib.lookupFunction<_c_nanf, _dart_nanf>('nanf');
    return _nanf(
      __tagb,
    );
  }

  _dart_nanf _nanf;

  double __nanf(
    ffi.Pointer<ffi.Int8> __tagb,
  ) {
    ___nanf ??= _dylib.lookupFunction<_c___nanf, _dart___nanf>('__nanf');
    return ___nanf(
      __tagb,
    );
  }

  _dart___nanf ___nanf;

  int isnanf(
    double __value,
  ) {
    _isnanf ??= _dylib.lookupFunction<_c_isnanf, _dart_isnanf>('isnanf');
    return _isnanf(
      __value,
    );
  }

  _dart_isnanf _isnanf;

  double j0f(
    double arg0,
  ) {
    _j0f ??= _dylib.lookupFunction<_c_j0f, _dart_j0f>('j0f');
    return _j0f(
      arg0,
    );
  }

  _dart_j0f _j0f;

  double __j0f(
    double arg0,
  ) {
    ___j0f ??= _dylib.lookupFunction<_c___j0f, _dart___j0f>('__j0f');
    return ___j0f(
      arg0,
    );
  }

  _dart___j0f ___j0f;

  double j1f(
    double arg0,
  ) {
    _j1f ??= _dylib.lookupFunction<_c_j1f, _dart_j1f>('j1f');
    return _j1f(
      arg0,
    );
  }

  _dart_j1f _j1f;

  double __j1f(
    double arg0,
  ) {
    ___j1f ??= _dylib.lookupFunction<_c___j1f, _dart___j1f>('__j1f');
    return ___j1f(
      arg0,
    );
  }

  _dart___j1f ___j1f;

  double jnf(
    int arg0,
    double arg1,
  ) {
    _jnf ??= _dylib.lookupFunction<_c_jnf, _dart_jnf>('jnf');
    return _jnf(
      arg0,
      arg1,
    );
  }

  _dart_jnf _jnf;

  double __jnf(
    int arg0,
    double arg1,
  ) {
    ___jnf ??= _dylib.lookupFunction<_c___jnf, _dart___jnf>('__jnf');
    return ___jnf(
      arg0,
      arg1,
    );
  }

  _dart___jnf ___jnf;

  double y0f(
    double arg0,
  ) {
    _y0f ??= _dylib.lookupFunction<_c_y0f, _dart_y0f>('y0f');
    return _y0f(
      arg0,
    );
  }

  _dart_y0f _y0f;

  double __y0f(
    double arg0,
  ) {
    ___y0f ??= _dylib.lookupFunction<_c___y0f, _dart___y0f>('__y0f');
    return ___y0f(
      arg0,
    );
  }

  _dart___y0f ___y0f;

  double y1f(
    double arg0,
  ) {
    _y1f ??= _dylib.lookupFunction<_c_y1f, _dart_y1f>('y1f');
    return _y1f(
      arg0,
    );
  }

  _dart_y1f _y1f;

  double __y1f(
    double arg0,
  ) {
    ___y1f ??= _dylib.lookupFunction<_c___y1f, _dart___y1f>('__y1f');
    return ___y1f(
      arg0,
    );
  }

  _dart___y1f ___y1f;

  double ynf(
    int arg0,
    double arg1,
  ) {
    _ynf ??= _dylib.lookupFunction<_c_ynf, _dart_ynf>('ynf');
    return _ynf(
      arg0,
      arg1,
    );
  }

  _dart_ynf _ynf;

  double __ynf(
    int arg0,
    double arg1,
  ) {
    ___ynf ??= _dylib.lookupFunction<_c___ynf, _dart___ynf>('__ynf');
    return ___ynf(
      arg0,
      arg1,
    );
  }

  _dart___ynf ___ynf;

  double erff(
    double arg0,
  ) {
    _erff ??= _dylib.lookupFunction<_c_erff, _dart_erff>('erff');
    return _erff(
      arg0,
    );
  }

  _dart_erff _erff;

  double __erff(
    double arg0,
  ) {
    ___erff ??= _dylib.lookupFunction<_c___erff, _dart___erff>('__erff');
    return ___erff(
      arg0,
    );
  }

  _dart___erff ___erff;

  double erfcf(
    double arg0,
  ) {
    _erfcf ??= _dylib.lookupFunction<_c_erfcf, _dart_erfcf>('erfcf');
    return _erfcf(
      arg0,
    );
  }

  _dart_erfcf _erfcf;

  double __erfcf(
    double arg0,
  ) {
    ___erfcf ??= _dylib.lookupFunction<_c___erfcf, _dart___erfcf>('__erfcf');
    return ___erfcf(
      arg0,
    );
  }

  _dart___erfcf ___erfcf;

  double lgammaf(
    double arg0,
  ) {
    _lgammaf ??= _dylib.lookupFunction<_c_lgammaf, _dart_lgammaf>('lgammaf');
    return _lgammaf(
      arg0,
    );
  }

  _dart_lgammaf _lgammaf;

  double __lgammaf(
    double arg0,
  ) {
    ___lgammaf ??=
        _dylib.lookupFunction<_c___lgammaf, _dart___lgammaf>('__lgammaf');
    return ___lgammaf(
      arg0,
    );
  }

  _dart___lgammaf ___lgammaf;

  double tgammaf(
    double arg0,
  ) {
    _tgammaf ??= _dylib.lookupFunction<_c_tgammaf, _dart_tgammaf>('tgammaf');
    return _tgammaf(
      arg0,
    );
  }

  _dart_tgammaf _tgammaf;

  double __tgammaf(
    double arg0,
  ) {
    ___tgammaf ??=
        _dylib.lookupFunction<_c___tgammaf, _dart___tgammaf>('__tgammaf');
    return ___tgammaf(
      arg0,
    );
  }

  _dart___tgammaf ___tgammaf;

  double gammaf(
    double arg0,
  ) {
    _gammaf ??= _dylib.lookupFunction<_c_gammaf, _dart_gammaf>('gammaf');
    return _gammaf(
      arg0,
    );
  }

  _dart_gammaf _gammaf;

  double __gammaf(
    double arg0,
  ) {
    ___gammaf ??=
        _dylib.lookupFunction<_c___gammaf, _dart___gammaf>('__gammaf');
    return ___gammaf(
      arg0,
    );
  }

  _dart___gammaf ___gammaf;

  double lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    _lgammaf_r ??=
        _dylib.lookupFunction<_c_lgammaf_r, _dart_lgammaf_r>('lgammaf_r');
    return _lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  _dart_lgammaf_r _lgammaf_r;

  double __lgammaf_r(
    double arg0,
    ffi.Pointer<ffi.Int32> __signgamp,
  ) {
    ___lgammaf_r ??=
        _dylib.lookupFunction<_c___lgammaf_r, _dart___lgammaf_r>('__lgammaf_r');
    return ___lgammaf_r(
      arg0,
      __signgamp,
    );
  }

  _dart___lgammaf_r ___lgammaf_r;

  double rintf(
    double __x,
  ) {
    _rintf ??= _dylib.lookupFunction<_c_rintf, _dart_rintf>('rintf');
    return _rintf(
      __x,
    );
  }

  _dart_rintf _rintf;

  double __rintf(
    double __x,
  ) {
    ___rintf ??= _dylib.lookupFunction<_c___rintf, _dart___rintf>('__rintf');
    return ___rintf(
      __x,
    );
  }

  _dart___rintf ___rintf;

  double nextafterf(
    double __x,
    double __y,
  ) {
    _nextafterf ??=
        _dylib.lookupFunction<_c_nextafterf, _dart_nextafterf>('nextafterf');
    return _nextafterf(
      __x,
      __y,
    );
  }

  _dart_nextafterf _nextafterf;

  double __nextafterf(
    double __x,
    double __y,
  ) {
    ___nextafterf ??= _dylib
        .lookupFunction<_c___nextafterf, _dart___nextafterf>('__nextafterf');
    return ___nextafterf(
      __x,
      __y,
    );
  }

  _dart___nextafterf ___nextafterf;

  double remainderf(
    double __x,
    double __y,
  ) {
    _remainderf ??=
        _dylib.lookupFunction<_c_remainderf, _dart_remainderf>('remainderf');
    return _remainderf(
      __x,
      __y,
    );
  }

  _dart_remainderf _remainderf;

  double __remainderf(
    double __x,
    double __y,
  ) {
    ___remainderf ??= _dylib
        .lookupFunction<_c___remainderf, _dart___remainderf>('__remainderf');
    return ___remainderf(
      __x,
      __y,
    );
  }

  _dart___remainderf ___remainderf;

  double scalbnf(
    double __x,
    int __n,
  ) {
    _scalbnf ??= _dylib.lookupFunction<_c_scalbnf, _dart_scalbnf>('scalbnf');
    return _scalbnf(
      __x,
      __n,
    );
  }

  _dart_scalbnf _scalbnf;

  double __scalbnf(
    double __x,
    int __n,
  ) {
    ___scalbnf ??=
        _dylib.lookupFunction<_c___scalbnf, _dart___scalbnf>('__scalbnf');
    return ___scalbnf(
      __x,
      __n,
    );
  }

  _dart___scalbnf ___scalbnf;

  int ilogbf(
    double __x,
  ) {
    _ilogbf ??= _dylib.lookupFunction<_c_ilogbf, _dart_ilogbf>('ilogbf');
    return _ilogbf(
      __x,
    );
  }

  _dart_ilogbf _ilogbf;

  int __ilogbf(
    double __x,
  ) {
    ___ilogbf ??=
        _dylib.lookupFunction<_c___ilogbf, _dart___ilogbf>('__ilogbf');
    return ___ilogbf(
      __x,
    );
  }

  _dart___ilogbf ___ilogbf;

  double scalblnf(
    double __x,
    int __n,
  ) {
    _scalblnf ??=
        _dylib.lookupFunction<_c_scalblnf, _dart_scalblnf>('scalblnf');
    return _scalblnf(
      __x,
      __n,
    );
  }

  _dart_scalblnf _scalblnf;

  double __scalblnf(
    double __x,
    int __n,
  ) {
    ___scalblnf ??=
        _dylib.lookupFunction<_c___scalblnf, _dart___scalblnf>('__scalblnf');
    return ___scalblnf(
      __x,
      __n,
    );
  }

  _dart___scalblnf ___scalblnf;

  double nearbyintf(
    double __x,
  ) {
    _nearbyintf ??=
        _dylib.lookupFunction<_c_nearbyintf, _dart_nearbyintf>('nearbyintf');
    return _nearbyintf(
      __x,
    );
  }

  _dart_nearbyintf _nearbyintf;

  double __nearbyintf(
    double __x,
  ) {
    ___nearbyintf ??= _dylib
        .lookupFunction<_c___nearbyintf, _dart___nearbyintf>('__nearbyintf');
    return ___nearbyintf(
      __x,
    );
  }

  _dart___nearbyintf ___nearbyintf;

  double roundf(
    double __x,
  ) {
    _roundf ??= _dylib.lookupFunction<_c_roundf, _dart_roundf>('roundf');
    return _roundf(
      __x,
    );
  }

  _dart_roundf _roundf;

  double __roundf(
    double __x,
  ) {
    ___roundf ??=
        _dylib.lookupFunction<_c___roundf, _dart___roundf>('__roundf');
    return ___roundf(
      __x,
    );
  }

  _dart___roundf ___roundf;

  double truncf(
    double __x,
  ) {
    _truncf ??= _dylib.lookupFunction<_c_truncf, _dart_truncf>('truncf');
    return _truncf(
      __x,
    );
  }

  _dart_truncf _truncf;

  double __truncf(
    double __x,
  ) {
    ___truncf ??=
        _dylib.lookupFunction<_c___truncf, _dart___truncf>('__truncf');
    return ___truncf(
      __x,
    );
  }

  _dart___truncf ___truncf;

  double remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    _remquof ??= _dylib.lookupFunction<_c_remquof, _dart_remquof>('remquof');
    return _remquof(
      __x,
      __y,
      __quo,
    );
  }

  _dart_remquof _remquof;

  double __remquof(
    double __x,
    double __y,
    ffi.Pointer<ffi.Int32> __quo,
  ) {
    ___remquof ??=
        _dylib.lookupFunction<_c___remquof, _dart___remquof>('__remquof');
    return ___remquof(
      __x,
      __y,
      __quo,
    );
  }

  _dart___remquof ___remquof;

  int lrintf(
    double __x,
  ) {
    _lrintf ??= _dylib.lookupFunction<_c_lrintf, _dart_lrintf>('lrintf');
    return _lrintf(
      __x,
    );
  }

  _dart_lrintf _lrintf;

  int __lrintf(
    double __x,
  ) {
    ___lrintf ??=
        _dylib.lookupFunction<_c___lrintf, _dart___lrintf>('__lrintf');
    return ___lrintf(
      __x,
    );
  }

  _dart___lrintf ___lrintf;

  int llrintf(
    double __x,
  ) {
    _llrintf ??= _dylib.lookupFunction<_c_llrintf, _dart_llrintf>('llrintf');
    return _llrintf(
      __x,
    );
  }

  _dart_llrintf _llrintf;

  int __llrintf(
    double __x,
  ) {
    ___llrintf ??=
        _dylib.lookupFunction<_c___llrintf, _dart___llrintf>('__llrintf');
    return ___llrintf(
      __x,
    );
  }

  _dart___llrintf ___llrintf;

  int lroundf(
    double __x,
  ) {
    _lroundf ??= _dylib.lookupFunction<_c_lroundf, _dart_lroundf>('lroundf');
    return _lroundf(
      __x,
    );
  }

  _dart_lroundf _lroundf;

  int __lroundf(
    double __x,
  ) {
    ___lroundf ??=
        _dylib.lookupFunction<_c___lroundf, _dart___lroundf>('__lroundf');
    return ___lroundf(
      __x,
    );
  }

  _dart___lroundf ___lroundf;

  int llroundf(
    double __x,
  ) {
    _llroundf ??=
        _dylib.lookupFunction<_c_llroundf, _dart_llroundf>('llroundf');
    return _llroundf(
      __x,
    );
  }

  _dart_llroundf _llroundf;

  int __llroundf(
    double __x,
  ) {
    ___llroundf ??=
        _dylib.lookupFunction<_c___llroundf, _dart___llroundf>('__llroundf');
    return ___llroundf(
      __x,
    );
  }

  _dart___llroundf ___llroundf;

  double fdimf(
    double __x,
    double __y,
  ) {
    _fdimf ??= _dylib.lookupFunction<_c_fdimf, _dart_fdimf>('fdimf');
    return _fdimf(
      __x,
      __y,
    );
  }

  _dart_fdimf _fdimf;

  double __fdimf(
    double __x,
    double __y,
  ) {
    ___fdimf ??= _dylib.lookupFunction<_c___fdimf, _dart___fdimf>('__fdimf');
    return ___fdimf(
      __x,
      __y,
    );
  }

  _dart___fdimf ___fdimf;

  double fmaxf(
    double __x,
    double __y,
  ) {
    _fmaxf ??= _dylib.lookupFunction<_c_fmaxf, _dart_fmaxf>('fmaxf');
    return _fmaxf(
      __x,
      __y,
    );
  }

  _dart_fmaxf _fmaxf;

  double __fmaxf(
    double __x,
    double __y,
  ) {
    ___fmaxf ??= _dylib.lookupFunction<_c___fmaxf, _dart___fmaxf>('__fmaxf');
    return ___fmaxf(
      __x,
      __y,
    );
  }

  _dart___fmaxf ___fmaxf;

  double fminf(
    double __x,
    double __y,
  ) {
    _fminf ??= _dylib.lookupFunction<_c_fminf, _dart_fminf>('fminf');
    return _fminf(
      __x,
      __y,
    );
  }

  _dart_fminf _fminf;

  double __fminf(
    double __x,
    double __y,
  ) {
    ___fminf ??= _dylib.lookupFunction<_c___fminf, _dart___fminf>('__fminf');
    return ___fminf(
      __x,
      __y,
    );
  }

  _dart___fminf ___fminf;

  double fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    _fmaf ??= _dylib.lookupFunction<_c_fmaf, _dart_fmaf>('fmaf');
    return _fmaf(
      __x,
      __y,
      __z,
    );
  }

  _dart_fmaf _fmaf;

  double __fmaf(
    double __x,
    double __y,
    double __z,
  ) {
    ___fmaf ??= _dylib.lookupFunction<_c___fmaf, _dart___fmaf>('__fmaf');
    return ___fmaf(
      __x,
      __y,
      __z,
    );
  }

  _dart___fmaf ___fmaf;

  double scalbf(
    double __x,
    double __n,
  ) {
    _scalbf ??= _dylib.lookupFunction<_c_scalbf, _dart_scalbf>('scalbf');
    return _scalbf(
      __x,
      __n,
    );
  }

  _dart_scalbf _scalbf;

  double __scalbf(
    double __x,
    double __n,
  ) {
    ___scalbf ??=
        _dylib.lookupFunction<_c___scalbf, _dart___scalbf>('__scalbf');
    return ___scalbf(
      __x,
      __n,
    );
  }

  _dart___scalbf ___scalbf;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int TekHVC_ParseString(
    ffi.Pointer<ffi.Int8> spec,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _TekHVC_ParseString ??=
        _dylib.lookupFunction<_c_TekHVC_ParseString, _dart_TekHVC_ParseString>(
            'TekHVC_ParseString');
    return _TekHVC_ParseString(
      spec,
      pColor,
    );
  }

  _dart_TekHVC_ParseString _TekHVC_ParseString;

  /// *
  /// PUBLIC ROUTINES				*
  /// *
  int XcmsTekHVC_ValidSpec(
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _XcmsTekHVC_ValidSpec ??= _dylib.lookupFunction<_c_XcmsTekHVC_ValidSpec,
        _dart_XcmsTekHVC_ValidSpec>('XcmsTekHVC_ValidSpec');
    return _XcmsTekHVC_ValidSpec(
      pColor,
    );
  }

  _dart_XcmsTekHVC_ValidSpec _XcmsTekHVC_ValidSpec;

  int ThetaOffset(
    ffi.Pointer<XcmsColor> pWhitePt,
    ffi.Pointer<ffi.Double> pThetaOffset,
  ) {
    _ThetaOffset ??=
        _dylib.lookupFunction<_c_ThetaOffset, _dart_ThetaOffset>('ThetaOffset');
    return _ThetaOffset(
      pWhitePt,
      pThetaOffset,
    );
  }

  _dart_ThetaOffset _ThetaOffset;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int CIELab_ParseString(
    ffi.Pointer<ffi.Int8> spec,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _CIELab_ParseString ??=
        _dylib.lookupFunction<_c_CIELab_ParseString, _dart_CIELab_ParseString>(
            'CIELab_ParseString');
    return _CIELab_ParseString(
      spec,
      pColor,
    );
  }

  _dart_CIELab_ParseString _CIELab_ParseString;

  /// *
  /// PUBLIC ROUTINES				*
  /// *
  int XcmsCIELab_ValidSpec(
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _XcmsCIELab_ValidSpec ??= _dylib.lookupFunction<_c_XcmsCIELab_ValidSpec,
        _dart_XcmsCIELab_ValidSpec>('XcmsCIELab_ValidSpec');
    return _XcmsCIELab_ValidSpec(
      pColor,
    );
  }

  _dart_XcmsCIELab_ValidSpec _XcmsCIELab_ValidSpec;

  void LINEAR_RGB_FreeSCCData(
    ffi.Pointer<ffi.Int8> pScreenDataTemp,
  ) {
    _LINEAR_RGB_FreeSCCData ??= _dylib.lookupFunction<_c_LINEAR_RGB_FreeSCCData,
        _dart_LINEAR_RGB_FreeSCCData>('LINEAR_RGB_FreeSCCData');
    return _LINEAR_RGB_FreeSCCData(
      pScreenDataTemp,
    );
  }

  _dart_LINEAR_RGB_FreeSCCData _LINEAR_RGB_FreeSCCData;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int LINEAR_RGB_InitSCCData(
    ffi.Pointer<_XDisplay> dpy,
    int screenNumber,
    ffi.Pointer<XcmsPerScrnInfo> pPerScrnInfo,
  ) {
    _LINEAR_RGB_InitSCCData ??= _dylib.lookupFunction<_c_LINEAR_RGB_InitSCCData,
        _dart_LINEAR_RGB_InitSCCData>('LINEAR_RGB_InitSCCData');
    return _LINEAR_RGB_InitSCCData(
      dpy,
      screenNumber,
      pPerScrnInfo,
    );
  }

  _dart_LINEAR_RGB_InitSCCData _LINEAR_RGB_InitSCCData;

  /// *
  /// PUBLIC ROUTINES				*
  /// *
  int XcmsLRGB_RGB_ParseString(
    ffi.Pointer<ffi.Int8> spec,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _XcmsLRGB_RGB_ParseString ??= _dylib.lookupFunction<
        _c_XcmsLRGB_RGB_ParseString,
        _dart_XcmsLRGB_RGB_ParseString>('XcmsLRGB_RGB_ParseString');
    return _XcmsLRGB_RGB_ParseString(
      spec,
      pColor,
    );
  }

  _dart_XcmsLRGB_RGB_ParseString _XcmsLRGB_RGB_ParseString;

  int XcmsLRGB_RGBi_ParseString(
    ffi.Pointer<ffi.Int8> spec,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _XcmsLRGB_RGBi_ParseString ??= _dylib.lookupFunction<
        _c_XcmsLRGB_RGBi_ParseString,
        _dart_XcmsLRGB_RGBi_ParseString>('XcmsLRGB_RGBi_ParseString');
    return _XcmsLRGB_RGBi_ParseString(
      spec,
      pColor,
    );
  }

  _dart_XcmsLRGB_RGBi_ParseString _XcmsLRGB_RGBi_ParseString;

  /// *
  /// API PRIVATE ROUTINES				*
  /// *
  int _XcmsGetTableType0(
    ffi.Pointer<IntensityTbl> pTbl,
    int format,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pChar,
    ffi.Pointer<ffi.Uint64> pCount,
  ) {
    __XcmsGetTableType0 ??=
        _dylib.lookupFunction<_c__XcmsGetTableType0, _dart__XcmsGetTableType0>(
            '_XcmsGetTableType0');
    return __XcmsGetTableType0(
      pTbl,
      format,
      pChar,
      pCount,
    );
  }

  _dart__XcmsGetTableType0 __XcmsGetTableType0;

  int _XcmsGetTableType1(
    ffi.Pointer<IntensityTbl> pTbl,
    int format,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> pChar,
    ffi.Pointer<ffi.Uint64> pCount,
  ) {
    __XcmsGetTableType1 ??=
        _dylib.lookupFunction<_c__XcmsGetTableType1, _dart__XcmsGetTableType1>(
            '_XcmsGetTableType1');
    return __XcmsGetTableType1(
      pTbl,
      format,
      pChar,
      pCount,
    );
  }

  _dart__XcmsGetTableType1 __XcmsGetTableType1;

  int _XcmsValueCmp(
    ffi.Pointer<IntensityRec> p1,
    ffi.Pointer<IntensityRec> p2,
  ) {
    __XcmsValueCmp ??= _dylib
        .lookupFunction<_c__XcmsValueCmp, _dart__XcmsValueCmp>('_XcmsValueCmp');
    return __XcmsValueCmp(
      p1,
      p2,
    );
  }

  _dart__XcmsValueCmp __XcmsValueCmp;

  int _XcmsIntensityCmp(
    ffi.Pointer<IntensityRec> p1,
    ffi.Pointer<IntensityRec> p2,
  ) {
    __XcmsIntensityCmp ??=
        _dylib.lookupFunction<_c__XcmsIntensityCmp, _dart__XcmsIntensityCmp>(
            '_XcmsIntensityCmp');
    return __XcmsIntensityCmp(
      p1,
      p2,
    );
  }

  _dart__XcmsIntensityCmp __XcmsIntensityCmp;

  int _XcmsValueInterpolation(
    ffi.Pointer<IntensityRec> key,
    ffi.Pointer<IntensityRec> lo,
    ffi.Pointer<IntensityRec> hi,
    ffi.Pointer<IntensityRec> answer,
    int bitsPerRGB,
  ) {
    __XcmsValueInterpolation ??= _dylib.lookupFunction<
        _c__XcmsValueInterpolation,
        _dart__XcmsValueInterpolation>('_XcmsValueInterpolation');
    return __XcmsValueInterpolation(
      key,
      lo,
      hi,
      answer,
      bitsPerRGB,
    );
  }

  _dart__XcmsValueInterpolation __XcmsValueInterpolation;

  int _XcmsIntensityInterpolation(
    ffi.Pointer<IntensityRec> key,
    ffi.Pointer<IntensityRec> lo,
    ffi.Pointer<IntensityRec> hi,
    ffi.Pointer<IntensityRec> answer,
    int bitsPerRGB,
  ) {
    __XcmsIntensityInterpolation ??= _dylib.lookupFunction<
        _c__XcmsIntensityInterpolation,
        _dart__XcmsIntensityInterpolation>('_XcmsIntensityInterpolation');
    return __XcmsIntensityInterpolation(
      key,
      lo,
      hi,
      answer,
      bitsPerRGB,
    );
  }

  _dart__XcmsIntensityInterpolation __XcmsIntensityInterpolation;

  int _XcmsTableSearch(
    ffi.Pointer<ffi.Int8> key,
    int bitsPerRGB,
    ffi.Pointer<ffi.Int8> base,
    int nel,
    int nKeyPtrSize,
    ffi.Pointer<ffi.NativeFunction<_typedefC_98>> compar,
    ffi.Pointer<ffi.NativeFunction<_typedefC_99>> interpol,
    ffi.Pointer<ffi.Int8> answer,
  ) {
    __XcmsTableSearch ??=
        _dylib.lookupFunction<_c__XcmsTableSearch, _dart__XcmsTableSearch>(
            '_XcmsTableSearch');
    return __XcmsTableSearch(
      key,
      bitsPerRGB,
      base,
      nel,
      nKeyPtrSize,
      compar,
      interpol,
      answer,
    );
  }

  _dart__XcmsTableSearch __XcmsTableSearch;

  void _XcmsMatVec(
    ffi.Pointer<ffi.Double> pMat,
    ffi.Pointer<ffi.Double> pIn,
    ffi.Pointer<ffi.Double> pOut,
  ) {
    __XcmsMatVec ??=
        _dylib.lookupFunction<_c__XcmsMatVec, _dart__XcmsMatVec>('_XcmsMatVec');
    return __XcmsMatVec(
      pMat,
      pIn,
      pOut,
    );
  }

  _dart__XcmsMatVec __XcmsMatVec;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int CIELuv_ParseString(
    ffi.Pointer<ffi.Int8> spec,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _CIELuv_ParseString ??=
        _dylib.lookupFunction<_c_CIELuv_ParseString, _dart_CIELuv_ParseString>(
            'CIELuv_ParseString');
    return _CIELuv_ParseString(
      spec,
      pColor,
    );
  }

  _dart_CIELuv_ParseString _CIELuv_ParseString;

  /// *
  /// PUBLIC ROUTINES				*
  /// *
  int XcmsCIELuv_ValidSpec(
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _XcmsCIELuv_ValidSpec ??= _dylib.lookupFunction<_c_XcmsCIELuv_ValidSpec,
        _dart_XcmsCIELuv_ValidSpec>('XcmsCIELuv_ValidSpec');
    return _XcmsCIELuv_ValidSpec(
      pColor,
    );
  }

  _dart_XcmsCIELuv_ValidSpec _XcmsCIELuv_ValidSpec;

  int DummyParseStringProc(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<XcmsColor> arg1,
  ) {
    _DummyParseStringProc ??= _dylib.lookupFunction<_c_DummyParseStringProc,
        _dart_DummyParseStringProc>('DummyParseStringProc');
    return _DummyParseStringProc(
      arg0,
      arg1,
    );
  }

  _dart_DummyParseStringProc _DummyParseStringProc;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int ReturnZero(
    ffi.Pointer<XcmsCCCRec> arg0,
    ffi.Pointer<XcmsColor> arg1,
    ffi.Pointer<XcmsColor> arg2,
    int arg3,
  ) {
    _ReturnZero ??=
        _dylib.lookupFunction<_c_ReturnZero, _dart_ReturnZero>('ReturnZero');
    return _ReturnZero(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ReturnZero _ReturnZero;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int CIEuvY_ParseString(
    ffi.Pointer<ffi.Int8> spec,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _CIEuvY_ParseString ??=
        _dylib.lookupFunction<_c_CIEuvY_ParseString, _dart_CIEuvY_ParseString>(
            'CIEuvY_ParseString');
    return _CIEuvY_ParseString(
      spec,
      pColor,
    );
  }

  _dart_CIEuvY_ParseString _CIEuvY_ParseString;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int CIExyY_ParseString(
    ffi.Pointer<ffi.Int8> spec,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _CIExyY_ParseString ??=
        _dylib.lookupFunction<_c_CIExyY_ParseString, _dart_CIExyY_ParseString>(
            'CIExyY_ParseString');
    return _CIExyY_ParseString(
      spec,
      pColor,
    );
  }

  _dart_CIExyY_ParseString _CIExyY_ParseString;

  /// *
  /// PUBLIC ROUTINES				*
  /// *
  int XcmsCIExyY_ValidSpec(
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _XcmsCIExyY_ValidSpec ??= _dylib.lookupFunction<_c_XcmsCIExyY_ValidSpec,
        _dart_XcmsCIExyY_ValidSpec>('XcmsCIExyY_ValidSpec');
    return _XcmsCIExyY_ValidSpec(
      pColor,
    );
  }

  _dart_XcmsCIExyY_ValidSpec _XcmsCIExyY_ValidSpec;

  /// *
  /// PRIVATE ROUTINES				*
  /// *
  int CIEXYZ_ParseString(
    ffi.Pointer<ffi.Int8> spec,
    ffi.Pointer<XcmsColor> pColor,
  ) {
    _CIEXYZ_ParseString ??=
        _dylib.lookupFunction<_c_CIEXYZ_ParseString, _dart_CIEXYZ_ParseString>(
            'CIEXYZ_ParseString');
    return _CIEXYZ_ParseString(
      spec,
      pColor,
    );
  }

  _dart_CIEXYZ_ParseString _CIEXYZ_ParseString;

  void _XkbReloadDpy(
    ffi.Pointer<_XDisplay> arg0,
  ) {
    __XkbReloadDpy ??= _dylib
        .lookupFunction<_c__XkbReloadDpy, _dart__XkbReloadDpy>('_XkbReloadDpy');
    return __XkbReloadDpy(
      arg0,
    );
  }

  _dart__XkbReloadDpy __XkbReloadDpy;

  int _XKeycodeToKeysym(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
    int arg2,
  ) {
    __XKeycodeToKeysym ??=
        _dylib.lookupFunction<_c__XKeycodeToKeysym, _dart__XKeycodeToKeysym>(
            '_XKeycodeToKeysym');
    return __XKeycodeToKeysym(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XKeycodeToKeysym __XKeycodeToKeysym;

  int _XKeysymToKeycode(
    ffi.Pointer<_XDisplay> arg0,
    int arg1,
  ) {
    __XKeysymToKeycode ??=
        _dylib.lookupFunction<_c__XKeysymToKeycode, _dart__XKeysymToKeycode>(
            '_XKeysymToKeycode');
    return __XKeysymToKeycode(
      arg0,
      arg1,
    );
  }

  _dart__XKeysymToKeycode __XKeysymToKeycode;

  int _XLookupKeysym(
    ffi.Pointer<XKeyEvent> arg0,
    int arg1,
  ) {
    __XLookupKeysym ??=
        _dylib.lookupFunction<_c__XLookupKeysym, _dart__XLookupKeysym>(
            '_XLookupKeysym');
    return __XLookupKeysym(
      arg0,
      arg1,
    );
  }

  _dart__XLookupKeysym __XLookupKeysym;

  int _XRefreshKeyboardMapping(
    ffi.Pointer<XMappingEvent> arg0,
  ) {
    __XRefreshKeyboardMapping ??= _dylib.lookupFunction<
        _c__XRefreshKeyboardMapping,
        _dart__XRefreshKeyboardMapping>('_XRefreshKeyboardMapping');
    return __XRefreshKeyboardMapping(
      arg0,
    );
  }

  _dart__XRefreshKeyboardMapping __XRefreshKeyboardMapping;

  int _XLookupString(
    ffi.Pointer<XKeyEvent> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Uint64> arg3,
    ffi.Pointer<XComposeStatus> arg4,
  ) {
    __XLookupString ??=
        _dylib.lookupFunction<_c__XLookupString, _dart__XLookupString>(
            '_XLookupString');
    return __XLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart__XLookupString __XLookupString;

  void _XkbNoteCoreMapChanges(
    ffi.Pointer<XkbMapChangesPtr> arg0,
    ffi.Pointer<XMappingEvent> arg1,
    int arg2,
  ) {
    __XkbNoteCoreMapChanges ??= _dylib.lookupFunction<_c__XkbNoteCoreMapChanges,
        _dart__XkbNoteCoreMapChanges>('_XkbNoteCoreMapChanges');
    return __XkbNoteCoreMapChanges(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbNoteCoreMapChanges __XkbNoteCoreMapChanges;

  int _XkbInitReadBuffer(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<XkbReadBufferPtr> arg1,
    int arg2,
  ) {
    __XkbInitReadBuffer ??=
        _dylib.lookupFunction<_c__XkbInitReadBuffer, _dart__XkbInitReadBuffer>(
            '_XkbInitReadBuffer');
    return __XkbInitReadBuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbInitReadBuffer __XkbInitReadBuffer;

  int _XkbSkipReadBufferData(
    ffi.Pointer<XkbReadBufferPtr> arg0,
    int arg1,
  ) {
    __XkbSkipReadBufferData ??= _dylib.lookupFunction<_c__XkbSkipReadBufferData,
        _dart__XkbSkipReadBufferData>('_XkbSkipReadBufferData');
    return __XkbSkipReadBufferData(
      arg0,
      arg1,
    );
  }

  _dart__XkbSkipReadBufferData __XkbSkipReadBufferData;

  int _XkbCopyFromReadBuffer(
    ffi.Pointer<XkbReadBufferPtr> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XkbCopyFromReadBuffer ??= _dylib.lookupFunction<_c__XkbCopyFromReadBuffer,
        _dart__XkbCopyFromReadBuffer>('_XkbCopyFromReadBuffer');
    return __XkbCopyFromReadBuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbCopyFromReadBuffer __XkbCopyFromReadBuffer;

  int _XkbReadCopyData32(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int64> arg1,
    int arg2,
  ) {
    __XkbReadCopyData32 ??=
        _dylib.lookupFunction<_c__XkbReadCopyData32, _dart__XkbReadCopyData32>(
            '_XkbReadCopyData32');
    return __XkbReadCopyData32(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbReadCopyData32 __XkbReadCopyData32;

  int _XkbWriteCopyData32(
    ffi.Pointer<ffi.Uint64> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    int arg2,
  ) {
    __XkbWriteCopyData32 ??= _dylib.lookupFunction<_c__XkbWriteCopyData32,
        _dart__XkbWriteCopyData32>('_XkbWriteCopyData32');
    return __XkbWriteCopyData32(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbWriteCopyData32 __XkbWriteCopyData32;

  int _XkbReadBufferCopy32(
    ffi.Pointer<XkbReadBufferPtr> arg0,
    ffi.Pointer<ffi.Int64> arg1,
    int arg2,
  ) {
    __XkbReadBufferCopy32 ??= _dylib.lookupFunction<_c__XkbReadBufferCopy32,
        _dart__XkbReadBufferCopy32>('_XkbReadBufferCopy32');
    return __XkbReadBufferCopy32(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbReadBufferCopy32 __XkbReadBufferCopy32;

  int _XkbReadCopyKeySyms(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
  ) {
    __XkbReadCopyKeySyms ??= _dylib.lookupFunction<_c__XkbReadCopyKeySyms,
        _dart__XkbReadCopyKeySyms>('_XkbReadCopyKeySyms');
    return __XkbReadCopyKeySyms(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbReadCopyKeySyms __XkbReadCopyKeySyms;

  int _XkbWriteCopyKeySyms(
    ffi.Pointer<ffi.Uint64> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    int arg2,
  ) {
    __XkbWriteCopyKeySyms ??= _dylib.lookupFunction<_c__XkbWriteCopyKeySyms,
        _dart__XkbWriteCopyKeySyms>('_XkbWriteCopyKeySyms');
    return __XkbWriteCopyKeySyms(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbWriteCopyKeySyms __XkbWriteCopyKeySyms;

  int _XkbReadBufferCopyKeySyms(
    ffi.Pointer<XkbReadBufferPtr> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    int arg2,
  ) {
    __XkbReadBufferCopyKeySyms ??= _dylib.lookupFunction<
        _c__XkbReadBufferCopyKeySyms,
        _dart__XkbReadBufferCopyKeySyms>('_XkbReadBufferCopyKeySyms');
    return __XkbReadBufferCopyKeySyms(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XkbReadBufferCopyKeySyms __XkbReadBufferCopyKeySyms;

  ffi.Pointer<ffi.Int8> _XkbPeekAtReadBuffer(
    ffi.Pointer<XkbReadBufferPtr> arg0,
    int arg1,
  ) {
    __XkbPeekAtReadBuffer ??= _dylib.lookupFunction<_c__XkbPeekAtReadBuffer,
        _dart__XkbPeekAtReadBuffer>('_XkbPeekAtReadBuffer');
    return __XkbPeekAtReadBuffer(
      arg0,
      arg1,
    );
  }

  _dart__XkbPeekAtReadBuffer __XkbPeekAtReadBuffer;

  ffi.Pointer<ffi.Int8> _XkbGetReadBufferPtr(
    ffi.Pointer<XkbReadBufferPtr> arg0,
    int arg1,
  ) {
    __XkbGetReadBufferPtr ??= _dylib.lookupFunction<_c__XkbGetReadBufferPtr,
        _dart__XkbGetReadBufferPtr>('_XkbGetReadBufferPtr');
    return __XkbGetReadBufferPtr(
      arg0,
      arg1,
    );
  }

  _dart__XkbGetReadBufferPtr __XkbGetReadBufferPtr;

  int _XkbFreeReadBuffer(
    ffi.Pointer<XkbReadBufferPtr> arg0,
  ) {
    __XkbFreeReadBuffer ??=
        _dylib.lookupFunction<_c__XkbFreeReadBuffer, _dart__XkbFreeReadBuffer>(
            '_XkbFreeReadBuffer');
    return __XkbFreeReadBuffer(
      arg0,
    );
  }

  _dart__XkbFreeReadBuffer __XkbFreeReadBuffer;

  int _XkbGetReadBufferCountedString(
    ffi.Pointer<XkbReadBufferPtr> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    __XkbGetReadBufferCountedString ??= _dylib.lookupFunction<
        _c__XkbGetReadBufferCountedString,
        _dart__XkbGetReadBufferCountedString>('_XkbGetReadBufferCountedString');
    return __XkbGetReadBufferCountedString(
      arg0,
      arg1,
    );
  }

  _dart__XkbGetReadBufferCountedString __XkbGetReadBufferCountedString;

  ffi.Pointer<ffi.Int8> _XkbGetCharset() {
    __XkbGetCharset ??=
        _dylib.lookupFunction<_c__XkbGetCharset, _dart__XkbGetCharset>(
            '_XkbGetCharset');
    return __XkbGetCharset();
  }

  _dart__XkbGetCharset __XkbGetCharset;

  int _XkbGetConverters(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<XkbConverters> arg1,
  ) {
    __XkbGetConverters ??=
        _dylib.lookupFunction<_c__XkbGetConverters, _dart__XkbGetConverters>(
            '_XkbGetConverters');
    return __XkbGetConverters(
      arg0,
      arg1,
    );
  }

  _dart__XkbGetConverters __XkbGetConverters;

  ffi.Pointer<XkbPropertyPtr> XkbAddGeomProperty(
    ffi.Pointer<_XkbGeometry> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _XkbAddGeomProperty ??=
        _dylib.lookupFunction<_c_XkbAddGeomProperty, _dart_XkbAddGeomProperty>(
            'XkbAddGeomProperty');
    return _XkbAddGeomProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_XkbAddGeomProperty _XkbAddGeomProperty;

  int _XkbLoadDpy(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XkbLoadDpy ??=
        _dylib.lookupFunction<_c__XkbLoadDpy, _dart__XkbLoadDpy>('_XkbLoadDpy');
    return __XkbLoadDpy(
      dpy,
    );
  }

  _dart__XkbLoadDpy __XkbLoadDpy;

  int _XkbComputeModmap(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XkbComputeModmap ??=
        _dylib.lookupFunction<_c__XkbComputeModmap, _dart__XkbComputeModmap>(
            '_XkbComputeModmap');
    return __XkbComputeModmap(
      dpy,
    );
  }

  _dart__XkbComputeModmap __XkbComputeModmap;

  int XkbTranslateKey(
    ffi.Pointer<_XDisplay> dpy,
    int key,
    int mods,
    ffi.Pointer<ffi.Uint32> mods_rtrn,
    ffi.Pointer<ffi.Uint64> keysym_rtrn,
  ) {
    _XkbTranslateKey ??=
        _dylib.lookupFunction<_c_XkbTranslateKey, _dart_XkbTranslateKey>(
            'XkbTranslateKey');
    return _XkbTranslateKey(
      dpy,
      key,
      mods,
      mods_rtrn,
      keysym_rtrn,
    );
  }

  _dart_XkbTranslateKey _XkbTranslateKey;

  int _XkbReadGetMapReply(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<xkbGetMapReply> arg1,
    ffi.Pointer<XkbDescPtr> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    __XkbReadGetMapReply ??= _dylib.lookupFunction<_c__XkbReadGetMapReply,
        _dart__XkbReadGetMapReply>('_XkbReadGetMapReply');
    return __XkbReadGetMapReply(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XkbReadGetMapReply __XkbReadGetMapReply;

  int _XkbReadGetCompatMapReply(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<xkbGetCompatMapReply> arg1,
    ffi.Pointer<XkbDescPtr> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    __XkbReadGetCompatMapReply ??= _dylib.lookupFunction<
        _c__XkbReadGetCompatMapReply,
        _dart__XkbReadGetCompatMapReply>('_XkbReadGetCompatMapReply');
    return __XkbReadGetCompatMapReply(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XkbReadGetCompatMapReply __XkbReadGetCompatMapReply;

  int _XkbReadGetIndicatorMapReply(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<xkbGetIndicatorMapReply> arg1,
    ffi.Pointer<XkbDescPtr> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    __XkbReadGetIndicatorMapReply ??= _dylib.lookupFunction<
        _c__XkbReadGetIndicatorMapReply,
        _dart__XkbReadGetIndicatorMapReply>('_XkbReadGetIndicatorMapReply');
    return __XkbReadGetIndicatorMapReply(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XkbReadGetIndicatorMapReply __XkbReadGetIndicatorMapReply;

  int _XkbReadGetNamesReply(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<xkbGetNamesReply> arg1,
    ffi.Pointer<XkbDescPtr> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    __XkbReadGetNamesReply ??= _dylib.lookupFunction<_c__XkbReadGetNamesReply,
        _dart__XkbReadGetNamesReply>('_XkbReadGetNamesReply');
    return __XkbReadGetNamesReply(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XkbReadGetNamesReply __XkbReadGetNamesReply;

  int _XkbReadGetGeometryReply(
    ffi.Pointer<_XDisplay> arg0,
    ffi.Pointer<xkbGetGeometryReply> arg1,
    ffi.Pointer<XkbDescPtr> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    __XkbReadGetGeometryReply ??= _dylib.lookupFunction<
        _c__XkbReadGetGeometryReply,
        _dart__XkbReadGetGeometryReply>('_XkbReadGetGeometryReply');
    return __XkbReadGetGeometryReply(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XkbReadGetGeometryReply __XkbReadGetGeometryReply;

  int _XkbWriteSetCompatMap(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<xkbSetCompatMapReq> req,
    ffi.Pointer<XkbDescPtr> xkb,
  ) {
    __XkbWriteSetCompatMap ??= _dylib.lookupFunction<_c__XkbWriteSetCompatMap,
        _dart__XkbWriteSetCompatMap>('_XkbWriteSetCompatMap');
    return __XkbWriteSetCompatMap(
      dpy,
      req,
      xkb,
    );
  }

  _dart__XkbWriteSetCompatMap __XkbWriteSetCompatMap;

  ffi.Pointer<xkbSetControlsReq> _XkbGetSetControlsReq(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbInfoPtr> xkbi,
    int deviceSpec,
  ) {
    __XkbGetSetControlsReq ??= _dylib.lookupFunction<_c__XkbGetSetControlsReq,
        _dart__XkbGetSetControlsReq>('_XkbGetSetControlsReq');
    return __XkbGetSetControlsReq(
      dpy,
      xkbi,
      deviceSpec,
    );
  }

  _dart__XkbGetSetControlsReq __XkbGetSetControlsReq;

  int _XkbHandleSpecialSym(
    int keysym,
    ffi.Pointer<ffi.Int8> buffer,
    int nbytes,
    ffi.Pointer<ffi.Int32> extra_rtrn,
  ) {
    __XkbHandleSpecialSym ??= _dylib.lookupFunction<_c__XkbHandleSpecialSym,
        _dart__XkbHandleSpecialSym>('_XkbHandleSpecialSym');
    return __XkbHandleSpecialSym(
      keysym,
      buffer,
      nbytes,
      extra_rtrn,
    );
  }

  _dart__XkbHandleSpecialSym __XkbHandleSpecialSym;

  int _XkbKSToKnownSet(
    ffi.Pointer<ffi.Int8> priv,
    int keysym,
    ffi.Pointer<ffi.Int8> buffer,
    int nbytes,
    ffi.Pointer<ffi.Int32> extra_rtrn,
  ) {
    __XkbKSToKnownSet ??=
        _dylib.lookupFunction<_c__XkbKSToKnownSet, _dart__XkbKSToKnownSet>(
            '_XkbKSToKnownSet');
    return __XkbKSToKnownSet(
      priv,
      keysym,
      buffer,
      nbytes,
      extra_rtrn,
    );
  }

  _dart__XkbKSToKnownSet __XkbKSToKnownSet;

  int _XkbKnownSetToKS(
    ffi.Pointer<ffi.Int8> priv,
    ffi.Pointer<ffi.Int8> buffer,
    int nbytes,
    ffi.Pointer<ffi.Int32> status,
  ) {
    __XkbKnownSetToKS ??=
        _dylib.lookupFunction<_c__XkbKnownSetToKS, _dart__XkbKnownSetToKS>(
            '_XkbKnownSetToKS');
    return __XkbKnownSetToKS(
      priv,
      buffer,
      nbytes,
      status,
    );
  }

  _dart__XkbKnownSetToKS __XkbKnownSetToKS;

  int __XkbDefaultToUpper(
    int sym,
  ) {
    ___XkbDefaultToUpper ??= _dylib.lookupFunction<_c___XkbDefaultToUpper,
        _dart___XkbDefaultToUpper>('__XkbDefaultToUpper');
    return ___XkbDefaultToUpper(
      sym,
    );
  }

  _dart___XkbDefaultToUpper ___XkbDefaultToUpper;

  /// ====================================================================**
  int _XkbReadDeviceLedInfo(
    ffi.Pointer<XkbReadBufferPtr> buf,
    int present,
    ffi.Pointer<XkbDeviceInfoPtr> devi,
  ) {
    __XkbReadDeviceLedInfo ??= _dylib.lookupFunction<_c__XkbReadDeviceLedInfo,
        _dart__XkbReadDeviceLedInfo>('_XkbReadDeviceLedInfo');
    return __XkbReadDeviceLedInfo(
      buf,
      present,
      devi,
    );
  }

  _dart__XkbReadDeviceLedInfo __XkbReadDeviceLedInfo;

  int _XkbReadGetDeviceInfoReply(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<xkbGetDeviceInfoReply> rep,
    ffi.Pointer<XkbDeviceInfoPtr> devi,
  ) {
    __XkbReadGetDeviceInfoReply ??= _dylib.lookupFunction<
        _c__XkbReadGetDeviceInfoReply,
        _dart__XkbReadGetDeviceInfoReply>('_XkbReadGetDeviceInfoReply');
    return __XkbReadGetDeviceInfoReply(
      dpy,
      rep,
      devi,
    );
  }

  _dart__XkbReadGetDeviceInfoReply __XkbReadGetDeviceInfoReply;

  void _InitLedStuff(
    ffi.Pointer<SetLedStuff> stuff,
    int wanted,
    ffi.Pointer<XkbDeviceInfoPtr> devi,
  ) {
    __InitLedStuff ??= _dylib
        .lookupFunction<_c__InitLedStuff, _dart__InitLedStuff>('_InitLedStuff');
    return __InitLedStuff(
      stuff,
      wanted,
      devi,
    );
  }

  _dart__InitLedStuff __InitLedStuff;

  void _FreeLedStuff(
    ffi.Pointer<SetLedStuff> stuff,
  ) {
    __FreeLedStuff ??= _dylib
        .lookupFunction<_c__FreeLedStuff, _dart__FreeLedStuff>('_FreeLedStuff');
    return __FreeLedStuff(
      stuff,
    );
  }

  _dart__FreeLedStuff __FreeLedStuff;

  int _XkbSizeLedInfo(
    int changed,
    ffi.Pointer<XkbDeviceLedInfoPtr> devli,
  ) {
    __XkbSizeLedInfo ??=
        _dylib.lookupFunction<_c__XkbSizeLedInfo, _dart__XkbSizeLedInfo>(
            '_XkbSizeLedInfo');
    return __XkbSizeLedInfo(
      changed,
      devli,
    );
  }

  _dart__XkbSizeLedInfo __XkbSizeLedInfo;

  int _SizeMatches(
    ffi.Pointer<SetLedStuff> stuff,
    ffi.Pointer<XkbDeviceLedChangesPtr> changes,
    ffi.Pointer<ffi.Int32> sz_rtrn,
    ffi.Pointer<ffi.Int32> nleds_rtrn,
  ) {
    __SizeMatches ??= _dylib
        .lookupFunction<_c__SizeMatches, _dart__SizeMatches>('_SizeMatches');
    return __SizeMatches(
      stuff,
      changes,
      sz_rtrn,
      nleds_rtrn,
    );
  }

  _dart__SizeMatches __SizeMatches;

  /// ====================================================================**
  int _XkbSetDeviceInfoSize(
    ffi.Pointer<XkbDeviceInfoPtr> devi,
    ffi.Pointer<XkbDeviceChangesPtr> changes,
    ffi.Pointer<SetLedStuff> stuff,
    ffi.Pointer<ffi.Int32> sz_rtrn,
    ffi.Pointer<ffi.Int32> num_leds_rtrn,
  ) {
    __XkbSetDeviceInfoSize ??= _dylib.lookupFunction<_c__XkbSetDeviceInfoSize,
        _dart__XkbSetDeviceInfoSize>('_XkbSetDeviceInfoSize');
    return __XkbSetDeviceInfoSize(
      devi,
      changes,
      stuff,
      sz_rtrn,
      num_leds_rtrn,
    );
  }

  _dart__XkbSetDeviceInfoSize __XkbSetDeviceInfoSize;

  ffi.Pointer<ffi.Int8> _XkbWriteLedInfo(
    ffi.Pointer<ffi.Int8> wire,
    int changed,
    ffi.Pointer<XkbDeviceLedInfoPtr> devli,
  ) {
    __XkbWriteLedInfo ??=
        _dylib.lookupFunction<_c__XkbWriteLedInfo, _dart__XkbWriteLedInfo>(
            '_XkbWriteLedInfo');
    return __XkbWriteLedInfo(
      wire,
      changed,
      devli,
    );
  }

  _dart__XkbWriteLedInfo __XkbWriteLedInfo;

  int _XkbWriteSetDeviceInfo(
    ffi.Pointer<ffi.Int8> wire,
    ffi.Pointer<XkbDeviceChangesPtr> changes,
    ffi.Pointer<SetLedStuff> stuff,
    ffi.Pointer<XkbDeviceInfoPtr> devi,
  ) {
    __XkbWriteSetDeviceInfo ??= _dylib.lookupFunction<_c__XkbWriteSetDeviceInfo,
        _dart__XkbWriteSetDeviceInfo>('_XkbWriteSetDeviceInfo');
    return __XkbWriteSetDeviceInfo(
      wire,
      changes,
      stuff,
      devi,
    );
  }

  _dart__XkbWriteSetDeviceInfo __XkbWriteSetDeviceInfo;

  /// ====================================================================**
  void _XkbFreeGeomLeafElems(
    int freeAll,
    int first,
    int count,
    ffi.Pointer<ffi.Uint16> num_inout,
    ffi.Pointer<ffi.Uint16> sz_inout,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> elems,
    int elem_sz,
  ) {
    __XkbFreeGeomLeafElems ??= _dylib.lookupFunction<_c__XkbFreeGeomLeafElems,
        _dart__XkbFreeGeomLeafElems>('_XkbFreeGeomLeafElems');
    return __XkbFreeGeomLeafElems(
      freeAll,
      first,
      count,
      num_inout,
      sz_inout,
      elems,
      elem_sz,
    );
  }

  _dart__XkbFreeGeomLeafElems __XkbFreeGeomLeafElems;

  void _XkbFreeGeomNonLeafElems(
    int freeAll,
    int first,
    int count,
    ffi.Pointer<ffi.Uint16> num_inout,
    ffi.Pointer<ffi.Uint16> sz_inout,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> elems,
    int elem_sz,
    ffi.Pointer<ffi.NativeFunction<ContentsClearFunc>> freeFunc,
  ) {
    __XkbFreeGeomNonLeafElems ??= _dylib.lookupFunction<
        _c__XkbFreeGeomNonLeafElems,
        _dart__XkbFreeGeomNonLeafElems>('_XkbFreeGeomNonLeafElems');
    return __XkbFreeGeomNonLeafElems(
      freeAll,
      first,
      count,
      num_inout,
      sz_inout,
      elems,
      elem_sz,
      freeFunc,
    );
  }

  _dart__XkbFreeGeomNonLeafElems __XkbFreeGeomNonLeafElems;

  /// ====================================================================**
  void _XkbClearProperty(
    ffi.Pointer<ffi.Int8> prop_in,
  ) {
    __XkbClearProperty ??=
        _dylib.lookupFunction<_c__XkbClearProperty, _dart__XkbClearProperty>(
            '_XkbClearProperty');
    return __XkbClearProperty(
      prop_in,
    );
  }

  _dart__XkbClearProperty __XkbClearProperty;

  /// ====================================================================**
  void _XkbClearColor(
    ffi.Pointer<ffi.Int8> color_in,
  ) {
    __XkbClearColor ??=
        _dylib.lookupFunction<_c__XkbClearColor, _dart__XkbClearColor>(
            '_XkbClearColor');
    return __XkbClearColor(
      color_in,
    );
  }

  _dart__XkbClearColor __XkbClearColor;

  /// ====================================================================**
  void _XkbClearOutline(
    ffi.Pointer<ffi.Int8> outline_in,
  ) {
    __XkbClearOutline ??=
        _dylib.lookupFunction<_c__XkbClearOutline, _dart__XkbClearOutline>(
            '_XkbClearOutline');
    return __XkbClearOutline(
      outline_in,
    );
  }

  _dart__XkbClearOutline __XkbClearOutline;

  /// ====================================================================**
  void _XkbClearShape(
    ffi.Pointer<ffi.Int8> shape_in,
  ) {
    __XkbClearShape ??=
        _dylib.lookupFunction<_c__XkbClearShape, _dart__XkbClearShape>(
            '_XkbClearShape');
    return __XkbClearShape(
      shape_in,
    );
  }

  _dart__XkbClearShape __XkbClearShape;

  /// ====================================================================**
  void _XkbClearOverlayRow(
    ffi.Pointer<ffi.Int8> row_in,
  ) {
    __XkbClearOverlayRow ??= _dylib.lookupFunction<_c__XkbClearOverlayRow,
        _dart__XkbClearOverlayRow>('_XkbClearOverlayRow');
    return __XkbClearOverlayRow(
      row_in,
    );
  }

  _dart__XkbClearOverlayRow __XkbClearOverlayRow;

  /// ====================================================================**
  void _XkbClearOverlay(
    ffi.Pointer<ffi.Int8> overlay_in,
  ) {
    __XkbClearOverlay ??=
        _dylib.lookupFunction<_c__XkbClearOverlay, _dart__XkbClearOverlay>(
            '_XkbClearOverlay');
    return __XkbClearOverlay(
      overlay_in,
    );
  }

  _dart__XkbClearOverlay __XkbClearOverlay;

  /// ====================================================================**
  void _XkbClearRow(
    ffi.Pointer<ffi.Int8> row_in,
  ) {
    __XkbClearRow ??= _dylib
        .lookupFunction<_c__XkbClearRow, _dart__XkbClearRow>('_XkbClearRow');
    return __XkbClearRow(
      row_in,
    );
  }

  _dart__XkbClearRow __XkbClearRow;

  /// ====================================================================**
  void _XkbClearSection(
    ffi.Pointer<ffi.Int8> section_in,
  ) {
    __XkbClearSection ??=
        _dylib.lookupFunction<_c__XkbClearSection, _dart__XkbClearSection>(
            '_XkbClearSection');
    return __XkbClearSection(
      section_in,
    );
  }

  _dart__XkbClearSection __XkbClearSection;

  /// ====================================================================**
  void _XkbClearDoodad(
    ffi.Pointer<ffi.Int8> doodad_in,
  ) {
    __XkbClearDoodad ??=
        _dylib.lookupFunction<_c__XkbClearDoodad, _dart__XkbClearDoodad>(
            '_XkbClearDoodad');
    return __XkbClearDoodad(
      doodad_in,
    );
  }

  _dart__XkbClearDoodad __XkbClearDoodad;

  /// ====================================================================**
  int _XkbGeomAlloc(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> old,
    ffi.Pointer<ffi.Uint16> num,
    ffi.Pointer<ffi.Uint16> total,
    int num_new,
    int sz_elem,
  ) {
    __XkbGeomAlloc ??= _dylib
        .lookupFunction<_c__XkbGeomAlloc, _dart__XkbGeomAlloc>('_XkbGeomAlloc');
    return __XkbGeomAlloc(
      old,
      num,
      total,
      num_new,
      sz_elem,
    );
  }

  _dart__XkbGeomAlloc __XkbGeomAlloc;

  /// ====================================================================**
  void _XkbCheckBounds(
    ffi.Pointer<XkbBoundsPtr> bounds,
    int x,
    int y,
  ) {
    __XkbCheckBounds ??=
        _dylib.lookupFunction<_c__XkbCheckBounds, _dart__XkbCheckBounds>(
            '_XkbCheckBounds');
    return __XkbCheckBounds(
      bounds,
      x,
      y,
    );
  }

  _dart__XkbCheckBounds __XkbCheckBounds;

  /// ====================================================================**
  int _XkbReadGeomProperties(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<xkbGetGeometryReply> rep,
  ) {
    __XkbReadGeomProperties ??= _dylib.lookupFunction<_c__XkbReadGeomProperties,
        _dart__XkbReadGeomProperties>('_XkbReadGeomProperties');
    return __XkbReadGeomProperties(
      buf,
      geom,
      rep,
    );
  }

  _dart__XkbReadGeomProperties __XkbReadGeomProperties;

  int _XkbReadGeomKeyAliases(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<xkbGetGeometryReply> rep,
  ) {
    __XkbReadGeomKeyAliases ??= _dylib.lookupFunction<_c__XkbReadGeomKeyAliases,
        _dart__XkbReadGeomKeyAliases>('_XkbReadGeomKeyAliases');
    return __XkbReadGeomKeyAliases(
      buf,
      geom,
      rep,
    );
  }

  _dart__XkbReadGeomKeyAliases __XkbReadGeomKeyAliases;

  int _XkbReadGeomColors(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<xkbGetGeometryReply> rep,
  ) {
    __XkbReadGeomColors ??=
        _dylib.lookupFunction<_c__XkbReadGeomColors, _dart__XkbReadGeomColors>(
            '_XkbReadGeomColors');
    return __XkbReadGeomColors(
      buf,
      geom,
      rep,
    );
  }

  _dart__XkbReadGeomColors __XkbReadGeomColors;

  int _XkbReadGeomShapes(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<xkbGetGeometryReply> rep,
  ) {
    __XkbReadGeomShapes ??=
        _dylib.lookupFunction<_c__XkbReadGeomShapes, _dart__XkbReadGeomShapes>(
            '_XkbReadGeomShapes');
    return __XkbReadGeomShapes(
      buf,
      geom,
      rep,
    );
  }

  _dart__XkbReadGeomShapes __XkbReadGeomShapes;

  int _XkbReadGeomDoodad(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<XkbSectionPtr> section,
  ) {
    __XkbReadGeomDoodad ??=
        _dylib.lookupFunction<_c__XkbReadGeomDoodad, _dart__XkbReadGeomDoodad>(
            '_XkbReadGeomDoodad');
    return __XkbReadGeomDoodad(
      buf,
      geom,
      section,
    );
  }

  _dart__XkbReadGeomDoodad __XkbReadGeomDoodad;

  int _XkbReadGeomOverlay(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<XkbSectionPtr> section,
  ) {
    __XkbReadGeomOverlay ??= _dylib.lookupFunction<_c__XkbReadGeomOverlay,
        _dart__XkbReadGeomOverlay>('_XkbReadGeomOverlay');
    return __XkbReadGeomOverlay(
      buf,
      geom,
      section,
    );
  }

  _dart__XkbReadGeomOverlay __XkbReadGeomOverlay;

  int _XkbReadGeomSections(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<xkbGetGeometryReply> rep,
  ) {
    __XkbReadGeomSections ??= _dylib.lookupFunction<_c__XkbReadGeomSections,
        _dart__XkbReadGeomSections>('_XkbReadGeomSections');
    return __XkbReadGeomSections(
      buf,
      geom,
      rep,
    );
  }

  _dart__XkbReadGeomSections __XkbReadGeomSections;

  int _XkbReadGeomDoodads(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<xkbGetGeometryReply> rep,
  ) {
    __XkbReadGeomDoodads ??= _dylib.lookupFunction<_c__XkbReadGeomDoodads,
        _dart__XkbReadGeomDoodads>('_XkbReadGeomDoodads');
    return __XkbReadGeomDoodads(
      buf,
      geom,
      rep,
    );
  }

  _dart__XkbReadGeomDoodads __XkbReadGeomDoodads;

  int _XkbReadKeyTypes(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbGetMapReply> rep,
  ) {
    __XkbReadKeyTypes ??=
        _dylib.lookupFunction<_c__XkbReadKeyTypes, _dart__XkbReadKeyTypes>(
            '_XkbReadKeyTypes');
    return __XkbReadKeyTypes(
      buf,
      xkb,
      rep,
    );
  }

  _dart__XkbReadKeyTypes __XkbReadKeyTypes;

  int _XkbReadKeySyms(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbGetMapReply> rep,
  ) {
    __XkbReadKeySyms ??=
        _dylib.lookupFunction<_c__XkbReadKeySyms, _dart__XkbReadKeySyms>(
            '_XkbReadKeySyms');
    return __XkbReadKeySyms(
      buf,
      xkb,
      rep,
    );
  }

  _dart__XkbReadKeySyms __XkbReadKeySyms;

  int _XkbReadKeyActions(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<XkbDescPtr> info,
    ffi.Pointer<xkbGetMapReply> rep,
  ) {
    __XkbReadKeyActions ??=
        _dylib.lookupFunction<_c__XkbReadKeyActions, _dart__XkbReadKeyActions>(
            '_XkbReadKeyActions');
    return __XkbReadKeyActions(
      buf,
      info,
      rep,
    );
  }

  _dart__XkbReadKeyActions __XkbReadKeyActions;

  int _XkbReadKeyBehaviors(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbGetMapReply> rep,
  ) {
    __XkbReadKeyBehaviors ??= _dylib.lookupFunction<_c__XkbReadKeyBehaviors,
        _dart__XkbReadKeyBehaviors>('_XkbReadKeyBehaviors');
    return __XkbReadKeyBehaviors(
      buf,
      xkb,
      rep,
    );
  }

  _dart__XkbReadKeyBehaviors __XkbReadKeyBehaviors;

  int _XkbReadVirtualMods(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbGetMapReply> rep,
  ) {
    __XkbReadVirtualMods ??= _dylib.lookupFunction<_c__XkbReadVirtualMods,
        _dart__XkbReadVirtualMods>('_XkbReadVirtualMods');
    return __XkbReadVirtualMods(
      buf,
      xkb,
      rep,
    );
  }

  _dart__XkbReadVirtualMods __XkbReadVirtualMods;

  int _XkbReadExplicitComponents(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbGetMapReply> rep,
  ) {
    __XkbReadExplicitComponents ??= _dylib.lookupFunction<
        _c__XkbReadExplicitComponents,
        _dart__XkbReadExplicitComponents>('_XkbReadExplicitComponents');
    return __XkbReadExplicitComponents(
      buf,
      xkb,
      rep,
    );
  }

  _dart__XkbReadExplicitComponents __XkbReadExplicitComponents;

  int _XkbReadModifierMap(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbGetMapReply> rep,
  ) {
    __XkbReadModifierMap ??= _dylib.lookupFunction<_c__XkbReadModifierMap,
        _dart__XkbReadModifierMap>('_XkbReadModifierMap');
    return __XkbReadModifierMap(
      buf,
      xkb,
      rep,
    );
  }

  _dart__XkbReadModifierMap __XkbReadModifierMap;

  int _XkbReadVirtualModMap(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbGetMapReply> rep,
  ) {
    __XkbReadVirtualModMap ??= _dylib.lookupFunction<_c__XkbReadVirtualModMap,
        _dart__XkbReadVirtualModMap>('_XkbReadVirtualModMap');
    return __XkbReadVirtualModMap(
      buf,
      xkb,
      rep,
    );
  }

  _dart__XkbReadVirtualModMap __XkbReadVirtualModMap;

  ffi.Pointer<xkbGetMapReq> _XkbGetGetMapReq(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
  ) {
    __XkbGetGetMapReq ??=
        _dylib.lookupFunction<_c__XkbGetGetMapReq, _dart__XkbGetGetMapReq>(
            '_XkbGetGetMapReq');
    return __XkbGetGetMapReq(
      dpy,
      xkb,
    );
  }

  _dart__XkbGetGetMapReq __XkbGetGetMapReq;

  int _XkbHandleGetMapReply(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
  ) {
    __XkbHandleGetMapReply ??= _dylib.lookupFunction<_c__XkbHandleGetMapReply,
        _dart__XkbHandleGetMapReply>('_XkbHandleGetMapReply');
    return __XkbHandleGetMapReply(
      dpy,
      xkb,
    );
  }

  _dart__XkbHandleGetMapReply __XkbHandleGetMapReply;

  /// ====================================================================**
  void _FreeComponentNames(
    int num,
    ffi.Pointer<XkbComponentNamePtr> names,
  ) {
    __FreeComponentNames ??= _dylib.lookupFunction<_c__FreeComponentNames,
        _dart__FreeComponentNames>('_FreeComponentNames');
    return __FreeComponentNames(
      num,
      names,
    );
  }

  _dart__FreeComponentNames __FreeComponentNames;

  /// ====================================================================**
  ffi.Pointer<XkbComponentNamePtr> _ReadListing(
    ffi.Pointer<XkbReadBufferPtr> buf,
    int count,
    ffi.Pointer<ffi.Int32> status_rtrn,
  ) {
    __ReadListing ??= _dylib
        .lookupFunction<_c__ReadListing, _dart__ReadListing>('_ReadListing');
    return __ReadListing(
      buf,
      count,
      status_rtrn,
    );
  }

  _dart__ReadListing __ReadListing;

  int _ExtendRange(
    int old_flags,
    int flag,
    int newKC,
    ffi.Pointer<ffi.Uint8> old_min,
    ffi.Pointer<ffi.Uint8> old_num,
  ) {
    __ExtendRange ??= _dylib
        .lookupFunction<_c__ExtendRange, _dart__ExtendRange>('_ExtendRange');
    return __ExtendRange(
      old_flags,
      flag,
      newKC,
      old_min,
      old_num,
    );
  }

  _dart__ExtendRange __ExtendRange;

  ffi.Pointer<XkbSymInterpretPtr> _XkbFindMatchingInterp(
    ffi.Pointer<XkbDescPtr> xkb,
    int sym,
    int real_mods,
    int level,
  ) {
    __XkbFindMatchingInterp ??= _dylib.lookupFunction<_c__XkbFindMatchingInterp,
        _dart__XkbFindMatchingInterp>('_XkbFindMatchingInterp');
    return __XkbFindMatchingInterp(
      xkb,
      sym,
      real_mods,
      level,
    );
  }

  _dart__XkbFindMatchingInterp __XkbFindMatchingInterp;

  void _XkbAddKeyChange(
    ffi.Pointer<ffi.Uint8> pFirst,
    ffi.Pointer<ffi.Uint8> pNum,
    int newKey,
  ) {
    __XkbAddKeyChange ??=
        _dylib.lookupFunction<_c__XkbAddKeyChange, _dart__XkbAddKeyChange>(
            '_XkbAddKeyChange');
    return __XkbAddKeyChange(
      pFirst,
      pNum,
      newKey,
    );
  }

  _dart__XkbAddKeyChange __XkbAddKeyChange;

  int _XkbReadAtoms(
    ffi.Pointer<XkbReadBufferPtr> buf,
    ffi.Pointer<ffi.Uint64> atoms,
    int maxAtoms,
    int present,
  ) {
    __XkbReadAtoms ??= _dylib
        .lookupFunction<_c__XkbReadAtoms, _dart__XkbReadAtoms>('_XkbReadAtoms');
    return __XkbReadAtoms(
      buf,
      atoms,
      maxAtoms,
      present,
    );
  }

  _dart__XkbReadAtoms __XkbReadAtoms;

  /// ====================================================================**
  int _XkbCountBits(
    int nBitsMax,
    int mask,
  ) {
    __XkbCountBits ??= _dylib
        .lookupFunction<_c__XkbCountBits, _dart__XkbCountBits>('_XkbCountBits');
    return __XkbCountBits(
      nBitsMax,
      mask,
    );
  }

  _dart__XkbCountBits __XkbCountBits;

  int _XkbCountAtoms(
    ffi.Pointer<ffi.Uint64> atoms,
    int maxAtoms,
    ffi.Pointer<ffi.Int32> count,
  ) {
    __XkbCountAtoms ??=
        _dylib.lookupFunction<_c__XkbCountAtoms, _dart__XkbCountAtoms>(
            '_XkbCountAtoms');
    return __XkbCountAtoms(
      atoms,
      maxAtoms,
      count,
    );
  }

  _dart__XkbCountAtoms __XkbCountAtoms;

  void _XkbCopyAtoms(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Uint64> atoms,
    int mask,
    int maxAtoms,
  ) {
    __XkbCopyAtoms ??= _dylib
        .lookupFunction<_c__XkbCopyAtoms, _dart__XkbCopyAtoms>('_XkbCopyAtoms');
    return __XkbCopyAtoms(
      dpy,
      atoms,
      mask,
      maxAtoms,
    );
  }

  _dart__XkbCopyAtoms __XkbCopyAtoms;

  ffi.Pointer<ffi.Int8> _WriteCountedString(
    ffi.Pointer<ffi.Int8> wire,
    ffi.Pointer<ffi.Int8> str,
  ) {
    __WriteCountedString ??= _dylib.lookupFunction<_c__WriteCountedString,
        _dart__WriteCountedString>('_WriteCountedString');
    return __WriteCountedString(
      wire,
      str,
    );
  }

  _dart__WriteCountedString __WriteCountedString;

  int _SizeGeomProperties(
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __SizeGeomProperties ??= _dylib.lookupFunction<_c__SizeGeomProperties,
        _dart__SizeGeomProperties>('_SizeGeomProperties');
    return __SizeGeomProperties(
      geom,
    );
  }

  _dart__SizeGeomProperties __SizeGeomProperties;

  int _SizeGeomColors(
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __SizeGeomColors ??=
        _dylib.lookupFunction<_c__SizeGeomColors, _dart__SizeGeomColors>(
            '_SizeGeomColors');
    return __SizeGeomColors(
      geom,
    );
  }

  _dart__SizeGeomColors __SizeGeomColors;

  int _SizeGeomShapes(
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __SizeGeomShapes ??=
        _dylib.lookupFunction<_c__SizeGeomShapes, _dart__SizeGeomShapes>(
            '_SizeGeomShapes');
    return __SizeGeomShapes(
      geom,
    );
  }

  _dart__SizeGeomShapes __SizeGeomShapes;

  int _SizeGeomSections(
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __SizeGeomSections ??=
        _dylib.lookupFunction<_c__SizeGeomSections, _dart__SizeGeomSections>(
            '_SizeGeomSections');
    return __SizeGeomSections(
      geom,
    );
  }

  _dart__SizeGeomSections __SizeGeomSections;

  int _SizeGeomKeyAliases(
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __SizeGeomKeyAliases ??= _dylib.lookupFunction<_c__SizeGeomKeyAliases,
        _dart__SizeGeomKeyAliases>('_SizeGeomKeyAliases');
    return __SizeGeomKeyAliases(
      geom,
    );
  }

  _dart__SizeGeomKeyAliases __SizeGeomKeyAliases;

  /// ====================================================================**
  ffi.Pointer<ffi.Int8> _WriteGeomProperties(
    ffi.Pointer<ffi.Int8> wire,
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __WriteGeomProperties ??= _dylib.lookupFunction<_c__WriteGeomProperties,
        _dart__WriteGeomProperties>('_WriteGeomProperties');
    return __WriteGeomProperties(
      wire,
      geom,
    );
  }

  _dart__WriteGeomProperties __WriteGeomProperties;

  ffi.Pointer<ffi.Int8> _WriteGeomColors(
    ffi.Pointer<ffi.Int8> wire,
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __WriteGeomColors ??=
        _dylib.lookupFunction<_c__WriteGeomColors, _dart__WriteGeomColors>(
            '_WriteGeomColors');
    return __WriteGeomColors(
      wire,
      geom,
    );
  }

  _dart__WriteGeomColors __WriteGeomColors;

  ffi.Pointer<ffi.Int8> _WriteGeomShapes(
    ffi.Pointer<ffi.Int8> wire,
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __WriteGeomShapes ??=
        _dylib.lookupFunction<_c__WriteGeomShapes, _dart__WriteGeomShapes>(
            '_WriteGeomShapes');
    return __WriteGeomShapes(
      wire,
      geom,
    );
  }

  _dart__WriteGeomShapes __WriteGeomShapes;

  ffi.Pointer<ffi.Int8> _WriteGeomOverlay(
    ffi.Pointer<ffi.Int8> wire,
    ffi.Pointer<XkbOverlayPtr> ol,
  ) {
    __WriteGeomOverlay ??=
        _dylib.lookupFunction<_c__WriteGeomOverlay, _dart__WriteGeomOverlay>(
            '_WriteGeomOverlay');
    return __WriteGeomOverlay(
      wire,
      ol,
    );
  }

  _dart__WriteGeomOverlay __WriteGeomOverlay;

  ffi.Pointer<ffi.Int8> _WriteGeomSections(
    ffi.Pointer<ffi.Int8> wire,
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __WriteGeomSections ??=
        _dylib.lookupFunction<_c__WriteGeomSections, _dart__WriteGeomSections>(
            '_WriteGeomSections');
    return __WriteGeomSections(
      wire,
      geom,
    );
  }

  _dart__WriteGeomSections __WriteGeomSections;

  ffi.Pointer<ffi.Int8> _WriteGeomKeyAliases(
    ffi.Pointer<ffi.Int8> wire,
    ffi.Pointer<_XkbGeometry> geom,
  ) {
    __WriteGeomKeyAliases ??= _dylib.lookupFunction<_c__WriteGeomKeyAliases,
        _dart__WriteGeomKeyAliases>('_WriteGeomKeyAliases');
    return __WriteGeomKeyAliases(
      wire,
      geom,
    );
  }

  _dart__WriteGeomKeyAliases __WriteGeomKeyAliases;

  /// ====================================================================**
  int _SendSetGeometry(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<_XkbGeometry> geom,
    ffi.Pointer<xkbSetGeometryReq> req,
  ) {
    __SendSetGeometry ??=
        _dylib.lookupFunction<_c__SendSetGeometry, _dart__SendSetGeometry>(
            '_SendSetGeometry');
    return __SendSetGeometry(
      dpy,
      geom,
      req,
    );
  }

  _dart__SendSetGeometry __SendSetGeometry;

  int _XkbSizeKeyTypes(
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbSizeKeyTypes ??=
        _dylib.lookupFunction<_c__XkbSizeKeyTypes, _dart__XkbSizeKeyTypes>(
            '_XkbSizeKeyTypes');
    return __XkbSizeKeyTypes(
      xkb,
      req,
    );
  }

  _dart__XkbSizeKeyTypes __XkbSizeKeyTypes;

  void _XkbWriteKeyTypes(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbWriteKeyTypes ??=
        _dylib.lookupFunction<_c__XkbWriteKeyTypes, _dart__XkbWriteKeyTypes>(
            '_XkbWriteKeyTypes');
    return __XkbWriteKeyTypes(
      dpy,
      xkb,
      req,
    );
  }

  _dart__XkbWriteKeyTypes __XkbWriteKeyTypes;

  int _XkbSizeKeySyms(
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbSizeKeySyms ??=
        _dylib.lookupFunction<_c__XkbSizeKeySyms, _dart__XkbSizeKeySyms>(
            '_XkbSizeKeySyms');
    return __XkbSizeKeySyms(
      xkb,
      req,
    );
  }

  _dart__XkbSizeKeySyms __XkbSizeKeySyms;

  void _XkbWriteKeySyms(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbWriteKeySyms ??=
        _dylib.lookupFunction<_c__XkbWriteKeySyms, _dart__XkbWriteKeySyms>(
            '_XkbWriteKeySyms');
    return __XkbWriteKeySyms(
      dpy,
      xkb,
      req,
    );
  }

  _dart__XkbWriteKeySyms __XkbWriteKeySyms;

  int _XkbSizeKeyActions(
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbSizeKeyActions ??=
        _dylib.lookupFunction<_c__XkbSizeKeyActions, _dart__XkbSizeKeyActions>(
            '_XkbSizeKeyActions');
    return __XkbSizeKeyActions(
      xkb,
      req,
    );
  }

  _dart__XkbSizeKeyActions __XkbSizeKeyActions;

  void _XkbWriteKeyActions(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbWriteKeyActions ??= _dylib.lookupFunction<_c__XkbWriteKeyActions,
        _dart__XkbWriteKeyActions>('_XkbWriteKeyActions');
    return __XkbWriteKeyActions(
      dpy,
      xkb,
      req,
    );
  }

  _dart__XkbWriteKeyActions __XkbWriteKeyActions;

  int _XkbSizeKeyBehaviors(
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbSizeKeyBehaviors ??= _dylib.lookupFunction<_c__XkbSizeKeyBehaviors,
        _dart__XkbSizeKeyBehaviors>('_XkbSizeKeyBehaviors');
    return __XkbSizeKeyBehaviors(
      xkb,
      req,
    );
  }

  _dart__XkbSizeKeyBehaviors __XkbSizeKeyBehaviors;

  void _XkbWriteKeyBehaviors(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbWriteKeyBehaviors ??= _dylib.lookupFunction<_c__XkbWriteKeyBehaviors,
        _dart__XkbWriteKeyBehaviors>('_XkbWriteKeyBehaviors');
    return __XkbWriteKeyBehaviors(
      dpy,
      xkb,
      req,
    );
  }

  _dart__XkbWriteKeyBehaviors __XkbWriteKeyBehaviors;

  int _XkbSizeVirtualMods(
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbSizeVirtualMods ??= _dylib.lookupFunction<_c__XkbSizeVirtualMods,
        _dart__XkbSizeVirtualMods>('_XkbSizeVirtualMods');
    return __XkbSizeVirtualMods(
      req,
    );
  }

  _dart__XkbSizeVirtualMods __XkbSizeVirtualMods;

  void _XkbWriteVirtualMods(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
    int size,
  ) {
    __XkbWriteVirtualMods ??= _dylib.lookupFunction<_c__XkbWriteVirtualMods,
        _dart__XkbWriteVirtualMods>('_XkbWriteVirtualMods');
    return __XkbWriteVirtualMods(
      dpy,
      xkb,
      req,
      size,
    );
  }

  _dart__XkbWriteVirtualMods __XkbWriteVirtualMods;

  int _XkbSizeKeyExplicit(
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbSizeKeyExplicit ??= _dylib.lookupFunction<_c__XkbSizeKeyExplicit,
        _dart__XkbSizeKeyExplicit>('_XkbSizeKeyExplicit');
    return __XkbSizeKeyExplicit(
      xkb,
      req,
    );
  }

  _dart__XkbSizeKeyExplicit __XkbSizeKeyExplicit;

  void _XkbWriteKeyExplicit(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbWriteKeyExplicit ??= _dylib.lookupFunction<_c__XkbWriteKeyExplicit,
        _dart__XkbWriteKeyExplicit>('_XkbWriteKeyExplicit');
    return __XkbWriteKeyExplicit(
      dpy,
      xkb,
      req,
    );
  }

  _dart__XkbWriteKeyExplicit __XkbWriteKeyExplicit;

  int _XkbSizeModifierMap(
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbSizeModifierMap ??= _dylib.lookupFunction<_c__XkbSizeModifierMap,
        _dart__XkbSizeModifierMap>('_XkbSizeModifierMap');
    return __XkbSizeModifierMap(
      xkb,
      req,
    );
  }

  _dart__XkbSizeModifierMap __XkbSizeModifierMap;

  void _XkbWriteModifierMap(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbWriteModifierMap ??= _dylib.lookupFunction<_c__XkbWriteModifierMap,
        _dart__XkbWriteModifierMap>('_XkbWriteModifierMap');
    return __XkbWriteModifierMap(
      dpy,
      xkb,
      req,
    );
  }

  _dart__XkbWriteModifierMap __XkbWriteModifierMap;

  int _XkbSizeVirtualModMap(
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbSizeVirtualModMap ??= _dylib.lookupFunction<_c__XkbSizeVirtualModMap,
        _dart__XkbSizeVirtualModMap>('_XkbSizeVirtualModMap');
    return __XkbSizeVirtualModMap(
      xkb,
      req,
    );
  }

  _dart__XkbSizeVirtualModMap __XkbSizeVirtualModMap;

  void _XkbWriteVirtualModMap(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    __XkbWriteVirtualModMap ??= _dylib.lookupFunction<_c__XkbWriteVirtualModMap,
        _dart__XkbWriteVirtualModMap>('_XkbWriteVirtualModMap');
    return __XkbWriteVirtualModMap(
      dpy,
      xkb,
      req,
    );
  }

  _dart__XkbWriteVirtualModMap __XkbWriteVirtualModMap;

  void SendSetMap(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XkbDescPtr> xkb,
    ffi.Pointer<xkbSetMapReq> req,
  ) {
    _SendSetMap ??=
        _dylib.lookupFunction<_c_SendSetMap, _dart_SendSetMap>('SendSetMap');
    return _SendSetMap(
      dpy,
      xkb,
      req,
    );
  }

  _dart_SendSetMap _SendSetMap;

  void _XkbFreeInfo(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XkbFreeInfo ??= _dylib
        .lookupFunction<_c__XkbFreeInfo, _dart__XkbFreeInfo>('_XkbFreeInfo');
    return __XkbFreeInfo(
      dpy,
    );
  }

  _dart__XkbFreeInfo __XkbFreeInfo;

  ffi.Pointer<XLCdRec> _XOpenLC(
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XOpenLC ??=
        _dylib.lookupFunction<_c__XOpenLC, _dart__XOpenLC>('_XOpenLC');
    return __XOpenLC(
      name,
    );
  }

  _dart__XOpenLC __XOpenLC;

  void _XCloseLC(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XCloseLC ??=
        _dylib.lookupFunction<_c__XCloseLC, _dart__XCloseLC>('_XCloseLC');
    return __XCloseLC(
      lcd,
    );
  }

  _dart__XCloseLC __XCloseLC;

  ffi.Pointer<XLCdRec> _XlcCurrentLC() {
    __XlcCurrentLC ??= _dylib
        .lookupFunction<_c__XlcCurrentLC, _dart__XlcCurrentLC>('_XlcCurrentLC');
    return __XlcCurrentLC();
  }

  _dart__XlcCurrentLC __XlcCurrentLC;

  int _XlcValidModSyntax(
    ffi.Pointer<ffi.Int8> mods,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> valid,
  ) {
    __XlcValidModSyntax ??=
        _dylib.lookupFunction<_c__XlcValidModSyntax, _dart__XlcValidModSyntax>(
            '_XlcValidModSyntax');
    return __XlcValidModSyntax(
      mods,
      valid,
    );
  }

  _dart__XlcValidModSyntax __XlcValidModSyntax;

  ffi.Pointer<ffi.Int8> _XlcDefaultMapModifiers(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Int8> user_mods,
    ffi.Pointer<ffi.Int8> prog_mods,
  ) {
    __XlcDefaultMapModifiers ??= _dylib.lookupFunction<
        _c__XlcDefaultMapModifiers,
        _dart__XlcDefaultMapModifiers>('_XlcDefaultMapModifiers');
    return __XlcDefaultMapModifiers(
      lcd,
      user_mods,
      prog_mods,
    );
  }

  _dart__XlcDefaultMapModifiers __XlcDefaultMapModifiers;

  void _XIMCompileResourceList(
    ffi.Pointer<XIMResourceList> arg0,
    int arg1,
  ) {
    __XIMCompileResourceList ??= _dylib.lookupFunction<
        _c__XIMCompileResourceList,
        _dart__XIMCompileResourceList>('_XIMCompileResourceList');
    return __XIMCompileResourceList(
      arg0,
      arg1,
    );
  }

  _dart__XIMCompileResourceList __XIMCompileResourceList;

  void _XCopyToArg(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    int arg2,
  ) {
    __XCopyToArg ??=
        _dylib.lookupFunction<_c__XCopyToArg, _dart__XCopyToArg>('_XCopyToArg');
    return __XCopyToArg(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XCopyToArg __XCopyToArg;

  ffi.Pointer<XrmMethodsRec> _XrmInitParseInfo(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> statep,
  ) {
    __XrmInitParseInfo ??=
        _dylib.lookupFunction<_c__XrmInitParseInfo, _dart__XrmInitParseInfo>(
            '_XrmInitParseInfo');
    return __XrmInitParseInfo(
      statep,
    );
  }

  _dart__XrmInitParseInfo __XrmInitParseInfo;

  void _XlcCountVaList(
    ffi.Pointer<__va_list_tag> var_1,
    ffi.Pointer<ffi.Int32> count_return,
  ) {
    __XlcCountVaList ??=
        _dylib.lookupFunction<_c__XlcCountVaList, _dart__XlcCountVaList>(
            '_XlcCountVaList');
    return __XlcCountVaList(
      var_1,
      count_return,
    );
  }

  _dart__XlcCountVaList __XlcCountVaList;

  void _XlcVaToArgList(
    ffi.Pointer<__va_list_tag> var_1,
    int count,
    ffi.Pointer<ffi.Pointer<XlcArgList>> args_return,
  ) {
    __XlcVaToArgList ??=
        _dylib.lookupFunction<_c__XlcVaToArgList, _dart__XlcVaToArgList>(
            '_XlcVaToArgList');
    return __XlcVaToArgList(
      var_1,
      count,
      args_return,
    );
  }

  _dart__XlcVaToArgList __XlcVaToArgList;

  void _XlcCopyFromArg(
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Int8> dst,
    int size,
  ) {
    __XlcCopyFromArg ??=
        _dylib.lookupFunction<_c__XlcCopyFromArg, _dart__XlcCopyFromArg>(
            '_XlcCopyFromArg');
    return __XlcCopyFromArg(
      src,
      dst,
      size,
    );
  }

  _dart__XlcCopyFromArg __XlcCopyFromArg;

  void _XlcCopyToArg(
    ffi.Pointer<ffi.Int8> src,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> dst,
    int size,
  ) {
    __XlcCopyToArg ??= _dylib
        .lookupFunction<_c__XlcCopyToArg, _dart__XlcCopyToArg>('_XlcCopyToArg');
    return __XlcCopyToArg(
      src,
      dst,
      size,
    );
  }

  _dart__XlcCopyToArg __XlcCopyToArg;

  void _XlcCompileResourceList(
    ffi.Pointer<XlcResourceList> resources,
    int num_resources,
  ) {
    __XlcCompileResourceList ??= _dylib.lookupFunction<
        _c__XlcCompileResourceList,
        _dart__XlcCompileResourceList>('_XlcCompileResourceList');
    return __XlcCompileResourceList(
      resources,
      num_resources,
    );
  }

  _dart__XlcCompileResourceList __XlcCompileResourceList;

  ffi.Pointer<ffi.Int8> _XlcGetValues(
    ffi.Pointer<ffi.Int8> base,
    ffi.Pointer<XlcResourceList> resources,
    int num_resources,
    ffi.Pointer<XlcArgList> args,
    int num_args,
    int mask,
  ) {
    __XlcGetValues ??= _dylib
        .lookupFunction<_c__XlcGetValues, _dart__XlcGetValues>('_XlcGetValues');
    return __XlcGetValues(
      base,
      resources,
      num_resources,
      args,
      num_args,
      mask,
    );
  }

  _dart__XlcGetValues __XlcGetValues;

  ffi.Pointer<ffi.Int8> _XlcSetValues(
    ffi.Pointer<ffi.Int8> base,
    ffi.Pointer<XlcResourceList> resources,
    int num_resources,
    ffi.Pointer<XlcArgList> args,
    int num_args,
    int mask,
  ) {
    __XlcSetValues ??= _dylib
        .lookupFunction<_c__XlcSetValues, _dart__XlcSetValues>('_XlcSetValues');
    return __XlcSetValues(
      base,
      resources,
      num_resources,
      args,
      num_args,
      mask,
    );
  }

  _dart__XlcSetValues __XlcSetValues;

  void _XlcInitLoader() {
    __XlcInitLoader ??=
        _dylib.lookupFunction<_c__XlcInitLoader, _dart__XlcInitLoader>(
            '_XlcInitLoader');
    return __XlcInitLoader();
  }

  _dart__XlcInitLoader __XlcInitLoader;

  void _XlcDeInitLoader() {
    __XlcDeInitLoader ??=
        _dylib.lookupFunction<_c__XlcDeInitLoader, _dart__XlcDeInitLoader>(
            '_XlcDeInitLoader');
    return __XlcDeInitLoader();
  }

  _dart__XlcDeInitLoader __XlcDeInitLoader;

  int _XlcAddLoader(
    ffi.Pointer<ffi.NativeFunction<XLCdLoadProc>> proc,
    int position,
  ) {
    __XlcAddLoader ??= _dylib
        .lookupFunction<_c__XlcAddLoader, _dart__XlcAddLoader>('_XlcAddLoader');
    return __XlcAddLoader(
      proc,
      position,
    );
  }

  _dart__XlcAddLoader __XlcAddLoader;

  void _XlcRemoveLoader(
    ffi.Pointer<ffi.NativeFunction<XLCdLoadProc>> proc,
  ) {
    __XlcRemoveLoader ??=
        _dylib.lookupFunction<_c__XlcRemoveLoader, _dart__XlcRemoveLoader>(
            '_XlcRemoveLoader');
    return __XlcRemoveLoader(
      proc,
    );
  }

  _dart__XlcRemoveLoader __XlcRemoveLoader;

  void _XlcAddUtf8Converters(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XlcAddUtf8Converters ??= _dylib.lookupFunction<_c__XlcAddUtf8Converters,
        _dart__XlcAddUtf8Converters>('_XlcAddUtf8Converters');
    return __XlcAddUtf8Converters(
      lcd,
    );
  }

  _dart__XlcAddUtf8Converters __XlcAddUtf8Converters;

  void _XlcAddUtf8LocaleConverters(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XlcAddUtf8LocaleConverters ??= _dylib.lookupFunction<
        _c__XlcAddUtf8LocaleConverters,
        _dart__XlcAddUtf8LocaleConverters>('_XlcAddUtf8LocaleConverters');
    return __XlcAddUtf8LocaleConverters(
      lcd,
    );
  }

  _dart__XlcAddUtf8LocaleConverters __XlcAddUtf8LocaleConverters;

  void _XlcAddGB18030LocaleConverters(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XlcAddGB18030LocaleConverters ??= _dylib.lookupFunction<
        _c__XlcAddGB18030LocaleConverters,
        _dart__XlcAddGB18030LocaleConverters>('_XlcAddGB18030LocaleConverters');
    return __XlcAddGB18030LocaleConverters(
      lcd,
    );
  }

  _dart__XlcAddGB18030LocaleConverters __XlcAddGB18030LocaleConverters;

  ffi.Pointer<XLCdRec> _XlcDynamicLoad(
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XlcDynamicLoad ??=
        _dylib.lookupFunction<_c__XlcDynamicLoad, _dart__XlcDynamicLoad>(
            '_XlcDynamicLoad');
    return __XlcDynamicLoad(
      name,
    );
  }

  _dart__XlcDynamicLoad __XlcDynamicLoad;

  ffi.Pointer<XLCdRec> _XlcDynamicLoader(
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XlcDynamicLoader ??=
        _dylib.lookupFunction<_c__XlcDynamicLoader, _dart__XlcDynamicLoader>(
            '_XlcDynamicLoader');
    return __XlcDynamicLoader(
      name,
    );
  }

  _dart__XlcDynamicLoader __XlcDynamicLoader;

  int _XInitDefaultIM(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XInitDefaultIM ??=
        _dylib.lookupFunction<_c__XInitDefaultIM, _dart__XInitDefaultIM>(
            '_XInitDefaultIM');
    return __XInitDefaultIM(
      lcd,
    );
  }

  _dart__XInitDefaultIM __XInitDefaultIM;

  int _XInitDefaultOM(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XInitDefaultOM ??=
        _dylib.lookupFunction<_c__XInitDefaultOM, _dart__XInitDefaultOM>(
            '_XInitDefaultOM');
    return __XInitDefaultOM(
      lcd,
    );
  }

  _dart__XInitDefaultOM __XInitDefaultOM;

  int _XInitDynamicIM(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XInitDynamicIM ??=
        _dylib.lookupFunction<_c__XInitDynamicIM, _dart__XInitDynamicIM>(
            '_XInitDynamicIM');
    return __XInitDynamicIM(
      lcd,
    );
  }

  _dart__XInitDynamicIM __XInitDynamicIM;

  int _XInitDynamicOM(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XInitDynamicOM ??=
        _dylib.lookupFunction<_c__XInitDynamicOM, _dart__XInitDynamicOM>(
            '_XInitDynamicOM');
    return __XInitDynamicOM(
      lcd,
    );
  }

  _dart__XInitDynamicOM __XInitDynamicOM;

  int _XIMNestedListToNestedList(
    ffi.Pointer<XIMArg> nlist,
    ffi.Pointer<XIMArg> list,
  ) {
    __XIMNestedListToNestedList ??= _dylib.lookupFunction<
        _c__XIMNestedListToNestedList,
        _dart__XIMNestedListToNestedList>('_XIMNestedListToNestedList');
    return __XIMNestedListToNestedList(
      nlist,
      list,
    );
  }

  _dart__XIMNestedListToNestedList __XIMNestedListToNestedList;

  void _XIMCountNestedList(
    ffi.Pointer<XIMArg> args,
    ffi.Pointer<ffi.Int32> total_count,
  ) {
    __XIMCountNestedList ??= _dylib.lookupFunction<_c__XIMCountNestedList,
        _dart__XIMCountNestedList>('_XIMCountNestedList');
    return __XIMCountNestedList(
      args,
      total_count,
    );
  }

  _dart__XIMCountNestedList __XIMCountNestedList;

  void _XIMCountVaList(
    ffi.Pointer<__va_list_tag> var_1,
    ffi.Pointer<ffi.Int32> total_count,
  ) {
    __XIMCountVaList ??=
        _dylib.lookupFunction<_c__XIMCountVaList, _dart__XIMCountVaList>(
            '_XIMCountVaList');
    return __XIMCountVaList(
      var_1,
      total_count,
    );
  }

  _dart__XIMCountVaList __XIMCountVaList;

  void _XIMVaToNestedList(
    ffi.Pointer<__va_list_tag> var_1,
    int max_count,
    ffi.Pointer<ffi.Pointer<XIMArg>> args_return,
  ) {
    __XIMVaToNestedList ??=
        _dylib.lookupFunction<_c__XIMVaToNestedList, _dart__XIMVaToNestedList>(
            '_XIMVaToNestedList');
    return __XIMVaToNestedList(
      var_1,
      max_count,
      args_return,
    );
  }

  _dart__XIMVaToNestedList __XIMVaToNestedList;

  ffi.Pointer<XlcCharSet> _XlcGetCharSet(
    ffi.Pointer<ffi.Int8> name,
  ) {
    __XlcGetCharSet ??=
        _dylib.lookupFunction<_c__XlcGetCharSet, _dart__XlcGetCharSet>(
            '_XlcGetCharSet');
    return __XlcGetCharSet(
      name,
    );
  }

  _dart__XlcGetCharSet __XlcGetCharSet;

  ffi.Pointer<XlcCharSet> _XlcGetCharSetWithSide(
    ffi.Pointer<ffi.Int8> encoding_name,
    int side,
  ) {
    __XlcGetCharSetWithSide ??= _dylib.lookupFunction<_c__XlcGetCharSetWithSide,
        _dart__XlcGetCharSetWithSide>('_XlcGetCharSetWithSide');
    return __XlcGetCharSetWithSide(
      encoding_name,
      side,
    );
  }

  _dart__XlcGetCharSetWithSide __XlcGetCharSetWithSide;

  int _XlcAddCharSet(
    ffi.Pointer<XlcCharSet> charset,
  ) {
    __XlcAddCharSet ??=
        _dylib.lookupFunction<_c__XlcAddCharSet, _dart__XlcAddCharSet>(
            '_XlcAddCharSet');
    return __XlcAddCharSet(
      charset,
    );
  }

  _dart__XlcAddCharSet __XlcAddCharSet;

  ffi.Pointer<ffi.Int8> _XlcGetCSValues(
    ffi.Pointer<XlcCharSet> charset,
  ) {
    __XlcGetCSValues ??=
        _dylib.lookupFunction<_c__XlcGetCSValues, _dart__XlcGetCSValues>(
            '_XlcGetCSValues');
    return __XlcGetCSValues(
      charset,
    );
  }

  _dart__XlcGetCSValues __XlcGetCSValues;

  ffi.Pointer<ffi.Int8> _XGetLCValues(
    ffi.Pointer<XLCdRec> arg0,
  ) {
    __XGetLCValues ??= _dylib
        .lookupFunction<_c__XGetLCValues, _dart__XGetLCValues>('_XGetLCValues');
    return __XGetLCValues(
      arg0,
    );
  }

  _dart__XGetLCValues __XGetLCValues;

  ffi.Pointer<XlcConvRec> _XlcOpenConverter(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    __XlcOpenConverter ??=
        _dylib.lookupFunction<_c__XlcOpenConverter, _dart__XlcOpenConverter>(
            '_XlcOpenConverter');
    return __XlcOpenConverter(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart__XlcOpenConverter __XlcOpenConverter;

  void _XlcCloseConverter(
    ffi.Pointer<XlcConvRec> conv,
  ) {
    __XlcCloseConverter ??=
        _dylib.lookupFunction<_c__XlcCloseConverter, _dart__XlcCloseConverter>(
            '_XlcCloseConverter');
    return __XlcCloseConverter(
      conv,
    );
  }

  _dart__XlcCloseConverter __XlcCloseConverter;

  int _XlcConvert(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    __XlcConvert ??=
        _dylib.lookupFunction<_c__XlcConvert, _dart__XlcConvert>('_XlcConvert');
    return __XlcConvert(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart__XlcConvert __XlcConvert;

  void _XlcResetConverter(
    ffi.Pointer<XlcConvRec> conv,
  ) {
    __XlcResetConverter ??=
        _dylib.lookupFunction<_c__XlcResetConverter, _dart__XlcResetConverter>(
            '_XlcResetConverter');
    return __XlcResetConverter(
      conv,
    );
  }

  _dart__XlcResetConverter __XlcResetConverter;

  int _XlcSetConverter(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
    ffi.Pointer<ffi.NativeFunction<XlcOpenConverterProc>> open_converter,
  ) {
    __XlcSetConverter ??=
        _dylib.lookupFunction<_c__XlcSetConverter, _dart__XlcSetConverter>(
            '_XlcSetConverter');
    return __XlcSetConverter(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
      open_converter,
    );
  }

  _dart__XlcSetConverter __XlcSetConverter;

  void _XlcGetResource(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Int8> category,
    ffi.Pointer<ffi.Int8> _class,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> value,
    ffi.Pointer<ffi.Int32> count,
  ) {
    __XlcGetResource ??=
        _dylib.lookupFunction<_c__XlcGetResource, _dart__XlcGetResource>(
            '_XlcGetResource');
    return __XlcGetResource(
      lcd,
      category,
      _class,
      value,
      count,
    );
  }

  _dart__XlcGetResource __XlcGetResource;

  ffi.Pointer<ffi.Int8> _XlcFileName(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Int8> category,
  ) {
    __XlcFileName ??= _dylib
        .lookupFunction<_c__XlcFileName, _dart__XlcFileName>('_XlcFileName');
    return __XlcFileName(
      lcd,
      category,
    );
  }

  _dart__XlcFileName __XlcFileName;

  int _Xwcslen(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    __Xwcslen ??=
        _dylib.lookupFunction<_c__Xwcslen, _dart__Xwcslen>('_Xwcslen');
    return __Xwcslen(
      arg0,
    );
  }

  _dart__Xwcslen __Xwcslen;

  ffi.Pointer<ffi.Int32> _Xwcscpy(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    __Xwcscpy ??=
        _dylib.lookupFunction<_c__Xwcscpy, _dart__Xwcscpy>('_Xwcscpy');
    return __Xwcscpy(
      arg0,
      arg1,
    );
  }

  _dart__Xwcscpy __Xwcscpy;

  ffi.Pointer<ffi.Int32> _Xwcsncpy(
    ffi.Pointer<ffi.Int32> wstr1,
    ffi.Pointer<ffi.Int32> wstr2,
    int len,
  ) {
    __Xwcsncpy ??=
        _dylib.lookupFunction<_c__Xwcsncpy, _dart__Xwcsncpy>('_Xwcsncpy');
    return __Xwcsncpy(
      wstr1,
      wstr2,
      len,
    );
  }

  _dart__Xwcsncpy __Xwcsncpy;

  int _Xwcscmp(
    ffi.Pointer<ffi.Int32> wstr1,
    ffi.Pointer<ffi.Int32> wstr2,
  ) {
    __Xwcscmp ??=
        _dylib.lookupFunction<_c__Xwcscmp, _dart__Xwcscmp>('_Xwcscmp');
    return __Xwcscmp(
      wstr1,
      wstr2,
    );
  }

  _dart__Xwcscmp __Xwcscmp;

  int _Xwcsncmp(
    ffi.Pointer<ffi.Int32> wstr1,
    ffi.Pointer<ffi.Int32> wstr2,
    int len,
  ) {
    __Xwcsncmp ??=
        _dylib.lookupFunction<_c__Xwcsncmp, _dart__Xwcsncmp>('_Xwcsncmp');
    return __Xwcsncmp(
      wstr1,
      wstr2,
      len,
    );
  }

  _dart__Xwcsncmp __Xwcsncmp;

  int _XlcCompareISOLatin1(
    ffi.Pointer<ffi.Int8> str1,
    ffi.Pointer<ffi.Int8> str2,
  ) {
    __XlcCompareISOLatin1 ??= _dylib.lookupFunction<_c__XlcCompareISOLatin1,
        _dart__XlcCompareISOLatin1>('_XlcCompareISOLatin1');
    return __XlcCompareISOLatin1(
      str1,
      str2,
    );
  }

  _dart__XlcCompareISOLatin1 __XlcCompareISOLatin1;

  int _XlcNCompareISOLatin1(
    ffi.Pointer<ffi.Int8> str1,
    ffi.Pointer<ffi.Int8> str2,
    int len,
  ) {
    __XlcNCompareISOLatin1 ??= _dylib.lookupFunction<_c__XlcNCompareISOLatin1,
        _dart__XlcNCompareISOLatin1>('_XlcNCompareISOLatin1');
    return __XlcNCompareISOLatin1(
      str1,
      str2,
      len,
    );
  }

  _dart__XlcNCompareISOLatin1 __XlcNCompareISOLatin1;

  ffi.Pointer<_XOM> _XDefaultOpenOM(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<_XrmHashBucketRec> rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
  ) {
    __XDefaultOpenOM ??=
        _dylib.lookupFunction<_c__XDefaultOpenOM, _dart__XDefaultOpenOM>(
            '_XDefaultOpenOM');
    return __XDefaultOpenOM(
      lcd,
      dpy,
      rdb,
      res_name,
      res_class,
    );
  }

  _dart__XDefaultOpenOM __XDefaultOpenOM;

  int KeySymToUcs4(
    int keysym,
  ) {
    _KeySymToUcs4 ??= _dylib
        .lookupFunction<_c_KeySymToUcs4, _dart_KeySymToUcs4>('KeySymToUcs4');
    return _KeySymToUcs4(
      keysym,
    );
  }

  _dart_KeySymToUcs4 _KeySymToUcs4;

  void _XimSendSetFocus(
    ffi.Pointer<XimRec> im,
    ffi.Pointer<XicRec> ic,
  ) {
    __XimSendSetFocus ??=
        _dylib.lookupFunction<_c__XimSendSetFocus, _dart__XimSendSetFocus>(
            '_XimSendSetFocus');
    return __XimSendSetFocus(
      im,
      ic,
    );
  }

  _dart__XimSendSetFocus __XimSendSetFocus;

  void _XimFreeRemakeArg(
    ffi.Pointer<XIMArg> arg,
  ) {
    __XimFreeRemakeArg ??=
        _dylib.lookupFunction<_c__XimFreeRemakeArg, _dart__XimFreeRemakeArg>(
            '_XimFreeRemakeArg');
    return __XimFreeRemakeArg(
      arg,
    );
  }

  _dart__XimFreeRemakeArg __XimFreeRemakeArg;

  int _XimReconnectModeCreateIC(
    ffi.Pointer<XicRec> ic,
  ) {
    __XimReconnectModeCreateIC ??= _dylib.lookupFunction<
        _c__XimReconnectModeCreateIC,
        _dart__XimReconnectModeCreateIC>('_XimReconnectModeCreateIC');
    return __XimReconnectModeCreateIC(
      ic,
    );
  }

  _dart__XimReconnectModeCreateIC __XimReconnectModeCreateIC;

  ffi.Pointer<XLCdRec> _XlcCreateLC(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<XLCdMethods> methods,
  ) {
    __XlcCreateLC ??= _dylib
        .lookupFunction<_c__XlcCreateLC, _dart__XlcCreateLC>('_XlcCreateLC');
    return __XlcCreateLC(
      name,
      methods,
    );
  }

  _dart__XlcCreateLC __XlcCreateLC;

  void _XlcDestroyLC(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XlcDestroyLC ??= _dylib
        .lookupFunction<_c__XlcDestroyLC, _dart__XlcDestroyLC>('_XlcDestroyLC');
    return __XlcDestroyLC(
      lcd,
    );
  }

  _dart__XlcDestroyLC __XlcDestroyLC;

  int _XlcParseCharSet(
    ffi.Pointer<XlcCharSet> charset,
  ) {
    __XlcParseCharSet ??=
        _dylib.lookupFunction<_c__XlcParseCharSet, _dart__XlcParseCharSet>(
            '_XlcParseCharSet');
    return __XlcParseCharSet(
      charset,
    );
  }

  _dart__XlcParseCharSet __XlcParseCharSet;

  ffi.Pointer<XlcCharSet> _XlcCreateDefaultCharSet(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> ct_sequence,
  ) {
    __XlcCreateDefaultCharSet ??= _dylib.lookupFunction<
        _c__XlcCreateDefaultCharSet,
        _dart__XlcCreateDefaultCharSet>('_XlcCreateDefaultCharSet');
    return __XlcCreateDefaultCharSet(
      name,
      ct_sequence,
    );
  }

  _dart__XlcCreateDefaultCharSet __XlcCreateDefaultCharSet;

  ffi.Pointer<XlcCharSet> _XlcAddCT(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> ct_sequence,
  ) {
    __XlcAddCT ??=
        _dylib.lookupFunction<_c__XlcAddCT, _dart__XlcAddCT>('_XlcAddCT');
    return __XlcAddCT(
      name,
      ct_sequence,
    );
  }

  _dart__XlcAddCT __XlcAddCT;

  int _XlcInitCTInfo() {
    __XlcInitCTInfo ??=
        _dylib.lookupFunction<_c__XlcInitCTInfo, _dart__XlcInitCTInfo>(
            '_XlcInitCTInfo');
    return __XlcInitCTInfo();
  }

  _dart__XlcInitCTInfo __XlcInitCTInfo;

  ffi.Pointer<XrmMethodsRec> _XrmDefaultInitParseInfo(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> state,
  ) {
    __XrmDefaultInitParseInfo ??= _dylib.lookupFunction<
        _c__XrmDefaultInitParseInfo,
        _dart__XrmDefaultInitParseInfo>('_XrmDefaultInitParseInfo');
    return __XrmDefaultInitParseInfo(
      lcd,
      state,
    );
  }

  _dart__XrmDefaultInitParseInfo __XrmDefaultInitParseInfo;

  int _XmbTextPropertyToTextList(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
    ffi.Pointer<ffi.Int32> count_ret,
  ) {
    __XmbTextPropertyToTextList ??= _dylib.lookupFunction<
        _c__XmbTextPropertyToTextList,
        _dart__XmbTextPropertyToTextList>('_XmbTextPropertyToTextList');
    return __XmbTextPropertyToTextList(
      lcd,
      dpy,
      text_prop,
      list_ret,
      count_ret,
    );
  }

  _dart__XmbTextPropertyToTextList __XmbTextPropertyToTextList;

  int _XwcTextPropertyToTextList(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_ret,
    ffi.Pointer<ffi.Int32> count_ret,
  ) {
    __XwcTextPropertyToTextList ??= _dylib.lookupFunction<
        _c__XwcTextPropertyToTextList,
        _dart__XwcTextPropertyToTextList>('_XwcTextPropertyToTextList');
    return __XwcTextPropertyToTextList(
      lcd,
      dpy,
      text_prop,
      list_ret,
      count_ret,
    );
  }

  _dart__XwcTextPropertyToTextList __XwcTextPropertyToTextList;

  int _Xutf8TextPropertyToTextList(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
    ffi.Pointer<ffi.Int32> count_ret,
  ) {
    __Xutf8TextPropertyToTextList ??= _dylib.lookupFunction<
        _c__Xutf8TextPropertyToTextList,
        _dart__Xutf8TextPropertyToTextList>('_Xutf8TextPropertyToTextList');
    return __Xutf8TextPropertyToTextList(
      lcd,
      dpy,
      text_prop,
      list_ret,
      count_ret,
    );
  }

  _dart__Xutf8TextPropertyToTextList __Xutf8TextPropertyToTextList;

  int _XmbTextListToTextProperty(
    ffi.Pointer<XLCdRec> arg0,
    ffi.Pointer<_XDisplay> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextProperty> arg5,
  ) {
    __XmbTextListToTextProperty ??= _dylib.lookupFunction<
        _c__XmbTextListToTextProperty,
        _dart__XmbTextListToTextProperty>('_XmbTextListToTextProperty');
    return __XmbTextListToTextProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart__XmbTextListToTextProperty __XmbTextListToTextProperty;

  int _XwcTextListToTextProperty(
    ffi.Pointer<XLCdRec> arg0,
    ffi.Pointer<_XDisplay> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextProperty> arg5,
  ) {
    __XwcTextListToTextProperty ??= _dylib.lookupFunction<
        _c__XwcTextListToTextProperty,
        _dart__XwcTextListToTextProperty>('_XwcTextListToTextProperty');
    return __XwcTextListToTextProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart__XwcTextListToTextProperty __XwcTextListToTextProperty;

  int _Xutf8TextListToTextProperty(
    ffi.Pointer<XLCdRec> arg0,
    ffi.Pointer<_XDisplay> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<XTextProperty> arg5,
  ) {
    __Xutf8TextListToTextProperty ??= _dylib.lookupFunction<
        _c__Xutf8TextListToTextProperty,
        _dart__Xutf8TextListToTextProperty>('_Xutf8TextListToTextProperty');
    return __Xutf8TextListToTextProperty(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart__Xutf8TextListToTextProperty __Xutf8TextListToTextProperty;

  void _XwcFreeStringList(
    ffi.Pointer<XLCdRec> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ) {
    __XwcFreeStringList ??=
        _dylib.lookupFunction<_c__XwcFreeStringList, _dart__XwcFreeStringList>(
            '_XwcFreeStringList');
    return __XwcFreeStringList(
      arg0,
      arg1,
    );
  }

  _dart__XwcFreeStringList __XwcFreeStringList;

  int _XlcResolveLocaleName(
    ffi.Pointer<ffi.Int8> lc_name,
    ffi.Pointer<XLCdPublicPart> pub,
  ) {
    __XlcResolveLocaleName ??= _dylib.lookupFunction<_c__XlcResolveLocaleName,
        _dart__XlcResolveLocaleName>('_XlcResolveLocaleName');
    return __XlcResolveLocaleName(
      lc_name,
      pub,
    );
  }

  _dart__XlcResolveLocaleName __XlcResolveLocaleName;

  int _XlcResolveI18NPath(
    ffi.Pointer<ffi.Int8> buf,
    int buf_len,
  ) {
    __XlcResolveI18NPath ??= _dylib.lookupFunction<_c__XlcResolveI18NPath,
        _dart__XlcResolveI18NPath>('_XlcResolveI18NPath');
    return __XlcResolveI18NPath(
      buf,
      buf_len,
    );
  }

  _dart__XlcResolveI18NPath __XlcResolveI18NPath;

  ffi.Pointer<ffi.Int8> _XlcLocaleLibDirName(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    __XlcLocaleLibDirName ??= _dylib.lookupFunction<_c__XlcLocaleLibDirName,
        _dart__XlcLocaleLibDirName>('_XlcLocaleLibDirName');
    return __XlcLocaleLibDirName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XlcLocaleLibDirName __XlcLocaleLibDirName;

  ffi.Pointer<ffi.Int8> _XlcLocaleDirName(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    __XlcLocaleDirName ??=
        _dylib.lookupFunction<_c__XlcLocaleDirName, _dart__XlcLocaleDirName>(
            '_XlcLocaleDirName');
    return __XlcLocaleDirName(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XlcLocaleDirName __XlcLocaleDirName;

  ffi.Pointer<ffi.Int8> _XlcCreateLocaleDataBase(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XlcCreateLocaleDataBase ??= _dylib.lookupFunction<
        _c__XlcCreateLocaleDataBase,
        _dart__XlcCreateLocaleDataBase>('_XlcCreateLocaleDataBase');
    return __XlcCreateLocaleDataBase(
      lcd,
    );
  }

  _dart__XlcCreateLocaleDataBase __XlcCreateLocaleDataBase;

  void _XlcDestroyLocaleDataBase(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    __XlcDestroyLocaleDataBase ??= _dylib.lookupFunction<
        _c__XlcDestroyLocaleDataBase,
        _dart__XlcDestroyLocaleDataBase>('_XlcDestroyLocaleDataBase');
    return __XlcDestroyLocaleDataBase(
      lcd,
    );
  }

  _dart__XlcDestroyLocaleDataBase __XlcDestroyLocaleDataBase;

  void _XlcGetLocaleDataBase(
    ffi.Pointer<XLCdRec> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg3,
    ffi.Pointer<ffi.Int32> arg4,
  ) {
    __XlcGetLocaleDataBase ??= _dylib.lookupFunction<_c__XlcGetLocaleDataBase,
        _dart__XlcGetLocaleDataBase>('_XlcGetLocaleDataBase');
    return __XlcGetLocaleDataBase(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart__XlcGetLocaleDataBase __XlcGetLocaleDataBase;

  int _Xlcmbstoutf8(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Int8> ustr,
    ffi.Pointer<ffi.Int8> str,
    int len,
  ) {
    __Xlcmbstoutf8 ??= _dylib
        .lookupFunction<_c__Xlcmbstoutf8, _dart__Xlcmbstoutf8>('_Xlcmbstoutf8');
    return __Xlcmbstoutf8(
      lcd,
      ustr,
      str,
      len,
    );
  }

  _dart__Xlcmbstoutf8 __Xlcmbstoutf8;

  int _Xlcwcstombs(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int32> wstr,
    int len,
  ) {
    __Xlcwcstombs ??= _dylib
        .lookupFunction<_c__Xlcwcstombs, _dart__Xlcwcstombs>('_Xlcwcstombs');
    return __Xlcwcstombs(
      lcd,
      str,
      wstr,
      len,
    );
  }

  _dart__Xlcwcstombs __Xlcwcstombs;

  int _Xlcmbstowcs(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Int32> wstr,
    ffi.Pointer<ffi.Int8> str,
    int len,
  ) {
    __Xlcmbstowcs ??= _dylib
        .lookupFunction<_c__Xlcmbstowcs, _dart__Xlcmbstowcs>('_Xlcmbstowcs');
    return __Xlcmbstowcs(
      lcd,
      wstr,
      str,
      len,
    );
  }

  _dart__Xlcmbstowcs __Xlcmbstowcs;

  int _Xwcstombs(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int32> wstr,
    int len,
  ) {
    __Xwcstombs ??=
        _dylib.lookupFunction<_c__Xwcstombs, _dart__Xwcstombs>('_Xwcstombs');
    return __Xwcstombs(
      str,
      wstr,
      len,
    );
  }

  _dart__Xwcstombs __Xwcstombs;

  int _Xlcmbtowc(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Int32> wstr,
    ffi.Pointer<ffi.Int8> str,
    int len,
  ) {
    __Xlcmbtowc ??=
        _dylib.lookupFunction<_c__Xlcmbtowc, _dart__Xlcmbtowc>('_Xlcmbtowc');
    return __Xlcmbtowc(
      lcd,
      wstr,
      str,
      len,
    );
  }

  _dart__Xlcmbtowc __Xlcmbtowc;

  int _Xlcwctomb(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<ffi.Int8> str,
    int wc,
  ) {
    __Xlcwctomb ??=
        _dylib.lookupFunction<_c__Xlcwctomb, _dart__Xlcwctomb>('_Xlcwctomb');
    return __Xlcwctomb(
      lcd,
      str,
      wc,
    );
  }

  _dart__Xlcwctomb __Xlcwctomb;

  ffi.Pointer<ffi.Int8> _Utf8GetConvByName(
    ffi.Pointer<ffi.Int8> name,
  ) {
    __Utf8GetConvByName ??=
        _dylib.lookupFunction<_c__Utf8GetConvByName, _dart__Utf8GetConvByName>(
            '_Utf8GetConvByName');
    return __Utf8GetConvByName(
      name,
    );
  }

  _dart__Utf8GetConvByName __Utf8GetConvByName;

  ffi.Pointer<ffi.Int8> get_values(
    ffi.Pointer<XlcCharSet> charset,
    ffi.Pointer<XlcArgList> args,
    int num_args,
  ) {
    _get_values ??=
        _dylib.lookupFunction<_c_get_values, _dart_get_values>('get_values');
    return _get_values(
      charset,
      args,
      num_args,
    );
  }

  _dart_get_values _get_values;

  void close_converter_2(
    ffi.Pointer<XlcConvRec> conv,
  ) {
    _close_converter_2 ??=
        _dylib.lookupFunction<_c_close_converter_2, _dart_close_converter_2>(
            'close_converter');
    return _close_converter_2(
      conv,
    );
  }

  _dart_close_converter_2 _close_converter_2;

  ffi.Pointer<XlcConvRec> get_converter(
    ffi.Pointer<XLCdRec> from_lcd,
    int from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    int to_type,
  ) {
    _get_converter ??= _dylib
        .lookupFunction<_c_get_converter, _dart_get_converter>('get_converter');
    return _get_converter(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_get_converter _get_converter;

  int indirect_convert(
    ffi.Pointer<XlcConvRec> lc_conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _indirect_convert ??=
        _dylib.lookupFunction<_c_indirect_convert, _dart_indirect_convert>(
            'indirect_convert');
    return _indirect_convert(
      lc_conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_indirect_convert _indirect_convert;

  void close_indirect_converter(
    ffi.Pointer<XlcConvRec> lc_conv,
  ) {
    _close_indirect_converter ??= _dylib.lookupFunction<
        _c_close_indirect_converter,
        _dart_close_indirect_converter>('close_indirect_converter');
    return _close_indirect_converter(
      lc_conv,
    );
  }

  _dart_close_indirect_converter _close_indirect_converter;

  void reset_indirect_converter(
    ffi.Pointer<XlcConvRec> lc_conv,
  ) {
    _reset_indirect_converter ??= _dylib.lookupFunction<
        _c_reset_indirect_converter,
        _dart_reset_indirect_converter>('reset_indirect_converter');
    return _reset_indirect_converter(
      lc_conv,
    );
  }

  _dart_reset_indirect_converter _reset_indirect_converter;

  ffi.Pointer<XlcConvRec> open_indirect_converter(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to,
  ) {
    _open_indirect_converter ??= _dylib.lookupFunction<
        _c_open_indirect_converter,
        _dart_open_indirect_converter>('open_indirect_converter');
    return _open_indirect_converter(
      from_lcd,
      from,
      to_lcd,
      to,
    );
  }

  _dart_open_indirect_converter _open_indirect_converter;

  int _XlcParseCT(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> text,
    ffi.Pointer<ffi.Int32> length,
    ffi.Pointer<ffi.Uint8> final_byte,
  ) {
    __XlcParseCT ??=
        _dylib.lookupFunction<_c__XlcParseCT, _dart__XlcParseCT>('_XlcParseCT');
    return __XlcParseCT(
      text,
      length,
      final_byte,
    );
  }

  _dart__XlcParseCT __XlcParseCT;

  ffi.Pointer<CTInfo> _XlcGetCTInfo(
    int type,
    int final_byte,
    ffi.Pointer<ffi.Int8> text,
    int text_len,
  ) {
    __XlcGetCTInfo ??= _dylib
        .lookupFunction<_c__XlcGetCTInfo, _dart__XlcGetCTInfo>('_XlcGetCTInfo');
    return __XlcGetCTInfo(
      type,
      final_byte,
      text,
      text_len,
    );
  }

  _dart__XlcGetCTInfo __XlcGetCTInfo;

  ffi.Pointer<CTInfo> _XlcGetCTInfoFromCharSet(
    ffi.Pointer<XlcCharSet> charset,
  ) {
    __XlcGetCTInfoFromCharSet ??= _dylib.lookupFunction<
        _c__XlcGetCTInfoFromCharSet,
        _dart__XlcGetCTInfoFromCharSet>('_XlcGetCTInfoFromCharSet');
    return __XlcGetCTInfoFromCharSet(
      charset,
    );
  }

  _dart__XlcGetCTInfoFromCharSet __XlcGetCTInfoFromCharSet;

  int _XlcCheckCTSequence(
    ffi.Pointer<State> state,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> ctext,
    ffi.Pointer<ffi.Int32> ctext_len,
  ) {
    __XlcCheckCTSequence ??= _dylib.lookupFunction<_c__XlcCheckCTSequence,
        _dart__XlcCheckCTSequence>('_XlcCheckCTSequence');
    return __XlcCheckCTSequence(
      state,
      ctext,
      ctext_len,
    );
  }

  _dart__XlcCheckCTSequence __XlcCheckCTSequence;

  void init_state_1(
    ffi.Pointer<XlcConvRec> conv,
  ) {
    _init_state_1 ??= _dylib
        .lookupFunction<_c_init_state_1, _dart_init_state_1>('init_state');
    return _init_state_1(
      conv,
    );
  }

  _dart_init_state_1 _init_state_1;

  int cttocs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _cttocs ??= _dylib.lookupFunction<_c_cttocs, _dart_cttocs>('cttocs');
    return _cttocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cttocs _cttocs;

  int cstoct(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _cstoct ??= _dylib.lookupFunction<_c_cstoct, _dart_cstoct>('cstoct');
    return _cstoct(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cstoct _cstoct;

  int strtocs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _strtocs ??= _dylib.lookupFunction<_c_strtocs, _dart_strtocs>('strtocs');
    return _strtocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_strtocs _strtocs;

  int cstostr(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _cstostr ??= _dylib.lookupFunction<_c_cstostr, _dart_cstostr>('cstostr');
    return _cstostr(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cstostr _cstostr;

  ffi.Pointer<XlcConvRec> create_conv_2(
    ffi.Pointer<XlcConvMethods> methods,
  ) {
    _create_conv_2 ??= _dylib
        .lookupFunction<_c_create_conv_2, _dart_create_conv_2>('create_conv');
    return _create_conv_2(
      methods,
    );
  }

  _dart_create_conv_2 _create_conv_2;

  void close_converter_3(
    ffi.Pointer<XlcConvRec> conv,
  ) {
    _close_converter_3 ??=
        _dylib.lookupFunction<_c_close_converter_3, _dart_close_converter_3>(
            'close_converter');
    return _close_converter_3(
      conv,
    );
  }

  _dart_close_converter_3 _close_converter_3;

  ffi.Pointer<XlcConvRec> open_cttocs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cttocs ??=
        _dylib.lookupFunction<_c_open_cttocs, _dart_open_cttocs>('open_cttocs');
    return _open_cttocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cttocs _open_cttocs;

  ffi.Pointer<XlcConvRec> open_cstoct(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cstoct ??=
        _dylib.lookupFunction<_c_open_cstoct, _dart_open_cstoct>('open_cstoct');
    return _open_cstoct(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cstoct _open_cstoct;

  ffi.Pointer<XlcConvRec> open_strtocs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_strtocs ??= _dylib
        .lookupFunction<_c_open_strtocs, _dart_open_strtocs>('open_strtocs');
    return _open_strtocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_strtocs _open_strtocs;

  ffi.Pointer<XlcConvRec> open_cstostr(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cstostr ??= _dylib
        .lookupFunction<_c_open_cstostr, _dart_open_cstostr>('open_cstostr');
    return _open_cstostr(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cstostr _open_cstostr;

  ///
  int f_newline(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_newline ??=
        _dylib.lookupFunction<_c_f_newline, _dart_f_newline>('f_newline');
    return _f_newline(
      str,
      token,
      db,
    );
  }

  _dart_f_newline _f_newline;

  int f_comment(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_comment ??=
        _dylib.lookupFunction<_c_f_comment, _dart_f_comment>('f_comment');
    return _f_comment(
      str,
      token,
      db,
    );
  }

  _dart_f_comment _f_comment;

  int f_semicolon(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_semicolon ??=
        _dylib.lookupFunction<_c_f_semicolon, _dart_f_semicolon>('f_semicolon');
    return _f_semicolon(
      str,
      token,
      db,
    );
  }

  _dart_f_semicolon _f_semicolon;

  int f_double_quote(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_double_quote ??=
        _dylib.lookupFunction<_c_f_double_quote, _dart_f_double_quote>(
            'f_double_quote');
    return _f_double_quote(
      str,
      token,
      db,
    );
  }

  _dart_f_double_quote _f_double_quote;

  int f_left_brace(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_left_brace ??= _dylib
        .lookupFunction<_c_f_left_brace, _dart_f_left_brace>('f_left_brace');
    return _f_left_brace(
      str,
      token,
      db,
    );
  }

  _dart_f_left_brace _f_left_brace;

  int f_right_brace(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_right_brace ??= _dylib
        .lookupFunction<_c_f_right_brace, _dart_f_right_brace>('f_right_brace');
    return _f_right_brace(
      str,
      token,
      db,
    );
  }

  _dart_f_right_brace _f_right_brace;

  int f_white(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_white ??= _dylib.lookupFunction<_c_f_white, _dart_f_white>('f_white');
    return _f_white(
      str,
      token,
      db,
    );
  }

  _dart_f_white _f_white;

  int f_backslash(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_backslash ??=
        _dylib.lookupFunction<_c_f_backslash, _dart_f_backslash>('f_backslash');
    return _f_backslash(
      str,
      token,
      db,
    );
  }

  _dart_f_backslash _f_backslash;

  int f_numeric(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_numeric ??=
        _dylib.lookupFunction<_c_f_numeric, _dart_f_numeric>('f_numeric');
    return _f_numeric(
      str,
      token,
      db,
    );
  }

  _dart_f_numeric _f_numeric;

  int f_default(
    ffi.Pointer<ffi.Int8> str,
    int token,
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _f_default ??=
        _dylib.lookupFunction<_c_f_default, _dart_f_default>('f_default');
    return _f_default(
      str,
      token,
      db,
    );
  }

  _dart_f_default _f_default;

  void init_parse_info() {
    _init_parse_info ??=
        _dylib.lookupFunction<_c_init_parse_info, _dart_init_parse_info>(
            'init_parse_info');
    return _init_parse_info();
  }

  _dart_init_parse_info _init_parse_info;

  void clear_parse_info() {
    _clear_parse_info ??=
        _dylib.lookupFunction<_c_clear_parse_info, _dart_clear_parse_info>(
            'clear_parse_info');
    return _clear_parse_info();
  }

  _dart_clear_parse_info _clear_parse_info;

  int realloc_parse_info(
    int len,
  ) {
    _realloc_parse_info ??=
        _dylib.lookupFunction<_c_realloc_parse_info, _dart_realloc_parse_info>(
            'realloc_parse_info');
    return _realloc_parse_info(
      len,
    );
  }

  _dart_realloc_parse_info _realloc_parse_info;

  void free_line(
    ffi.Pointer<Line> line,
  ) {
    _free_line ??=
        _dylib.lookupFunction<_c_free_line, _dart_free_line>('free_line');
    return _free_line(
      line,
    );
  }

  _dart_free_line _free_line;

  int realloc_line(
    ffi.Pointer<Line> line,
    int size,
  ) {
    _realloc_line ??= _dylib
        .lookupFunction<_c_realloc_line, _dart_realloc_line>('realloc_line');
    return _realloc_line(
      line,
      size,
    );
  }

  _dart_realloc_line _realloc_line;

  void zap_comment(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int32> quoted,
  ) {
    _zap_comment ??=
        _dylib.lookupFunction<_c_zap_comment, _dart_zap_comment>('zap_comment');
    return _zap_comment(
      str,
      quoted,
    );
  }

  _dart_zap_comment _zap_comment;

  int read_line(
    ffi.Pointer<_IO_FILE> fd,
    ffi.Pointer<Line> line,
  ) {
    _read_line ??=
        _dylib.lookupFunction<_c_read_line, _dart_read_line>('read_line');
    return _read_line(
      fd,
      line,
    );
  }

  _dart_read_line _read_line;

  ///
  int get_token(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _get_token ??=
        _dylib.lookupFunction<_c_get_token, _dart_get_token>('get_token');
    return _get_token(
      str,
    );
  }

  _dart_get_token _get_token;

  int get_word(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> word,
  ) {
    _get_word ??=
        _dylib.lookupFunction<_c_get_word, _dart_get_word>('get_word');
    return _get_word(
      str,
      word,
    );
  }

  _dart_get_word _get_word;

  int get_quoted_word(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> word,
  ) {
    _get_quoted_word ??=
        _dylib.lookupFunction<_c_get_quoted_word, _dart_get_quoted_word>(
            'get_quoted_word');
    return _get_quoted_word(
      str,
      word,
    );
  }

  _dart_get_quoted_word _get_quoted_word;

  ///
  int append_value_list() {
    _append_value_list ??=
        _dylib.lookupFunction<_c_append_value_list, _dart_append_value_list>(
            'append_value_list');
    return _append_value_list();
  }

  _dart_append_value_list _append_value_list;

  int construct_name(
    ffi.Pointer<ffi.Int8> name,
    int size,
  ) {
    _construct_name ??=
        _dylib.lookupFunction<_c_construct_name, _dart_construct_name>(
            'construct_name');
    return _construct_name(
      name,
      size,
    );
  }

  _dart_construct_name _construct_name;

  int store_to_database(
    ffi.Pointer<ffi.Pointer<Database>> db,
  ) {
    _store_to_database ??=
        _dylib.lookupFunction<_c_store_to_database, _dart_store_to_database>(
            'store_to_database');
    return _store_to_database(
      db,
    );
  }

  _dart_store_to_database _store_to_database;

  int check_category_end(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _check_category_end ??=
        _dylib.lookupFunction<_c_check_category_end, _dart_check_category_end>(
            'check_category_end');
    return _check_category_end(
      str,
    );
  }

  _dart_check_category_end _check_category_end;

  void DestroyDatabase(
    ffi.Pointer<Database> db,
  ) {
    _DestroyDatabase ??=
        _dylib.lookupFunction<_c_DestroyDatabase, _dart_DestroyDatabase>(
            'DestroyDatabase');
    return _DestroyDatabase(
      db,
    );
  }

  _dart_DestroyDatabase _DestroyDatabase;

  int CountDatabase(
    ffi.Pointer<Database> db,
  ) {
    _CountDatabase ??= _dylib
        .lookupFunction<_c_CountDatabase, _dart_CountDatabase>('CountDatabase');
    return _CountDatabase(
      db,
    );
  }

  _dart_CountDatabase _CountDatabase;

  ffi.Pointer<Database> CreateDatabase(
    ffi.Pointer<ffi.Int8> dbfile,
  ) {
    _CreateDatabase ??=
        _dylib.lookupFunction<_c_CreateDatabase, _dart_CreateDatabase>(
            'CreateDatabase');
    return _CreateDatabase(
      dbfile,
    );
  }

  _dart_CreateDatabase _CreateDatabase;

  int parse_line_1(
    ffi.Pointer<ffi.Int8> line,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
    int argsize,
  ) {
    _parse_line_1 ??= _dylib
        .lookupFunction<_c_parse_line_1, _dart_parse_line_1>('parse_line');
    return _parse_line_1(
      line,
      argv,
      argsize,
    );
  }

  _dart_parse_line_1 _parse_line_1;

  int _XlcParsePath(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
    int argsize,
  ) {
    __XlcParsePath ??= _dylib
        .lookupFunction<_c__XlcParsePath, _dart__XlcParsePath>('_XlcParsePath');
    return __XlcParsePath(
      path,
      argv,
      argsize,
    );
  }

  _dart__XlcParsePath __XlcParsePath;

  void xlocalelibdir(
    ffi.Pointer<ffi.Int8> buf,
    int buf_len,
  ) {
    _xlocalelibdir ??= _dylib
        .lookupFunction<_c_xlocalelibdir, _dart_xlocalelibdir>('xlocalelibdir');
    return _xlocalelibdir(
      buf,
      buf_len,
    );
  }

  _dart_xlocalelibdir _xlocalelibdir;

  ffi.Pointer<ffi.Int8> resolve_name(
    ffi.Pointer<ffi.Int8> lc_name,
    ffi.Pointer<ffi.Int8> file_name,
    int direction,
  ) {
    _resolve_name ??= _dylib
        .lookupFunction<_c_resolve_name, _dart_resolve_name>('resolve_name');
    return _resolve_name(
      lc_name,
      file_name,
      direction,
    );
  }

  _dart_resolve_name _resolve_name;

  ffi.Pointer<ffi.Int8> lowercase(
    ffi.Pointer<ffi.Int8> dst,
    ffi.Pointer<ffi.Int8> src,
  ) {
    _lowercase ??=
        _dylib.lookupFunction<_c_lowercase, _dart_lowercase>('lowercase');
    return _lowercase(
      dst,
      src,
    );
  }

  _dart_lowercase _lowercase;

  ffi.Pointer<ffi.Int8> normalize_lcname(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _normalize_lcname ??=
        _dylib.lookupFunction<_c_normalize_lcname, _dart_normalize_lcname>(
            'normalize_lcname');
    return _normalize_lcname(
      name,
    );
  }

  _dart_normalize_lcname _normalize_lcname;

  ffi.Pointer<FontScope> _XlcParse_scopemaps(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int32> size,
  ) {
    __XlcParse_scopemaps ??= _dylib.lookupFunction<_c__XlcParse_scopemaps,
        _dart__XlcParse_scopemaps>('_XlcParse_scopemaps');
    return __XlcParse_scopemaps(
      str,
      size,
    );
  }

  _dart__XlcParse_scopemaps __XlcParse_scopemaps;

  void _XlcDbg_printValue(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
    int num,
  ) {
    __XlcDbg_printValue ??=
        _dylib.lookupFunction<_c__XlcDbg_printValue, _dart__XlcDbg_printValue>(
            '_XlcDbg_printValue');
    return __XlcDbg_printValue(
      str,
      value,
      num,
    );
  }

  _dart__XlcDbg_printValue __XlcDbg_printValue;

  ffi.Pointer<_XIM> _XDefaultOpenIM(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<_XrmHashBucketRec> rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
  ) {
    __XDefaultOpenIM ??=
        _dylib.lookupFunction<_c__XDefaultOpenIM, _dart__XDefaultOpenIM>(
            '_XDefaultOpenIM');
    return __XDefaultOpenIM(
      lcd,
      dpy,
      rdb,
      res_name,
      res_class,
    );
  }

  _dart__XDefaultOpenIM __XDefaultOpenIM;

  ffi.Pointer<XLCdRec> create(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<XLCdMethods> methods,
  ) {
    _create ??= _dylib.lookupFunction<_c_create, _dart_create>('create');
    return _create(
      name,
      methods,
    );
  }

  _dart_create _create;

  int initialize(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _initialize ??=
        _dylib.lookupFunction<_c_initialize, _dart_initialize>('initialize');
    return _initialize(
      lcd,
    );
  }

  _dart_initialize _initialize;

  void destroy(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _destroy ??= _dylib.lookupFunction<_c_destroy, _dart_destroy>('destroy');
    return _destroy(
      lcd,
    );
  }

  _dart_destroy _destroy;

  int string_to_encoding(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> encoding,
  ) {
    _string_to_encoding ??=
        _dylib.lookupFunction<_c_string_to_encoding, _dart_string_to_encoding>(
            'string_to_encoding');
    return _string_to_encoding(
      str,
      encoding,
    );
  }

  _dart_string_to_encoding _string_to_encoding;

  int string_to_ulong(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Uint64> value,
  ) {
    _string_to_ulong ??=
        _dylib.lookupFunction<_c_string_to_ulong, _dart_string_to_ulong>(
            'string_to_ulong');
    return _string_to_ulong(
      str,
      value,
    );
  }

  _dart_string_to_ulong _string_to_ulong;

  int add_charset(
    ffi.Pointer<CodeSet> codeset,
    ffi.Pointer<XlcCharSet> charset,
  ) {
    _add_charset ??=
        _dylib.lookupFunction<_c_add_charset, _dart_add_charset>('add_charset');
    return _add_charset(
      codeset,
      charset,
    );
  }

  _dart_add_charset _add_charset;

  ffi.Pointer<CodeSet> add_codeset(
    ffi.Pointer<XLCdGenericPart> gen,
  ) {
    _add_codeset ??=
        _dylib.lookupFunction<_c_add_codeset, _dart_add_codeset>('add_codeset');
    return _add_codeset(
      gen,
    );
  }

  _dart_add_codeset _add_codeset;

  int add_parse_list(
    ffi.Pointer<XLCdGenericPart> gen,
    int type,
    ffi.Pointer<ffi.Int8> encoding,
    ffi.Pointer<CodeSet> codeset,
  ) {
    _add_parse_list ??=
        _dylib.lookupFunction<_c_add_parse_list, _dart_add_parse_list>(
            'add_parse_list');
    return _add_parse_list(
      gen,
      type,
      encoding,
      codeset,
    );
  }

  _dart_add_parse_list _add_parse_list;

  void free_charset(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _free_charset ??= _dylib
        .lookupFunction<_c_free_charset, _dart_free_charset>('free_charset');
    return _free_charset(
      lcd,
    );
  }

  _dart_free_charset _free_charset;

  ffi.Pointer<ffi.Int8> getscope(
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<FontScope> scp,
  ) {
    _getscope ??=
        _dylib.lookupFunction<_c_getscope, _dart_getscope>('getscope');
    return _getscope(
      str,
      scp,
    );
  }

  _dart_getscope _getscope;

  int count_scopemap(
    ffi.Pointer<ffi.Int8> str,
  ) {
    _count_scopemap ??=
        _dylib.lookupFunction<_c_count_scopemap, _dart_count_scopemap>(
            'count_scopemap');
    return _count_scopemap(
      str,
    );
  }

  _dart_count_scopemap _count_scopemap;

  void dmpscope(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<FontScope> sc,
    int num,
  ) {
    _dmpscope ??=
        _dylib.lookupFunction<_c_dmpscope, _dart_dmpscope>('dmpscope');
    return _dmpscope(
      name,
      sc,
      num,
    );
  }

  _dart_dmpscope _dmpscope;

  ffi.Pointer<XlcCharSet> srch_charset_define(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int32> new_1,
  ) {
    _srch_charset_define ??= _dylib.lookupFunction<_c_srch_charset_define,
        _dart_srch_charset_define>('srch_charset_define');
    return _srch_charset_define(
      name,
      new_1,
    );
  }

  _dart_srch_charset_define _srch_charset_define;

  void read_charset_define(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<XLCdGenericPart> gen,
  ) {
    _read_charset_define ??= _dylib.lookupFunction<_c_read_charset_define,
        _dart_read_charset_define>('read_charset_define');
    return _read_charset_define(
      lcd,
      gen,
    );
  }

  _dart_read_charset_define _read_charset_define;

  ffi.Pointer<SegConv> add_conversion(
    ffi.Pointer<XLCdGenericPart> gen,
  ) {
    _add_conversion ??=
        _dylib.lookupFunction<_c_add_conversion, _dart_add_conversion>(
            'add_conversion');
    return _add_conversion(
      gen,
    );
  }

  _dart_add_conversion _add_conversion;

  void read_segmentconversion(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<XLCdGenericPart> gen,
  ) {
    _read_segmentconversion ??= _dylib.lookupFunction<_c_read_segmentconversion,
        _dart_read_segmentconversion>('read_segmentconversion');
    return _read_segmentconversion(
      lcd,
      gen,
    );
  }

  _dart_read_segmentconversion _read_segmentconversion;

  ffi.Pointer<ExtdSegment> create_ctextseg(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
    int num,
  ) {
    _create_ctextseg ??=
        _dylib.lookupFunction<_c_create_ctextseg, _dart_create_ctextseg>(
            'create_ctextseg');
    return _create_ctextseg(
      value,
      num,
    );
  }

  _dart_create_ctextseg _create_ctextseg;

  int load_generic(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _load_generic ??= _dylib
        .lookupFunction<_c_load_generic, _dart_load_generic>('load_generic');
    return _load_generic(
      lcd,
    );
  }

  _dart_load_generic _load_generic;

  void freeByteM(
    ffi.Pointer<CodeSet> codeset,
  ) {
    _freeByteM ??=
        _dylib.lookupFunction<_c_freeByteM, _dart_freeByteM>('freeByteM');
    return _freeByteM(
      codeset,
    );
  }

  _dart_freeByteM _freeByteM;

  void freeConversion(
    ffi.Pointer<CodeSet> codeset,
  ) {
    _freeConversion ??=
        _dylib.lookupFunction<_c_freeConversion, _dart_freeConversion>(
            'freeConversion');
    return _freeConversion(
      codeset,
    );
  }

  _dart_freeConversion _freeConversion;

  void freeExtdSegment(
    ffi.Pointer<CodeSet> codeset,
  ) {
    _freeExtdSegment ??=
        _dylib.lookupFunction<_c_freeExtdSegment, _dart_freeExtdSegment>(
            'freeExtdSegment');
    return _freeExtdSegment(
      codeset,
    );
  }

  _dart_freeExtdSegment _freeExtdSegment;

  void freeParseInfo(
    ffi.Pointer<CodeSet> codeset,
  ) {
    _freeParseInfo ??= _dylib
        .lookupFunction<_c_freeParseInfo, _dart_freeParseInfo>('freeParseInfo');
    return _freeParseInfo(
      codeset,
    );
  }

  _dart_freeParseInfo _freeParseInfo;

  void destroy_CodeSetList(
    ffi.Pointer<XLCdGenericPart> gen,
  ) {
    _destroy_CodeSetList ??= _dylib.lookupFunction<_c_destroy_CodeSetList,
        _dart_destroy_CodeSetList>('destroy_CodeSetList');
    return _destroy_CodeSetList(
      gen,
    );
  }

  _dart_destroy_CodeSetList _destroy_CodeSetList;

  void destroy_SegConv(
    ffi.Pointer<XLCdGenericPart> gen,
  ) {
    _destroy_SegConv ??=
        _dylib.lookupFunction<_c_destroy_SegConv, _dart_destroy_SegConv>(
            'destroy_SegConv');
    return _destroy_SegConv(
      gen,
    );
  }

  _dart_destroy_SegConv _destroy_SegConv;

  void destroy_gen(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _destroy_gen ??=
        _dylib.lookupFunction<_c_destroy_gen, _dart_destroy_gen>('destroy_gen');
    return _destroy_gen(
      lcd,
    );
  }

  _dart_destroy_gen _destroy_gen;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> alloc_list(
    int is_wide_char,
    int count,
    int nitems,
  ) {
    _alloc_list ??=
        _dylib.lookupFunction<_c_alloc_list, _dart_alloc_list>('alloc_list');
    return _alloc_list(
      is_wide_char,
      count,
      nitems,
    );
  }

  _dart_alloc_list _alloc_list;

  void copy_list(
    int is_wide_char,
    ffi.Pointer<ffi.Int8> text,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
    int count,
  ) {
    _copy_list ??=
        _dylib.lookupFunction<_c_copy_list, _dart_copy_list>('copy_list');
    return _copy_list(
      is_wide_char,
      text,
      list,
      count,
    );
  }

  _dart_copy_list _copy_list;

  int _XTextPropertyToTextList(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XTextProperty> text_prop,
    ffi.Pointer<ffi.Int8> to_type,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
    ffi.Pointer<ffi.Int32> count_ret,
  ) {
    __XTextPropertyToTextList ??= _dylib.lookupFunction<
        _c__XTextPropertyToTextList,
        _dart__XTextPropertyToTextList>('_XTextPropertyToTextList');
    return __XTextPropertyToTextList(
      lcd,
      dpy,
      text_prop,
      to_type,
      list_ret,
      count_ret,
    );
  }

  _dart__XTextPropertyToTextList __XTextPropertyToTextList;

  ffi.Pointer<ffi.Int8> default_string(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _default_string ??=
        _dylib.lookupFunction<_c_default_string, _dart_default_string>(
            'default_string');
    return _default_string(
      lcd,
    );
  }

  _dart_default_string _default_string;

  ffi.Pointer<XLCdRec> create_1(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<XLCdMethods> methods,
  ) {
    _create_1 ??= _dylib.lookupFunction<_c_create_1, _dart_create_1>('create');
    return _create_1(
      name,
      methods,
    );
  }

  _dart_create_1 _create_1;

  int initialize_1(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _initialize_1 ??= _dylib
        .lookupFunction<_c_initialize_1, _dart_initialize_1>('initialize');
    return _initialize_1(
      lcd,
    );
  }

  _dart_initialize_1 _initialize_1;

  void destroy_1(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _destroy_1 ??=
        _dylib.lookupFunction<_c_destroy_1, _dart_destroy_1>('destroy');
    return _destroy_1(
      lcd,
    );
  }

  _dart_destroy_1 _destroy_1;

  ffi.Pointer<ffi.Int8> get_values_1(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<XlcArgList> args,
    int num_args,
  ) {
    _get_values_1 ??= _dylib
        .lookupFunction<_c_get_values_1, _dart_get_values_1>('get_values');
    return _get_values_1(
      lcd,
      args,
      num_args,
    );
  }

  _dart_get_values_1 _get_values_1;

  int load_public(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _load_public ??=
        _dylib.lookupFunction<_c_load_public, _dart_load_public>('load_public');
    return _load_public(
      lcd,
    );
  }

  _dart_load_public _load_public;

  int initialize_core(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _initialize_core ??=
        _dylib.lookupFunction<_c_initialize_core, _dart_initialize_core>(
            'initialize_core');
    return _initialize_core(
      lcd,
    );
  }

  _dart_initialize_core _initialize_core;

  void destroy_core(
    ffi.Pointer<XLCdRec> lcd,
  ) {
    _destroy_core ??= _dylib
        .lookupFunction<_c_destroy_core, _dart_destroy_core>('destroy_core');
    return _destroy_core(
      lcd,
    );
  }

  _dart_destroy_core _destroy_core;

  void ub_mbinit(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _ub_mbinit ??=
        _dylib.lookupFunction<_c_ub_mbinit, _dart_ub_mbinit>('ub_mbinit');
    return _ub_mbinit(
      state,
    );
  }

  _dart_ub_mbinit _ub_mbinit;

  int ub_mbchar(
    ffi.Pointer<ffi.Int8> state,
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int32> lenp,
  ) {
    _ub_mbchar ??=
        _dylib.lookupFunction<_c_ub_mbchar, _dart_ub_mbchar>('ub_mbchar');
    return _ub_mbchar(
      state,
      str,
      lenp,
    );
  }

  _dart_ub_mbchar _ub_mbchar;

  void ub_mbfinish(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _ub_mbfinish ??=
        _dylib.lookupFunction<_c_ub_mbfinish, _dart_ub_mbfinish>('ub_mbfinish');
    return _ub_mbfinish(
      state,
    );
  }

  _dart_ub_mbfinish _ub_mbfinish;

  ffi.Pointer<ffi.Int8> ub_lcname(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _ub_lcname ??=
        _dylib.lookupFunction<_c_ub_lcname, _dart_ub_lcname>('ub_lcname');
    return _ub_lcname(
      state,
    );
  }

  _dart_ub_lcname _ub_lcname;

  void ub_destroy(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _ub_destroy ??=
        _dylib.lookupFunction<_c_ub_destroy, _dart_ub_destroy>('ub_destroy');
    return _ub_destroy(
      state,
    );
  }

  _dart_ub_destroy _ub_destroy;

  void mb_mbinit(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _mb_mbinit ??=
        _dylib.lookupFunction<_c_mb_mbinit, _dart_mb_mbinit>('mb_mbinit');
    return _mb_mbinit(
      state,
    );
  }

  _dart_mb_mbinit _mb_mbinit;

  int mb_mbchar(
    ffi.Pointer<ffi.Int8> state,
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int32> lenp,
  ) {
    _mb_mbchar ??=
        _dylib.lookupFunction<_c_mb_mbchar, _dart_mb_mbchar>('mb_mbchar');
    return _mb_mbchar(
      state,
      str,
      lenp,
    );
  }

  _dart_mb_mbchar _mb_mbchar;

  void mb_mbfinish(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _mb_mbfinish ??=
        _dylib.lookupFunction<_c_mb_mbfinish, _dart_mb_mbfinish>('mb_mbfinish');
    return _mb_mbfinish(
      state,
    );
  }

  _dart_mb_mbfinish _mb_mbfinish;

  ffi.Pointer<ffi.Int8> mb_lcname(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _mb_lcname ??=
        _dylib.lookupFunction<_c_mb_lcname, _dart_mb_lcname>('mb_lcname');
    return _mb_lcname(
      state,
    );
  }

  _dart_mb_lcname _mb_lcname;

  void mb_destroy(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _mb_destroy ??=
        _dylib.lookupFunction<_c_mb_destroy, _dart_mb_destroy>('mb_destroy');
    return _mb_destroy(
      state,
    );
  }

  _dart_mb_destroy _mb_destroy;

  int get_buf_size(
    int is_wide_char,
    ffi.Pointer<ffi.Int8> list,
    int count,
  ) {
    _get_buf_size ??= _dylib
        .lookupFunction<_c_get_buf_size, _dart_get_buf_size>('get_buf_size');
    return _get_buf_size(
      is_wide_char,
      list,
      count,
    );
  }

  _dart_get_buf_size _get_buf_size;

  int _XTextListToTextProperty(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<ffi.Int8> list,
    int count,
    int style,
    ffi.Pointer<XTextProperty> text_prop,
  ) {
    __XTextListToTextProperty ??= _dylib.lookupFunction<
        _c__XTextListToTextProperty,
        _dart__XTextListToTextProperty>('_XTextListToTextProperty');
    return __XTextListToTextProperty(
      lcd,
      dpy,
      from_type,
      list,
      count,
      style,
      text_prop,
    );
  }

  _dart__XTextListToTextProperty __XTextListToTextProperty;

  int armscii_8_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _armscii_8_mbtowc ??=
        _dylib.lookupFunction<_c_armscii_8_mbtowc, _dart_armscii_8_mbtowc>(
            'armscii_8_mbtowc');
    return _armscii_8_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_armscii_8_mbtowc _armscii_8_mbtowc;

  int armscii_8_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _armscii_8_wctomb ??=
        _dylib.lookupFunction<_c_armscii_8_wctomb, _dart_armscii_8_wctomb>(
            'armscii_8_wctomb');
    return _armscii_8_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_armscii_8_wctomb _armscii_8_wctomb;

  int ascii_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _ascii_mbtowc ??= _dylib
        .lookupFunction<_c_ascii_mbtowc, _dart_ascii_mbtowc>('ascii_mbtowc');
    return _ascii_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_ascii_mbtowc _ascii_mbtowc;

  int ascii_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _ascii_wctomb ??= _dylib
        .lookupFunction<_c_ascii_wctomb, _dart_ascii_wctomb>('ascii_wctomb');
    return _ascii_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_ascii_wctomb _ascii_wctomb;

  int big5_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _big5_mbtowc ??=
        _dylib.lookupFunction<_c_big5_mbtowc, _dart_big5_mbtowc>('big5_mbtowc');
    return _big5_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_big5_mbtowc _big5_mbtowc;

  int big5_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _big5_wctomb ??=
        _dylib.lookupFunction<_c_big5_wctomb, _dart_big5_wctomb>('big5_wctomb');
    return _big5_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_big5_wctomb _big5_wctomb;

  int big5hkscs_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _big5hkscs_mbtowc ??=
        _dylib.lookupFunction<_c_big5hkscs_mbtowc, _dart_big5hkscs_mbtowc>(
            'big5hkscs_mbtowc');
    return _big5hkscs_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_big5hkscs_mbtowc _big5hkscs_mbtowc;

  int big5hkscs_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _big5hkscs_wctomb ??=
        _dylib.lookupFunction<_c_big5hkscs_wctomb, _dart_big5hkscs_wctomb>(
            'big5hkscs_wctomb');
    return _big5hkscs_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_big5hkscs_wctomb _big5hkscs_wctomb;

  int big5_0_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _big5_0_mbtowc ??= _dylib
        .lookupFunction<_c_big5_0_mbtowc, _dart_big5_0_mbtowc>('big5_0_mbtowc');
    return _big5_0_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_big5_0_mbtowc _big5_0_mbtowc;

  int big5_1_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _big5_1_mbtowc ??= _dylib
        .lookupFunction<_c_big5_1_mbtowc, _dart_big5_1_mbtowc>('big5_1_mbtowc');
    return _big5_1_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_big5_1_mbtowc _big5_1_mbtowc;

  int big5_0_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _big5_0_wctomb ??= _dylib
        .lookupFunction<_c_big5_0_wctomb, _dart_big5_0_wctomb>('big5_0_wctomb');
    return _big5_0_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_big5_0_wctomb _big5_0_wctomb;

  int big5_1_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _big5_1_wctomb ??= _dylib
        .lookupFunction<_c_big5_1_wctomb, _dart_big5_1_wctomb>('big5_1_wctomb');
    return _big5_1_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_big5_1_wctomb _big5_1_wctomb;

  void output_title(
    ffi.Pointer<ffi.Int8> charsetname,
  ) {
    _output_title ??= _dylib
        .lookupFunction<_c_output_title, _dart_output_title>('output_title');
    return _output_title(
      charsetname,
    );
  }

  _dart_output_title _output_title;

  void read_table(
    ffi.Pointer<Encoding> enc,
  ) {
    _read_table ??=
        _dylib.lookupFunction<_c_read_table, _dart_read_table>('read_table');
    return _read_table(
      enc,
    );
  }

  _dart_read_table _read_table;

  void find_charset2uni_pages(
    ffi.Pointer<Encoding> enc,
  ) {
    _find_charset2uni_pages ??= _dylib.lookupFunction<_c_find_charset2uni_pages,
        _dart_find_charset2uni_pages>('find_charset2uni_pages');
    return _find_charset2uni_pages(
      enc,
    );
  }

  _dart_find_charset2uni_pages _find_charset2uni_pages;

  void find_charset2uni_blocks(
    ffi.Pointer<Encoding> enc,
  ) {
    _find_charset2uni_blocks ??= _dylib.lookupFunction<
        _c_find_charset2uni_blocks,
        _dart_find_charset2uni_blocks>('find_charset2uni_blocks');
    return _find_charset2uni_blocks(
      enc,
    );
  }

  _dart_find_charset2uni_blocks _find_charset2uni_blocks;

  void output_charset2uni(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<Encoding> enc,
  ) {
    _output_charset2uni ??=
        _dylib.lookupFunction<_c_output_charset2uni, _dart_output_charset2uni>(
            'output_charset2uni');
    return _output_charset2uni(
      name,
      enc,
    );
  }

  _dart_output_charset2uni _output_charset2uni;

  void invert(
    ffi.Pointer<Encoding> enc,
  ) {
    _invert ??= _dylib.lookupFunction<_c_invert, _dart_invert>('invert');
    return _invert(
      enc,
    );
  }

  _dart_invert _invert;

  void output_uni2charset_dense(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<Encoding> enc,
  ) {
    _output_uni2charset_dense ??= _dylib.lookupFunction<
        _c_output_uni2charset_dense,
        _dart_output_uni2charset_dense>('output_uni2charset_dense');
    return _output_uni2charset_dense(
      name,
      enc,
    );
  }

  _dart_output_uni2charset_dense _output_uni2charset_dense;

  void output_uni2charset_sparse(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<Encoding> enc,
  ) {
    _output_uni2charset_sparse ??= _dylib.lookupFunction<
        _c_output_uni2charset_sparse,
        _dart_output_uni2charset_sparse>('output_uni2charset_sparse');
    return _output_uni2charset_sparse(
      name,
      enc,
    );
  }

  _dart_output_uni2charset_sparse _output_uni2charset_sparse;

  int row_byte_normal(
    int row,
  ) {
    _row_byte_normal ??=
        _dylib.lookupFunction<_c_row_byte_normal, _dart_row_byte_normal>(
            'row_byte_normal');
    return _row_byte_normal(
      row,
    );
  }

  _dart_row_byte_normal _row_byte_normal;

  int col_byte_normal(
    int col,
  ) {
    _col_byte_normal ??=
        _dylib.lookupFunction<_c_col_byte_normal, _dart_col_byte_normal>(
            'col_byte_normal');
    return _col_byte_normal(
      col,
    );
  }

  _dart_col_byte_normal _col_byte_normal;

  int byte_row_normal(
    int byte,
  ) {
    _byte_row_normal ??=
        _dylib.lookupFunction<_c_byte_row_normal, _dart_byte_row_normal>(
            'byte_row_normal');
    return _byte_row_normal(
      byte,
    );
  }

  _dart_byte_row_normal _byte_row_normal;

  int byte_col_normal(
    int byte,
  ) {
    _byte_col_normal ??=
        _dylib.lookupFunction<_c_byte_col_normal, _dart_byte_col_normal>(
            'byte_col_normal');
    return _byte_col_normal(
      byte,
    );
  }

  _dart_byte_col_normal _byte_col_normal;

  void do_normal(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_normal ??=
        _dylib.lookupFunction<_c_do_normal, _dart_do_normal>('do_normal');
    return _do_normal(
      name,
    );
  }

  _dart_do_normal _do_normal;

  void do_normal_only_charset2uni(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_normal_only_charset2uni ??= _dylib.lookupFunction<
        _c_do_normal_only_charset2uni,
        _dart_do_normal_only_charset2uni>('do_normal_only_charset2uni');
    return _do_normal_only_charset2uni(
      name,
    );
  }

  _dart_do_normal_only_charset2uni _do_normal_only_charset2uni;

  int row_byte_cns11643(
    int row,
  ) {
    _row_byte_cns11643 ??=
        _dylib.lookupFunction<_c_row_byte_cns11643, _dart_row_byte_cns11643>(
            'row_byte_cns11643');
    return _row_byte_cns11643(
      row,
    );
  }

  _dart_row_byte_cns11643 _row_byte_cns11643;

  int byte_row_cns11643(
    int byte,
  ) {
    _byte_row_cns11643 ??=
        _dylib.lookupFunction<_c_byte_row_cns11643, _dart_byte_row_cns11643>(
            'byte_row_cns11643');
    return _byte_row_cns11643(
      byte,
    );
  }

  _dart_byte_row_cns11643 _byte_row_cns11643;

  void do_cns11643_only_uni2charset(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_cns11643_only_uni2charset ??= _dylib.lookupFunction<
        _c_do_cns11643_only_uni2charset,
        _dart_do_cns11643_only_uni2charset>('do_cns11643_only_uni2charset');
    return _do_cns11643_only_uni2charset(
      name,
    );
  }

  _dart_do_cns11643_only_uni2charset _do_cns11643_only_uni2charset;

  int row_byte_gbk1(
    int row,
  ) {
    _row_byte_gbk1 ??= _dylib
        .lookupFunction<_c_row_byte_gbk1, _dart_row_byte_gbk1>('row_byte_gbk1');
    return _row_byte_gbk1(
      row,
    );
  }

  _dart_row_byte_gbk1 _row_byte_gbk1;

  int col_byte_gbk1(
    int col,
  ) {
    _col_byte_gbk1 ??= _dylib
        .lookupFunction<_c_col_byte_gbk1, _dart_col_byte_gbk1>('col_byte_gbk1');
    return _col_byte_gbk1(
      col,
    );
  }

  _dart_col_byte_gbk1 _col_byte_gbk1;

  int byte_row_gbk1(
    int byte,
  ) {
    _byte_row_gbk1 ??= _dylib
        .lookupFunction<_c_byte_row_gbk1, _dart_byte_row_gbk1>('byte_row_gbk1');
    return _byte_row_gbk1(
      byte,
    );
  }

  _dart_byte_row_gbk1 _byte_row_gbk1;

  int byte_col_gbk1(
    int byte,
  ) {
    _byte_col_gbk1 ??= _dylib
        .lookupFunction<_c_byte_col_gbk1, _dart_byte_col_gbk1>('byte_col_gbk1');
    return _byte_col_gbk1(
      byte,
    );
  }

  _dart_byte_col_gbk1 _byte_col_gbk1;

  void do_gbk1(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_gbk1 ??= _dylib.lookupFunction<_c_do_gbk1, _dart_do_gbk1>('do_gbk1');
    return _do_gbk1(
      name,
    );
  }

  _dart_do_gbk1 _do_gbk1;

  void do_gbk1_only_charset2uni(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_gbk1_only_charset2uni ??= _dylib.lookupFunction<
        _c_do_gbk1_only_charset2uni,
        _dart_do_gbk1_only_charset2uni>('do_gbk1_only_charset2uni');
    return _do_gbk1_only_charset2uni(
      name,
    );
  }

  _dart_do_gbk1_only_charset2uni _do_gbk1_only_charset2uni;

  int row_byte_gbk2(
    int row,
  ) {
    _row_byte_gbk2 ??= _dylib
        .lookupFunction<_c_row_byte_gbk2, _dart_row_byte_gbk2>('row_byte_gbk2');
    return _row_byte_gbk2(
      row,
    );
  }

  _dart_row_byte_gbk2 _row_byte_gbk2;

  int col_byte_gbk2(
    int col,
  ) {
    _col_byte_gbk2 ??= _dylib
        .lookupFunction<_c_col_byte_gbk2, _dart_col_byte_gbk2>('col_byte_gbk2');
    return _col_byte_gbk2(
      col,
    );
  }

  _dart_col_byte_gbk2 _col_byte_gbk2;

  int byte_row_gbk2(
    int byte,
  ) {
    _byte_row_gbk2 ??= _dylib
        .lookupFunction<_c_byte_row_gbk2, _dart_byte_row_gbk2>('byte_row_gbk2');
    return _byte_row_gbk2(
      byte,
    );
  }

  _dart_byte_row_gbk2 _byte_row_gbk2;

  int byte_col_gbk2(
    int byte,
  ) {
    _byte_col_gbk2 ??= _dylib
        .lookupFunction<_c_byte_col_gbk2, _dart_byte_col_gbk2>('byte_col_gbk2');
    return _byte_col_gbk2(
      byte,
    );
  }

  _dart_byte_col_gbk2 _byte_col_gbk2;

  void do_gbk2_only_charset2uni(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_gbk2_only_charset2uni ??= _dylib.lookupFunction<
        _c_do_gbk2_only_charset2uni,
        _dart_do_gbk2_only_charset2uni>('do_gbk2_only_charset2uni');
    return _do_gbk2_only_charset2uni(
      name,
    );
  }

  _dart_do_gbk2_only_charset2uni _do_gbk2_only_charset2uni;

  void do_gbk1_only_uni2charset(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_gbk1_only_uni2charset ??= _dylib.lookupFunction<
        _c_do_gbk1_only_uni2charset,
        _dart_do_gbk1_only_uni2charset>('do_gbk1_only_uni2charset');
    return _do_gbk1_only_uni2charset(
      name,
    );
  }

  _dart_do_gbk1_only_uni2charset _do_gbk1_only_uni2charset;

  void read_table_ksc5601(
    ffi.Pointer<Encoding> enc,
  ) {
    _read_table_ksc5601 ??=
        _dylib.lookupFunction<_c_read_table_ksc5601, _dart_read_table_ksc5601>(
            'read_table_ksc5601');
    return _read_table_ksc5601(
      enc,
    );
  }

  _dart_read_table_ksc5601 _read_table_ksc5601;

  void do_ksc5601(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_ksc5601 ??=
        _dylib.lookupFunction<_c_do_ksc5601, _dart_do_ksc5601>('do_ksc5601');
    return _do_ksc5601(
      name,
    );
  }

  _dart_do_ksc5601 _do_ksc5601;

  int row_byte_big5(
    int row,
  ) {
    _row_byte_big5 ??= _dylib
        .lookupFunction<_c_row_byte_big5, _dart_row_byte_big5>('row_byte_big5');
    return _row_byte_big5(
      row,
    );
  }

  _dart_row_byte_big5 _row_byte_big5;

  int col_byte_big5(
    int col,
  ) {
    _col_byte_big5 ??= _dylib
        .lookupFunction<_c_col_byte_big5, _dart_col_byte_big5>('col_byte_big5');
    return _col_byte_big5(
      col,
    );
  }

  _dart_col_byte_big5 _col_byte_big5;

  int byte_row_big5(
    int byte,
  ) {
    _byte_row_big5 ??= _dylib
        .lookupFunction<_c_byte_row_big5, _dart_byte_row_big5>('byte_row_big5');
    return _byte_row_big5(
      byte,
    );
  }

  _dart_byte_row_big5 _byte_row_big5;

  int byte_col_big5(
    int byte,
  ) {
    _byte_col_big5 ??= _dylib
        .lookupFunction<_c_byte_col_big5, _dart_byte_col_big5>('byte_col_big5');
    return _byte_col_big5(
      byte,
    );
  }

  _dart_byte_col_big5 _byte_col_big5;

  void do_big5(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_big5 ??= _dylib.lookupFunction<_c_do_big5, _dart_do_big5>('do_big5');
    return _do_big5(
      name,
    );
  }

  _dart_do_big5 _do_big5;

  int row_byte_big5hkscs(
    int row,
  ) {
    _row_byte_big5hkscs ??=
        _dylib.lookupFunction<_c_row_byte_big5hkscs, _dart_row_byte_big5hkscs>(
            'row_byte_big5hkscs');
    return _row_byte_big5hkscs(
      row,
    );
  }

  _dart_row_byte_big5hkscs _row_byte_big5hkscs;

  int col_byte_big5hkscs(
    int col,
  ) {
    _col_byte_big5hkscs ??=
        _dylib.lookupFunction<_c_col_byte_big5hkscs, _dart_col_byte_big5hkscs>(
            'col_byte_big5hkscs');
    return _col_byte_big5hkscs(
      col,
    );
  }

  _dart_col_byte_big5hkscs _col_byte_big5hkscs;

  int byte_row_big5hkscs(
    int byte,
  ) {
    _byte_row_big5hkscs ??=
        _dylib.lookupFunction<_c_byte_row_big5hkscs, _dart_byte_row_big5hkscs>(
            'byte_row_big5hkscs');
    return _byte_row_big5hkscs(
      byte,
    );
  }

  _dart_byte_row_big5hkscs _byte_row_big5hkscs;

  int byte_col_big5hkscs(
    int byte,
  ) {
    _byte_col_big5hkscs ??=
        _dylib.lookupFunction<_c_byte_col_big5hkscs, _dart_byte_col_big5hkscs>(
            'byte_col_big5hkscs');
    return _byte_col_big5hkscs(
      byte,
    );
  }

  _dart_byte_col_big5hkscs _byte_col_big5hkscs;

  void do_big5hkscs(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_big5hkscs ??= _dylib
        .lookupFunction<_c_do_big5hkscs, _dart_do_big5hkscs>('do_big5hkscs');
    return _do_big5hkscs(
      name,
    );
  }

  _dart_do_big5hkscs _do_big5hkscs;

  int row_byte_johab_hangul(
    int row,
  ) {
    _row_byte_johab_hangul ??= _dylib.lookupFunction<_c_row_byte_johab_hangul,
        _dart_row_byte_johab_hangul>('row_byte_johab_hangul');
    return _row_byte_johab_hangul(
      row,
    );
  }

  _dart_row_byte_johab_hangul _row_byte_johab_hangul;

  int col_byte_johab_hangul(
    int col,
  ) {
    _col_byte_johab_hangul ??= _dylib.lookupFunction<_c_col_byte_johab_hangul,
        _dart_col_byte_johab_hangul>('col_byte_johab_hangul');
    return _col_byte_johab_hangul(
      col,
    );
  }

  _dart_col_byte_johab_hangul _col_byte_johab_hangul;

  int byte_row_johab_hangul(
    int byte,
  ) {
    _byte_row_johab_hangul ??= _dylib.lookupFunction<_c_byte_row_johab_hangul,
        _dart_byte_row_johab_hangul>('byte_row_johab_hangul');
    return _byte_row_johab_hangul(
      byte,
    );
  }

  _dart_byte_row_johab_hangul _byte_row_johab_hangul;

  int byte_col_johab_hangul(
    int byte,
  ) {
    _byte_col_johab_hangul ??= _dylib.lookupFunction<_c_byte_col_johab_hangul,
        _dart_byte_col_johab_hangul>('byte_col_johab_hangul');
    return _byte_col_johab_hangul(
      byte,
    );
  }

  _dart_byte_col_johab_hangul _byte_col_johab_hangul;

  void do_johab_hangul(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_johab_hangul ??=
        _dylib.lookupFunction<_c_do_johab_hangul, _dart_do_johab_hangul>(
            'do_johab_hangul');
    return _do_johab_hangul(
      name,
    );
  }

  _dart_do_johab_hangul _do_johab_hangul;

  int row_byte_sjis(
    int row,
  ) {
    _row_byte_sjis ??= _dylib
        .lookupFunction<_c_row_byte_sjis, _dart_row_byte_sjis>('row_byte_sjis');
    return _row_byte_sjis(
      row,
    );
  }

  _dart_row_byte_sjis _row_byte_sjis;

  int col_byte_sjis(
    int col,
  ) {
    _col_byte_sjis ??= _dylib
        .lookupFunction<_c_col_byte_sjis, _dart_col_byte_sjis>('col_byte_sjis');
    return _col_byte_sjis(
      col,
    );
  }

  _dart_col_byte_sjis _col_byte_sjis;

  int byte_row_sjis(
    int byte,
  ) {
    _byte_row_sjis ??= _dylib
        .lookupFunction<_c_byte_row_sjis, _dart_byte_row_sjis>('byte_row_sjis');
    return _byte_row_sjis(
      byte,
    );
  }

  _dart_byte_row_sjis _byte_row_sjis;

  int byte_col_sjis(
    int byte,
  ) {
    _byte_col_sjis ??= _dylib
        .lookupFunction<_c_byte_col_sjis, _dart_byte_col_sjis>('byte_col_sjis');
    return _byte_col_sjis(
      byte,
    );
  }

  _dart_byte_col_sjis _byte_col_sjis;

  void do_sjis(
    ffi.Pointer<ffi.Int8> name,
  ) {
    _do_sjis ??= _dylib.lookupFunction<_c_do_sjis, _dart_do_sjis>('do_sjis');
    return _do_sjis(
      name,
    );
  }

  _dart_do_sjis _do_sjis;

  int cp1133_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _cp1133_mbtowc ??= _dylib
        .lookupFunction<_c_cp1133_mbtowc, _dart_cp1133_mbtowc>('cp1133_mbtowc');
    return _cp1133_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_cp1133_mbtowc _cp1133_mbtowc;

  int cp1133_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _cp1133_wctomb ??= _dylib
        .lookupFunction<_c_cp1133_wctomb, _dart_cp1133_wctomb>('cp1133_wctomb');
    return _cp1133_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_cp1133_wctomb _cp1133_wctomb;

  int cp1251_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _cp1251_mbtowc ??= _dylib
        .lookupFunction<_c_cp1251_mbtowc, _dart_cp1251_mbtowc>('cp1251_mbtowc');
    return _cp1251_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_cp1251_mbtowc _cp1251_mbtowc;

  int cp1251_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _cp1251_wctomb ??= _dylib
        .lookupFunction<_c_cp1251_wctomb, _dart_cp1251_wctomb>('cp1251_wctomb');
    return _cp1251_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_cp1251_wctomb _cp1251_wctomb;

  int cp1255_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _cp1255_mbtowc ??= _dylib
        .lookupFunction<_c_cp1255_mbtowc, _dart_cp1255_mbtowc>('cp1255_mbtowc');
    return _cp1255_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_cp1255_mbtowc _cp1255_mbtowc;

  int cp1255_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _cp1255_wctomb ??= _dylib
        .lookupFunction<_c_cp1255_wctomb, _dart_cp1255_wctomb>('cp1255_wctomb');
    return _cp1255_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_cp1255_wctomb _cp1255_wctomb;

  int cp1256_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _cp1256_mbtowc ??= _dylib
        .lookupFunction<_c_cp1256_mbtowc, _dart_cp1256_mbtowc>('cp1256_mbtowc');
    return _cp1256_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_cp1256_mbtowc _cp1256_mbtowc;

  int cp1256_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _cp1256_wctomb ??= _dylib
        .lookupFunction<_c_cp1256_wctomb, _dart_cp1256_wctomb>('cp1256_wctomb');
    return _cp1256_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_cp1256_wctomb _cp1256_wctomb;

  int gb2312_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _gb2312_mbtowc ??= _dylib
        .lookupFunction<_c_gb2312_mbtowc, _dart_gb2312_mbtowc>('gb2312_mbtowc');
    return _gb2312_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_gb2312_mbtowc _gb2312_mbtowc;

  int gb2312_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _gb2312_wctomb ??= _dylib
        .lookupFunction<_c_gb2312_wctomb, _dart_gb2312_wctomb>('gb2312_wctomb');
    return _gb2312_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_gb2312_wctomb _gb2312_wctomb;

  int gbk_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _gbk_mbtowc ??=
        _dylib.lookupFunction<_c_gbk_mbtowc, _dart_gbk_mbtowc>('gbk_mbtowc');
    return _gbk_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_gbk_mbtowc _gbk_mbtowc;

  int gbk_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _gbk_wctomb ??=
        _dylib.lookupFunction<_c_gbk_wctomb, _dart_gbk_wctomb>('gbk_wctomb');
    return _gbk_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_gbk_wctomb _gbk_wctomb;

  int georgian_academy_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _georgian_academy_mbtowc ??= _dylib.lookupFunction<
        _c_georgian_academy_mbtowc,
        _dart_georgian_academy_mbtowc>('georgian_academy_mbtowc');
    return _georgian_academy_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_georgian_academy_mbtowc _georgian_academy_mbtowc;

  int georgian_academy_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _georgian_academy_wctomb ??= _dylib.lookupFunction<
        _c_georgian_academy_wctomb,
        _dart_georgian_academy_wctomb>('georgian_academy_wctomb');
    return _georgian_academy_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_georgian_academy_wctomb _georgian_academy_wctomb;

  int georgian_ps_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _georgian_ps_mbtowc ??=
        _dylib.lookupFunction<_c_georgian_ps_mbtowc, _dart_georgian_ps_mbtowc>(
            'georgian_ps_mbtowc');
    return _georgian_ps_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_georgian_ps_mbtowc _georgian_ps_mbtowc;

  int georgian_ps_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _georgian_ps_wctomb ??=
        _dylib.lookupFunction<_c_georgian_ps_wctomb, _dart_georgian_ps_wctomb>(
            'georgian_ps_wctomb');
    return _georgian_ps_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_georgian_ps_wctomb _georgian_ps_wctomb;

  int iso8859_1_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_1_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_1_mbtowc, _dart_iso8859_1_mbtowc>(
            'iso8859_1_mbtowc');
    return _iso8859_1_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_1_mbtowc _iso8859_1_mbtowc;

  int iso8859_1_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_1_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_1_wctomb, _dart_iso8859_1_wctomb>(
            'iso8859_1_wctomb');
    return _iso8859_1_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_1_wctomb _iso8859_1_wctomb;

  int iso8859_10_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_10_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_10_mbtowc, _dart_iso8859_10_mbtowc>(
            'iso8859_10_mbtowc');
    return _iso8859_10_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_10_mbtowc _iso8859_10_mbtowc;

  int iso8859_10_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_10_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_10_wctomb, _dart_iso8859_10_wctomb>(
            'iso8859_10_wctomb');
    return _iso8859_10_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_10_wctomb _iso8859_10_wctomb;

  int iso8859_11_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_11_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_11_mbtowc, _dart_iso8859_11_mbtowc>(
            'iso8859_11_mbtowc');
    return _iso8859_11_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_11_mbtowc _iso8859_11_mbtowc;

  int iso8859_11_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_11_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_11_wctomb, _dart_iso8859_11_wctomb>(
            'iso8859_11_wctomb');
    return _iso8859_11_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_11_wctomb _iso8859_11_wctomb;

  int iso8859_13_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_13_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_13_mbtowc, _dart_iso8859_13_mbtowc>(
            'iso8859_13_mbtowc');
    return _iso8859_13_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_13_mbtowc _iso8859_13_mbtowc;

  int iso8859_13_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_13_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_13_wctomb, _dart_iso8859_13_wctomb>(
            'iso8859_13_wctomb');
    return _iso8859_13_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_13_wctomb _iso8859_13_wctomb;

  int iso8859_14_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_14_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_14_mbtowc, _dart_iso8859_14_mbtowc>(
            'iso8859_14_mbtowc');
    return _iso8859_14_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_14_mbtowc _iso8859_14_mbtowc;

  int iso8859_14_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_14_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_14_wctomb, _dart_iso8859_14_wctomb>(
            'iso8859_14_wctomb');
    return _iso8859_14_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_14_wctomb _iso8859_14_wctomb;

  int iso8859_15_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_15_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_15_mbtowc, _dart_iso8859_15_mbtowc>(
            'iso8859_15_mbtowc');
    return _iso8859_15_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_15_mbtowc _iso8859_15_mbtowc;

  int iso8859_15_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_15_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_15_wctomb, _dart_iso8859_15_wctomb>(
            'iso8859_15_wctomb');
    return _iso8859_15_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_15_wctomb _iso8859_15_wctomb;

  int iso8859_16_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_16_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_16_mbtowc, _dart_iso8859_16_mbtowc>(
            'iso8859_16_mbtowc');
    return _iso8859_16_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_16_mbtowc _iso8859_16_mbtowc;

  int iso8859_16_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_16_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_16_wctomb, _dart_iso8859_16_wctomb>(
            'iso8859_16_wctomb');
    return _iso8859_16_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_16_wctomb _iso8859_16_wctomb;

  int iso8859_2_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_2_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_2_mbtowc, _dart_iso8859_2_mbtowc>(
            'iso8859_2_mbtowc');
    return _iso8859_2_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_2_mbtowc _iso8859_2_mbtowc;

  int iso8859_2_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_2_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_2_wctomb, _dart_iso8859_2_wctomb>(
            'iso8859_2_wctomb');
    return _iso8859_2_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_2_wctomb _iso8859_2_wctomb;

  int iso8859_3_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_3_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_3_mbtowc, _dart_iso8859_3_mbtowc>(
            'iso8859_3_mbtowc');
    return _iso8859_3_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_3_mbtowc _iso8859_3_mbtowc;

  int iso8859_3_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_3_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_3_wctomb, _dart_iso8859_3_wctomb>(
            'iso8859_3_wctomb');
    return _iso8859_3_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_3_wctomb _iso8859_3_wctomb;

  int iso8859_4_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_4_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_4_mbtowc, _dart_iso8859_4_mbtowc>(
            'iso8859_4_mbtowc');
    return _iso8859_4_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_4_mbtowc _iso8859_4_mbtowc;

  int iso8859_4_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_4_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_4_wctomb, _dart_iso8859_4_wctomb>(
            'iso8859_4_wctomb');
    return _iso8859_4_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_4_wctomb _iso8859_4_wctomb;

  int iso8859_5_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_5_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_5_mbtowc, _dart_iso8859_5_mbtowc>(
            'iso8859_5_mbtowc');
    return _iso8859_5_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_5_mbtowc _iso8859_5_mbtowc;

  int iso8859_5_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_5_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_5_wctomb, _dart_iso8859_5_wctomb>(
            'iso8859_5_wctomb');
    return _iso8859_5_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_5_wctomb _iso8859_5_wctomb;

  int iso8859_6_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_6_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_6_mbtowc, _dart_iso8859_6_mbtowc>(
            'iso8859_6_mbtowc');
    return _iso8859_6_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_6_mbtowc _iso8859_6_mbtowc;

  int iso8859_6_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_6_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_6_wctomb, _dart_iso8859_6_wctomb>(
            'iso8859_6_wctomb');
    return _iso8859_6_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_6_wctomb _iso8859_6_wctomb;

  int iso8859_7_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_7_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_7_mbtowc, _dart_iso8859_7_mbtowc>(
            'iso8859_7_mbtowc');
    return _iso8859_7_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_7_mbtowc _iso8859_7_mbtowc;

  int iso8859_7_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_7_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_7_wctomb, _dart_iso8859_7_wctomb>(
            'iso8859_7_wctomb');
    return _iso8859_7_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_7_wctomb _iso8859_7_wctomb;

  int iso8859_8_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_8_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_8_mbtowc, _dart_iso8859_8_mbtowc>(
            'iso8859_8_mbtowc');
    return _iso8859_8_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_8_mbtowc _iso8859_8_mbtowc;

  int iso8859_8_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_8_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_8_wctomb, _dart_iso8859_8_wctomb>(
            'iso8859_8_wctomb');
    return _iso8859_8_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_8_wctomb _iso8859_8_wctomb;

  int iso8859_9_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_9_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_9_mbtowc, _dart_iso8859_9_mbtowc>(
            'iso8859_9_mbtowc');
    return _iso8859_9_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_9_mbtowc _iso8859_9_mbtowc;

  int iso8859_9_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_9_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_9_wctomb, _dart_iso8859_9_wctomb>(
            'iso8859_9_wctomb');
    return _iso8859_9_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_9_wctomb _iso8859_9_wctomb;

  int iso8859_9e_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _iso8859_9e_mbtowc ??=
        _dylib.lookupFunction<_c_iso8859_9e_mbtowc, _dart_iso8859_9e_mbtowc>(
            'iso8859_9e_mbtowc');
    return _iso8859_9e_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_iso8859_9e_mbtowc _iso8859_9e_mbtowc;

  int iso8859_9e_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _iso8859_9e_wctomb ??=
        _dylib.lookupFunction<_c_iso8859_9e_wctomb, _dart_iso8859_9e_wctomb>(
            'iso8859_9e_wctomb');
    return _iso8859_9e_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_iso8859_9e_wctomb _iso8859_9e_wctomb;

  int jisx0201_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _jisx0201_mbtowc ??=
        _dylib.lookupFunction<_c_jisx0201_mbtowc, _dart_jisx0201_mbtowc>(
            'jisx0201_mbtowc');
    return _jisx0201_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_jisx0201_mbtowc _jisx0201_mbtowc;

  int jisx0201_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _jisx0201_wctomb ??=
        _dylib.lookupFunction<_c_jisx0201_wctomb, _dart_jisx0201_wctomb>(
            'jisx0201_wctomb');
    return _jisx0201_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_jisx0201_wctomb _jisx0201_wctomb;

  int jisx0208_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _jisx0208_mbtowc ??=
        _dylib.lookupFunction<_c_jisx0208_mbtowc, _dart_jisx0208_mbtowc>(
            'jisx0208_mbtowc');
    return _jisx0208_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_jisx0208_mbtowc _jisx0208_mbtowc;

  int jisx0208_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _jisx0208_wctomb ??=
        _dylib.lookupFunction<_c_jisx0208_wctomb, _dart_jisx0208_wctomb>(
            'jisx0208_wctomb');
    return _jisx0208_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_jisx0208_wctomb _jisx0208_wctomb;

  int jisx0212_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _jisx0212_mbtowc ??=
        _dylib.lookupFunction<_c_jisx0212_mbtowc, _dart_jisx0212_mbtowc>(
            'jisx0212_mbtowc');
    return _jisx0212_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_jisx0212_mbtowc _jisx0212_mbtowc;

  int jisx0212_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _jisx0212_wctomb ??=
        _dylib.lookupFunction<_c_jisx0212_wctomb, _dart_jisx0212_wctomb>(
            'jisx0212_wctomb');
    return _jisx0212_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_jisx0212_wctomb _jisx0212_wctomb;

  int koi8_c_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _koi8_c_mbtowc ??= _dylib
        .lookupFunction<_c_koi8_c_mbtowc, _dart_koi8_c_mbtowc>('koi8_c_mbtowc');
    return _koi8_c_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_koi8_c_mbtowc _koi8_c_mbtowc;

  int koi8_c_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _koi8_c_wctomb ??= _dylib
        .lookupFunction<_c_koi8_c_wctomb, _dart_koi8_c_wctomb>('koi8_c_wctomb');
    return _koi8_c_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_koi8_c_wctomb _koi8_c_wctomb;

  int koi8_r_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _koi8_r_mbtowc ??= _dylib
        .lookupFunction<_c_koi8_r_mbtowc, _dart_koi8_r_mbtowc>('koi8_r_mbtowc');
    return _koi8_r_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_koi8_r_mbtowc _koi8_r_mbtowc;

  int koi8_r_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _koi8_r_wctomb ??= _dylib
        .lookupFunction<_c_koi8_r_wctomb, _dart_koi8_r_wctomb>('koi8_r_wctomb');
    return _koi8_r_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_koi8_r_wctomb _koi8_r_wctomb;

  int koi8_u_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _koi8_u_mbtowc ??= _dylib
        .lookupFunction<_c_koi8_u_mbtowc, _dart_koi8_u_mbtowc>('koi8_u_mbtowc');
    return _koi8_u_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_koi8_u_mbtowc _koi8_u_mbtowc;

  int koi8_u_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _koi8_u_wctomb ??= _dylib
        .lookupFunction<_c_koi8_u_wctomb, _dart_koi8_u_wctomb>('koi8_u_wctomb');
    return _koi8_u_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_koi8_u_wctomb _koi8_u_wctomb;

  int ksc5601_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _ksc5601_mbtowc ??=
        _dylib.lookupFunction<_c_ksc5601_mbtowc, _dart_ksc5601_mbtowc>(
            'ksc5601_mbtowc');
    return _ksc5601_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_ksc5601_mbtowc _ksc5601_mbtowc;

  int ksc5601_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _ksc5601_wctomb ??=
        _dylib.lookupFunction<_c_ksc5601_wctomb, _dart_ksc5601_wctomb>(
            'ksc5601_wctomb');
    return _ksc5601_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_ksc5601_wctomb _ksc5601_wctomb;

  int mulelao_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _mulelao_mbtowc ??=
        _dylib.lookupFunction<_c_mulelao_mbtowc, _dart_mulelao_mbtowc>(
            'mulelao_mbtowc');
    return _mulelao_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_mulelao_mbtowc _mulelao_mbtowc;

  int mulelao_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _mulelao_wctomb ??=
        _dylib.lookupFunction<_c_mulelao_wctomb, _dart_mulelao_wctomb>(
            'mulelao_wctomb');
    return _mulelao_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_mulelao_wctomb _mulelao_wctomb;

  int tatar_cyr_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _tatar_cyr_mbtowc ??=
        _dylib.lookupFunction<_c_tatar_cyr_mbtowc, _dart_tatar_cyr_mbtowc>(
            'tatar_cyr_mbtowc');
    return _tatar_cyr_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_tatar_cyr_mbtowc _tatar_cyr_mbtowc;

  int tatar_cyr_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _tatar_cyr_wctomb ??=
        _dylib.lookupFunction<_c_tatar_cyr_wctomb, _dart_tatar_cyr_wctomb>(
            'tatar_cyr_wctomb');
    return _tatar_cyr_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_tatar_cyr_wctomb _tatar_cyr_wctomb;

  int tcvn_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _tcvn_mbtowc ??=
        _dylib.lookupFunction<_c_tcvn_mbtowc, _dart_tcvn_mbtowc>('tcvn_mbtowc');
    return _tcvn_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_tcvn_mbtowc _tcvn_mbtowc;

  int tcvn_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _tcvn_wctomb ??=
        _dylib.lookupFunction<_c_tcvn_wctomb, _dart_tcvn_wctomb>('tcvn_wctomb');
    return _tcvn_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_tcvn_wctomb _tcvn_wctomb;

  int tis620_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _tis620_mbtowc ??= _dylib
        .lookupFunction<_c_tis620_mbtowc, _dart_tis620_mbtowc>('tis620_mbtowc');
    return _tis620_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_tis620_mbtowc _tis620_mbtowc;

  int tis620_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _tis620_wctomb ??= _dylib
        .lookupFunction<_c_tis620_wctomb, _dart_tis620_wctomb>('tis620_wctomb');
    return _tis620_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_tis620_wctomb _tis620_wctomb;

  int ucs2be_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _ucs2be_mbtowc ??= _dylib
        .lookupFunction<_c_ucs2be_mbtowc, _dart_ucs2be_mbtowc>('ucs2be_mbtowc');
    return _ucs2be_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_ucs2be_mbtowc _ucs2be_mbtowc;

  int ucs2be_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _ucs2be_wctomb ??= _dylib
        .lookupFunction<_c_ucs2be_wctomb, _dart_ucs2be_wctomb>('ucs2be_wctomb');
    return _ucs2be_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_ucs2be_wctomb _ucs2be_wctomb;

  int utf8_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _utf8_mbtowc ??=
        _dylib.lookupFunction<_c_utf8_mbtowc, _dart_utf8_mbtowc>('utf8_mbtowc');
    return _utf8_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_utf8_mbtowc _utf8_mbtowc;

  int utf8_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _utf8_wctomb ??=
        _dylib.lookupFunction<_c_utf8_wctomb, _dart_utf8_wctomb>('utf8_wctomb');
    return _utf8_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_utf8_wctomb _utf8_wctomb;

  int viscii_mbtowc(
    int conv,
    ffi.Pointer<ffi.Int32> pwc,
    ffi.Pointer<ffi.Uint8> s,
    int n,
  ) {
    _viscii_mbtowc ??= _dylib
        .lookupFunction<_c_viscii_mbtowc, _dart_viscii_mbtowc>('viscii_mbtowc');
    return _viscii_mbtowc(
      conv,
      pwc,
      s,
      n,
    );
  }

  _dart_viscii_mbtowc _viscii_mbtowc;

  int viscii_wctomb(
    int conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _viscii_wctomb ??= _dylib
        .lookupFunction<_c_viscii_wctomb, _dart_viscii_wctomb>('viscii_wctomb');
    return _viscii_wctomb(
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_viscii_wctomb _viscii_wctomb;

  ffi.Pointer<XlcConvRec> create_conv_3(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<XlcConvMethods> methods,
  ) {
    _create_conv_3 ??= _dylib
        .lookupFunction<_c_create_conv_3, _dart_create_conv_3>('create_conv');
    return _create_conv_3(
      lcd,
      methods,
    );
  }

  _dart_create_conv_3 _create_conv_3;

  void close_converter_4(
    ffi.Pointer<XlcConvRec> conv,
  ) {
    _close_converter_4 ??=
        _dylib.lookupFunction<_c_close_converter_4, _dart_close_converter_4>(
            'close_converter');
    return _close_converter_4(
      conv,
    );
  }

  _dart_close_converter_4 _close_converter_4;

  void init_all_charsets() {
    _init_all_charsets ??=
        _dylib.lookupFunction<_c_init_all_charsets, _dart_init_all_charsets>(
            'init_all_charsets');
    return _init_all_charsets();
  }

  _dart_init_all_charsets _init_all_charsets;

  int cstoutf8(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _cstoutf8 ??=
        _dylib.lookupFunction<_c_cstoutf8, _dart_cstoutf8>('cstoutf8');
    return _cstoutf8(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cstoutf8 _cstoutf8;

  ffi.Pointer<XlcConvRec> open_cstoutf8(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cstoutf8 ??= _dylib
        .lookupFunction<_c_open_cstoutf8, _dart_open_cstoutf8>('open_cstoutf8');
    return _open_cstoutf8(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cstoutf8 _open_cstoutf8;

  ffi.Pointer<XlcConvRec> create_tocs_conv(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<XlcConvMethods> methods,
  ) {
    _create_tocs_conv ??=
        _dylib.lookupFunction<_c_create_tocs_conv, _dart_create_tocs_conv>(
            'create_tocs_conv');
    return _create_tocs_conv(
      lcd,
      methods,
    );
  }

  _dart_create_tocs_conv _create_tocs_conv;

  void close_tocs_converter(
    ffi.Pointer<XlcConvRec> conv,
  ) {
    _close_tocs_converter ??= _dylib.lookupFunction<_c_close_tocs_converter,
        _dart_close_tocs_converter>('close_tocs_converter');
    return _close_tocs_converter(
      conv,
    );
  }

  _dart_close_tocs_converter _close_tocs_converter;

  int charset_wctocs(
    ffi.Pointer<ffi.Pointer<Utf8Conv>> preferred,
    ffi.Pointer<ffi.Pointer<Utf8Conv>> charsetp,
    ffi.Pointer<ffi.Int32> sidep,
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _charset_wctocs ??=
        _dylib.lookupFunction<_c_charset_wctocs, _dart_charset_wctocs>(
            'charset_wctocs');
    return _charset_wctocs(
      preferred,
      charsetp,
      sidep,
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_charset_wctocs _charset_wctocs;

  int utf8tocs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _utf8tocs ??=
        _dylib.lookupFunction<_c_utf8tocs, _dart_utf8tocs>('utf8tocs');
    return _utf8tocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_utf8tocs _utf8tocs;

  ffi.Pointer<XlcConvRec> open_utf8tocs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_utf8tocs ??= _dylib
        .lookupFunction<_c_open_utf8tocs, _dart_open_utf8tocs>('open_utf8tocs');
    return _open_utf8tocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_utf8tocs _open_utf8tocs;

  int utf8tocs1(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _utf8tocs1 ??=
        _dylib.lookupFunction<_c_utf8tocs1, _dart_utf8tocs1>('utf8tocs1');
    return _utf8tocs1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_utf8tocs1 _utf8tocs1;

  ffi.Pointer<XlcConvRec> open_utf8tocs1(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_utf8tocs1 ??=
        _dylib.lookupFunction<_c_open_utf8tocs1, _dart_open_utf8tocs1>(
            'open_utf8tocs1');
    return _open_utf8tocs1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_utf8tocs1 _open_utf8tocs1;

  int utf8tostr(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _utf8tostr ??=
        _dylib.lookupFunction<_c_utf8tostr, _dart_utf8tostr>('utf8tostr');
    return _utf8tostr(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_utf8tostr _utf8tostr;

  ffi.Pointer<XlcConvRec> open_utf8tostr(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_utf8tostr ??=
        _dylib.lookupFunction<_c_open_utf8tostr, _dart_open_utf8tostr>(
            'open_utf8tostr');
    return _open_utf8tostr(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_utf8tostr _open_utf8tostr;

  int strtoutf8(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _strtoutf8 ??=
        _dylib.lookupFunction<_c_strtoutf8, _dart_strtoutf8>('strtoutf8');
    return _strtoutf8(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_strtoutf8 _strtoutf8;

  ffi.Pointer<XlcConvRec> open_strtoutf8(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_strtoutf8 ??=
        _dylib.lookupFunction<_c_open_strtoutf8, _dart_open_strtoutf8>(
            'open_strtoutf8');
    return _open_strtoutf8(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_strtoutf8 _open_strtoutf8;

  ffi.Pointer<XlcConvRec> create_ucstocs_conv(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<XlcConvMethods> methods,
  ) {
    _create_ucstocs_conv ??= _dylib.lookupFunction<_c_create_ucstocs_conv,
        _dart_create_ucstocs_conv>('create_ucstocs_conv');
    return _create_ucstocs_conv(
      lcd,
      methods,
    );
  }

  _dart_create_ucstocs_conv _create_ucstocs_conv;

  int charset_wctocs_exactly(
    ffi.Pointer<ffi.Pointer<Utf8Conv>> preferred,
    ffi.Pointer<ffi.Pointer<Utf8Conv>> charsetp,
    ffi.Pointer<ffi.Int32> sidep,
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Uint8> r,
    int wc,
    int n,
  ) {
    _charset_wctocs_exactly ??= _dylib.lookupFunction<_c_charset_wctocs_exactly,
        _dart_charset_wctocs_exactly>('charset_wctocs_exactly');
    return _charset_wctocs_exactly(
      preferred,
      charsetp,
      sidep,
      conv,
      r,
      wc,
      n,
    );
  }

  _dart_charset_wctocs_exactly _charset_wctocs_exactly;

  int ucstocs1(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _ucstocs1 ??=
        _dylib.lookupFunction<_c_ucstocs1, _dart_ucstocs1>('ucstocs1');
    return _ucstocs1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_ucstocs1 _ucstocs1;

  ffi.Pointer<XlcConvRec> open_ucstocs1(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_ucstocs1 ??= _dylib
        .lookupFunction<_c_open_ucstocs1, _dart_open_ucstocs1>('open_ucstocs1');
    return _open_ucstocs1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_ucstocs1 _open_ucstocs1;

  int ucstoutf8(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _ucstoutf8 ??=
        _dylib.lookupFunction<_c_ucstoutf8, _dart_ucstoutf8>('ucstoutf8');
    return _ucstoutf8(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_ucstoutf8 _ucstoutf8;

  ffi.Pointer<XlcConvRec> open_ucstoutf8(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_ucstoutf8 ??=
        _dylib.lookupFunction<_c_open_ucstoutf8, _dart_open_ucstoutf8>(
            'open_ucstoutf8');
    return _open_ucstoutf8(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_ucstoutf8 _open_ucstoutf8;

  ///
  int utf8towcs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _utf8towcs ??=
        _dylib.lookupFunction<_c_utf8towcs, _dart_utf8towcs>('utf8towcs');
    return _utf8towcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_utf8towcs _utf8towcs;

  ffi.Pointer<XlcConvRec> open_utf8towcs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_utf8towcs ??=
        _dylib.lookupFunction<_c_open_utf8towcs, _dart_open_utf8towcs>(
            'open_utf8towcs');
    return _open_utf8towcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_utf8towcs _open_utf8towcs;

  int wcstoutf8(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _wcstoutf8 ??=
        _dylib.lookupFunction<_c_wcstoutf8, _dart_wcstoutf8>('wcstoutf8');
    return _wcstoutf8(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstoutf8 _wcstoutf8;

  ffi.Pointer<XlcConvRec> open_wcstoutf8(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstoutf8 ??=
        _dylib.lookupFunction<_c_open_wcstoutf8, _dart_open_wcstoutf8>(
            'open_wcstoutf8');
    return _open_wcstoutf8(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstoutf8 _open_wcstoutf8;

  int our_strtowcs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _our_strtowcs ??= _dylib
        .lookupFunction<_c_our_strtowcs, _dart_our_strtowcs>('our_strtowcs');
    return _our_strtowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_our_strtowcs _our_strtowcs;

  ffi.Pointer<XlcConvRec> open_strtowcs_1(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_strtowcs_1 ??=
        _dylib.lookupFunction<_c_open_strtowcs_1, _dart_open_strtowcs_1>(
            'open_strtowcs');
    return _open_strtowcs_1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_strtowcs_1 _open_strtowcs_1;

  int our_wcstostr(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _our_wcstostr ??= _dylib
        .lookupFunction<_c_our_wcstostr, _dart_our_wcstostr>('our_wcstostr');
    return _our_wcstostr(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_our_wcstostr _our_wcstostr;

  ffi.Pointer<XlcConvRec> open_wcstostr_2(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstostr_2 ??=
        _dylib.lookupFunction<_c_open_wcstostr_2, _dart_open_wcstostr_2>(
            'open_wcstostr');
    return _open_wcstostr_2(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstostr_2 _open_wcstostr_2;

  int cstowcs_2(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _cstowcs_2 ??=
        _dylib.lookupFunction<_c_cstowcs_2, _dart_cstowcs_2>('cstowcs');
    return _cstowcs_2(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_cstowcs_2 _cstowcs_2;

  ffi.Pointer<XlcConvRec> open_cstowcs_2(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_cstowcs_2 ??=
        _dylib.lookupFunction<_c_open_cstowcs_2, _dart_open_cstowcs_2>(
            'open_cstowcs');
    return _open_cstowcs_2(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_cstowcs_2 _open_cstowcs_2;

  int wcstocs_2(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _wcstocs_2 ??=
        _dylib.lookupFunction<_c_wcstocs_2, _dart_wcstocs_2>('wcstocs');
    return _wcstocs_2(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstocs_2 _wcstocs_2;

  ffi.Pointer<XlcConvRec> open_wcstocs_2(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstocs_2 ??=
        _dylib.lookupFunction<_c_open_wcstocs_2, _dart_open_wcstocs_2>(
            'open_wcstocs');
    return _open_wcstocs_2(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstocs_2 _open_wcstocs_2;

  int wcstocs1(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _wcstocs1 ??=
        _dylib.lookupFunction<_c_wcstocs1, _dart_wcstocs1>('wcstocs1');
    return _wcstocs1(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_wcstocs1 _wcstocs1;

  ffi.Pointer<XlcConvRec> open_wcstocs1(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstocs1 ??= _dylib
        .lookupFunction<_c_open_wcstocs1, _dart_open_wcstocs1>('open_wcstocs1');
    return _open_wcstocs1(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstocs1 _open_wcstocs1;

  int identity(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _identity ??=
        _dylib.lookupFunction<_c_identity, _dart_identity>('identity');
    return _identity(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_identity _identity;

  ffi.Pointer<XlcConvRec> open_identity(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_identity ??= _dylib
        .lookupFunction<_c_open_identity, _dart_open_identity>('open_identity');
    return _open_identity(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_identity _open_identity;

  ffi.Pointer<XlcConvRec> create_tofontcs_conv(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<XlcConvMethods> methods,
  ) {
    _create_tofontcs_conv ??= _dylib.lookupFunction<_c_create_tofontcs_conv,
        _dart_create_tofontcs_conv>('create_tofontcs_conv');
    return _create_tofontcs_conv(
      lcd,
      methods,
    );
  }

  _dart_create_tofontcs_conv _create_tofontcs_conv;

  ffi.Pointer<XlcConvRec> open_wcstofcs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_wcstofcs ??= _dylib
        .lookupFunction<_c_open_wcstofcs, _dart_open_wcstofcs>('open_wcstofcs');
    return _open_wcstofcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_wcstofcs _open_wcstofcs;

  ffi.Pointer<XlcConvRec> open_utf8tofcs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_utf8tofcs ??=
        _dylib.lookupFunction<_c_open_utf8tofcs, _dart_open_utf8tofcs>(
            'open_utf8tofcs');
    return _open_utf8tofcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_utf8tofcs _open_utf8tofcs;

  int iconv_cstombs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _iconv_cstombs ??= _dylib
        .lookupFunction<_c_iconv_cstombs, _dart_iconv_cstombs>('iconv_cstombs');
    return _iconv_cstombs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_iconv_cstombs _iconv_cstombs;

  ffi.Pointer<XlcConvRec> open_iconv_cstombs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_iconv_cstombs ??=
        _dylib.lookupFunction<_c_open_iconv_cstombs, _dart_open_iconv_cstombs>(
            'open_iconv_cstombs');
    return _open_iconv_cstombs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_iconv_cstombs _open_iconv_cstombs;

  int iconv_mbstocs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _iconv_mbstocs ??= _dylib
        .lookupFunction<_c_iconv_mbstocs, _dart_iconv_mbstocs>('iconv_mbstocs');
    return _iconv_mbstocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_iconv_mbstocs _iconv_mbstocs;

  ffi.Pointer<XlcConvRec> open_iconv_mbstocs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_iconv_mbstocs ??=
        _dylib.lookupFunction<_c_open_iconv_mbstocs, _dart_open_iconv_mbstocs>(
            'open_iconv_mbstocs');
    return _open_iconv_mbstocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_iconv_mbstocs _open_iconv_mbstocs;

  int iconv_mbtocs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _iconv_mbtocs ??= _dylib
        .lookupFunction<_c_iconv_mbtocs, _dart_iconv_mbtocs>('iconv_mbtocs');
    return _iconv_mbtocs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_iconv_mbtocs _iconv_mbtocs;

  ffi.Pointer<XlcConvRec> open_iconv_mbtocs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_iconv_mbtocs ??=
        _dylib.lookupFunction<_c_open_iconv_mbtocs, _dart_open_iconv_mbtocs>(
            'open_iconv_mbtocs');
    return _open_iconv_mbtocs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_iconv_mbtocs _open_iconv_mbtocs;

  int iconv_mbstostr(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _iconv_mbstostr ??=
        _dylib.lookupFunction<_c_iconv_mbstostr, _dart_iconv_mbstostr>(
            'iconv_mbstostr');
    return _iconv_mbstostr(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_iconv_mbstostr _iconv_mbstostr;

  ffi.Pointer<XlcConvRec> open_iconv_mbstostr(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_iconv_mbstostr ??= _dylib.lookupFunction<_c_open_iconv_mbstostr,
        _dart_open_iconv_mbstostr>('open_iconv_mbstostr');
    return _open_iconv_mbstostr(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_iconv_mbstostr _open_iconv_mbstostr;

  int iconv_strtombs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _iconv_strtombs ??=
        _dylib.lookupFunction<_c_iconv_strtombs, _dart_iconv_strtombs>(
            'iconv_strtombs');
    return _iconv_strtombs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_iconv_strtombs _iconv_strtombs;

  ffi.Pointer<XlcConvRec> open_iconv_strtombs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_iconv_strtombs ??= _dylib.lookupFunction<_c_open_iconv_strtombs,
        _dart_open_iconv_strtombs>('open_iconv_strtombs');
    return _open_iconv_strtombs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_iconv_strtombs _open_iconv_strtombs;

  ///
  int iconv_mbstowcs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _iconv_mbstowcs ??=
        _dylib.lookupFunction<_c_iconv_mbstowcs, _dart_iconv_mbstowcs>(
            'iconv_mbstowcs');
    return _iconv_mbstowcs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_iconv_mbstowcs _iconv_mbstowcs;

  ffi.Pointer<XlcConvRec> open_iconv_mbstowcs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_iconv_mbstowcs ??= _dylib.lookupFunction<_c_open_iconv_mbstowcs,
        _dart_open_iconv_mbstowcs>('open_iconv_mbstowcs');
    return _open_iconv_mbstowcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_iconv_mbstowcs _open_iconv_mbstowcs;

  int iconv_wcstombs(
    ffi.Pointer<XlcConvRec> conv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
    ffi.Pointer<ffi.Int32> from_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
    ffi.Pointer<ffi.Int32> to_left,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
    int num_args,
  ) {
    _iconv_wcstombs ??=
        _dylib.lookupFunction<_c_iconv_wcstombs, _dart_iconv_wcstombs>(
            'iconv_wcstombs');
    return _iconv_wcstombs(
      conv,
      from,
      from_left,
      to,
      to_left,
      args,
      num_args,
    );
  }

  _dart_iconv_wcstombs _iconv_wcstombs;

  ffi.Pointer<XlcConvRec> open_iconv_wcstombs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_iconv_wcstombs ??= _dylib.lookupFunction<_c_open_iconv_wcstombs,
        _dart_open_iconv_wcstombs>('open_iconv_wcstombs');
    return _open_iconv_wcstombs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_iconv_wcstombs _open_iconv_wcstombs;

  ffi.Pointer<XlcConvRec> open_iconv_mbstofcs(
    ffi.Pointer<XLCdRec> from_lcd,
    ffi.Pointer<ffi.Int8> from_type,
    ffi.Pointer<XLCdRec> to_lcd,
    ffi.Pointer<ffi.Int8> to_type,
  ) {
    _open_iconv_mbstofcs ??= _dylib.lookupFunction<_c_open_iconv_mbstofcs,
        _dart_open_iconv_mbstofcs>('open_iconv_mbstofcs');
    return _open_iconv_mbstofcs(
      from_lcd,
      from_type,
      to_lcd,
      to_type,
    );
  }

  _dart_open_iconv_mbstofcs _open_iconv_mbstofcs;

  int _CloseIM(
    ffi.Pointer<_XIM> arg0,
  ) {
    __CloseIM ??=
        _dylib.lookupFunction<_c__CloseIM, _dart__CloseIM>('_CloseIM');
    return __CloseIM(
      arg0,
    );
  }

  _dart__CloseIM __CloseIM;

  ffi.Pointer<ffi.Int8> _SetIMValues(
    ffi.Pointer<_XIM> arg0,
    ffi.Pointer<XIMArg> arg1,
  ) {
    __SetIMValues ??= _dylib
        .lookupFunction<_c__SetIMValues, _dart__SetIMValues>('_SetIMValues');
    return __SetIMValues(
      arg0,
      arg1,
    );
  }

  _dart__SetIMValues __SetIMValues;

  ffi.Pointer<ffi.Int8> _GetIMValues(
    ffi.Pointer<_XIM> arg0,
    ffi.Pointer<XIMArg> arg1,
  ) {
    __GetIMValues ??= _dylib
        .lookupFunction<_c__GetIMValues, _dart__GetIMValues>('_GetIMValues');
    return __GetIMValues(
      arg0,
      arg1,
    );
  }

  _dart__GetIMValues __GetIMValues;

  ffi.Pointer<_XIC> _CreateIC(
    ffi.Pointer<_XIM> arg0,
    ffi.Pointer<XIMArg> arg1,
  ) {
    __CreateIC ??=
        _dylib.lookupFunction<_c__CreateIC, _dart__CreateIC>('_CreateIC');
    return __CreateIC(
      arg0,
      arg1,
    );
  }

  _dart__CreateIC __CreateIC;

  void _DestroyIC(
    ffi.Pointer<_XIC> arg0,
  ) {
    __DestroyIC ??=
        _dylib.lookupFunction<_c__DestroyIC, _dart__DestroyIC>('_DestroyIC');
    return __DestroyIC(
      arg0,
    );
  }

  _dart__DestroyIC __DestroyIC;

  void _SetFocus(
    ffi.Pointer<_XIC> arg0,
  ) {
    __SetFocus ??=
        _dylib.lookupFunction<_c__SetFocus, _dart__SetFocus>('_SetFocus');
    return __SetFocus(
      arg0,
    );
  }

  _dart__SetFocus __SetFocus;

  void _UnsetFocus(
    ffi.Pointer<_XIC> arg0,
  ) {
    __UnsetFocus ??=
        _dylib.lookupFunction<_c__UnsetFocus, _dart__UnsetFocus>('_UnsetFocus');
    return __UnsetFocus(
      arg0,
    );
  }

  _dart__UnsetFocus __UnsetFocus;

  ffi.Pointer<ffi.Int8> _SetICValues(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XIMArg> arg1,
  ) {
    __SetICValues ??= _dylib
        .lookupFunction<_c__SetICValues, _dart__SetICValues>('_SetICValues');
    return __SetICValues(
      arg0,
      arg1,
    );
  }

  _dart__SetICValues __SetICValues;

  ffi.Pointer<ffi.Int8> _GetICValues(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XIMArg> arg1,
  ) {
    __GetICValues ??= _dylib
        .lookupFunction<_c__GetICValues, _dart__GetICValues>('_GetICValues');
    return __GetICValues(
      arg0,
      arg1,
    );
  }

  _dart__GetICValues __GetICValues;

  ffi.Pointer<ffi.Int8> _MbReset(
    ffi.Pointer<_XIC> arg0,
  ) {
    __MbReset ??=
        _dylib.lookupFunction<_c__MbReset, _dart__MbReset>('_MbReset');
    return __MbReset(
      arg0,
    );
  }

  _dart__MbReset __MbReset;

  ffi.Pointer<ffi.Int32> _WcReset(
    ffi.Pointer<_XIC> arg0,
  ) {
    __WcReset ??=
        _dylib.lookupFunction<_c__WcReset, _dart__WcReset>('_WcReset');
    return __WcReset(
      arg0,
    );
  }

  _dart__WcReset __WcReset;

  int _MbLookupString(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XKeyEvent> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    __MbLookupString ??=
        _dylib.lookupFunction<_c__MbLookupString, _dart__MbLookupString>(
            '_MbLookupString');
    return __MbLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart__MbLookupString __MbLookupString;

  int _WcLookupString(
    ffi.Pointer<_XIC> arg0,
    ffi.Pointer<XKeyEvent> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint64> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    __WcLookupString ??=
        _dylib.lookupFunction<_c__WcLookupString, _dart__WcLookupString>(
            '_WcLookupString');
    return __WcLookupString(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart__WcLookupString __WcLookupString;

  ffi.Pointer<ffi.Int8> _SetICValueData(
    ffi.Pointer<_XIC> ic,
    ffi.Pointer<XIMArg> values,
    int mode,
  ) {
    __SetICValueData ??=
        _dylib.lookupFunction<_c__SetICValueData, _dart__SetICValueData>(
            '_SetICValueData');
    return __SetICValueData(
      ic,
      values,
      mode,
    );
  }

  _dart__SetICValueData __SetICValueData;

  ffi.Pointer<ffi.Int8> _GetICValueData(
    ffi.Pointer<_XIC> ic,
    ffi.Pointer<XIMArg> values,
    int mode,
  ) {
    __GetICValueData ??=
        _dylib.lookupFunction<_c__GetICValueData, _dart__GetICValueData>(
            '_GetICValueData');
    return __GetICValueData(
      ic,
      values,
      mode,
    );
  }

  _dart__GetICValueData __GetICValueData;

  int init_fontset_1(
    ffi.Pointer<_XOC> oc,
  ) {
    _init_fontset_1 ??=
        _dylib.lookupFunction<_c_init_fontset_1, _dart_init_fontset_1>(
            'init_fontset');
    return _init_fontset_1(
      oc,
    );
  }

  _dart_init_fontset_1 _init_fontset_1;

  ffi.Pointer<ffi.Int8> get_prop_name_1(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XFontStruct> fs,
  ) {
    _get_prop_name_1 ??=
        _dylib.lookupFunction<_c_get_prop_name_1, _dart_get_prop_name_1>(
            'get_prop_name');
    return _get_prop_name_1(
      dpy,
      fs,
    );
  }

  _dart_get_prop_name_1 _get_prop_name_1;

  ffi.Pointer<FontData> check_charset(
    ffi.Pointer<FontSet> font_set,
    ffi.Pointer<ffi.Int8> font_name,
  ) {
    _check_charset ??= _dylib
        .lookupFunction<_c_check_charset, _dart_check_charset>('check_charset');
    return _check_charset(
      font_set,
      font_name,
    );
  }

  _dart_check_charset _check_charset;

  int load_font_2(
    ffi.Pointer<_XOC> oc,
  ) {
    _load_font_2 ??=
        _dylib.lookupFunction<_c_load_font_2, _dart_load_font_2>('load_font');
    return _load_font_2(
      oc,
    );
  }

  _dart_load_font_2 _load_font_2;

  void set_fontset_extents_1(
    ffi.Pointer<_XOC> oc,
  ) {
    _set_fontset_extents_1 ??= _dylib.lookupFunction<_c_set_fontset_extents_1,
        _dart_set_fontset_extents_1>('set_fontset_extents');
    return _set_fontset_extents_1(
      oc,
    );
  }

  _dart_set_fontset_extents_1 _set_fontset_extents_1;

  int init_core_part_1(
    ffi.Pointer<_XOC> oc,
  ) {
    _init_core_part_1 ??=
        _dylib.lookupFunction<_c_init_core_part_1, _dart_init_core_part_1>(
            'init_core_part');
    return _init_core_part_1(
      oc,
    );
  }

  _dart_init_core_part_1 _init_core_part_1;

  ffi.Pointer<ffi.Int8> get_font_name_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<ffi.Int8> pattern,
  ) {
    _get_font_name_1 ??=
        _dylib.lookupFunction<_c_get_font_name_1, _dart_get_font_name_1>(
            'get_font_name');
    return _get_font_name_1(
      oc,
      pattern,
    );
  }

  _dart_get_font_name_1 _get_font_name_1;

  int parse_fontname_1(
    ffi.Pointer<_XOC> oc,
  ) {
    _parse_fontname_1 ??=
        _dylib.lookupFunction<_c_parse_fontname_1, _dart_parse_fontname_1>(
            'parse_fontname');
    return _parse_fontname_1(
      oc,
    );
  }

  _dart_parse_fontname_1 _parse_fontname_1;

  int set_missing_list_1(
    ffi.Pointer<_XOC> oc,
  ) {
    _set_missing_list_1 ??=
        _dylib.lookupFunction<_c_set_missing_list_1, _dart_set_missing_list_1>(
            'set_missing_list');
    return _set_missing_list_1(
      oc,
    );
  }

  _dart_set_missing_list_1 _set_missing_list_1;

  int create_fontset_1(
    ffi.Pointer<_XOC> oc,
  ) {
    _create_fontset_1 ??=
        _dylib.lookupFunction<_c_create_fontset_1, _dart_create_fontset_1>(
            'create_fontset');
    return _create_fontset_1(
      oc,
    );
  }

  _dart_create_fontset_1 _create_fontset_1;

  void destroy_oc_1(
    ffi.Pointer<_XOC> oc,
  ) {
    _destroy_oc_1 ??= _dylib
        .lookupFunction<_c_destroy_oc_1, _dart_destroy_oc_1>('destroy_oc');
    return _destroy_oc_1(
      oc,
    );
  }

  _dart_destroy_oc_1 _destroy_oc_1;

  ffi.Pointer<ffi.Int8> set_oc_values_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<XlcArgList> args,
    int num_args,
  ) {
    _set_oc_values_1 ??=
        _dylib.lookupFunction<_c_set_oc_values_1, _dart_set_oc_values_1>(
            'set_oc_values');
    return _set_oc_values_1(
      oc,
      args,
      num_args,
    );
  }

  _dart_set_oc_values_1 _set_oc_values_1;

  ffi.Pointer<ffi.Int8> get_oc_values_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<XlcArgList> args,
    int num_args,
  ) {
    _get_oc_values_1 ??=
        _dylib.lookupFunction<_c_get_oc_values_1, _dart_get_oc_values_1>(
            'get_oc_values');
    return _get_oc_values_1(
      oc,
      args,
      num_args,
    );
  }

  _dart_get_oc_values_1 _get_oc_values_1;

  int wcs_to_mbs_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<ffi.Int8> to,
    ffi.Pointer<ffi.Int32> from,
    int length,
  ) {
    _wcs_to_mbs_1 ??= _dylib
        .lookupFunction<_c_wcs_to_mbs_1, _dart_wcs_to_mbs_1>('wcs_to_mbs');
    return _wcs_to_mbs_1(
      oc,
      to,
      from,
      length,
    );
  }

  _dart_wcs_to_mbs_1 _wcs_to_mbs_1;

  int _XmbDefaultTextEscapement_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<ffi.Int8> text,
    int length,
  ) {
    __XmbDefaultTextEscapement_1 ??= _dylib.lookupFunction<
        _c__XmbDefaultTextEscapement_1,
        _dart__XmbDefaultTextEscapement_1>('_XmbDefaultTextEscapement');
    return __XmbDefaultTextEscapement_1(
      oc,
      text,
      length,
    );
  }

  _dart__XmbDefaultTextEscapement_1 __XmbDefaultTextEscapement_1;

  int _XwcDefaultTextEscapement_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XwcDefaultTextEscapement_1 ??= _dylib.lookupFunction<
        _c__XwcDefaultTextEscapement_1,
        _dart__XwcDefaultTextEscapement_1>('_XwcDefaultTextEscapement');
    return __XwcDefaultTextEscapement_1(
      oc,
      text,
      length,
    );
  }

  _dart__XwcDefaultTextEscapement_1 __XwcDefaultTextEscapement_1;

  int _XmbDefaultTextExtents_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<ffi.Int8> text,
    int length,
    ffi.Pointer<XRectangle> overall_ink,
    ffi.Pointer<XRectangle> overall_logical,
  ) {
    __XmbDefaultTextExtents_1 ??= _dylib.lookupFunction<
        _c__XmbDefaultTextExtents_1,
        _dart__XmbDefaultTextExtents_1>('_XmbDefaultTextExtents');
    return __XmbDefaultTextExtents_1(
      oc,
      text,
      length,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XmbDefaultTextExtents_1 __XmbDefaultTextExtents_1;

  int _XwcDefaultTextExtents_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<XRectangle> overall_ink,
    ffi.Pointer<XRectangle> overall_logical,
  ) {
    __XwcDefaultTextExtents_1 ??= _dylib.lookupFunction<
        _c__XwcDefaultTextExtents_1,
        _dart__XwcDefaultTextExtents_1>('_XwcDefaultTextExtents');
    return __XwcDefaultTextExtents_1(
      oc,
      text,
      length,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XwcDefaultTextExtents_1 __XwcDefaultTextExtents_1;

  int _XmbDefaultTextPerCharExtents_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<ffi.Int8> text,
    int length,
    ffi.Pointer<XRectangle> ink_buf,
    ffi.Pointer<XRectangle> logical_buf,
    int buf_size,
    ffi.Pointer<ffi.Int32> num_chars,
    ffi.Pointer<XRectangle> overall_ink,
    ffi.Pointer<XRectangle> overall_logical,
  ) {
    __XmbDefaultTextPerCharExtents_1 ??= _dylib.lookupFunction<
        _c__XmbDefaultTextPerCharExtents_1,
        _dart__XmbDefaultTextPerCharExtents_1>('_XmbDefaultTextPerCharExtents');
    return __XmbDefaultTextPerCharExtents_1(
      oc,
      text,
      length,
      ink_buf,
      logical_buf,
      buf_size,
      num_chars,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XmbDefaultTextPerCharExtents_1 __XmbDefaultTextPerCharExtents_1;

  int _XwcDefaultTextPerCharExtents_1(
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<ffi.Int32> text,
    int length,
    ffi.Pointer<XRectangle> ink_buf,
    ffi.Pointer<XRectangle> logical_buf,
    int buf_size,
    ffi.Pointer<ffi.Int32> num_chars,
    ffi.Pointer<XRectangle> overall_ink,
    ffi.Pointer<XRectangle> overall_logical,
  ) {
    __XwcDefaultTextPerCharExtents_1 ??= _dylib.lookupFunction<
        _c__XwcDefaultTextPerCharExtents_1,
        _dart__XwcDefaultTextPerCharExtents_1>('_XwcDefaultTextPerCharExtents');
    return __XwcDefaultTextPerCharExtents_1(
      oc,
      text,
      length,
      ink_buf,
      logical_buf,
      buf_size,
      num_chars,
      overall_ink,
      overall_logical,
    );
  }

  _dart__XwcDefaultTextPerCharExtents_1 __XwcDefaultTextPerCharExtents_1;

  int _XmbDefaultDrawString_1(
    ffi.Pointer<_XDisplay> dpy,
    int d,
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<_XGC> gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int8> text,
    int length,
  ) {
    __XmbDefaultDrawString_1 ??= _dylib.lookupFunction<
        _c__XmbDefaultDrawString_1,
        _dart__XmbDefaultDrawString_1>('_XmbDefaultDrawString');
    return __XmbDefaultDrawString_1(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__XmbDefaultDrawString_1 __XmbDefaultDrawString_1;

  int _XwcDefaultDrawString_1(
    ffi.Pointer<_XDisplay> dpy,
    int d,
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<_XGC> gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XwcDefaultDrawString_1 ??= _dylib.lookupFunction<
        _c__XwcDefaultDrawString_1,
        _dart__XwcDefaultDrawString_1>('_XwcDefaultDrawString');
    return __XwcDefaultDrawString_1(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__XwcDefaultDrawString_1 __XwcDefaultDrawString_1;

  void _XmbDefaultDrawImageString_1(
    ffi.Pointer<_XDisplay> dpy,
    int d,
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<_XGC> gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int8> text,
    int length,
  ) {
    __XmbDefaultDrawImageString_1 ??= _dylib.lookupFunction<
        _c__XmbDefaultDrawImageString_1,
        _dart__XmbDefaultDrawImageString_1>('_XmbDefaultDrawImageString');
    return __XmbDefaultDrawImageString_1(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__XmbDefaultDrawImageString_1 __XmbDefaultDrawImageString_1;

  void _XwcDefaultDrawImageString_1(
    ffi.Pointer<_XDisplay> dpy,
    int d,
    ffi.Pointer<_XOC> oc,
    ffi.Pointer<_XGC> gc,
    int x,
    int y,
    ffi.Pointer<ffi.Int32> text,
    int length,
  ) {
    __XwcDefaultDrawImageString_1 ??= _dylib.lookupFunction<
        _c__XwcDefaultDrawImageString_1,
        _dart__XwcDefaultDrawImageString_1>('_XwcDefaultDrawImageString');
    return __XwcDefaultDrawImageString_1(
      dpy,
      d,
      oc,
      gc,
      x,
      y,
      text,
      length,
    );
  }

  _dart__XwcDefaultDrawImageString_1 __XwcDefaultDrawImageString_1;

  ffi.Pointer<_XOC> create_oc_1(
    ffi.Pointer<_XOM> om,
    ffi.Pointer<XlcArgList> args,
    int num_args,
  ) {
    _create_oc_1 ??=
        _dylib.lookupFunction<_c_create_oc_1, _dart_create_oc_1>('create_oc');
    return _create_oc_1(
      om,
      args,
      num_args,
    );
  }

  _dart_create_oc_1 _create_oc_1;

  int close_om_1(
    ffi.Pointer<_XOM> om,
  ) {
    _close_om_1 ??=
        _dylib.lookupFunction<_c_close_om_1, _dart_close_om_1>('close_om');
    return _close_om_1(
      om,
    );
  }

  _dart_close_om_1 _close_om_1;

  ffi.Pointer<ffi.Int8> set_om_values_1(
    ffi.Pointer<_XOM> om,
    ffi.Pointer<XlcArgList> args,
    int num_args,
  ) {
    _set_om_values_1 ??=
        _dylib.lookupFunction<_c_set_om_values_1, _dart_set_om_values_1>(
            'set_om_values');
    return _set_om_values_1(
      om,
      args,
      num_args,
    );
  }

  _dart_set_om_values_1 _set_om_values_1;

  ffi.Pointer<ffi.Int8> get_om_values_1(
    ffi.Pointer<_XOM> om,
    ffi.Pointer<XlcArgList> args,
    int num_args,
  ) {
    _get_om_values_1 ??=
        _dylib.lookupFunction<_c_get_om_values_1, _dart_get_om_values_1>(
            'get_om_values');
    return _get_om_values_1(
      om,
      args,
      num_args,
    );
  }

  _dart_get_om_values_1 _get_om_values_1;

  ffi.Pointer<OMData> add_data_1(
    ffi.Pointer<_XOM> om,
  ) {
    _add_data_1 ??=
        _dylib.lookupFunction<_c_add_data_1, _dart_add_data_1>('add_data');
    return _add_data_1(
      om,
    );
  }

  _dart_add_data_1 _add_data_1;

  int init_om_1(
    ffi.Pointer<_XOM> om,
  ) {
    _init_om_1 ??=
        _dylib.lookupFunction<_c_init_om_1, _dart_init_om_1>('init_om');
    return _init_om_1(
      om,
    );
  }

  _dart_init_om_1 _init_om_1;

  int _XimTransIntrCallback(
    int im,
    ffi.Pointer<ffi.NativeFunction<_typedefC_131>> Bool,
    int call_data,
  ) {
    __XimTransIntrCallback ??= _dylib.lookupFunction<_c__XimTransIntrCallback,
        _dart__XimTransIntrCallback>('_XimTransIntrCallback');
    return __XimTransIntrCallback(
      im,
      Bool,
      call_data,
    );
  }

  _dart__XimTransIntrCallback __XimTransIntrCallback;

  void _XimXTransFreeConnInfo(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XimXTransFreeConnInfo ??= _dylib.lookupFunction<_c__XimXTransFreeConnInfo,
        _dart__XimXTransFreeConnInfo>('_XimXTransFreeConnInfo');
    return __XimXTransFreeConnInfo(
      arg0,
    );
  }

  _dart__XimXTransFreeConnInfo __XimXTransFreeConnInfo;

  ffi.Pointer<_XtransConnInfo> _XimXTransOpenCOTSClient(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    __XimXTransOpenCOTSClient ??= _dylib.lookupFunction<
        _c__XimXTransOpenCOTSClient,
        _dart__XimXTransOpenCOTSClient>('_XimXTransOpenCOTSClient');
    return __XimXTransOpenCOTSClient(
      arg0,
    );
  }

  _dart__XimXTransOpenCOTSClient __XimXTransOpenCOTSClient;

  int _XimXTransSetOption(
    ffi.Pointer<_XtransConnInfo> arg0,
    int arg1,
    int arg2,
  ) {
    __XimXTransSetOption ??= _dylib.lookupFunction<_c__XimXTransSetOption,
        _dart__XimXTransSetOption>('_XimXTransSetOption');
    return __XimXTransSetOption(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XimXTransSetOption __XimXTransSetOption;

  int _XimXTransConnect(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    __XimXTransConnect ??=
        _dylib.lookupFunction<_c__XimXTransConnect, _dart__XimXTransConnect>(
            '_XimXTransConnect');
    return __XimXTransConnect(
      arg0,
      arg1,
    );
  }

  _dart__XimXTransConnect __XimXTransConnect;

  int _XimXTransBytesReadable(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    __XimXTransBytesReadable ??= _dylib.lookupFunction<
        _c__XimXTransBytesReadable,
        _dart__XimXTransBytesReadable>('_XimXTransBytesReadable');
    return __XimXTransBytesReadable(
      arg0,
      arg1,
    );
  }

  _dart__XimXTransBytesReadable __XimXTransBytesReadable;

  int _XimXTransRead(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XimXTransRead ??=
        _dylib.lookupFunction<_c__XimXTransRead, _dart__XimXTransRead>(
            '_XimXTransRead');
    return __XimXTransRead(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XimXTransRead __XimXTransRead;

  int _XimXTransWrite(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    __XimXTransWrite ??=
        _dylib.lookupFunction<_c__XimXTransWrite, _dart__XimXTransWrite>(
            '_XimXTransWrite');
    return __XimXTransWrite(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XimXTransWrite __XimXTransWrite;

  int _XimXTransReadv(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<iovec> arg1,
    int arg2,
  ) {
    __XimXTransReadv ??=
        _dylib.lookupFunction<_c__XimXTransReadv, _dart__XimXTransReadv>(
            '_XimXTransReadv');
    return __XimXTransReadv(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XimXTransReadv __XimXTransReadv;

  int _XimXTransWritev(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<iovec> arg1,
    int arg2,
  ) {
    __XimXTransWritev ??=
        _dylib.lookupFunction<_c__XimXTransWritev, _dart__XimXTransWritev>(
            '_XimXTransWritev');
    return __XimXTransWritev(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart__XimXTransWritev __XimXTransWritev;

  int _XimXTransSendFd(
    ffi.Pointer<_XtransConnInfo> ciptr,
    int fd,
    int do_close,
  ) {
    __XimXTransSendFd ??=
        _dylib.lookupFunction<_c__XimXTransSendFd, _dart__XimXTransSendFd>(
            '_XimXTransSendFd');
    return __XimXTransSendFd(
      ciptr,
      fd,
      do_close,
    );
  }

  _dart__XimXTransSendFd __XimXTransSendFd;

  int _XimXTransRecvFd(
    ffi.Pointer<_XtransConnInfo> ciptr,
  ) {
    __XimXTransRecvFd ??=
        _dylib.lookupFunction<_c__XimXTransRecvFd, _dart__XimXTransRecvFd>(
            '_XimXTransRecvFd');
    return __XimXTransRecvFd(
      ciptr,
    );
  }

  _dart__XimXTransRecvFd __XimXTransRecvFd;

  int _XimXTransDisconnect(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XimXTransDisconnect ??= _dylib.lookupFunction<_c__XimXTransDisconnect,
        _dart__XimXTransDisconnect>('_XimXTransDisconnect');
    return __XimXTransDisconnect(
      arg0,
    );
  }

  _dart__XimXTransDisconnect __XimXTransDisconnect;

  int _XimXTransClose(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XimXTransClose ??=
        _dylib.lookupFunction<_c__XimXTransClose, _dart__XimXTransClose>(
            '_XimXTransClose');
    return __XimXTransClose(
      arg0,
    );
  }

  _dart__XimXTransClose __XimXTransClose;

  int _XimXTransCloseForCloning(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XimXTransCloseForCloning ??= _dylib.lookupFunction<
        _c__XimXTransCloseForCloning,
        _dart__XimXTransCloseForCloning>('_XimXTransCloseForCloning');
    return __XimXTransCloseForCloning(
      arg0,
    );
  }

  _dart__XimXTransCloseForCloning __XimXTransCloseForCloning;

  int _XimXTransIsLocal(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XimXTransIsLocal ??=
        _dylib.lookupFunction<_c__XimXTransIsLocal, _dart__XimXTransIsLocal>(
            '_XimXTransIsLocal');
    return __XimXTransIsLocal(
      arg0,
    );
  }

  _dart__XimXTransIsLocal __XimXTransIsLocal;

  int _XimXTransGetPeerAddr(
    ffi.Pointer<_XtransConnInfo> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Pointer<Xtransaddr>> arg3,
  ) {
    __XimXTransGetPeerAddr ??= _dylib.lookupFunction<_c__XimXTransGetPeerAddr,
        _dart__XimXTransGetPeerAddr>('_XimXTransGetPeerAddr');
    return __XimXTransGetPeerAddr(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart__XimXTransGetPeerAddr __XimXTransGetPeerAddr;

  int _XimXTransGetConnectionNumber(
    ffi.Pointer<_XtransConnInfo> arg0,
  ) {
    __XimXTransGetConnectionNumber ??= _dylib.lookupFunction<
        _c__XimXTransGetConnectionNumber,
        _dart__XimXTransGetConnectionNumber>('_XimXTransGetConnectionNumber');
    return __XimXTransGetConnectionNumber(
      arg0,
    );
  }

  _dart__XimXTransGetConnectionNumber __XimXTransGetConnectionNumber;

  int _XimXTransGetHostname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    __XimXTransGetHostname ??= _dylib.lookupFunction<_c__XimXTransGetHostname,
        _dart__XimXTransGetHostname>('_XimXTransGetHostname');
    return __XimXTransGetHostname(
      arg0,
      arg1,
    );
  }

  _dart__XimXTransGetHostname __XimXTransGetHostname;

  int ntohl(
    int __netlong,
  ) {
    _ntohl ??= _dylib.lookupFunction<_c_ntohl, _dart_ntohl>('ntohl');
    return _ntohl(
      __netlong,
    );
  }

  _dart_ntohl _ntohl;

  int ntohs(
    int __netshort,
  ) {
    _ntohs ??= _dylib.lookupFunction<_c_ntohs, _dart_ntohs>('ntohs');
    return _ntohs(
      __netshort,
    );
  }

  _dart_ntohs _ntohs;

  int htonl(
    int __hostlong,
  ) {
    _htonl ??= _dylib.lookupFunction<_c_htonl, _dart_htonl>('htonl');
    return _htonl(
      __hostlong,
    );
  }

  _dart_htonl _htonl;

  int htons(
    int __hostshort,
  ) {
    _htons ??= _dylib.lookupFunction<_c_htons, _dart_htons>('htons');
    return _htons(
      __hostshort,
    );
  }

  _dart_htons _htons;

  int bindresvport(
    int __sockfd,
    ffi.Pointer<sockaddr_in> __sock_in,
  ) {
    _bindresvport ??= _dylib
        .lookupFunction<_c_bindresvport, _dart_bindresvport>('bindresvport');
    return _bindresvport(
      __sockfd,
      __sock_in,
    );
  }

  _dart_bindresvport _bindresvport;

  int bindresvport6(
    int __sockfd,
    ffi.Pointer<sockaddr_in6> __sock_in,
  ) {
    _bindresvport6 ??= _dylib
        .lookupFunction<_c_bindresvport6, _dart_bindresvport6>('bindresvport6');
    return _bindresvport6(
      __sockfd,
      __sock_in,
    );
  }

  _dart_bindresvport6 _bindresvport6;

  int inet_addr(
    ffi.Pointer<ffi.Int8> __cp,
  ) {
    _inet_addr ??=
        _dylib.lookupFunction<_c_inet_addr, _dart_inet_addr>('inet_addr');
    return _inet_addr(
      __cp,
    );
  }

  _dart_inet_addr _inet_addr;

  int inet_network(
    ffi.Pointer<ffi.Int8> __cp,
  ) {
    _inet_network ??= _dylib
        .lookupFunction<_c_inet_network, _dart_inet_network>('inet_network');
    return _inet_network(
      __cp,
    );
  }

  _dart_inet_network _inet_network;

  int inet_pton(
    int __af,
    ffi.Pointer<ffi.Int8> __cp,
    ffi.Pointer<ffi.Void> __buf,
  ) {
    _inet_pton ??=
        _dylib.lookupFunction<_c_inet_pton, _dart_inet_pton>('inet_pton');
    return _inet_pton(
      __af,
      __cp,
      __buf,
    );
  }

  _dart_inet_pton _inet_pton;

  ffi.Pointer<ffi.Int8> inet_ntop(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _inet_ntop ??=
        _dylib.lookupFunction<_c_inet_ntop, _dart_inet_ntop>('inet_ntop');
    return _inet_ntop(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  _dart_inet_ntop _inet_ntop;

  int inet_aton(
    ffi.Pointer<ffi.Int8> __cp,
    ffi.Pointer<in_addr> __inp,
  ) {
    _inet_aton ??=
        _dylib.lookupFunction<_c_inet_aton, _dart_inet_aton>('inet_aton');
    return _inet_aton(
      __cp,
      __inp,
    );
  }

  _dart_inet_aton _inet_aton;

  ffi.Pointer<ffi.Int8> inet_neta(
    int __net,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _inet_neta ??=
        _dylib.lookupFunction<_c_inet_neta, _dart_inet_neta>('inet_neta');
    return _inet_neta(
      __net,
      __buf,
      __len,
    );
  }

  _dart_inet_neta _inet_neta;

  ffi.Pointer<ffi.Int8> inet_net_ntop(
    int __af,
    ffi.Pointer<ffi.Void> __cp,
    int __bits,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    _inet_net_ntop ??= _dylib
        .lookupFunction<_c_inet_net_ntop, _dart_inet_net_ntop>('inet_net_ntop');
    return _inet_net_ntop(
      __af,
      __cp,
      __bits,
      __buf,
      __len,
    );
  }

  _dart_inet_net_ntop _inet_net_ntop;

  int inet_net_pton(
    int __af,
    ffi.Pointer<ffi.Int8> __cp,
    ffi.Pointer<ffi.Void> __buf,
    int __len,
  ) {
    _inet_net_pton ??= _dylib
        .lookupFunction<_c_inet_net_pton, _dart_inet_net_pton>('inet_net_pton');
    return _inet_net_pton(
      __af,
      __cp,
      __buf,
      __len,
    );
  }

  _dart_inet_net_pton _inet_net_pton;

  int inet_nsap_addr(
    ffi.Pointer<ffi.Int8> __cp,
    ffi.Pointer<ffi.Uint8> __buf,
    int __len,
  ) {
    _inet_nsap_addr ??=
        _dylib.lookupFunction<_c_inet_nsap_addr, _dart_inet_nsap_addr>(
            'inet_nsap_addr');
    return _inet_nsap_addr(
      __cp,
      __buf,
      __len,
    );
  }

  _dart_inet_nsap_addr _inet_nsap_addr;

  ffi.Pointer<ffi.Int8> inet_nsap_ntoa(
    int __len,
    ffi.Pointer<ffi.Uint8> __cp,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    _inet_nsap_ntoa ??=
        _dylib.lookupFunction<_c_inet_nsap_ntoa, _dart_inet_nsap_ntoa>(
            'inet_nsap_ntoa');
    return _inet_nsap_ntoa(
      __len,
      __cp,
      __buf,
    );
  }

  _dart_inet_nsap_ntoa _inet_nsap_ntoa;

  int uname(
    ffi.Pointer<utsname> __name,
  ) {
    _uname ??= _dylib.lookupFunction<_c_uname, _dart_uname>('uname');
    return _uname(
      __name,
    );
  }

  _dart_uname _uname;

  int is_numeric(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _is_numeric ??=
        _dylib.lookupFunction<_c_is_numeric, _dart_is_numeric>('is_numeric');
    return _is_numeric(
      arg0,
    );
  }

  _dart_is_numeric _is_numeric;

  void VErrorF(
    ffi.Pointer<ffi.Int8> f,
    ffi.Pointer<__va_list_tag> args,
  ) {
    _VErrorF ??= _dylib.lookupFunction<_c_VErrorF, _dart_VErrorF>('VErrorF');
    return _VErrorF(
      f,
      args,
    );
  }

  _dart_VErrorF _VErrorF;

  void ErrorF(
    ffi.Pointer<ffi.Int8> f,
  ) {
    _ErrorF ??= _dylib.lookupFunction<_c_ErrorF, _dart_ErrorF>('ErrorF');
    return _ErrorF(
      f,
    );
  }

  _dart_ErrorF _ErrorF;

  void prmsg(
    int lvl,
    ffi.Pointer<ffi.Int8> f,
  ) {
    _prmsg ??= _dylib.lookupFunction<_c_prmsg, _dart_prmsg>('prmsg');
    return _prmsg(
      lvl,
      f,
    );
  }

  _dart_prmsg _prmsg;

  ffi.Pointer<Xtransport> _XimXTransSelectTransport(
    ffi.Pointer<ffi.Int8> protocol,
  ) {
    __XimXTransSelectTransport ??= _dylib.lookupFunction<
        _c__XimXTransSelectTransport,
        _dart__XimXTransSelectTransport>('_XimXTransSelectTransport');
    return __XimXTransSelectTransport(
      protocol,
    );
  }

  _dart__XimXTransSelectTransport __XimXTransSelectTransport;

  int _XimXTransParseAddress(
    ffi.Pointer<ffi.Int8> address,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> protocol,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> host,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> port,
  ) {
    __XimXTransParseAddress ??= _dylib.lookupFunction<_c__XimXTransParseAddress,
        _dart__XimXTransParseAddress>('_XimXTransParseAddress');
    return __XimXTransParseAddress(
      address,
      protocol,
      host,
      port,
    );
  }

  _dart__XimXTransParseAddress __XimXTransParseAddress;

  ffi.Pointer<_XtransConnInfo> _XimXTransOpen(
    int type,
    ffi.Pointer<ffi.Int8> address,
  ) {
    __XimXTransOpen ??=
        _dylib.lookupFunction<_c__XimXTransOpen, _dart__XimXTransOpen>(
            '_XimXTransOpen');
    return __XimXTransOpen(
      type,
      address,
    );
  }

  _dart__XimXTransOpen __XimXTransOpen;

  ffi.Pointer<ffi.Void> dlopen(
    ffi.Pointer<ffi.Int8> __file,
    int __mode,
  ) {
    _dlopen ??= _dylib.lookupFunction<_c_dlopen, _dart_dlopen>('dlopen');
    return _dlopen(
      __file,
      __mode,
    );
  }

  _dart_dlopen _dlopen;

  int dlclose(
    ffi.Pointer<ffi.Void> __handle,
  ) {
    _dlclose ??= _dylib.lookupFunction<_c_dlclose, _dart_dlclose>('dlclose');
    return _dlclose(
      __handle,
    );
  }

  _dart_dlclose _dlclose;

  ffi.Pointer<ffi.Void> dlsym(
    ffi.Pointer<ffi.Void> __handle,
    ffi.Pointer<ffi.Int8> __name,
  ) {
    _dlsym ??= _dylib.lookupFunction<_c_dlsym, _dart_dlsym>('dlsym');
    return _dlsym(
      __handle,
      __name,
    );
  }

  _dart_dlsym _dlsym;

  ffi.Pointer<ffi.Int8> dlerror() {
    _dlerror ??= _dylib.lookupFunction<_c_dlerror, _dart_dlerror>('dlerror');
    return _dlerror();
  }

  _dart_dlerror _dlerror;

  int parse_line_2(
    ffi.Pointer<ffi.Int8> line,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
    int argsize,
  ) {
    _parse_line_2 ??= _dylib
        .lookupFunction<_c_parse_line_2, _dart_parse_line_2>('parse_line');
    return _parse_line_2(
      line,
      argv,
      argsize,
    );
  }

  _dart_parse_line_2 _parse_line_2;

  ffi.Pointer<ffi.Int8> strdup_with_underscore(
    ffi.Pointer<ffi.Int8> symbol,
  ) {
    _strdup_with_underscore ??= _dylib.lookupFunction<_c_strdup_with_underscore,
        _dart_strdup_with_underscore>('strdup_with_underscore');
    return _strdup_with_underscore(
      symbol,
    );
  }

  _dart_strdup_with_underscore _strdup_with_underscore;

  ffi.Pointer<ffi.Void> try_both_dlsym(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Int8> name,
  ) {
    _try_both_dlsym ??=
        _dylib.lookupFunction<_c_try_both_dlsym, _dart_try_both_dlsym>(
            'try_both_dlsym');
    return _try_both_dlsym(
      handle,
      name,
    );
  }

  _dart_try_both_dlsym _try_both_dlsym;

  void resolve_object(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> lc_name,
  ) {
    _resolve_object ??=
        _dylib.lookupFunction<_c_resolve_object, _dart_resolve_object>(
            'resolve_object');
    return _resolve_object(
      path,
      lc_name,
    );
  }

  _dart_resolve_object _resolve_object;

  ffi.Pointer<ffi.Int8> __lc_path(
    ffi.Pointer<ffi.Int8> dl_name,
    ffi.Pointer<ffi.Int8> lc_dir,
  ) {
    ___lc_path ??=
        _dylib.lookupFunction<_c___lc_path, _dart___lc_path>('__lc_path');
    return ___lc_path(
      dl_name,
      lc_dir,
    );
  }

  _dart___lc_path ___lc_path;

  int open_object(
    ffi.Pointer<XI18NObjectsList> object,
    ffi.Pointer<ffi.Int8> lc_dir,
  ) {
    _open_object ??=
        _dylib.lookupFunction<_c_open_object, _dart_open_object>('open_object');
    return _open_object(
      object,
      lc_dir,
    );
  }

  _dart_open_object _open_object;

  ffi.Pointer<ffi.Void> fetch_symbol(
    ffi.Pointer<XI18NObjectsList> object,
    ffi.Pointer<ffi.Int8> symbol,
  ) {
    _fetch_symbol ??= _dylib
        .lookupFunction<_c_fetch_symbol, _dart_fetch_symbol>('fetch_symbol');
    return _fetch_symbol(
      object,
      symbol,
    );
  }

  _dart_fetch_symbol _fetch_symbol;

  void close_object(
    ffi.Pointer<XI18NObjectsList> object,
  ) {
    _close_object ??= _dylib
        .lookupFunction<_c_close_object, _dart_close_object>('close_object');
    return _close_object(
      object,
    );
  }

  _dart_close_object _close_object;

  ffi.Pointer<_XIM> _XDynamicOpenIM(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<_XrmHashBucketRec> rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
  ) {
    __XDynamicOpenIM ??=
        _dylib.lookupFunction<_c__XDynamicOpenIM, _dart__XDynamicOpenIM>(
            '_XDynamicOpenIM');
    return __XDynamicOpenIM(
      lcd,
      display,
      rdb,
      res_name,
      res_class,
    );
  }

  _dart__XDynamicOpenIM __XDynamicOpenIM;

  int _XDynamicRegisterIMInstantiateCallback(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<_XrmHashBucketRec> rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
    ffi.Pointer<ffi.NativeFunction<XIDProc>> callback,
    ffi.Pointer<ffi.Int8> client_data,
  ) {
    __XDynamicRegisterIMInstantiateCallback ??= _dylib.lookupFunction<
            _c__XDynamicRegisterIMInstantiateCallback,
            _dart__XDynamicRegisterIMInstantiateCallback>(
        '_XDynamicRegisterIMInstantiateCallback');
    return __XDynamicRegisterIMInstantiateCallback(
      lcd,
      display,
      rdb,
      res_name,
      res_class,
      callback,
      client_data,
    );
  }

  _dart__XDynamicRegisterIMInstantiateCallback
      __XDynamicRegisterIMInstantiateCallback;

  int _XDynamicUnRegisterIMInstantiateCallback(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<_XrmHashBucketRec> rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
    ffi.Pointer<ffi.NativeFunction<XIDProc>> callback,
    ffi.Pointer<ffi.Int8> client_data,
  ) {
    __XDynamicUnRegisterIMInstantiateCallback ??= _dylib.lookupFunction<
            _c__XDynamicUnRegisterIMInstantiateCallback,
            _dart__XDynamicUnRegisterIMInstantiateCallback>(
        '_XDynamicUnRegisterIMInstantiateCallback');
    return __XDynamicUnRegisterIMInstantiateCallback(
      lcd,
      display,
      rdb,
      res_name,
      res_class,
      callback,
      client_data,
    );
  }

  _dart__XDynamicUnRegisterIMInstantiateCallback
      __XDynamicUnRegisterIMInstantiateCallback;

  ffi.Pointer<_XOM> _XDynamicOpenOM(
    ffi.Pointer<XLCdRec> lcd,
    ffi.Pointer<_XDisplay> display,
    ffi.Pointer<_XrmHashBucketRec> rdb,
    ffi.Pointer<ffi.Int8> res_name,
    ffi.Pointer<ffi.Int8> res_class,
  ) {
    __XDynamicOpenOM ??=
        _dylib.lookupFunction<_c__XDynamicOpenOM, _dart__XDynamicOpenOM>(
            '_XDynamicOpenOM');
    return __XDynamicOpenOM(
      lcd,
      display,
      rdb,
      res_name,
      res_class,
    );
  }

  _dart__XDynamicOpenOM __XDynamicOpenOM;

  int sync_hazard(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _sync_hazard ??=
        _dylib.lookupFunction<_c_sync_hazard, _dart_sync_hazard>('sync_hazard');
    return _sync_hazard(
      dpy,
    );
  }

  _dart_sync_hazard _sync_hazard;

  void sync_while_locked(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _sync_while_locked ??=
        _dylib.lookupFunction<_c_sync_while_locked, _dart_sync_while_locked>(
            'sync_while_locked');
    return _sync_while_locked(
      dpy,
    );
  }

  _dart_sync_while_locked _sync_while_locked;

  int _XPrivSyncFunction(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    __XPrivSyncFunction ??=
        _dylib.lookupFunction<_c__XPrivSyncFunction, _dart__XPrivSyncFunction>(
            '_XPrivSyncFunction');
    return __XPrivSyncFunction(
      dpy,
    );
  }

  _dart__XPrivSyncFunction __XPrivSyncFunction;

  int SocketBytesReadable(
    ffi.Pointer<_XDisplay> dpy,
  ) {
    _SocketBytesReadable ??= _dylib.lookupFunction<_c_SocketBytesReadable,
        _dart_SocketBytesReadable>('SocketBytesReadable');
    return _SocketBytesReadable(
      dpy,
    );
  }

  _dart_SocketBytesReadable _SocketBytesReadable;

  int _XPrintDefaultError(
    ffi.Pointer<_XDisplay> dpy,
    ffi.Pointer<XErrorEvent> event,
    ffi.Pointer<_IO_FILE> fp,
  ) {
    __XPrintDefaultError ??= _dylib.lookupFunction<_c__XPrintDefaultError,
        _dart__XPrintDefaultError>('_XPrintDefaultError');
    return __XPrintDefaultError(
      dpy,
      event,
      fp,
    );
  }

  _dart__XPrintDefaultError __XPrintDefaultError;

  void c_mbnoop(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _c_mbnoop ??=
        _dylib.lookupFunction<_c_c_mbnoop, _dart_c_mbnoop>('c_mbnoop');
    return _c_mbnoop(
      state,
    );
  }

  _dart_c_mbnoop _c_mbnoop;

  int c_mbchar(
    ffi.Pointer<ffi.Int8> state,
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int32> lenp,
  ) {
    _c_mbchar ??=
        _dylib.lookupFunction<_c_c_mbchar, _dart_c_mbchar>('c_mbchar');
    return _c_mbchar(
      state,
      str,
      lenp,
    );
  }

  _dart_c_mbchar _c_mbchar;

  ffi.Pointer<ffi.Int8> c_lcname(
    ffi.Pointer<ffi.Int8> state,
  ) {
    _c_lcname ??=
        _dylib.lookupFunction<_c_c_lcname, _dart_c_lcname>('c_lcname');
    return _c_lcname(
      state,
    );
  }

  _dart_c_lcname _c_lcname;

  ffi.Pointer<_XrmHashBucketRec> NewDatabase() {
    _NewDatabase ??=
        _dylib.lookupFunction<_c_NewDatabase, _dart_NewDatabase>('NewDatabase');
    return _NewDatabase();
  }

  _dart_NewDatabase _NewDatabase;

  void MoveValues(
    ffi.Pointer<LTable> ftable,
    ffi.Pointer<LTable> ttable,
  ) {
    _MoveValues ??=
        _dylib.lookupFunction<_c_MoveValues, _dart_MoveValues>('MoveValues');
    return _MoveValues(
      ftable,
      ttable,
    );
  }

  _dart_MoveValues _MoveValues;

  void MoveTables(
    ffi.Pointer<NTable> ftable,
    ffi.Pointer<NTable> ttable,
  ) {
    _MoveTables ??=
        _dylib.lookupFunction<_c_MoveTables, _dart_MoveTables>('MoveTables');
    return _MoveTables(
      ftable,
      ttable,
    );
  }

  _dart_MoveTables _MoveTables;

  void GrowTable(
    ffi.Pointer<ffi.Pointer<NTable>> prev,
  ) {
    _GrowTable ??=
        _dylib.lookupFunction<_c_GrowTable, _dart_GrowTable>('GrowTable');
    return _GrowTable(
      prev,
    );
  }

  _dart_GrowTable _GrowTable;

  void MergeValues(
    ffi.Pointer<LTable> ftable,
    ffi.Pointer<ffi.Pointer<NTable>> pprev,
    int override,
  ) {
    _MergeValues ??=
        _dylib.lookupFunction<_c_MergeValues, _dart_MergeValues>('MergeValues');
    return _MergeValues(
      ftable,
      pprev,
      override,
    );
  }

  _dart_MergeValues _MergeValues;

  void MergeTables(
    ffi.Pointer<NTable> ftable,
    ffi.Pointer<ffi.Pointer<NTable>> pprev,
    int override,
  ) {
    _MergeTables ??=
        _dylib.lookupFunction<_c_MergeTables, _dart_MergeTables>('MergeTables');
    return _MergeTables(
      ftable,
      pprev,
      override,
    );
  }

  _dart_MergeTables _MergeTables;

  void PutEntry(
    ffi.Pointer<_XrmHashBucketRec> db,
    ffi.Pointer<ffi.Int32> bindings,
    ffi.Pointer<ffi.Int32> quarks,
    int type,
    ffi.Pointer<XrmValuePtr> value,
  ) {
    _PutEntry ??=
        _dylib.lookupFunction<_c_PutEntry, _dart_PutEntry>('PutEntry');
    return _PutEntry(
      db,
      bindings,
      quarks,
      type,
      value,
    );
  }

  _dart_PutEntry _PutEntry;

  void GetIncludeFile(
    ffi.Pointer<_XrmHashBucketRec> db,
    ffi.Pointer<ffi.Int8> base,
    ffi.Pointer<ffi.Int8> fname,
    int fnamelen,
    int depth,
  ) {
    _GetIncludeFile ??=
        _dylib.lookupFunction<_c_GetIncludeFile, _dart_GetIncludeFile>(
            'GetIncludeFile');
    return _GetIncludeFile(
      db,
      base,
      fname,
      fnamelen,
      depth,
    );
  }

  _dart_GetIncludeFile _GetIncludeFile;

  void GetDatabase(
    ffi.Pointer<_XrmHashBucketRec> db,
    ffi.Pointer<ffi.Int8> str,
    ffi.Pointer<ffi.Int8> filename,
    int doall,
    int depth,
  ) {
    _GetDatabase ??=
        _dylib.lookupFunction<_c_GetDatabase, _dart_GetDatabase>('GetDatabase');
    return _GetDatabase(
      db,
      str,
      filename,
      doall,
      depth,
    );
  }

  _dart_GetDatabase _GetDatabase;

  ffi.Pointer<ffi.Int8> ReadInFile(
    ffi.Pointer<ffi.Int8> filename,
  ) {
    _ReadInFile ??=
        _dylib.lookupFunction<_c_ReadInFile, _dart_ReadInFile>('ReadInFile');
    return _ReadInFile(
      filename,
    );
  }

  _dart_ReadInFile _ReadInFile;

  int EnumLTable(
    ffi.Pointer<LTable> table,
    ffi.Pointer<ffi.Int32> names,
    ffi.Pointer<ffi.Int32> classes,
    int level,
    ffi.Pointer<EClosure> closure,
  ) {
    _EnumLTable ??=
        _dylib.lookupFunction<_c_EnumLTable, _dart_EnumLTable>('EnumLTable');
    return _EnumLTable(
      table,
      names,
      classes,
      level,
      closure,
    );
  }

  _dart_EnumLTable _EnumLTable;

  int EnumAllNTable(
    ffi.Pointer<NTable> table,
    int level,
    ffi.Pointer<EClosure> closure,
  ) {
    _EnumAllNTable ??= _dylib
        .lookupFunction<_c_EnumAllNTable, _dart_EnumAllNTable>('EnumAllNTable');
    return _EnumAllNTable(
      table,
      level,
      closure,
    );
  }

  _dart_EnumAllNTable _EnumAllNTable;

  int EnumNTable(
    ffi.Pointer<NTable> table,
    ffi.Pointer<ffi.Int32> names,
    ffi.Pointer<ffi.Int32> classes,
    int level,
    ffi.Pointer<EClosure> closure,
  ) {
    _EnumNTable ??=
        _dylib.lookupFunction<_c_EnumNTable, _dart_EnumNTable>('EnumNTable');
    return _EnumNTable(
      table,
      names,
      classes,
      level,
      closure,
    );
  }

  _dart_EnumNTable _EnumNTable;

  void PrintBindingQuarkList(
    ffi.Pointer<ffi.Int32> bindings,
    ffi.Pointer<ffi.Int32> quarks,
    ffi.Pointer<_IO_FILE> stream,
  ) {
    _PrintBindingQuarkList ??= _dylib.lookupFunction<_c_PrintBindingQuarkList,
        _dart_PrintBindingQuarkList>('PrintBindingQuarkList');
    return _PrintBindingQuarkList(
      bindings,
      quarks,
      stream,
    );
  }

  _dart_PrintBindingQuarkList _PrintBindingQuarkList;

  int DumpEntry(
    ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> db,
    ffi.Pointer<ffi.Int32> bindings,
    ffi.Pointer<ffi.Int32> quarks,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<XrmValuePtr> value,
    ffi.Pointer<ffi.Int8> data,
  ) {
    _DumpEntry ??=
        _dylib.lookupFunction<_c_DumpEntry, _dart_DumpEntry>('DumpEntry');
    return _DumpEntry(
      db,
      bindings,
      quarks,
      type,
      value,
      data,
    );
  }

  _dart_DumpEntry _DumpEntry;

  int AppendLEntry(
    ffi.Pointer<LTable> table,
    ffi.Pointer<ffi.Int32> names,
    ffi.Pointer<ffi.Int32> classes,
    ffi.Pointer<SClosure> closure,
  ) {
    _AppendLEntry ??= _dylib
        .lookupFunction<_c_AppendLEntry, _dart_AppendLEntry>('AppendLEntry');
    return _AppendLEntry(
      table,
      names,
      classes,
      closure,
    );
  }

  _dart_AppendLEntry _AppendLEntry;

  int AppendLooseLEntry(
    ffi.Pointer<LTable> table,
    ffi.Pointer<ffi.Int32> names,
    ffi.Pointer<ffi.Int32> classes,
    ffi.Pointer<SClosure> closure,
  ) {
    _AppendLooseLEntry ??=
        _dylib.lookupFunction<_c_AppendLooseLEntry, _dart_AppendLooseLEntry>(
            'AppendLooseLEntry');
    return _AppendLooseLEntry(
      table,
      names,
      classes,
      closure,
    );
  }

  _dart_AppendLooseLEntry _AppendLooseLEntry;

  int SearchNEntry(
    ffi.Pointer<NTable> table,
    ffi.Pointer<ffi.Int32> names,
    ffi.Pointer<ffi.Int32> classes,
    ffi.Pointer<SClosure> closure,
  ) {
    _SearchNEntry ??= _dylib
        .lookupFunction<_c_SearchNEntry, _dart_SearchNEntry>('SearchNEntry');
    return _SearchNEntry(
      table,
      names,
      classes,
      closure,
    );
  }

  _dart_SearchNEntry _SearchNEntry;

  int GetVEntry(
    ffi.Pointer<LTable> table,
    ffi.Pointer<ffi.Int32> names,
    ffi.Pointer<ffi.Int32> classes,
    ffi.Pointer<VClosure> closure,
  ) {
    _GetVEntry ??=
        _dylib.lookupFunction<_c_GetVEntry, _dart_GetVEntry>('GetVEntry');
    return _GetVEntry(
      table,
      names,
      classes,
      closure,
    );
  }

  _dart_GetVEntry _GetVEntry;

  int GetLooseVEntry(
    ffi.Pointer<LTable> table,
    ffi.Pointer<ffi.Int32> names,
    ffi.Pointer<ffi.Int32> classes,
    ffi.Pointer<VClosure> closure,
  ) {
    _GetLooseVEntry ??=
        _dylib.lookupFunction<_c_GetLooseVEntry, _dart_GetLooseVEntry>(
            'GetLooseVEntry');
    return _GetLooseVEntry(
      table,
      names,
      classes,
      closure,
    );
  }

  _dart_GetLooseVEntry _GetLooseVEntry;

  int GetNEntry(
    ffi.Pointer<NTable> table,
    ffi.Pointer<ffi.Int32> names,
    ffi.Pointer<ffi.Int32> classes,
    ffi.Pointer<VClosure> closure,
  ) {
    _GetNEntry ??=
        _dylib.lookupFunction<_c_GetNEntry, _dart_GetNEntry>('GetNEntry');
    return _GetNEntry(
      table,
      names,
      classes,
      closure,
    );
  }

  _dart_GetNEntry _GetNEntry;

  void DestroyLTable(
    ffi.Pointer<LTable> table,
  ) {
    _DestroyLTable ??= _dylib
        .lookupFunction<_c_DestroyLTable, _dart_DestroyLTable>('DestroyLTable');
    return _DestroyLTable(
      table,
    );
  }

  _dart_DestroyLTable _DestroyLTable;

  void DestroyNTable(
    ffi.Pointer<NTable> table,
  ) {
    _DestroyNTable ??= _dylib
        .lookupFunction<_c_DestroyNTable, _dart_DestroyNTable>('DestroyNTable');
    return _DestroyNTable(
      table,
    );
  }

  _dart_DestroyNTable _DestroyNTable;
}

class XkbStatePtr extends ffi.Struct {
  @ffi.Uint8()
  int group;

  @ffi.Uint8()
  int locked_group;

  @ffi.Uint16()
  int base_group;

  @ffi.Uint16()
  int latched_group;

  @ffi.Uint8()
  int mods;

  @ffi.Uint8()
  int base_mods;

  @ffi.Uint8()
  int latched_mods;

  @ffi.Uint8()
  int locked_mods;

  @ffi.Uint8()
  int compat_state;

  @ffi.Uint8()
  int grab_mods;

  @ffi.Uint8()
  int compat_grab_mods;

  @ffi.Uint8()
  int lookup_mods;

  @ffi.Uint8()
  int compat_lookup_mods;

  @ffi.Uint16()
  int ptr_buttons;
}

class XkbModsPtr extends ffi.Struct {
  @ffi.Uint8()
  int mask;

  @ffi.Uint8()
  int real_mods;

  @ffi.Uint16()
  int vmods;
}

class XkbKTMapEntryPtr extends ffi.Struct {}

class XkbKeyTypePtr extends ffi.Struct {}

class XkbBehavior extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int data;
}

class XkbAnyAction extends ffi.Struct {}

class XkbModAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int mask;

  @ffi.Uint8()
  int real_mods;

  @ffi.Uint8()
  int vmods1;

  @ffi.Uint8()
  int vmods2;
}

class XkbGroupAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Int8()
  int group_XXX;
}

class XkbISOAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int mask;

  @ffi.Uint8()
  int real_mods;

  @ffi.Int8()
  int group_XXX;

  @ffi.Uint8()
  int affect;

  @ffi.Uint8()
  int vmods1;

  @ffi.Uint8()
  int vmods2;
}

class XkbPtrAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int high_XXX;

  @ffi.Uint8()
  int low_XXX;

  @ffi.Uint8()
  int high_YYY;

  @ffi.Uint8()
  int low_YYY;
}

class XkbPtrBtnAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int count;

  @ffi.Uint8()
  int button;
}

class XkbPtrDfltAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int affect;

  @ffi.Int8()
  int valueXXX;
}

class XkbSwitchScreenAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Int8()
  int screenXXX;
}

class XkbCtrlsAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int ctrls3;

  @ffi.Uint8()
  int ctrls2;

  @ffi.Uint8()
  int ctrls1;

  @ffi.Uint8()
  int ctrls0;
}

class XkbMessageAction extends ffi.Struct {}

class XkbRedirectKeyAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int new_key;

  @ffi.Uint8()
  int mods_mask;

  @ffi.Uint8()
  int mods;

  @ffi.Uint8()
  int vmods_mask0;

  @ffi.Uint8()
  int vmods_mask1;

  @ffi.Uint8()
  int vmods0;

  @ffi.Uint8()
  int vmods1;
}

class XkbDeviceBtnAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int count;

  @ffi.Uint8()
  int button;

  @ffi.Uint8()
  int device;
}

class XkbDeviceValuatorAction extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int device;

  @ffi.Uint8()
  int v1_what;

  @ffi.Uint8()
  int v1_ndx;

  @ffi.Uint8()
  int v1_value;

  @ffi.Uint8()
  int v2_what;

  @ffi.Uint8()
  int v2_ndx;

  @ffi.Uint8()
  int v2_value;
}

class XkbControlsPtr extends ffi.Struct {}

class XkbServerMapPtr extends ffi.Struct {}

class XkbSymMapPtr extends ffi.Struct {}

class XkbClientMapPtr extends ffi.Struct {
  @ffi.Uint8()
  int size_types;

  @ffi.Uint8()
  int num_types;

  ffi.Pointer<XkbKeyTypePtr> types;

  @ffi.Uint16()
  int size_syms;

  @ffi.Uint16()
  int num_syms;

  ffi.Pointer<ffi.Int32> syms;

  ffi.Pointer<XkbSymMapPtr> key_sym_map;

  ffi.Pointer<ffi.Uint8> modmap;
}

class XkbSymInterpretPtr extends ffi.Struct {}

class XkbCompatMapPtr extends ffi.Struct {}

class XkbIndicatorMapPtr extends ffi.Struct {}

class XkbIndicatorPtr extends ffi.Struct {}

class XkbKeyNamePtr extends ffi.Struct {}

class XkbKeyAliasPtr extends ffi.Struct {}

class XkbNamesPtr extends ffi.Struct {}

class _XkbGeometry extends ffi.Struct {}

class _XDisplay extends ffi.Struct {}

class XkbDescPtr extends ffi.Struct {
  ffi.Pointer<_XDisplay> dpy;

  @ffi.Uint16()
  int flags;

  @ffi.Uint16()
  int device_spec;

  @ffi.Int32()
  int min_key_code;

  @ffi.Int32()
  int max_key_code;

  ffi.Pointer<XkbControlsPtr> ctrls;

  ffi.Pointer<XkbServerMapPtr> server;

  ffi.Pointer<XkbClientMapPtr> map;

  ffi.Pointer<XkbIndicatorPtr> indicators;

  ffi.Pointer<XkbNamesPtr> names;

  ffi.Pointer<XkbCompatMapPtr> compat;

  ffi.Pointer<_XkbGeometry> geom;
}

class XkbMapChangesPtr extends ffi.Struct {
  @ffi.Uint16()
  int changed;

  @ffi.Int32()
  int min_key_code;

  @ffi.Int32()
  int max_key_code;

  @ffi.Uint8()
  int first_type;

  @ffi.Uint8()
  int num_types;

  @ffi.Int32()
  int first_key_sym;

  @ffi.Uint8()
  int num_key_syms;

  @ffi.Int32()
  int first_key_act;

  @ffi.Uint8()
  int num_key_acts;

  @ffi.Int32()
  int first_key_behavior;

  @ffi.Uint8()
  int num_key_behaviors;

  @ffi.Int32()
  int first_key_explicit;

  @ffi.Uint8()
  int num_key_explicit;

  @ffi.Int32()
  int first_modmap_key;

  @ffi.Uint8()
  int num_modmap_keys;

  @ffi.Int32()
  int first_vmodmap_key;

  @ffi.Uint8()
  int num_vmodmap_keys;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int vmods;
}

class XkbControlsChangesPtr extends ffi.Struct {
  @ffi.Uint32()
  int changed_ctrls;

  @ffi.Uint32()
  int enabled_ctrls_changes;

  @ffi.Int32()
  int num_groups_changed;
}

class XkbIndicatorChangesPtr extends ffi.Struct {
  @ffi.Uint32()
  int state_changes;

  @ffi.Uint32()
  int map_changes;
}

class XkbNameChangesPtr extends ffi.Struct {
  @ffi.Uint32()
  int changed;

  @ffi.Uint8()
  int first_type;

  @ffi.Uint8()
  int num_types;

  @ffi.Uint8()
  int first_lvl;

  @ffi.Uint8()
  int num_lvls;

  @ffi.Uint8()
  int num_aliases;

  @ffi.Uint8()
  int num_rg;

  @ffi.Uint8()
  int first_key;

  @ffi.Uint8()
  int num_keys;

  @ffi.Uint16()
  int changed_vmods;

  @ffi.Uint64()
  int changed_indicators;

  @ffi.Uint8()
  int changed_groups;
}

class XkbCompatChangesPtr extends ffi.Struct {
  @ffi.Uint8()
  int changed_groups;

  @ffi.Uint16()
  int first_si;

  @ffi.Uint16()
  int num_si;
}

class XkbChangesPtr extends ffi.Struct {}

class XkbComponentNamesPtr extends ffi.Struct {
  ffi.Pointer<ffi.Int8> keymap;

  ffi.Pointer<ffi.Int8> keycodes;

  ffi.Pointer<ffi.Int8> types;

  ffi.Pointer<ffi.Int8> compat;

  ffi.Pointer<ffi.Int8> symbols;

  ffi.Pointer<ffi.Int8> geometry;
}

class XkbComponentNamePtr extends ffi.Struct {
  @ffi.Uint16()
  int flags;

  ffi.Pointer<ffi.Int8> name;
}

class XkbComponentListPtr extends ffi.Struct {
  @ffi.Int32()
  int num_keymaps;

  @ffi.Int32()
  int num_keycodes;

  @ffi.Int32()
  int num_types;

  @ffi.Int32()
  int num_compat;

  @ffi.Int32()
  int num_symbols;

  @ffi.Int32()
  int num_geometry;

  ffi.Pointer<XkbComponentNamePtr> keymaps;

  ffi.Pointer<XkbComponentNamePtr> keycodes;

  ffi.Pointer<XkbComponentNamePtr> types;

  ffi.Pointer<XkbComponentNamePtr> compat;

  ffi.Pointer<XkbComponentNamePtr> symbols;

  ffi.Pointer<XkbComponentNamePtr> geometry;
}

class XkbDeviceLedInfoPtr extends ffi.Struct {}

class XkbDeviceInfoPtr extends ffi.Struct {}

class XkbDeviceLedChangesPtr extends ffi.Struct {
  @ffi.Uint16()
  int led_class;

  @ffi.Uint16()
  int led_id;

  @ffi.Uint32()
  int defined;

  ffi.Pointer<XkbDeviceLedChangesPtr> next;
}

class XkbDeviceChangesPtr extends ffi.Struct {}

class XkbPropertyPtr extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Int8> value;
}

class XkbColorPtr extends ffi.Struct {
  @ffi.Uint32()
  int pixel;

  ffi.Pointer<ffi.Int8> spec;
}

class XkbPointPtr extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class XkbBoundsPtr extends ffi.Struct {
  @ffi.Int16()
  int x1;

  @ffi.Int16()
  int y1;

  @ffi.Int16()
  int x2;

  @ffi.Int16()
  int y2;
}

class XkbOutlinePtr extends ffi.Struct {
  @ffi.Uint16()
  int num_points;

  @ffi.Uint16()
  int sz_points;

  @ffi.Uint16()
  int corner_radius;

  ffi.Pointer<XkbPointPtr> points;
}

class XkbShapePtr extends ffi.Struct {}

class XkbShapeDoodadPtr extends ffi.Struct {
  @ffi.Int32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Uint16()
  int color_ndx;

  @ffi.Uint16()
  int shape_ndx;
}

class XkbTextDoodadPtr extends ffi.Struct {
  @ffi.Int32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Int16()
  int width;

  @ffi.Int16()
  int height;

  @ffi.Uint16()
  int color_ndx;

  ffi.Pointer<ffi.Int8> text;

  ffi.Pointer<ffi.Int8> font;
}

class XkbIndicatorDoodadPtr extends ffi.Struct {
  @ffi.Int32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Uint16()
  int shape_ndx;

  @ffi.Uint16()
  int on_color_ndx;

  @ffi.Uint16()
  int off_color_ndx;
}

class XkbLogoDoodadPtr extends ffi.Struct {
  @ffi.Int32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Uint16()
  int color_ndx;

  @ffi.Uint16()
  int shape_ndx;

  ffi.Pointer<ffi.Int8> logo_name;
}

class XkbAnyDoodadPtr extends ffi.Struct {
  @ffi.Int32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;
}

class XkbKeyPtr extends ffi.Struct {}

class XkbRowPtr extends ffi.Struct {}

class XkbOverlayKeyPtr extends ffi.Struct {}

class XkbOverlayRowPtr extends ffi.Struct {
  @ffi.Uint16()
  int row_under;

  @ffi.Uint16()
  int num_keys;

  @ffi.Uint16()
  int sz_keys;

  ffi.Pointer<XkbOverlayKeyPtr> keys;
}

class XkbOverlayPtr extends ffi.Struct {
  @ffi.Int32()
  int name;

  ffi.Pointer<XkbSectionPtr> section_under;

  @ffi.Uint16()
  int num_rows;

  @ffi.Uint16()
  int sz_rows;

  ffi.Pointer<XkbOverlayRowPtr> rows;

  ffi.Pointer<XkbBoundsPtr> bounds;
}

class XkbSectionPtr extends ffi.Struct {}

class XkbGeometrySizesPtr extends ffi.Struct {
  @ffi.Uint32()
  int which;

  @ffi.Uint16()
  int num_properties;

  @ffi.Uint16()
  int num_colors;

  @ffi.Uint16()
  int num_shapes;

  @ffi.Uint16()
  int num_sections;

  @ffi.Uint16()
  int num_doodads;

  @ffi.Uint16()
  int num_key_aliases;
}

class __fsid_t extends ffi.Struct {}

class __sigset_t extends ffi.Struct {}

class timeval extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class fd_set extends ffi.Struct {}

class __pthread_list_t extends ffi.Struct {
  ffi.Pointer<__pthread_list_t> __prev;

  ffi.Pointer<__pthread_list_t> __next;
}

class __pthread_slist_t extends ffi.Struct {
  ffi.Pointer<__pthread_slist_t> __next;
}

class __pthread_mutex_s extends ffi.Struct {}

class __pthread_rwlock_arch_t extends ffi.Struct {}

class __pthread_cond_s extends ffi.Struct {}

class max_align_t extends ffi.Struct {}

class XExtData extends ffi.Struct {
  @ffi.Int32()
  int number;

  ffi.Pointer<XExtData> next;

  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> free_private;

  ffi.Pointer<ffi.Int8> private_data;
}

class XExtCodes extends ffi.Struct {
  @ffi.Int32()
  int extension_1;

  @ffi.Int32()
  int major_opcode;

  @ffi.Int32()
  int first_event;

  @ffi.Int32()
  int first_error;
}

class XPixmapFormatValues extends ffi.Struct {
  @ffi.Int32()
  int depth;

  @ffi.Int32()
  int bits_per_pixel;

  @ffi.Int32()
  int scanline_pad;
}

class XGCValues extends ffi.Struct {
  @ffi.Int32()
  int function;

  @ffi.Uint64()
  int plane_mask;

  @ffi.Uint64()
  int foreground;

  @ffi.Uint64()
  int background;

  @ffi.Int32()
  int line_width;

  @ffi.Int32()
  int line_style;

  @ffi.Int32()
  int cap_style;

  @ffi.Int32()
  int join_style;

  @ffi.Int32()
  int fill_style;

  @ffi.Int32()
  int fill_rule;

  @ffi.Int32()
  int arc_mode;

  @ffi.Uint64()
  int tile;

  @ffi.Uint64()
  int stipple;

  @ffi.Int32()
  int ts_x_origin;

  @ffi.Int32()
  int ts_y_origin;

  @ffi.Uint64()
  int font;

  @ffi.Int32()
  int subwindow_mode;

  @ffi.Int32()
  int graphics_exposures;

  @ffi.Int32()
  int clip_x_origin;

  @ffi.Int32()
  int clip_y_origin;

  @ffi.Uint64()
  int clip_mask;

  @ffi.Int32()
  int dash_offset;

  @ffi.Int8()
  int dashes;
}

class _XGC extends ffi.Struct {}

class Visual extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  @ffi.Uint64()
  int visualid;

  @ffi.Int32()
  int class_1;

  @ffi.Uint64()
  int red_mask;

  @ffi.Uint64()
  int green_mask;

  @ffi.Uint64()
  int blue_mask;

  @ffi.Int32()
  int bits_per_rgb;

  @ffi.Int32()
  int map_entries;
}

class Depth extends ffi.Struct {
  @ffi.Int32()
  int depth;

  @ffi.Int32()
  int nvisuals;

  ffi.Pointer<Visual> visuals;
}

class Screen extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int root;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int mwidth;

  @ffi.Int32()
  int mheight;

  @ffi.Int32()
  int ndepths;

  ffi.Pointer<Depth> depths;

  @ffi.Int32()
  int root_depth;

  ffi.Pointer<Visual> root_visual;

  ffi.Pointer<_XGC> default_gc;

  @ffi.Uint64()
  int cmap;

  @ffi.Uint64()
  int white_pixel;

  @ffi.Uint64()
  int black_pixel;

  @ffi.Int32()
  int max_maps;

  @ffi.Int32()
  int min_maps;

  @ffi.Int32()
  int backing_store;

  @ffi.Int32()
  int save_unders;

  @ffi.Int64()
  int root_input_mask;
}

class ScreenFormat extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  @ffi.Int32()
  int depth;

  @ffi.Int32()
  int bits_per_pixel;

  @ffi.Int32()
  int scanline_pad;
}

class XSetWindowAttributes extends ffi.Struct {
  @ffi.Uint64()
  int background_pixmap;

  @ffi.Uint64()
  int background_pixel;

  @ffi.Uint64()
  int border_pixmap;

  @ffi.Uint64()
  int border_pixel;

  @ffi.Int32()
  int bit_gravity;

  @ffi.Int32()
  int win_gravity;

  @ffi.Int32()
  int backing_store;

  @ffi.Uint64()
  int backing_planes;

  @ffi.Uint64()
  int backing_pixel;

  @ffi.Int32()
  int save_under;

  @ffi.Int64()
  int event_mask;

  @ffi.Int64()
  int do_not_propagate_mask;

  @ffi.Int32()
  int override_redirect;

  @ffi.Uint64()
  int colormap;

  @ffi.Uint64()
  int cursor;
}

class XWindowAttributes extends ffi.Struct {
  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Int32()
  int depth;

  ffi.Pointer<Visual> visual;

  @ffi.Uint64()
  int root;

  @ffi.Int32()
  int class_1;

  @ffi.Int32()
  int bit_gravity;

  @ffi.Int32()
  int win_gravity;

  @ffi.Int32()
  int backing_store;

  @ffi.Uint64()
  int backing_planes;

  @ffi.Uint64()
  int backing_pixel;

  @ffi.Int32()
  int save_under;

  @ffi.Uint64()
  int colormap;

  @ffi.Int32()
  int map_installed;

  @ffi.Int32()
  int map_state;

  @ffi.Int64()
  int all_event_masks;

  @ffi.Int64()
  int your_event_mask;

  @ffi.Int64()
  int do_not_propagate_mask;

  @ffi.Int32()
  int override_redirect;

  ffi.Pointer<Screen> screen;
}

class XHostAddress extends ffi.Struct {
  @ffi.Int32()
  int family;

  @ffi.Int32()
  int length;

  ffi.Pointer<ffi.Int8> address;
}

class XServerInterpretedAddress extends ffi.Struct {
  @ffi.Int32()
  int typelength;

  @ffi.Int32()
  int valuelength;

  ffi.Pointer<ffi.Int8> type;

  ffi.Pointer<ffi.Int8> value;
}

class funcs extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> create_image;

  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> destroy_image;

  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> get_pixel;

  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> put_pixel;

  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> sub_image;

  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> add_pixel;
}

class XImage extends ffi.Struct {}

class XWindowChanges extends ffi.Struct {
  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Uint64()
  int sibling;

  @ffi.Int32()
  int stack_mode;
}

class XColor extends ffi.Struct {
  @ffi.Uint64()
  int pixel;

  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;

  @ffi.Int8()
  int flags;

  @ffi.Int8()
  int pad;
}

class XSegment extends ffi.Struct {
  @ffi.Int16()
  int x1;

  @ffi.Int16()
  int y1;

  @ffi.Int16()
  int x2;

  @ffi.Int16()
  int y2;
}

class XPoint extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class XRectangle extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class XArc extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Int16()
  int angle1;

  @ffi.Int16()
  int angle2;
}

class XKeyboardControl extends ffi.Struct {
  @ffi.Int32()
  int key_click_percent;

  @ffi.Int32()
  int bell_percent;

  @ffi.Int32()
  int bell_pitch;

  @ffi.Int32()
  int bell_duration;

  @ffi.Int32()
  int led;

  @ffi.Int32()
  int led_mode;

  @ffi.Int32()
  int key;

  @ffi.Int32()
  int auto_repeat_mode;
}

class XKeyboardState extends ffi.Struct {}

class XTimeCoord extends ffi.Struct {
  @ffi.Uint64()
  int time;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class XModifierKeymap extends ffi.Struct {
  @ffi.Int32()
  int max_keypermod;

  ffi.Pointer<ffi.Uint8> modifiermap;
}

class _XPrivate extends ffi.Struct {}

class _XrmHashBucketRec extends ffi.Struct {}

class _XPrivDisplay extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  ffi.Pointer<_XPrivate> private1;

  @ffi.Int32()
  int fd;

  @ffi.Int32()
  int private2;

  @ffi.Int32()
  int proto_major_version;

  @ffi.Int32()
  int proto_minor_version;

  ffi.Pointer<ffi.Int8> vendor;

  @ffi.Uint64()
  int private3;

  @ffi.Uint64()
  int private4;

  @ffi.Uint64()
  int private5;

  @ffi.Int32()
  int private6;

  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> resource_alloc;

  @ffi.Int32()
  int byte_order;

  @ffi.Int32()
  int bitmap_unit;

  @ffi.Int32()
  int bitmap_pad;

  @ffi.Int32()
  int bitmap_bit_order;

  @ffi.Int32()
  int nformats;

  ffi.Pointer<ScreenFormat> pixmap_format;

  @ffi.Int32()
  int private8;

  @ffi.Int32()
  int release;

  ffi.Pointer<_XPrivate> private9;

  ffi.Pointer<_XPrivate> private10;

  @ffi.Int32()
  int qlen;

  @ffi.Uint64()
  int last_request_read;

  @ffi.Uint64()
  int request;

  ffi.Pointer<ffi.Int8> private11;

  ffi.Pointer<ffi.Int8> private12;

  ffi.Pointer<ffi.Int8> private13;

  ffi.Pointer<ffi.Int8> private14;

  @ffi.Uint32()
  int max_request_size;

  ffi.Pointer<_XrmHashBucketRec> db;

  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> private15;

  ffi.Pointer<ffi.Int8> display_name;

  @ffi.Int32()
  int default_screen;

  @ffi.Int32()
  int nscreens;

  ffi.Pointer<Screen> screens;

  @ffi.Uint64()
  int motion_buffer;

  @ffi.Uint64()
  int private16;

  @ffi.Int32()
  int min_keycode;

  @ffi.Int32()
  int max_keycode;

  ffi.Pointer<ffi.Int8> private17;

  ffi.Pointer<ffi.Int8> private18;

  @ffi.Int32()
  int private19;

  ffi.Pointer<ffi.Int8> xdefaults;
}

class XKeyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int root;

  @ffi.Uint64()
  int subwindow;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int x_root;

  @ffi.Int32()
  int y_root;

  @ffi.Uint32()
  int state;

  @ffi.Uint32()
  int keycode;

  @ffi.Int32()
  int same_screen;
}

class XButtonEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int root;

  @ffi.Uint64()
  int subwindow;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int x_root;

  @ffi.Int32()
  int y_root;

  @ffi.Uint32()
  int state;

  @ffi.Uint32()
  int button;

  @ffi.Int32()
  int same_screen;
}

class XMotionEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int root;

  @ffi.Uint64()
  int subwindow;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int x_root;

  @ffi.Int32()
  int y_root;

  @ffi.Uint32()
  int state;

  @ffi.Int8()
  int is_hint;

  @ffi.Int32()
  int same_screen;
}

class XCrossingEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int root;

  @ffi.Uint64()
  int subwindow;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int x_root;

  @ffi.Int32()
  int y_root;

  @ffi.Int32()
  int mode;

  @ffi.Int32()
  int detail;

  @ffi.Int32()
  int same_screen;

  @ffi.Int32()
  int focus;

  @ffi.Uint32()
  int state;
}

class XFocusChangeEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int mode;

  @ffi.Int32()
  int detail;
}

class XKeymapEvent extends ffi.Struct {}

class XExposeEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int count;
}

class XGraphicsExposeEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int drawable;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int count;

  @ffi.Int32()
  int major_code;

  @ffi.Int32()
  int minor_code;
}

class XNoExposeEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int drawable;

  @ffi.Int32()
  int major_code;

  @ffi.Int32()
  int minor_code;
}

class XVisibilityEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int state;
}

class XCreateWindowEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int parent;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Int32()
  int override_redirect;
}

class XDestroyWindowEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;
}

class XUnmapEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int from_configure;
}

class XMapEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int override_redirect;
}

class XMapRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int parent;

  @ffi.Uint64()
  int window;
}

class XReparentEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int parent;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int override_redirect;
}

class XConfigureEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Uint64()
  int above;

  @ffi.Int32()
  int override_redirect;
}

class XGravityEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;
}

class XResizeRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;
}

class XConfigureRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int parent;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Int32()
  int width;

  @ffi.Int32()
  int height;

  @ffi.Int32()
  int border_width;

  @ffi.Uint64()
  int above;

  @ffi.Int32()
  int detail;

  @ffi.Uint64()
  int value_mask;
}

class XCirculateEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int event;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int place;
}

class XCirculateRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int parent;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int place;
}

class XPropertyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int atom;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int state;
}

class XSelectionClearEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int selection;

  @ffi.Uint64()
  int time;
}

class XSelectionRequestEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int owner;

  @ffi.Uint64()
  int requestor;

  @ffi.Uint64()
  int selection;

  @ffi.Uint64()
  int target;

  @ffi.Uint64()
  int property;

  @ffi.Uint64()
  int time;
}

class XSelectionEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int requestor;

  @ffi.Uint64()
  int selection;

  @ffi.Uint64()
  int target;

  @ffi.Uint64()
  int property;

  @ffi.Uint64()
  int time;
}

class XColormapEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Uint64()
  int colormap;

  @ffi.Int32()
  int new_1;

  @ffi.Int32()
  int state;
}

class XClientMessageEvent extends ffi.Struct {}

class XMappingEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int request;

  @ffi.Int32()
  int first_keycode;

  @ffi.Int32()
  int count;
}

class XErrorEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int resourceid;

  @ffi.Uint64()
  int serial;

  @ffi.Uint8()
  int error_code;

  @ffi.Uint8()
  int request_code;

  @ffi.Uint8()
  int minor_code;
}

class XAnyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int window;
}

class XGenericEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Int32()
  int extension_1;

  @ffi.Int32()
  int evtype;
}

class XGenericEventCookie extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Int32()
  int extension_1;

  @ffi.Int32()
  int evtype;

  @ffi.Uint32()
  int cookie;

  ffi.Pointer<ffi.Void> data;
}

class XCharStruct extends ffi.Struct {
  @ffi.Int16()
  int lbearing;

  @ffi.Int16()
  int rbearing;

  @ffi.Int16()
  int width;

  @ffi.Int16()
  int ascent;

  @ffi.Int16()
  int descent;

  @ffi.Uint16()
  int attributes;
}

class XFontProp extends ffi.Struct {
  @ffi.Uint64()
  int name;

  @ffi.Uint64()
  int card32;
}

class XFontStruct extends ffi.Struct {}

class XTextItem extends ffi.Struct {
  ffi.Pointer<ffi.Int8> chars;

  @ffi.Int32()
  int nchars;

  @ffi.Int32()
  int delta;

  @ffi.Uint64()
  int font;
}

class XChar2b extends ffi.Struct {
  @ffi.Uint8()
  int byte1;

  @ffi.Uint8()
  int byte2;
}

class XTextItem16 extends ffi.Struct {
  ffi.Pointer<XChar2b> chars;

  @ffi.Int32()
  int nchars;

  @ffi.Int32()
  int delta;

  @ffi.Uint64()
  int font;
}

class XFontSetExtents extends ffi.Struct {}

class _XOM extends ffi.Struct {}

class _XOC extends ffi.Struct {}

class XmbTextItem extends ffi.Struct {
  ffi.Pointer<ffi.Int8> chars;

  @ffi.Int32()
  int nchars;

  @ffi.Int32()
  int delta;

  ffi.Pointer<_XOC> font_set;
}

class XwcTextItem extends ffi.Struct {
  ffi.Pointer<ffi.Int32> chars;

  @ffi.Int32()
  int nchars;

  @ffi.Int32()
  int delta;

  ffi.Pointer<_XOC> font_set;
}

class XOMCharSetList extends ffi.Struct {
  @ffi.Int32()
  int charset_count;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> charset_list;
}

abstract class XOrientation {
  static const int XOMOrientation_LTR_TTB = 0;
  static const int XOMOrientation_RTL_TTB = 1;
  static const int XOMOrientation_TTB_LTR = 2;
  static const int XOMOrientation_TTB_RTL = 3;
  static const int XOMOrientation_Context = 4;
}

class XOMOrientation extends ffi.Struct {
  @ffi.Int32()
  int num_orientation;

  ffi.Pointer<ffi.Int32> orientation;
}

class XOMFontInfo extends ffi.Struct {
  @ffi.Int32()
  int num_font;

  ffi.Pointer<ffi.Pointer<XFontStruct>> font_struct_list;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> font_name_list;
}

class _XIM extends ffi.Struct {}

class _XIC extends ffi.Struct {}

class XIMStyles extends ffi.Struct {
  @ffi.Uint16()
  int count_styles;

  ffi.Pointer<ffi.Uint64> supported_styles;
}

class XIMCallback extends ffi.Struct {
  ffi.Pointer<ffi.Int8> client_data;

  ffi.Pointer<ffi.NativeFunction<XIMProc>> callback;
}

class XICCallback extends ffi.Struct {
  ffi.Pointer<ffi.Int8> client_data;

  ffi.Pointer<ffi.NativeFunction<XICProc>> callback;
}

class XIMText extends ffi.Struct {}

class XIMPreeditStateNotifyCallbackStruct extends ffi.Struct {
  @ffi.Uint64()
  int state;
}

class XIMStringConversionText extends ffi.Struct {}

abstract class XIMCaretDirection {
  static const int XIMForwardChar = 0;
  static const int XIMBackwardChar = 1;
  static const int XIMForwardWord = 2;
  static const int XIMBackwardWord = 3;
  static const int XIMCaretUp = 4;
  static const int XIMCaretDown = 5;
  static const int XIMNextLine = 6;
  static const int XIMPreviousLine = 7;
  static const int XIMLineStart = 8;
  static const int XIMLineEnd = 9;
  static const int XIMAbsolutePosition = 10;
  static const int XIMDontChange = 11;
}

class XIMStringConversionCallbackStruct extends ffi.Struct {
  @ffi.Uint16()
  int position;

  @ffi.Int32()
  int direction;

  @ffi.Uint16()
  int operation;

  @ffi.Uint16()
  int factor;

  ffi.Pointer<XIMStringConversionText> text;
}

class XIMPreeditDrawCallbackStruct extends ffi.Struct {
  @ffi.Int32()
  int caret;

  @ffi.Int32()
  int chg_first;

  @ffi.Int32()
  int chg_length;

  ffi.Pointer<XIMText> text;
}

abstract class XIMCaretStyle {
  static const int XIMIsInvisible = 0;
  static const int XIMIsPrimary = 1;
  static const int XIMIsSecondary = 2;
}

class XIMPreeditCaretCallbackStruct extends ffi.Struct {
  @ffi.Int32()
  int position;

  @ffi.Int32()
  int direction;

  @ffi.Int32()
  int style;
}

abstract class XIMStatusDataType {
  static const int XIMTextType = 0;
  static const int XIMBitmapType = 1;
}

class XIMStatusDrawCallbackStruct extends ffi.Struct {}

class XIMHotKeyTrigger extends ffi.Struct {
  @ffi.Uint64()
  int keysym;

  @ffi.Int32()
  int modifier;

  @ffi.Int32()
  int modifier_mask;
}

class XIMHotKeyTriggers extends ffi.Struct {
  @ffi.Int32()
  int num_hot_key;

  ffi.Pointer<XIMHotKeyTrigger> key;
}

class XIMValuesList extends ffi.Struct {
  @ffi.Uint16()
  int count_values;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> supported_values;
}

class XcmsRGB extends ffi.Struct {
  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;
}

class XcmsRGBi extends ffi.Struct {
  @ffi.Double()
  double red;

  @ffi.Double()
  double green;

  @ffi.Double()
  double blue;
}

class XcmsCIEXYZ extends ffi.Struct {
  @ffi.Double()
  double X;

  @ffi.Double()
  double Y;

  @ffi.Double()
  double Z;
}

class XcmsCIEuvY extends ffi.Struct {
  @ffi.Double()
  double u_prime;

  @ffi.Double()
  double v_prime;

  @ffi.Double()
  double Y;
}

class XcmsCIExyY extends ffi.Struct {
  @ffi.Double()
  double x;

  @ffi.Double()
  double y;

  @ffi.Double()
  double Y;
}

class XcmsCIELab extends ffi.Struct {
  @ffi.Double()
  double L_star;

  @ffi.Double()
  double a_star;

  @ffi.Double()
  double b_star;
}

class XcmsCIELuv extends ffi.Struct {
  @ffi.Double()
  double L_star;

  @ffi.Double()
  double u_star;

  @ffi.Double()
  double v_star;
}

class XcmsTekHVC extends ffi.Struct {
  @ffi.Double()
  double H;

  @ffi.Double()
  double V;

  @ffi.Double()
  double C;
}

class XcmsPad extends ffi.Struct {
  @ffi.Double()
  double pad0;

  @ffi.Double()
  double pad1;

  @ffi.Double()
  double pad2;

  @ffi.Double()
  double pad3;
}

class XcmsColor extends ffi.Struct {}

class XcmsPerScrnInfo extends ffi.Struct {}

class XcmsCCCRec extends ffi.Struct {}

class XcmsColorSpace extends ffi.Struct {
  ffi.Pointer<ffi.Int8> prefix;

  @ffi.Uint64()
  int id;

  ffi.Pointer<ffi.NativeFunction<XcmsParseStringProc>> parseString;

  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<XcmsFuncListPtr>>> to_CIEXYZ;

  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<XcmsFuncListPtr>>> from_CIEXYZ;

  @ffi.Int32()
  int inverse_flag;
}

class XcmsFunctionSet extends ffi.Struct {
  ffi.Pointer<ffi.Pointer<XcmsColorSpace>> DDColorSpaces;

  ffi.Pointer<ffi.NativeFunction<XcmsScreenInitProc>> screenInitProc;

  ffi.Pointer<ffi.NativeFunction<XcmsScreenFreeProc>> screenFreeProc;
}

class XkbAnyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Uint32()
  int device;
}

class XkbNewKeyboardNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Int32()
  int old_device;

  @ffi.Int32()
  int min_key_code;

  @ffi.Int32()
  int max_key_code;

  @ffi.Int32()
  int old_min_key_code;

  @ffi.Int32()
  int old_max_key_code;

  @ffi.Uint32()
  int changed;

  @ffi.Int8()
  int req_major;

  @ffi.Int8()
  int req_minor;
}

class XkbMapNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Uint32()
  int changed;

  @ffi.Uint32()
  int flags;

  @ffi.Int32()
  int first_type;

  @ffi.Int32()
  int num_types;

  @ffi.Uint8()
  int min_key_code;

  @ffi.Uint8()
  int max_key_code;

  @ffi.Uint8()
  int first_key_sym;

  @ffi.Uint8()
  int first_key_act;

  @ffi.Uint8()
  int first_key_behavior;

  @ffi.Uint8()
  int first_key_explicit;

  @ffi.Uint8()
  int first_modmap_key;

  @ffi.Uint8()
  int first_vmodmap_key;

  @ffi.Int32()
  int num_key_syms;

  @ffi.Int32()
  int num_key_acts;

  @ffi.Int32()
  int num_key_behaviors;

  @ffi.Int32()
  int num_key_explicit;

  @ffi.Int32()
  int num_modmap_keys;

  @ffi.Int32()
  int num_vmodmap_keys;

  @ffi.Uint32()
  int vmods;
}

class XkbStateNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Uint32()
  int changed;

  @ffi.Int32()
  int group;

  @ffi.Int32()
  int base_group;

  @ffi.Int32()
  int latched_group;

  @ffi.Int32()
  int locked_group;

  @ffi.Uint32()
  int mods;

  @ffi.Uint32()
  int base_mods;

  @ffi.Uint32()
  int latched_mods;

  @ffi.Uint32()
  int locked_mods;

  @ffi.Int32()
  int compat_state;

  @ffi.Uint8()
  int grab_mods;

  @ffi.Uint8()
  int compat_grab_mods;

  @ffi.Uint8()
  int lookup_mods;

  @ffi.Uint8()
  int compat_lookup_mods;

  @ffi.Int32()
  int ptr_buttons;

  @ffi.Uint8()
  int keycode;

  @ffi.Int8()
  int event_type;

  @ffi.Int8()
  int req_major;

  @ffi.Int8()
  int req_minor;
}

class XkbControlsNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Uint32()
  int changed_ctrls;

  @ffi.Uint32()
  int enabled_ctrls;

  @ffi.Uint32()
  int enabled_ctrl_changes;

  @ffi.Int32()
  int num_groups;

  @ffi.Uint8()
  int keycode;

  @ffi.Int8()
  int event_type;

  @ffi.Int8()
  int req_major;

  @ffi.Int8()
  int req_minor;
}

class XkbIndicatorNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Uint32()
  int changed;

  @ffi.Uint32()
  int state;
}

class XkbNamesNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Uint32()
  int changed;

  @ffi.Int32()
  int first_type;

  @ffi.Int32()
  int num_types;

  @ffi.Int32()
  int first_lvl;

  @ffi.Int32()
  int num_lvls;

  @ffi.Int32()
  int num_aliases;

  @ffi.Int32()
  int num_radio_groups;

  @ffi.Uint32()
  int changed_vmods;

  @ffi.Uint32()
  int changed_groups;

  @ffi.Uint32()
  int changed_indicators;

  @ffi.Int32()
  int first_key;

  @ffi.Int32()
  int num_keys;
}

class XkbCompatMapNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Uint32()
  int changed_groups;

  @ffi.Int32()
  int first_si;

  @ffi.Int32()
  int num_si;

  @ffi.Int32()
  int num_total_si;
}

class XkbBellNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Int32()
  int percent;

  @ffi.Int32()
  int pitch;

  @ffi.Int32()
  int duration;

  @ffi.Int32()
  int bell_class;

  @ffi.Int32()
  int bell_id;

  @ffi.Uint64()
  int name;

  @ffi.Uint64()
  int window;

  @ffi.Int32()
  int event_only;
}

class XkbActionMessageEvent extends ffi.Struct {}

class XkbAccessXNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Int32()
  int detail;

  @ffi.Int32()
  int keycode;

  @ffi.Int32()
  int sk_delay;

  @ffi.Int32()
  int debounce_delay;
}

class XkbExtensionDeviceNotifyEvent extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Uint64()
  int serial;

  @ffi.Int32()
  int send_event;

  ffi.Pointer<_XDisplay> display;

  @ffi.Uint64()
  int time;

  @ffi.Int32()
  int xkb_type;

  @ffi.Int32()
  int device;

  @ffi.Uint32()
  int reason;

  @ffi.Uint32()
  int supported;

  @ffi.Uint32()
  int unsupported;

  @ffi.Int32()
  int first_btn;

  @ffi.Int32()
  int num_btns;

  @ffi.Uint32()
  int leds_defined;

  @ffi.Uint32()
  int led_state;

  @ffi.Int32()
  int led_class;

  @ffi.Int32()
  int led_id;
}

class _XkbKbdDpyState extends ffi.Struct {}

class iovec extends ffi.Struct {
  ffi.Pointer<ffi.Void> iov_base;

  @ffi.Uint64()
  int iov_len;
}

class sched_param extends ffi.Struct {
  @ffi.Int32()
  int sched_priority;
}

class cpu_set_t extends ffi.Struct {}

class tm extends ffi.Struct {
  @ffi.Int32()
  int tm_sec;

  @ffi.Int32()
  int tm_min;

  @ffi.Int32()
  int tm_hour;

  @ffi.Int32()
  int tm_mday;

  @ffi.Int32()
  int tm_mon;

  @ffi.Int32()
  int tm_year;

  @ffi.Int32()
  int tm_wday;

  @ffi.Int32()
  int tm_yday;

  @ffi.Int32()
  int tm_isdst;

  @ffi.Int64()
  int tm_gmtoff;

  ffi.Pointer<ffi.Int8> tm_zone;
}

class itimerspec extends ffi.Struct {}

class sigevent extends ffi.Struct {}

class __locale_data extends ffi.Struct {}

class __locale_struct extends ffi.Struct {}

class _pthread_cleanup_buffer extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  @ffi.Int32()
  int __canceltype;

  ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

class __pthread_unwind_buf_t extends ffi.Struct {}

class __pthread_cleanup_frame extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> __cancel_routine;

  ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int32()
  int __do_it;

  @ffi.Int32()
  int __cancel_type;
}

class __jmp_buf_tag extends ffi.Struct {}

class xcb_connection_t extends ffi.Struct {}

class xcb_generic_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_generic_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;
}

class xcb_generic_event_t extends ffi.Struct {}

class xcb_raw_generic_event_t extends ffi.Struct {}

class xcb_ge_event_t extends ffi.Struct {}

class xcb_generic_error_t extends ffi.Struct {}

class xcb_void_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_char2b_t extends ffi.Struct {
  @ffi.Uint8()
  int byte1;

  @ffi.Uint8()
  int byte2;
}

class xcb_char2b_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_char2b_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_window_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_pixmap_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_cursor_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_font_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_gcontext_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_colormap_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_atom_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_drawable_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_fontable_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_bool32_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_visualid_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_timestamp_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_keysym_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_keycode_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_keycode32_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint32> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_button_iterator_t extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_point_t extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xcb_point_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_point_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_rectangle_t extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xcb_rectangle_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_rectangle_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_arc_t extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Int16()
  int angle1;

  @ffi.Int16()
  int angle2;
}

class xcb_arc_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_arc_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_format_t extends ffi.Struct {}

class xcb_format_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_format_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

abstract class xcb_visual_class_t {
  static const int XCB_VISUAL_CLASS_STATIC_GRAY = 0;
  static const int XCB_VISUAL_CLASS_GRAY_SCALE = 1;
  static const int XCB_VISUAL_CLASS_STATIC_COLOR = 2;
  static const int XCB_VISUAL_CLASS_PSEUDO_COLOR = 3;
  static const int XCB_VISUAL_CLASS_TRUE_COLOR = 4;
  static const int XCB_VISUAL_CLASS_DIRECT_COLOR = 5;
}

class xcb_visualtype_t extends ffi.Struct {}

class xcb_visualtype_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_visualtype_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_depth_t extends ffi.Struct {}

class xcb_depth_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_depth_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

abstract class xcb_event_mask_t {
  static const int XCB_EVENT_MASK_NO_EVENT = 0;
  static const int XCB_EVENT_MASK_KEY_PRESS = 1;
  static const int XCB_EVENT_MASK_KEY_RELEASE = 2;
  static const int XCB_EVENT_MASK_BUTTON_PRESS = 4;
  static const int XCB_EVENT_MASK_BUTTON_RELEASE = 8;
  static const int XCB_EVENT_MASK_ENTER_WINDOW = 16;
  static const int XCB_EVENT_MASK_LEAVE_WINDOW = 32;
  static const int XCB_EVENT_MASK_POINTER_MOTION = 64;
  static const int XCB_EVENT_MASK_POINTER_MOTION_HINT = 128;
  static const int XCB_EVENT_MASK_BUTTON_1_MOTION = 256;
  static const int XCB_EVENT_MASK_BUTTON_2_MOTION = 512;
  static const int XCB_EVENT_MASK_BUTTON_3_MOTION = 1024;
  static const int XCB_EVENT_MASK_BUTTON_4_MOTION = 2048;
  static const int XCB_EVENT_MASK_BUTTON_5_MOTION = 4096;
  static const int XCB_EVENT_MASK_BUTTON_MOTION = 8192;
  static const int XCB_EVENT_MASK_KEYMAP_STATE = 16384;
  static const int XCB_EVENT_MASK_EXPOSURE = 32768;
  static const int XCB_EVENT_MASK_VISIBILITY_CHANGE = 65536;
  static const int XCB_EVENT_MASK_STRUCTURE_NOTIFY = 131072;
  static const int XCB_EVENT_MASK_RESIZE_REDIRECT = 262144;
  static const int XCB_EVENT_MASK_SUBSTRUCTURE_NOTIFY = 524288;
  static const int XCB_EVENT_MASK_SUBSTRUCTURE_REDIRECT = 1048576;
  static const int XCB_EVENT_MASK_FOCUS_CHANGE = 2097152;
  static const int XCB_EVENT_MASK_PROPERTY_CHANGE = 4194304;
  static const int XCB_EVENT_MASK_COLOR_MAP_CHANGE = 8388608;
  static const int XCB_EVENT_MASK_OWNER_GRAB_BUTTON = 16777216;
}

abstract class xcb_backing_store_t {
  static const int XCB_BACKING_STORE_NOT_USEFUL = 0;
  static const int XCB_BACKING_STORE_WHEN_MAPPED = 1;
  static const int XCB_BACKING_STORE_ALWAYS = 2;
}

class xcb_screen_t extends ffi.Struct {
  @ffi.Uint32()
  int root;

  @ffi.Uint32()
  int default_colormap;

  @ffi.Uint32()
  int white_pixel;

  @ffi.Uint32()
  int black_pixel;

  @ffi.Uint32()
  int current_input_masks;

  @ffi.Uint16()
  int width_in_pixels;

  @ffi.Uint16()
  int height_in_pixels;

  @ffi.Uint16()
  int width_in_millimeters;

  @ffi.Uint16()
  int height_in_millimeters;

  @ffi.Uint16()
  int min_installed_maps;

  @ffi.Uint16()
  int max_installed_maps;

  @ffi.Uint32()
  int root_visual;

  @ffi.Uint8()
  int backing_stores;

  @ffi.Uint8()
  int save_unders;

  @ffi.Uint8()
  int root_depth;

  @ffi.Uint8()
  int allowed_depths_len;
}

class xcb_screen_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_screen_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_setup_request_t extends ffi.Struct {}

class xcb_setup_request_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_setup_request_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_setup_failed_t extends ffi.Struct {
  @ffi.Uint8()
  int status;

  @ffi.Uint8()
  int reason_len;

  @ffi.Uint16()
  int protocol_major_version;

  @ffi.Uint16()
  int protocol_minor_version;

  @ffi.Uint16()
  int length;
}

class xcb_setup_failed_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_setup_failed_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_setup_authenticate_t extends ffi.Struct {}

class xcb_setup_authenticate_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_setup_authenticate_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

abstract class xcb_image_order_t {
  static const int XCB_IMAGE_ORDER_LSB_FIRST = 0;
  static const int XCB_IMAGE_ORDER_MSB_FIRST = 1;
}

class xcb_setup_t extends ffi.Struct {}

class xcb_setup_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_setup_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

abstract class xcb_mod_mask_t {
  static const int XCB_MOD_MASK_SHIFT = 1;
  static const int XCB_MOD_MASK_LOCK = 2;
  static const int XCB_MOD_MASK_CONTROL = 4;
  static const int XCB_MOD_MASK_1 = 8;
  static const int XCB_MOD_MASK_2 = 16;
  static const int XCB_MOD_MASK_3 = 32;
  static const int XCB_MOD_MASK_4 = 64;
  static const int XCB_MOD_MASK_5 = 128;
  static const int XCB_MOD_MASK_ANY = 32768;
}

abstract class xcb_key_but_mask_t {
  static const int XCB_KEY_BUT_MASK_SHIFT = 1;
  static const int XCB_KEY_BUT_MASK_LOCK = 2;
  static const int XCB_KEY_BUT_MASK_CONTROL = 4;
  static const int XCB_KEY_BUT_MASK_MOD_1 = 8;
  static const int XCB_KEY_BUT_MASK_MOD_2 = 16;
  static const int XCB_KEY_BUT_MASK_MOD_3 = 32;
  static const int XCB_KEY_BUT_MASK_MOD_4 = 64;
  static const int XCB_KEY_BUT_MASK_MOD_5 = 128;
  static const int XCB_KEY_BUT_MASK_BUTTON_1 = 256;
  static const int XCB_KEY_BUT_MASK_BUTTON_2 = 512;
  static const int XCB_KEY_BUT_MASK_BUTTON_3 = 1024;
  static const int XCB_KEY_BUT_MASK_BUTTON_4 = 2048;
  static const int XCB_KEY_BUT_MASK_BUTTON_5 = 4096;
}

abstract class xcb_window_enum_t {
  static const int XCB_WINDOW_NONE = 0;
}

class xcb_key_press_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int detail;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int time;

  @ffi.Uint32()
  int root;

  @ffi.Uint32()
  int event;

  @ffi.Uint32()
  int child;

  @ffi.Int16()
  int root_x;

  @ffi.Int16()
  int root_y;

  @ffi.Int16()
  int event_x;

  @ffi.Int16()
  int event_y;

  @ffi.Uint16()
  int state;

  @ffi.Uint8()
  int same_screen;

  @ffi.Uint8()
  int pad0;
}

abstract class xcb_button_mask_t {
  static const int XCB_BUTTON_MASK_1 = 256;
  static const int XCB_BUTTON_MASK_2 = 512;
  static const int XCB_BUTTON_MASK_3 = 1024;
  static const int XCB_BUTTON_MASK_4 = 2048;
  static const int XCB_BUTTON_MASK_5 = 4096;
  static const int XCB_BUTTON_MASK_ANY = 32768;
}

class xcb_button_press_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int detail;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int time;

  @ffi.Uint32()
  int root;

  @ffi.Uint32()
  int event;

  @ffi.Uint32()
  int child;

  @ffi.Int16()
  int root_x;

  @ffi.Int16()
  int root_y;

  @ffi.Int16()
  int event_x;

  @ffi.Int16()
  int event_y;

  @ffi.Uint16()
  int state;

  @ffi.Uint8()
  int same_screen;

  @ffi.Uint8()
  int pad0;
}

abstract class xcb_motion_t {
  static const int XCB_MOTION_NORMAL = 0;
  static const int XCB_MOTION_HINT = 1;
}

class xcb_motion_notify_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int detail;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int time;

  @ffi.Uint32()
  int root;

  @ffi.Uint32()
  int event;

  @ffi.Uint32()
  int child;

  @ffi.Int16()
  int root_x;

  @ffi.Int16()
  int root_y;

  @ffi.Int16()
  int event_x;

  @ffi.Int16()
  int event_y;

  @ffi.Uint16()
  int state;

  @ffi.Uint8()
  int same_screen;

  @ffi.Uint8()
  int pad0;
}

abstract class xcb_notify_detail_t {
  static const int XCB_NOTIFY_DETAIL_ANCESTOR = 0;
  static const int XCB_NOTIFY_DETAIL_VIRTUAL = 1;
  static const int XCB_NOTIFY_DETAIL_INFERIOR = 2;
  static const int XCB_NOTIFY_DETAIL_NONLINEAR = 3;
  static const int XCB_NOTIFY_DETAIL_NONLINEAR_VIRTUAL = 4;
  static const int XCB_NOTIFY_DETAIL_POINTER = 5;
  static const int XCB_NOTIFY_DETAIL_POINTER_ROOT = 6;
  static const int XCB_NOTIFY_DETAIL_NONE = 7;
}

abstract class xcb_notify_mode_t {
  static const int XCB_NOTIFY_MODE_NORMAL = 0;
  static const int XCB_NOTIFY_MODE_GRAB = 1;
  static const int XCB_NOTIFY_MODE_UNGRAB = 2;
  static const int XCB_NOTIFY_MODE_WHILE_GRABBED = 3;
}

class xcb_enter_notify_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int detail;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int time;

  @ffi.Uint32()
  int root;

  @ffi.Uint32()
  int event;

  @ffi.Uint32()
  int child;

  @ffi.Int16()
  int root_x;

  @ffi.Int16()
  int root_y;

  @ffi.Int16()
  int event_x;

  @ffi.Int16()
  int event_y;

  @ffi.Uint16()
  int state;

  @ffi.Uint8()
  int mode;

  @ffi.Uint8()
  int same_screen_focus;
}

class xcb_focus_in_event_t extends ffi.Struct {}

class xcb_keymap_notify_event_t extends ffi.Struct {}

class xcb_expose_event_t extends ffi.Struct {}

class xcb_graphics_exposure_event_t extends ffi.Struct {}

class xcb_no_exposure_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint16()
  int minor_opcode;

  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad1;
}

abstract class xcb_visibility_t {
  static const int XCB_VISIBILITY_UNOBSCURED = 0;
  static const int XCB_VISIBILITY_PARTIALLY_OBSCURED = 1;
  static const int XCB_VISIBILITY_FULLY_OBSCURED = 2;
}

class xcb_visibility_notify_event_t extends ffi.Struct {}

class xcb_create_notify_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int parent;

  @ffi.Uint32()
  int window;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint16()
  int border_width;

  @ffi.Uint8()
  int override_redirect;

  @ffi.Uint8()
  int pad1;
}

class xcb_destroy_notify_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int event;

  @ffi.Uint32()
  int window;
}

class xcb_unmap_notify_event_t extends ffi.Struct {}

class xcb_map_notify_event_t extends ffi.Struct {}

class xcb_map_request_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int parent;

  @ffi.Uint32()
  int window;
}

class xcb_reparent_notify_event_t extends ffi.Struct {}

class xcb_configure_notify_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int event;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int above_sibling;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint16()
  int border_width;

  @ffi.Uint8()
  int override_redirect;

  @ffi.Uint8()
  int pad1;
}

class xcb_configure_request_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int stack_mode;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int parent;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int sibling;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint16()
  int border_width;

  @ffi.Uint16()
  int value_mask;
}

class xcb_gravity_notify_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int event;

  @ffi.Uint32()
  int window;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xcb_resize_request_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int window;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

abstract class xcb_place_t {
  static const int XCB_PLACE_ON_TOP = 0;
  static const int XCB_PLACE_ON_BOTTOM = 1;
}

class xcb_circulate_notify_event_t extends ffi.Struct {}

abstract class xcb_property_t {
  static const int XCB_PROPERTY_NEW_VALUE = 0;
  static const int XCB_PROPERTY_DELETE = 1;
}

class xcb_property_notify_event_t extends ffi.Struct {}

class xcb_selection_clear_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int time;

  @ffi.Uint32()
  int owner;

  @ffi.Uint32()
  int selection;
}

abstract class xcb_time_t {
  static const int XCB_TIME_CURRENT_TIME = 0;
}

abstract class xcb_atom_enum_t {
  static const int XCB_ATOM_NONE = 0;
  static const int XCB_ATOM_ANY = 0;
  static const int XCB_ATOM_PRIMARY = 1;
  static const int XCB_ATOM_SECONDARY = 2;
  static const int XCB_ATOM_ARC = 3;
  static const int XCB_ATOM_ATOM = 4;
  static const int XCB_ATOM_BITMAP = 5;
  static const int XCB_ATOM_CARDINAL = 6;
  static const int XCB_ATOM_COLORMAP = 7;
  static const int XCB_ATOM_CURSOR = 8;
  static const int XCB_ATOM_CUT_BUFFER0 = 9;
  static const int XCB_ATOM_CUT_BUFFER1 = 10;
  static const int XCB_ATOM_CUT_BUFFER2 = 11;
  static const int XCB_ATOM_CUT_BUFFER3 = 12;
  static const int XCB_ATOM_CUT_BUFFER4 = 13;
  static const int XCB_ATOM_CUT_BUFFER5 = 14;
  static const int XCB_ATOM_CUT_BUFFER6 = 15;
  static const int XCB_ATOM_CUT_BUFFER7 = 16;
  static const int XCB_ATOM_DRAWABLE = 17;
  static const int XCB_ATOM_FONT = 18;
  static const int XCB_ATOM_INTEGER = 19;
  static const int XCB_ATOM_PIXMAP = 20;
  static const int XCB_ATOM_POINT = 21;
  static const int XCB_ATOM_RECTANGLE = 22;
  static const int XCB_ATOM_RESOURCE_MANAGER = 23;
  static const int XCB_ATOM_RGB_COLOR_MAP = 24;
  static const int XCB_ATOM_RGB_BEST_MAP = 25;
  static const int XCB_ATOM_RGB_BLUE_MAP = 26;
  static const int XCB_ATOM_RGB_DEFAULT_MAP = 27;
  static const int XCB_ATOM_RGB_GRAY_MAP = 28;
  static const int XCB_ATOM_RGB_GREEN_MAP = 29;
  static const int XCB_ATOM_RGB_RED_MAP = 30;
  static const int XCB_ATOM_STRING = 31;
  static const int XCB_ATOM_VISUALID = 32;
  static const int XCB_ATOM_WINDOW = 33;
  static const int XCB_ATOM_WM_COMMAND = 34;
  static const int XCB_ATOM_WM_HINTS = 35;
  static const int XCB_ATOM_WM_CLIENT_MACHINE = 36;
  static const int XCB_ATOM_WM_ICON_NAME = 37;
  static const int XCB_ATOM_WM_ICON_SIZE = 38;
  static const int XCB_ATOM_WM_NAME = 39;
  static const int XCB_ATOM_WM_NORMAL_HINTS = 40;
  static const int XCB_ATOM_WM_SIZE_HINTS = 41;
  static const int XCB_ATOM_WM_ZOOM_HINTS = 42;
  static const int XCB_ATOM_MIN_SPACE = 43;
  static const int XCB_ATOM_NORM_SPACE = 44;
  static const int XCB_ATOM_MAX_SPACE = 45;
  static const int XCB_ATOM_END_SPACE = 46;
  static const int XCB_ATOM_SUPERSCRIPT_X = 47;
  static const int XCB_ATOM_SUPERSCRIPT_Y = 48;
  static const int XCB_ATOM_SUBSCRIPT_X = 49;
  static const int XCB_ATOM_SUBSCRIPT_Y = 50;
  static const int XCB_ATOM_UNDERLINE_POSITION = 51;
  static const int XCB_ATOM_UNDERLINE_THICKNESS = 52;
  static const int XCB_ATOM_STRIKEOUT_ASCENT = 53;
  static const int XCB_ATOM_STRIKEOUT_DESCENT = 54;
  static const int XCB_ATOM_ITALIC_ANGLE = 55;
  static const int XCB_ATOM_X_HEIGHT = 56;
  static const int XCB_ATOM_QUAD_WIDTH = 57;
  static const int XCB_ATOM_WEIGHT = 58;
  static const int XCB_ATOM_POINT_SIZE = 59;
  static const int XCB_ATOM_RESOLUTION = 60;
  static const int XCB_ATOM_COPYRIGHT = 61;
  static const int XCB_ATOM_NOTICE = 62;
  static const int XCB_ATOM_FONT_NAME = 63;
  static const int XCB_ATOM_FAMILY_NAME = 64;
  static const int XCB_ATOM_FULL_NAME = 65;
  static const int XCB_ATOM_CAP_HEIGHT = 66;
  static const int XCB_ATOM_WM_CLASS = 67;
  static const int XCB_ATOM_WM_TRANSIENT_FOR = 68;
}

class xcb_selection_request_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int time;

  @ffi.Uint32()
  int owner;

  @ffi.Uint32()
  int requestor;

  @ffi.Uint32()
  int selection;

  @ffi.Uint32()
  int target;

  @ffi.Uint32()
  int property;
}

class xcb_selection_notify_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int time;

  @ffi.Uint32()
  int requestor;

  @ffi.Uint32()
  int selection;

  @ffi.Uint32()
  int target;

  @ffi.Uint32()
  int property;
}

abstract class xcb_colormap_state_t {
  static const int XCB_COLORMAP_STATE_UNINSTALLED = 0;
  static const int XCB_COLORMAP_STATE_INSTALLED = 1;
}

abstract class xcb_colormap_enum_t {
  static const int XCB_COLORMAP_NONE = 0;
}

class xcb_colormap_notify_event_t extends ffi.Struct {}

class xcb_client_message_data_iterator_t extends ffi.Struct {}

class xcb_client_message_event_t extends ffi.Struct {}

abstract class xcb_mapping_t {
  static const int XCB_MAPPING_MODIFIER = 0;
  static const int XCB_MAPPING_KEYBOARD = 1;
  static const int XCB_MAPPING_POINTER = 2;
}

class xcb_mapping_notify_event_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint8()
  int request;

  @ffi.Uint8()
  int first_keycode;

  @ffi.Uint8()
  int count;

  @ffi.Uint8()
  int pad1;
}

class xcb_ge_generic_event_t extends ffi.Struct {}

class xcb_request_error_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int error_code;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int bad_value;

  @ffi.Uint16()
  int minor_opcode;

  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;
}

class xcb_value_error_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int error_code;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int bad_value;

  @ffi.Uint16()
  int minor_opcode;

  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;
}

abstract class xcb_window_class_t {
  static const int XCB_WINDOW_CLASS_COPY_FROM_PARENT = 0;
  static const int XCB_WINDOW_CLASS_INPUT_OUTPUT = 1;
  static const int XCB_WINDOW_CLASS_INPUT_ONLY = 2;
}

abstract class xcb_cw_t {
  static const int XCB_CW_BACK_PIXMAP = 1;
  static const int XCB_CW_BACK_PIXEL = 2;
  static const int XCB_CW_BORDER_PIXMAP = 4;
  static const int XCB_CW_BORDER_PIXEL = 8;
  static const int XCB_CW_BIT_GRAVITY = 16;
  static const int XCB_CW_WIN_GRAVITY = 32;
  static const int XCB_CW_BACKING_STORE = 64;
  static const int XCB_CW_BACKING_PLANES = 128;
  static const int XCB_CW_BACKING_PIXEL = 256;
  static const int XCB_CW_OVERRIDE_REDIRECT = 512;
  static const int XCB_CW_SAVE_UNDER = 1024;
  static const int XCB_CW_EVENT_MASK = 2048;
  static const int XCB_CW_DONT_PROPAGATE = 4096;
  static const int XCB_CW_COLORMAP = 8192;
  static const int XCB_CW_CURSOR = 16384;
}

abstract class xcb_back_pixmap_t {
  static const int XCB_BACK_PIXMAP_NONE = 0;
  static const int XCB_BACK_PIXMAP_PARENT_RELATIVE = 1;
}

abstract class xcb_gravity_t {
  static const int XCB_GRAVITY_BIT_FORGET = 0;
  static const int XCB_GRAVITY_WIN_UNMAP = 0;
  static const int XCB_GRAVITY_NORTH_WEST = 1;
  static const int XCB_GRAVITY_NORTH = 2;
  static const int XCB_GRAVITY_NORTH_EAST = 3;
  static const int XCB_GRAVITY_WEST = 4;
  static const int XCB_GRAVITY_CENTER = 5;
  static const int XCB_GRAVITY_EAST = 6;
  static const int XCB_GRAVITY_SOUTH_WEST = 7;
  static const int XCB_GRAVITY_SOUTH = 8;
  static const int XCB_GRAVITY_SOUTH_EAST = 9;
  static const int XCB_GRAVITY_STATIC = 10;
}

class xcb_create_window_value_list_t extends ffi.Struct {
  @ffi.Uint32()
  int background_pixmap;

  @ffi.Uint32()
  int background_pixel;

  @ffi.Uint32()
  int border_pixmap;

  @ffi.Uint32()
  int border_pixel;

  @ffi.Uint32()
  int bit_gravity;

  @ffi.Uint32()
  int win_gravity;

  @ffi.Uint32()
  int backing_store;

  @ffi.Uint32()
  int backing_planes;

  @ffi.Uint32()
  int backing_pixel;

  @ffi.Uint32()
  int override_redirect;

  @ffi.Uint32()
  int save_under;

  @ffi.Uint32()
  int event_mask;

  @ffi.Uint32()
  int do_not_propogate_mask;

  @ffi.Uint32()
  int colormap;

  @ffi.Uint32()
  int cursor;
}

class xcb_create_window_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int depth;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int wid;

  @ffi.Uint32()
  int parent;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint16()
  int border_width;

  @ffi.Uint16()
  int _class;

  @ffi.Uint32()
  int visual;

  @ffi.Uint32()
  int value_mask;
}

class xcb_change_window_attributes_value_list_t extends ffi.Struct {
  @ffi.Uint32()
  int background_pixmap;

  @ffi.Uint32()
  int background_pixel;

  @ffi.Uint32()
  int border_pixmap;

  @ffi.Uint32()
  int border_pixel;

  @ffi.Uint32()
  int bit_gravity;

  @ffi.Uint32()
  int win_gravity;

  @ffi.Uint32()
  int backing_store;

  @ffi.Uint32()
  int backing_planes;

  @ffi.Uint32()
  int backing_pixel;

  @ffi.Uint32()
  int override_redirect;

  @ffi.Uint32()
  int save_under;

  @ffi.Uint32()
  int event_mask;

  @ffi.Uint32()
  int do_not_propogate_mask;

  @ffi.Uint32()
  int colormap;

  @ffi.Uint32()
  int cursor;
}

class xcb_change_window_attributes_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int value_mask;
}

abstract class xcb_map_state_t {
  static const int XCB_MAP_STATE_UNMAPPED = 0;
  static const int XCB_MAP_STATE_UNVIEWABLE = 1;
  static const int XCB_MAP_STATE_VIEWABLE = 2;
}

class xcb_get_window_attributes_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_window_attributes_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_get_window_attributes_reply_t extends ffi.Struct {}

class xcb_destroy_window_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_destroy_subwindows_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

abstract class xcb_set_mode_t {
  static const int XCB_SET_MODE_INSERT = 0;
  static const int XCB_SET_MODE_DELETE = 1;
}

class xcb_change_save_set_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_reparent_window_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int parent;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xcb_map_window_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_map_subwindows_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_unmap_window_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_unmap_subwindows_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

abstract class xcb_config_window_t {
  static const int XCB_CONFIG_WINDOW_X = 1;
  static const int XCB_CONFIG_WINDOW_Y = 2;
  static const int XCB_CONFIG_WINDOW_WIDTH = 4;
  static const int XCB_CONFIG_WINDOW_HEIGHT = 8;
  static const int XCB_CONFIG_WINDOW_BORDER_WIDTH = 16;
  static const int XCB_CONFIG_WINDOW_SIBLING = 32;
  static const int XCB_CONFIG_WINDOW_STACK_MODE = 64;
}

abstract class xcb_stack_mode_t {
  static const int XCB_STACK_MODE_ABOVE = 0;
  static const int XCB_STACK_MODE_BELOW = 1;
  static const int XCB_STACK_MODE_TOP_IF = 2;
  static const int XCB_STACK_MODE_BOTTOM_IF = 3;
  static const int XCB_STACK_MODE_OPPOSITE = 4;
}

class xcb_configure_window_value_list_t extends ffi.Struct {
  @ffi.Int32()
  int x;

  @ffi.Int32()
  int y;

  @ffi.Uint32()
  int width;

  @ffi.Uint32()
  int height;

  @ffi.Uint32()
  int border_width;

  @ffi.Uint32()
  int sibling;

  @ffi.Uint32()
  int stack_mode;
}

class xcb_configure_window_request_t extends ffi.Struct {}

abstract class xcb_circulate_t {
  static const int XCB_CIRCULATE_RAISE_LOWEST = 0;
  static const int XCB_CIRCULATE_LOWER_HIGHEST = 1;
}

class xcb_circulate_window_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int direction;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_get_geometry_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_geometry_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;
}

class xcb_get_geometry_reply_t extends ffi.Struct {}

class xcb_query_tree_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_query_tree_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_query_tree_reply_t extends ffi.Struct {}

class xcb_intern_atom_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_intern_atom_request_t extends ffi.Struct {}

class xcb_intern_atom_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int atom;
}

class xcb_get_atom_name_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_atom_name_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int atom;
}

class xcb_get_atom_name_reply_t extends ffi.Struct {}

abstract class xcb_prop_mode_t {
  static const int XCB_PROP_MODE_REPLACE = 0;
  static const int XCB_PROP_MODE_PREPEND = 1;
  static const int XCB_PROP_MODE_APPEND = 2;
}

class xcb_change_property_request_t extends ffi.Struct {}

class xcb_delete_property_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int property;
}

abstract class xcb_get_property_type_t {
  static const int XCB_GET_PROPERTY_TYPE_ANY = 0;
}

class xcb_get_property_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_property_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int _delete;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int property;

  @ffi.Uint32()
  int type;

  @ffi.Uint32()
  int long_offset;

  @ffi.Uint32()
  int long_length;
}

class xcb_get_property_reply_t extends ffi.Struct {}

class xcb_list_properties_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_list_properties_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_list_properties_reply_t extends ffi.Struct {}

class xcb_set_selection_owner_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int owner;

  @ffi.Uint32()
  int selection;

  @ffi.Uint32()
  int time;
}

class xcb_get_selection_owner_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_selection_owner_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int selection;
}

class xcb_get_selection_owner_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int owner;
}

class xcb_convert_selection_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int requestor;

  @ffi.Uint32()
  int selection;

  @ffi.Uint32()
  int target;

  @ffi.Uint32()
  int property;

  @ffi.Uint32()
  int time;
}

abstract class xcb_send_event_dest_t {
  static const int XCB_SEND_EVENT_DEST_POINTER_WINDOW = 0;
  static const int XCB_SEND_EVENT_DEST_ITEM_FOCUS = 1;
}

class xcb_send_event_request_t extends ffi.Struct {}

abstract class xcb_grab_mode_t {
  static const int XCB_GRAB_MODE_SYNC = 0;
  static const int XCB_GRAB_MODE_ASYNC = 1;
}

abstract class xcb_grab_status_t {
  static const int XCB_GRAB_STATUS_SUCCESS = 0;
  static const int XCB_GRAB_STATUS_ALREADY_GRABBED = 1;
  static const int XCB_GRAB_STATUS_INVALID_TIME = 2;
  static const int XCB_GRAB_STATUS_NOT_VIEWABLE = 3;
  static const int XCB_GRAB_STATUS_FROZEN = 4;
}

abstract class xcb_cursor_enum_t {
  static const int XCB_CURSOR_NONE = 0;
}

class xcb_grab_pointer_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_grab_pointer_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int owner_events;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int grab_window;

  @ffi.Uint16()
  int event_mask;

  @ffi.Uint8()
  int pointer_mode;

  @ffi.Uint8()
  int keyboard_mode;

  @ffi.Uint32()
  int confine_to;

  @ffi.Uint32()
  int cursor;

  @ffi.Uint32()
  int time;
}

class xcb_grab_pointer_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int status;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;
}

class xcb_ungrab_pointer_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int time;
}

abstract class xcb_button_index_t {
  static const int XCB_BUTTON_INDEX_ANY = 0;
  static const int XCB_BUTTON_INDEX_1 = 1;
  static const int XCB_BUTTON_INDEX_2 = 2;
  static const int XCB_BUTTON_INDEX_3 = 3;
  static const int XCB_BUTTON_INDEX_4 = 4;
  static const int XCB_BUTTON_INDEX_5 = 5;
}

class xcb_grab_button_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int owner_events;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int grab_window;

  @ffi.Uint16()
  int event_mask;

  @ffi.Uint8()
  int pointer_mode;

  @ffi.Uint8()
  int keyboard_mode;

  @ffi.Uint32()
  int confine_to;

  @ffi.Uint32()
  int cursor;

  @ffi.Uint8()
  int button;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int modifiers;
}

class xcb_ungrab_button_request_t extends ffi.Struct {}

class xcb_change_active_pointer_grab_request_t extends ffi.Struct {}

class xcb_grab_keyboard_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_grab_keyboard_request_t extends ffi.Struct {}

class xcb_grab_keyboard_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int status;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;
}

class xcb_ungrab_keyboard_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int time;
}

abstract class xcb_grab_t {
  static const int XCB_GRAB_ANY = 0;
}

class xcb_grab_key_request_t extends ffi.Struct {}

class xcb_ungrab_key_request_t extends ffi.Struct {}

abstract class xcb_allow_t {
  static const int XCB_ALLOW_ASYNC_POINTER = 0;
  static const int XCB_ALLOW_SYNC_POINTER = 1;
  static const int XCB_ALLOW_REPLAY_POINTER = 2;
  static const int XCB_ALLOW_ASYNC_KEYBOARD = 3;
  static const int XCB_ALLOW_SYNC_KEYBOARD = 4;
  static const int XCB_ALLOW_REPLAY_KEYBOARD = 5;
  static const int XCB_ALLOW_ASYNC_BOTH = 6;
  static const int XCB_ALLOW_SYNC_BOTH = 7;
}

class xcb_allow_events_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int time;
}

class xcb_grab_server_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_ungrab_server_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_query_pointer_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_query_pointer_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_query_pointer_reply_t extends ffi.Struct {}

class xcb_timecoord_t extends ffi.Struct {
  @ffi.Uint32()
  int time;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xcb_timecoord_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_timecoord_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_get_motion_events_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_motion_events_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int start;

  @ffi.Uint32()
  int stop;
}

class xcb_get_motion_events_reply_t extends ffi.Struct {}

class xcb_translate_coordinates_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_translate_coordinates_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int src_window;

  @ffi.Uint32()
  int dst_window;

  @ffi.Int16()
  int src_x;

  @ffi.Int16()
  int src_y;
}

class xcb_translate_coordinates_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int same_screen;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int child;

  @ffi.Int16()
  int dst_x;

  @ffi.Int16()
  int dst_y;
}

class xcb_warp_pointer_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int src_window;

  @ffi.Uint32()
  int dst_window;

  @ffi.Int16()
  int src_x;

  @ffi.Int16()
  int src_y;

  @ffi.Uint16()
  int src_width;

  @ffi.Uint16()
  int src_height;

  @ffi.Int16()
  int dst_x;

  @ffi.Int16()
  int dst_y;
}

abstract class xcb_input_focus_t {
  static const int XCB_INPUT_FOCUS_NONE = 0;
  static const int XCB_INPUT_FOCUS_POINTER_ROOT = 1;
  static const int XCB_INPUT_FOCUS_PARENT = 2;
  static const int XCB_INPUT_FOCUS_FOLLOW_KEYBOARD = 3;
}

class xcb_set_input_focus_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int revert_to;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int focus;

  @ffi.Uint32()
  int time;
}

class xcb_get_input_focus_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_input_focus_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_get_input_focus_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int revert_to;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int focus;
}

class xcb_query_keymap_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_query_keymap_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_query_keymap_reply_t extends ffi.Struct {}

class xcb_open_font_request_t extends ffi.Struct {}

class xcb_close_font_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int font;
}

abstract class xcb_font_draw_t {
  static const int XCB_FONT_DRAW_LEFT_TO_RIGHT = 0;
  static const int XCB_FONT_DRAW_RIGHT_TO_LEFT = 1;
}

class xcb_fontprop_t extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint32()
  int value;
}

class xcb_fontprop_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_fontprop_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_charinfo_t extends ffi.Struct {
  @ffi.Int16()
  int left_side_bearing;

  @ffi.Int16()
  int right_side_bearing;

  @ffi.Int16()
  int character_width;

  @ffi.Int16()
  int ascent;

  @ffi.Int16()
  int descent;

  @ffi.Uint16()
  int attributes;
}

class xcb_charinfo_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_charinfo_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_query_font_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_query_font_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int font;
}

class xcb_query_font_reply_t extends ffi.Struct {}

class xcb_query_text_extents_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_query_text_extents_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int odd_length;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int font;
}

class xcb_query_text_extents_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int draw_direction;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Int16()
  int font_ascent;

  @ffi.Int16()
  int font_descent;

  @ffi.Int16()
  int overall_ascent;

  @ffi.Int16()
  int overall_descent;

  @ffi.Int32()
  int overall_width;

  @ffi.Int32()
  int overall_left;

  @ffi.Int32()
  int overall_right;
}

class xcb_str_t extends ffi.Struct {
  @ffi.Uint8()
  int name_len;
}

class xcb_str_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_str_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_list_fonts_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_list_fonts_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int max_names;

  @ffi.Uint16()
  int pattern_len;
}

class xcb_list_fonts_reply_t extends ffi.Struct {}

class xcb_list_fonts_with_info_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_list_fonts_with_info_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int max_names;

  @ffi.Uint16()
  int pattern_len;
}

class xcb_list_fonts_with_info_reply_t extends ffi.Struct {}

class xcb_set_font_path_request_t extends ffi.Struct {}

class xcb_get_font_path_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_font_path_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_get_font_path_reply_t extends ffi.Struct {}

class xcb_create_pixmap_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int depth;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int pid;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xcb_free_pixmap_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int pixmap;
}

abstract class xcb_gc_t {
  static const int XCB_GC_FUNCTION = 1;
  static const int XCB_GC_PLANE_MASK = 2;
  static const int XCB_GC_FOREGROUND = 4;
  static const int XCB_GC_BACKGROUND = 8;
  static const int XCB_GC_LINE_WIDTH = 16;
  static const int XCB_GC_LINE_STYLE = 32;
  static const int XCB_GC_CAP_STYLE = 64;
  static const int XCB_GC_JOIN_STYLE = 128;
  static const int XCB_GC_FILL_STYLE = 256;
  static const int XCB_GC_FILL_RULE = 512;
  static const int XCB_GC_TILE = 1024;
  static const int XCB_GC_STIPPLE = 2048;
  static const int XCB_GC_TILE_STIPPLE_ORIGIN_X = 4096;
  static const int XCB_GC_TILE_STIPPLE_ORIGIN_Y = 8192;
  static const int XCB_GC_FONT = 16384;
  static const int XCB_GC_SUBWINDOW_MODE = 32768;
  static const int XCB_GC_GRAPHICS_EXPOSURES = 65536;
  static const int XCB_GC_CLIP_ORIGIN_X = 131072;
  static const int XCB_GC_CLIP_ORIGIN_Y = 262144;
  static const int XCB_GC_CLIP_MASK = 524288;
  static const int XCB_GC_DASH_OFFSET = 1048576;
  static const int XCB_GC_DASH_LIST = 2097152;
  static const int XCB_GC_ARC_MODE = 4194304;
}

abstract class xcb_gx_t {
  static const int XCB_GX_CLEAR = 0;
  static const int XCB_GX_AND = 1;
  static const int XCB_GX_AND_REVERSE = 2;
  static const int XCB_GX_COPY = 3;
  static const int XCB_GX_AND_INVERTED = 4;
  static const int XCB_GX_NOOP = 5;
  static const int XCB_GX_XOR = 6;
  static const int XCB_GX_OR = 7;
  static const int XCB_GX_NOR = 8;
  static const int XCB_GX_EQUIV = 9;
  static const int XCB_GX_INVERT = 10;
  static const int XCB_GX_OR_REVERSE = 11;
  static const int XCB_GX_COPY_INVERTED = 12;
  static const int XCB_GX_OR_INVERTED = 13;
  static const int XCB_GX_NAND = 14;
  static const int XCB_GX_SET = 15;
}

abstract class xcb_line_style_t {
  static const int XCB_LINE_STYLE_SOLID = 0;
  static const int XCB_LINE_STYLE_ON_OFF_DASH = 1;
  static const int XCB_LINE_STYLE_DOUBLE_DASH = 2;
}

abstract class xcb_cap_style_t {
  static const int XCB_CAP_STYLE_NOT_LAST = 0;
  static const int XCB_CAP_STYLE_BUTT = 1;
  static const int XCB_CAP_STYLE_ROUND = 2;
  static const int XCB_CAP_STYLE_PROJECTING = 3;
}

abstract class xcb_join_style_t {
  static const int XCB_JOIN_STYLE_MITER = 0;
  static const int XCB_JOIN_STYLE_ROUND = 1;
  static const int XCB_JOIN_STYLE_BEVEL = 2;
}

abstract class xcb_fill_style_t {
  static const int XCB_FILL_STYLE_SOLID = 0;
  static const int XCB_FILL_STYLE_TILED = 1;
  static const int XCB_FILL_STYLE_STIPPLED = 2;
  static const int XCB_FILL_STYLE_OPAQUE_STIPPLED = 3;
}

abstract class xcb_fill_rule_t {
  static const int XCB_FILL_RULE_EVEN_ODD = 0;
  static const int XCB_FILL_RULE_WINDING = 1;
}

abstract class xcb_subwindow_mode_t {
  static const int XCB_SUBWINDOW_MODE_CLIP_BY_CHILDREN = 0;
  static const int XCB_SUBWINDOW_MODE_INCLUDE_INFERIORS = 1;
}

abstract class xcb_arc_mode_t {
  static const int XCB_ARC_MODE_CHORD = 0;
  static const int XCB_ARC_MODE_PIE_SLICE = 1;
}

class xcb_create_gc_value_list_t extends ffi.Struct {
  @ffi.Uint32()
  int function;

  @ffi.Uint32()
  int plane_mask;

  @ffi.Uint32()
  int foreground;

  @ffi.Uint32()
  int background;

  @ffi.Uint32()
  int line_width;

  @ffi.Uint32()
  int line_style;

  @ffi.Uint32()
  int cap_style;

  @ffi.Uint32()
  int join_style;

  @ffi.Uint32()
  int fill_style;

  @ffi.Uint32()
  int fill_rule;

  @ffi.Uint32()
  int tile;

  @ffi.Uint32()
  int stipple;

  @ffi.Int32()
  int tile_stipple_x_origin;

  @ffi.Int32()
  int tile_stipple_y_origin;

  @ffi.Uint32()
  int font;

  @ffi.Uint32()
  int subwindow_mode;

  @ffi.Uint32()
  int graphics_exposures;

  @ffi.Int32()
  int clip_x_origin;

  @ffi.Int32()
  int clip_y_origin;

  @ffi.Uint32()
  int clip_mask;

  @ffi.Uint32()
  int dash_offset;

  @ffi.Uint32()
  int dashes;

  @ffi.Uint32()
  int arc_mode;
}

class xcb_create_gc_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cid;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int value_mask;
}

class xcb_change_gc_value_list_t extends ffi.Struct {
  @ffi.Uint32()
  int function;

  @ffi.Uint32()
  int plane_mask;

  @ffi.Uint32()
  int foreground;

  @ffi.Uint32()
  int background;

  @ffi.Uint32()
  int line_width;

  @ffi.Uint32()
  int line_style;

  @ffi.Uint32()
  int cap_style;

  @ffi.Uint32()
  int join_style;

  @ffi.Uint32()
  int fill_style;

  @ffi.Uint32()
  int fill_rule;

  @ffi.Uint32()
  int tile;

  @ffi.Uint32()
  int stipple;

  @ffi.Int32()
  int tile_stipple_x_origin;

  @ffi.Int32()
  int tile_stipple_y_origin;

  @ffi.Uint32()
  int font;

  @ffi.Uint32()
  int subwindow_mode;

  @ffi.Uint32()
  int graphics_exposures;

  @ffi.Int32()
  int clip_x_origin;

  @ffi.Int32()
  int clip_y_origin;

  @ffi.Uint32()
  int clip_mask;

  @ffi.Uint32()
  int dash_offset;

  @ffi.Uint32()
  int dashes;

  @ffi.Uint32()
  int arc_mode;
}

class xcb_change_gc_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int gc;

  @ffi.Uint32()
  int value_mask;
}

class xcb_copy_gc_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int src_gc;

  @ffi.Uint32()
  int dst_gc;

  @ffi.Uint32()
  int value_mask;
}

class xcb_set_dashes_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int gc;

  @ffi.Uint16()
  int dash_offset;

  @ffi.Uint16()
  int dashes_len;
}

abstract class xcb_clip_ordering_t {
  static const int XCB_CLIP_ORDERING_UNSORTED = 0;
  static const int XCB_CLIP_ORDERING_Y_SORTED = 1;
  static const int XCB_CLIP_ORDERING_YX_SORTED = 2;
  static const int XCB_CLIP_ORDERING_YX_BANDED = 3;
}

class xcb_set_clip_rectangles_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int ordering;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int clip_x_origin;

  @ffi.Int16()
  int clip_y_origin;
}

class xcb_free_gc_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int gc;
}

class xcb_clear_area_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int exposures;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xcb_copy_area_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int src_drawable;

  @ffi.Uint32()
  int dst_drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int src_x;

  @ffi.Int16()
  int src_y;

  @ffi.Int16()
  int dst_x;

  @ffi.Int16()
  int dst_y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xcb_copy_plane_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int src_drawable;

  @ffi.Uint32()
  int dst_drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int src_x;

  @ffi.Int16()
  int src_y;

  @ffi.Int16()
  int dst_x;

  @ffi.Int16()
  int dst_y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint32()
  int bit_plane;
}

abstract class xcb_coord_mode_t {
  static const int XCB_COORD_MODE_ORIGIN = 0;
  static const int XCB_COORD_MODE_PREVIOUS = 1;
}

class xcb_poly_point_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int coordinate_mode;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

class xcb_poly_line_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int coordinate_mode;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

class xcb_segment_t extends ffi.Struct {
  @ffi.Int16()
  int x1;

  @ffi.Int16()
  int y1;

  @ffi.Int16()
  int x2;

  @ffi.Int16()
  int y2;
}

class xcb_segment_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_segment_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_poly_segment_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

class xcb_poly_rectangle_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

class xcb_poly_arc_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

abstract class xcb_poly_shape_t {
  static const int XCB_POLY_SHAPE_COMPLEX = 0;
  static const int XCB_POLY_SHAPE_NONCONVEX = 1;
  static const int XCB_POLY_SHAPE_CONVEX = 2;
}

class xcb_fill_poly_request_t extends ffi.Struct {}

class xcb_poly_fill_rectangle_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

class xcb_poly_fill_arc_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

abstract class xcb_image_format_t {
  static const int XCB_IMAGE_FORMAT_XY_BITMAP = 0;
  static const int XCB_IMAGE_FORMAT_XY_PIXMAP = 1;
  static const int XCB_IMAGE_FORMAT_Z_PIXMAP = 2;
}

class xcb_put_image_request_t extends ffi.Struct {}

class xcb_get_image_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_image_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int format;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint32()
  int plane_mask;
}

class xcb_get_image_reply_t extends ffi.Struct {}

class xcb_poly_text_8_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xcb_poly_text_16_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xcb_image_text_8_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int string_len;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xcb_image_text_16_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int string_len;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

abstract class xcb_colormap_alloc_t {
  static const int XCB_COLORMAP_ALLOC_NONE = 0;
  static const int XCB_COLORMAP_ALLOC_ALL = 1;
}

class xcb_create_colormap_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int alloc;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int mid;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int visual;
}

class xcb_free_colormap_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;
}

class xcb_copy_colormap_and_free_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int mid;

  @ffi.Uint32()
  int src_cmap;
}

class xcb_install_colormap_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;
}

class xcb_uninstall_colormap_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;
}

class xcb_list_installed_colormaps_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_list_installed_colormaps_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xcb_list_installed_colormaps_reply_t extends ffi.Struct {}

class xcb_alloc_color_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_alloc_color_request_t extends ffi.Struct {}

class xcb_alloc_color_reply_t extends ffi.Struct {}

class xcb_alloc_named_color_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_alloc_named_color_request_t extends ffi.Struct {}

class xcb_alloc_named_color_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int pixel;

  @ffi.Uint16()
  int exact_red;

  @ffi.Uint16()
  int exact_green;

  @ffi.Uint16()
  int exact_blue;

  @ffi.Uint16()
  int visual_red;

  @ffi.Uint16()
  int visual_green;

  @ffi.Uint16()
  int visual_blue;
}

class xcb_alloc_color_cells_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_alloc_color_cells_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int contiguous;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint16()
  int colors;

  @ffi.Uint16()
  int planes;
}

class xcb_alloc_color_cells_reply_t extends ffi.Struct {}

class xcb_alloc_color_planes_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_alloc_color_planes_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int contiguous;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint16()
  int colors;

  @ffi.Uint16()
  int reds;

  @ffi.Uint16()
  int greens;

  @ffi.Uint16()
  int blues;
}

class xcb_alloc_color_planes_reply_t extends ffi.Struct {}

class xcb_free_colors_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint32()
  int plane_mask;
}

abstract class xcb_color_flag_t {
  static const int XCB_COLOR_FLAG_RED = 1;
  static const int XCB_COLOR_FLAG_GREEN = 2;
  static const int XCB_COLOR_FLAG_BLUE = 4;
}

class xcb_coloritem_t extends ffi.Struct {
  @ffi.Uint32()
  int pixel;

  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int pad0;
}

class xcb_coloritem_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_coloritem_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_store_colors_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;
}

class xcb_store_named_color_request_t extends ffi.Struct {}

class xcb_rgb_t extends ffi.Struct {}

class xcb_rgb_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_rgb_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_query_colors_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_query_colors_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;
}

class xcb_query_colors_reply_t extends ffi.Struct {}

class xcb_lookup_color_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_lookup_color_request_t extends ffi.Struct {}

class xcb_lookup_color_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int exact_red;

  @ffi.Uint16()
  int exact_green;

  @ffi.Uint16()
  int exact_blue;

  @ffi.Uint16()
  int visual_red;

  @ffi.Uint16()
  int visual_green;

  @ffi.Uint16()
  int visual_blue;
}

abstract class xcb_pixmap_enum_t {
  static const int XCB_PIXMAP_NONE = 0;
}

class xcb_create_cursor_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cid;

  @ffi.Uint32()
  int source;

  @ffi.Uint32()
  int mask;

  @ffi.Uint16()
  int fore_red;

  @ffi.Uint16()
  int fore_green;

  @ffi.Uint16()
  int fore_blue;

  @ffi.Uint16()
  int back_red;

  @ffi.Uint16()
  int back_green;

  @ffi.Uint16()
  int back_blue;

  @ffi.Uint16()
  int x;

  @ffi.Uint16()
  int y;
}

abstract class xcb_font_enum_t {
  static const int XCB_FONT_NONE = 0;
}

class xcb_create_glyph_cursor_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cid;

  @ffi.Uint32()
  int source_font;

  @ffi.Uint32()
  int mask_font;

  @ffi.Uint16()
  int source_char;

  @ffi.Uint16()
  int mask_char;

  @ffi.Uint16()
  int fore_red;

  @ffi.Uint16()
  int fore_green;

  @ffi.Uint16()
  int fore_blue;

  @ffi.Uint16()
  int back_red;

  @ffi.Uint16()
  int back_green;

  @ffi.Uint16()
  int back_blue;
}

class xcb_free_cursor_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cursor;
}

class xcb_recolor_cursor_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cursor;

  @ffi.Uint16()
  int fore_red;

  @ffi.Uint16()
  int fore_green;

  @ffi.Uint16()
  int fore_blue;

  @ffi.Uint16()
  int back_red;

  @ffi.Uint16()
  int back_green;

  @ffi.Uint16()
  int back_blue;
}

abstract class xcb_query_shape_of_t {
  static const int XCB_QUERY_SHAPE_OF_LARGEST_CURSOR = 0;
  static const int XCB_QUERY_SHAPE_OF_FASTEST_TILE = 1;
  static const int XCB_QUERY_SHAPE_OF_FASTEST_STIPPLE = 2;
}

class xcb_query_best_size_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_query_best_size_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int _class;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xcb_query_best_size_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xcb_query_extension_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_query_extension_request_t extends ffi.Struct {}

class xcb_query_extension_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;

  @ffi.Uint8()
  int present;

  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int first_event;

  @ffi.Uint8()
  int first_error;
}

class xcb_list_extensions_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_list_extensions_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_list_extensions_reply_t extends ffi.Struct {}

class xcb_change_keyboard_mapping_request_t extends ffi.Struct {}

class xcb_get_keyboard_mapping_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_keyboard_mapping_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint8()
  int first_keycode;

  @ffi.Uint8()
  int count;
}

class xcb_get_keyboard_mapping_reply_t extends ffi.Struct {}

abstract class xcb_kb_t {
  static const int XCB_KB_KEY_CLICK_PERCENT = 1;
  static const int XCB_KB_BELL_PERCENT = 2;
  static const int XCB_KB_BELL_PITCH = 4;
  static const int XCB_KB_BELL_DURATION = 8;
  static const int XCB_KB_LED = 16;
  static const int XCB_KB_LED_MODE = 32;
  static const int XCB_KB_KEY = 64;
  static const int XCB_KB_AUTO_REPEAT_MODE = 128;
}

abstract class xcb_led_mode_t {
  static const int XCB_LED_MODE_OFF = 0;
  static const int XCB_LED_MODE_ON = 1;
}

abstract class xcb_auto_repeat_mode_t {
  static const int XCB_AUTO_REPEAT_MODE_OFF = 0;
  static const int XCB_AUTO_REPEAT_MODE_ON = 1;
  static const int XCB_AUTO_REPEAT_MODE_DEFAULT = 2;
}

class xcb_change_keyboard_control_value_list_t extends ffi.Struct {
  @ffi.Int32()
  int key_click_percent;

  @ffi.Int32()
  int bell_percent;

  @ffi.Int32()
  int bell_pitch;

  @ffi.Int32()
  int bell_duration;

  @ffi.Uint32()
  int led;

  @ffi.Uint32()
  int led_mode;

  @ffi.Uint32()
  int key;

  @ffi.Uint32()
  int auto_repeat_mode;
}

class xcb_change_keyboard_control_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int value_mask;
}

class xcb_get_keyboard_control_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_keyboard_control_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_get_keyboard_control_reply_t extends ffi.Struct {}

class xcb_bell_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Int8()
  int percent;

  @ffi.Uint16()
  int length;
}

class xcb_change_pointer_control_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Int16()
  int acceleration_numerator;

  @ffi.Int16()
  int acceleration_denominator;

  @ffi.Int16()
  int threshold;

  @ffi.Uint8()
  int do_acceleration;

  @ffi.Uint8()
  int do_threshold;
}

class xcb_get_pointer_control_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_pointer_control_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_get_pointer_control_reply_t extends ffi.Struct {}

abstract class xcb_blanking_t {
  static const int XCB_BLANKING_NOT_PREFERRED = 0;
  static const int XCB_BLANKING_PREFERRED = 1;
  static const int XCB_BLANKING_DEFAULT = 2;
}

abstract class xcb_exposures_t {
  static const int XCB_EXPOSURES_NOT_ALLOWED = 0;
  static const int XCB_EXPOSURES_ALLOWED = 1;
  static const int XCB_EXPOSURES_DEFAULT = 2;
}

class xcb_set_screen_saver_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Int16()
  int timeout;

  @ffi.Int16()
  int interval;

  @ffi.Uint8()
  int prefer_blanking;

  @ffi.Uint8()
  int allow_exposures;
}

class xcb_get_screen_saver_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_screen_saver_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_get_screen_saver_reply_t extends ffi.Struct {}

abstract class xcb_host_mode_t {
  static const int XCB_HOST_MODE_INSERT = 0;
  static const int XCB_HOST_MODE_DELETE = 1;
}

abstract class xcb_family_t {
  static const int XCB_FAMILY_INTERNET = 0;
  static const int XCB_FAMILY_DECNET = 1;
  static const int XCB_FAMILY_CHAOS = 2;
  static const int XCB_FAMILY_SERVER_INTERPRETED = 5;
  static const int XCB_FAMILY_INTERNET_6 = 6;
}

class xcb_change_hosts_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;

  @ffi.Uint8()
  int family;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int address_len;
}

class xcb_host_t extends ffi.Struct {
  @ffi.Uint8()
  int family;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int address_len;
}

class xcb_host_iterator_t extends ffi.Struct {
  ffi.Pointer<xcb_host_t> data;

  @ffi.Int32()
  int rem;

  @ffi.Int32()
  int index;
}

class xcb_list_hosts_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_list_hosts_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_list_hosts_reply_t extends ffi.Struct {}

abstract class xcb_access_control_t {
  static const int XCB_ACCESS_CONTROL_DISABLE = 0;
  static const int XCB_ACCESS_CONTROL_ENABLE = 1;
}

class xcb_set_access_control_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;
}

abstract class xcb_close_down_t {
  static const int XCB_CLOSE_DOWN_DESTROY_ALL = 0;
  static const int XCB_CLOSE_DOWN_RETAIN_PERMANENT = 1;
  static const int XCB_CLOSE_DOWN_RETAIN_TEMPORARY = 2;
}

class xcb_set_close_down_mode_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;
}

abstract class xcb_kill_t {
  static const int XCB_KILL_ALL_TEMPORARY = 0;
}

class xcb_kill_client_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int resource;
}

class xcb_rotate_properties_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint16()
  int atoms_len;

  @ffi.Int16()
  int delta;
}

abstract class xcb_screen_saver_t {
  static const int XCB_SCREEN_SAVER_RESET = 0;
  static const int XCB_SCREEN_SAVER_ACTIVE = 1;
}

class xcb_force_screen_saver_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;
}

abstract class xcb_mapping_status_t {
  static const int XCB_MAPPING_STATUS_SUCCESS = 0;
  static const int XCB_MAPPING_STATUS_BUSY = 1;
  static const int XCB_MAPPING_STATUS_FAILURE = 2;
}

class xcb_set_pointer_mapping_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_set_pointer_mapping_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int map_len;

  @ffi.Uint16()
  int length;
}

class xcb_set_pointer_mapping_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int status;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;
}

class xcb_get_pointer_mapping_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_pointer_mapping_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_get_pointer_mapping_reply_t extends ffi.Struct {}

abstract class xcb_map_index_t {
  static const int XCB_MAP_INDEX_SHIFT = 0;
  static const int XCB_MAP_INDEX_LOCK = 1;
  static const int XCB_MAP_INDEX_CONTROL = 2;
  static const int XCB_MAP_INDEX_1 = 3;
  static const int XCB_MAP_INDEX_2 = 4;
  static const int XCB_MAP_INDEX_3 = 5;
  static const int XCB_MAP_INDEX_4 = 6;
  static const int XCB_MAP_INDEX_5 = 7;
}

class xcb_set_modifier_mapping_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_set_modifier_mapping_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int keycodes_per_modifier;

  @ffi.Uint16()
  int length;
}

class xcb_set_modifier_mapping_reply_t extends ffi.Struct {
  @ffi.Uint8()
  int response_type;

  @ffi.Uint8()
  int status;

  @ffi.Uint16()
  int sequence;

  @ffi.Uint32()
  int length;
}

class xcb_get_modifier_mapping_cookie_t extends ffi.Struct {
  @ffi.Uint32()
  int sequence;
}

class xcb_get_modifier_mapping_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_get_modifier_mapping_reply_t extends ffi.Struct {}

class xcb_no_operation_request_t extends ffi.Struct {
  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int length;
}

class xcb_auth_info_t extends ffi.Struct {
  @ffi.Int32()
  int namelen;

  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int datalen;

  ffi.Pointer<ffi.Int8> data;
}

class xcb_special_event extends ffi.Struct {}

class xcb_extension_t extends ffi.Struct {}

abstract class XEventQueueOwner {
  static const int XlibOwnsEventQueue = 0;
  static const int XCBOwnsEventQueue = 1;
}

class _XPrivDisplay_1 extends ffi.Struct {
  ffi.Pointer<XExtData> ext_data;

  ffi.Pointer<_XPrivate> private1;

  @ffi.Int32()
  int fd;

  @ffi.Int32()
  int private2;

  @ffi.Int32()
  int proto_major_version;

  @ffi.Int32()
  int proto_minor_version;

  ffi.Pointer<ffi.Int8> vendor;

  @ffi.Uint64()
  int private3;

  @ffi.Uint64()
  int private4;

  @ffi.Uint64()
  int private5;

  @ffi.Int32()
  int private6;

  ffi.Pointer<ffi.NativeFunction<_typedefC_21>> resource_alloc;

  @ffi.Int32()
  int byte_order;

  @ffi.Int32()
  int bitmap_unit;

  @ffi.Int32()
  int bitmap_pad;

  @ffi.Int32()
  int bitmap_bit_order;

  @ffi.Int32()
  int nformats;

  ffi.Pointer<ScreenFormat> pixmap_format;

  @ffi.Int32()
  int private8;

  @ffi.Int32()
  int release;

  ffi.Pointer<_XPrivate> private9;

  ffi.Pointer<_XPrivate> private10;

  @ffi.Int32()
  int qlen;

  @ffi.Uint64()
  int last_request_read;

  @ffi.Uint64()
  int request;

  ffi.Pointer<ffi.Int8> private11;

  ffi.Pointer<ffi.Int8> private12;

  ffi.Pointer<ffi.Int8> private13;

  ffi.Pointer<ffi.Int8> private14;

  @ffi.Uint32()
  int max_request_size;

  ffi.Pointer<_XrmHashBucketRec> db;

  ffi.Pointer<ffi.NativeFunction<_typedefC_22>> private15;

  ffi.Pointer<ffi.Int8> display_name;

  @ffi.Int32()
  int default_screen;

  @ffi.Int32()
  int nscreens;

  ffi.Pointer<Screen> screens;

  @ffi.Uint64()
  int motion_buffer;

  @ffi.Uint64()
  int private16;

  @ffi.Int32()
  int min_keycode;

  @ffi.Int32()
  int max_keycode;

  ffi.Pointer<ffi.Int8> private17;

  ffi.Pointer<ffi.Int8> private18;

  @ffi.Int32()
  int private19;

  ffi.Pointer<ffi.Int8> xdefaults;
}

class xSegment extends ffi.Struct {
  @ffi.Int16()
  int x1;

  @ffi.Int16()
  int y1;

  @ffi.Int16()
  int x2;

  @ffi.Int16()
  int y2;
}

class xPoint extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xRectangle extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xArc extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Int16()
  int angle1;

  @ffi.Int16()
  int angle2;
}

class xConnClientPrefix extends ffi.Struct {
  @ffi.Uint8()
  int byteOrder;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int majorVersion;

  @ffi.Uint16()
  int minorVersion;

  @ffi.Uint16()
  int nbytesAuthProto;

  @ffi.Uint16()
  int nbytesAuthString;

  @ffi.Uint16()
  int pad2;
}

class xConnSetupPrefix extends ffi.Struct {
  @ffi.Uint8()
  int success;

  @ffi.Uint8()
  int lengthReason;

  @ffi.Uint16()
  int majorVersion;

  @ffi.Uint16()
  int minorVersion;

  @ffi.Uint16()
  int length;
}

class xConnSetup extends ffi.Struct {
  @ffi.Uint32()
  int release;

  @ffi.Uint32()
  int ridBase;

  @ffi.Uint32()
  int ridMask;

  @ffi.Uint32()
  int motionBufferSize;

  @ffi.Uint16()
  int nbytesVendor;

  @ffi.Uint16()
  int maxRequestSize;

  @ffi.Uint8()
  int numRoots;

  @ffi.Uint8()
  int numFormats;

  @ffi.Uint8()
  int imageByteOrder;

  @ffi.Uint8()
  int bitmapBitOrder;

  @ffi.Uint8()
  int bitmapScanlineUnit;

  @ffi.Uint8()
  int bitmapScanlinePad;

  @ffi.Uint8()
  int minKeyCode;

  @ffi.Uint8()
  int maxKeyCode;

  @ffi.Uint32()
  int pad2;
}

class xPixmapFormat extends ffi.Struct {
  @ffi.Uint8()
  int depth;

  @ffi.Uint8()
  int bitsPerPixel;

  @ffi.Uint8()
  int scanLinePad;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint32()
  int pad2;
}

class xDepth extends ffi.Struct {
  @ffi.Uint8()
  int depth;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int nVisuals;

  @ffi.Uint32()
  int pad2;
}

class xVisualType extends ffi.Struct {
  @ffi.Uint32()
  int visualID;

  @ffi.Uint8()
  int class_1;

  @ffi.Uint8()
  int bitsPerRGB;

  @ffi.Uint16()
  int colormapEntries;

  @ffi.Uint32()
  int redMask;

  @ffi.Uint32()
  int greenMask;

  @ffi.Uint32()
  int blueMask;

  @ffi.Uint32()
  int pad;
}

class xWindowRoot extends ffi.Struct {
  @ffi.Uint32()
  int windowId;

  @ffi.Uint32()
  int defaultColormap;

  @ffi.Uint32()
  int whitePixel;

  @ffi.Uint32()
  int blackPixel;

  @ffi.Uint32()
  int currentInputMask;

  @ffi.Uint16()
  int pixWidth;

  @ffi.Uint16()
  int pixHeight;

  @ffi.Uint16()
  int mmWidth;

  @ffi.Uint16()
  int mmHeight;

  @ffi.Uint16()
  int minInstalledMaps;

  @ffi.Uint16()
  int maxInstalledMaps;

  @ffi.Uint32()
  int rootVisualID;

  @ffi.Uint8()
  int backingStore;

  @ffi.Uint8()
  int saveUnders;

  @ffi.Uint8()
  int rootDepth;

  @ffi.Uint8()
  int nDepths;
}

class xTimecoord extends ffi.Struct {
  @ffi.Uint32()
  int time;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xHostEntry extends ffi.Struct {
  @ffi.Uint8()
  int family;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;
}

class xCharInfo extends ffi.Struct {
  @ffi.Int16()
  int leftSideBearing;

  @ffi.Int16()
  int rightSideBearing;

  @ffi.Int16()
  int characterWidth;

  @ffi.Int16()
  int ascent;

  @ffi.Int16()
  int descent;

  @ffi.Uint16()
  int attributes;
}

class xFontProp extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint32()
  int value;
}

class xTextElt extends ffi.Struct {
  @ffi.Uint8()
  int len;

  @ffi.Int8()
  int delta;
}

class xColorItem extends ffi.Struct {
  @ffi.Uint32()
  int pixel;

  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int pad;
}

class xrgb extends ffi.Struct {
  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;

  @ffi.Uint16()
  int pad;
}

class xGenericReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int data1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int data00;

  @ffi.Uint32()
  int data01;

  @ffi.Uint32()
  int data02;

  @ffi.Uint32()
  int data03;

  @ffi.Uint32()
  int data04;

  @ffi.Uint32()
  int data05;
}

class xGetWindowAttributesReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int backingStore;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int visualID;

  @ffi.Uint16()
  int class_1;

  @ffi.Uint8()
  int bitGravity;

  @ffi.Uint8()
  int winGravity;

  @ffi.Uint32()
  int backingBitPlanes;

  @ffi.Uint32()
  int backingPixel;

  @ffi.Uint8()
  int saveUnder;

  @ffi.Uint8()
  int mapInstalled;

  @ffi.Uint8()
  int mapState;

  @ffi.Uint8()
  int override;

  @ffi.Uint32()
  int colormap;

  @ffi.Uint32()
  int allEventMasks;

  @ffi.Uint32()
  int yourEventMask;

  @ffi.Uint16()
  int doNotPropagateMask;

  @ffi.Uint16()
  int pad;
}

class xGetGeometryReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int depth;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int root;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint16()
  int borderWidth;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;
}

class xQueryTreeReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int root;

  @ffi.Uint32()
  int parent;

  @ffi.Uint16()
  int nChildren;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xInternAtomReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int atom;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;
}

class xGetAtomNameReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nameLength;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xGetPropertyReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int format;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int propertyType;

  @ffi.Uint32()
  int bytesAfter;

  @ffi.Uint32()
  int nItems;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;
}

class xListPropertiesReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nProperties;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xGetSelectionOwnerReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int owner;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;
}

class xGrabPointerReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int status;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;
}

class xQueryPointerReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int sameScreen;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int root;

  @ffi.Uint32()
  int child;

  @ffi.Int16()
  int rootX;

  @ffi.Int16()
  int rootY;

  @ffi.Int16()
  int winX;

  @ffi.Int16()
  int winY;

  @ffi.Uint16()
  int mask;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int pad;
}

class xGetMotionEventsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int nEvents;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;
}

class xTranslateCoordsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int sameScreen;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int child;

  @ffi.Int16()
  int dstX;

  @ffi.Int16()
  int dstY;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xGetInputFocusReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int revertTo;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int focus;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xQueryKeymapReply extends ffi.Struct {}

class xQueryFontReply extends ffi.Struct {}

class xQueryTextExtentsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int drawDirection;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Int16()
  int fontAscent;

  @ffi.Int16()
  int fontDescent;

  @ffi.Int16()
  int overallAscent;

  @ffi.Int16()
  int overallDescent;

  @ffi.Int32()
  int overallWidth;

  @ffi.Int32()
  int overallLeft;

  @ffi.Int32()
  int overallRight;

  @ffi.Uint32()
  int pad;
}

class xListFontsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nFonts;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xListFontsWithInfoReply extends ffi.Struct {}

class xGetFontPathReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nPaths;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xGetImageReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int depth;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int visual;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xListInstalledColormapsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nColormaps;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xAllocColorReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pixel;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xAllocNamedColorReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int pixel;

  @ffi.Uint16()
  int exactRed;

  @ffi.Uint16()
  int exactGreen;

  @ffi.Uint16()
  int exactBlue;

  @ffi.Uint16()
  int screenRed;

  @ffi.Uint16()
  int screenGreen;

  @ffi.Uint16()
  int screenBlue;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;
}

class xAllocColorCellsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nPixels;

  @ffi.Uint16()
  int nMasks;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xAllocColorPlanesReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nPixels;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int redMask;

  @ffi.Uint32()
  int greenMask;

  @ffi.Uint32()
  int blueMask;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;
}

class xQueryColorsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nColors;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xLookupColorReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int exactRed;

  @ffi.Uint16()
  int exactGreen;

  @ffi.Uint16()
  int exactBlue;

  @ffi.Uint16()
  int screenRed;

  @ffi.Uint16()
  int screenGreen;

  @ffi.Uint16()
  int screenBlue;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xQueryBestSizeReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xQueryExtensionReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint8()
  int present;

  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint8()
  int first_event;

  @ffi.Uint8()
  int first_error;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xListExtensionsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int nExtensions;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xSetMappingReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int success;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xGetPointerMappingReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int nElts;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xGetKeyboardMappingReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int keySymsPerKeyCode;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xGetModifierMappingReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int numKeyPerModifier;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;
}

class xGetKeyboardControlReply extends ffi.Struct {}

class xGetPointerControlReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int accelNumerator;

  @ffi.Uint16()
  int accelDenominator;

  @ffi.Uint16()
  int threshold;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;
}

class xGetScreenSaverReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int timeout;

  @ffi.Uint16()
  int interval;

  @ffi.Uint8()
  int preferBlanking;

  @ffi.Uint8()
  int allowExposures;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;
}

class xListHostsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int enabled;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nHosts;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xError extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int errorCode;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int resourceID;

  @ffi.Uint16()
  int minorCode;

  @ffi.Uint8()
  int majorCode;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xEvent extends ffi.Struct {}

class xGenericEvent extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int extension_1;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int evtype;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xKeymapEvent extends ffi.Struct {}

class xReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int data;

  @ffi.Uint16()
  int length;
}

class xResourceReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int id;
}

class xCreateWindowReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int depth;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int wid;

  @ffi.Uint32()
  int parent;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint16()
  int borderWidth;

  @ffi.Uint16()
  int class_1;

  @ffi.Uint32()
  int visual;

  @ffi.Uint32()
  int mask;
}

class xChangeWindowAttributesReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int valueMask;
}

class xChangeSaveSetReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xReparentWindowReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int parent;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xConfigureWindowReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint16()
  int mask;

  @ffi.Uint16()
  int pad2;
}

class xCirculateWindowReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int direction;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;
}

class xInternAtomReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int onlyIfExists;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int nbytes;

  @ffi.Uint16()
  int pad;
}

class xChangePropertyReq extends ffi.Struct {}

class xDeletePropertyReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int property;
}

class xGetPropertyReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int delete;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int property;

  @ffi.Uint32()
  int type;

  @ffi.Uint32()
  int longOffset;

  @ffi.Uint32()
  int longLength;
}

class xSetSelectionOwnerReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int selection;

  @ffi.Uint32()
  int time;
}

class xConvertSelectionReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int requestor;

  @ffi.Uint32()
  int selection;

  @ffi.Uint32()
  int target;

  @ffi.Uint32()
  int property;

  @ffi.Uint32()
  int time;
}

class xSendEventReq extends ffi.Struct {}

class xGrabPointerReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int ownerEvents;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int grabWindow;

  @ffi.Uint16()
  int eventMask;

  @ffi.Uint8()
  int pointerMode;

  @ffi.Uint8()
  int keyboardMode;

  @ffi.Uint32()
  int confineTo;

  @ffi.Uint32()
  int cursor;

  @ffi.Uint32()
  int time;
}

class xGrabButtonReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int ownerEvents;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int grabWindow;

  @ffi.Uint16()
  int eventMask;

  @ffi.Uint8()
  int pointerMode;

  @ffi.Uint8()
  int keyboardMode;

  @ffi.Uint32()
  int confineTo;

  @ffi.Uint32()
  int cursor;

  @ffi.Uint8()
  int button;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int modifiers;
}

class xUngrabButtonReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int button;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int grabWindow;

  @ffi.Uint16()
  int modifiers;

  @ffi.Uint16()
  int pad;
}

class xChangeActivePointerGrabReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cursor;

  @ffi.Uint32()
  int time;

  @ffi.Uint16()
  int eventMask;

  @ffi.Uint16()
  int pad2;
}

class xGrabKeyboardReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int ownerEvents;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int grabWindow;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int pointerMode;

  @ffi.Uint8()
  int keyboardMode;

  @ffi.Uint16()
  int pad;
}

class xGrabKeyReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int ownerEvents;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int grabWindow;

  @ffi.Uint16()
  int modifiers;

  @ffi.Uint8()
  int key;

  @ffi.Uint8()
  int pointerMode;

  @ffi.Uint8()
  int keyboardMode;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint8()
  int pad2;

  @ffi.Uint8()
  int pad3;
}

class xUngrabKeyReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int key;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int grabWindow;

  @ffi.Uint16()
  int modifiers;

  @ffi.Uint16()
  int pad;
}

class xAllowEventsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int time;
}

class xGetMotionEventsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int start;

  @ffi.Uint32()
  int stop;
}

class xTranslateCoordsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int srcWid;

  @ffi.Uint32()
  int dstWid;

  @ffi.Int16()
  int srcX;

  @ffi.Int16()
  int srcY;
}

class xWarpPointerReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int srcWid;

  @ffi.Uint32()
  int dstWid;

  @ffi.Int16()
  int srcX;

  @ffi.Int16()
  int srcY;

  @ffi.Uint16()
  int srcWidth;

  @ffi.Uint16()
  int srcHeight;

  @ffi.Int16()
  int dstX;

  @ffi.Int16()
  int dstY;
}

class xSetInputFocusReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int revertTo;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int focus;

  @ffi.Uint32()
  int time;
}

class xOpenFontReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int fid;

  @ffi.Uint16()
  int nbytes;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint8()
  int pad2;
}

class xQueryTextExtentsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int oddLength;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int fid;
}

class xListFontsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int maxNames;

  @ffi.Uint16()
  int nbytes;
}

class xSetFontPathReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int nFonts;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint8()
  int pad2;
}

class xCreatePixmapReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int depth;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int pid;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xCreateGCReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int gc;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int mask;
}

class xChangeGCReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int gc;

  @ffi.Uint32()
  int mask;
}

class xCopyGCReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int srcGC;

  @ffi.Uint32()
  int dstGC;

  @ffi.Uint32()
  int mask;
}

class xSetDashesReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int gc;

  @ffi.Uint16()
  int dashOffset;

  @ffi.Uint16()
  int nDashes;
}

class xSetClipRectanglesReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int ordering;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int xOrigin;

  @ffi.Int16()
  int yOrigin;
}

class xClearAreaReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int exposures;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xCopyAreaReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int srcDrawable;

  @ffi.Uint32()
  int dstDrawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int srcX;

  @ffi.Int16()
  int srcY;

  @ffi.Int16()
  int dstX;

  @ffi.Int16()
  int dstY;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xCopyPlaneReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int srcDrawable;

  @ffi.Uint32()
  int dstDrawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int srcX;

  @ffi.Int16()
  int srcY;

  @ffi.Int16()
  int dstX;

  @ffi.Int16()
  int dstY;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint32()
  int bitPlane;
}

class xPolyPointReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int coordMode;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

class xPolySegmentReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;
}

class xFillPolyReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Uint8()
  int shape;

  @ffi.Uint8()
  int coordMode;

  @ffi.Uint16()
  int pad1;
}

class xPutImageReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int format;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Int16()
  int dstX;

  @ffi.Int16()
  int dstY;

  @ffi.Uint8()
  int leftPad;

  @ffi.Uint8()
  int depth;

  @ffi.Uint16()
  int pad;
}

class xGetImageReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int format;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint32()
  int planeMask;
}

class xPolyTextReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xImageTextReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int nChars;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint32()
  int gc;

  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xCreateColormapReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int alloc;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int mid;

  @ffi.Uint32()
  int window;

  @ffi.Uint32()
  int visual;
}

class xCopyColormapAndFreeReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int mid;

  @ffi.Uint32()
  int srcCmap;
}

class xAllocColorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;

  @ffi.Uint16()
  int pad2;
}

class xAllocNamedColorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint16()
  int nbytes;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint8()
  int pad2;
}

class xAllocColorCellsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int contiguous;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint16()
  int colors;

  @ffi.Uint16()
  int planes;
}

class xAllocColorPlanesReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int contiguous;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint16()
  int colors;

  @ffi.Uint16()
  int red;

  @ffi.Uint16()
  int green;

  @ffi.Uint16()
  int blue;
}

class xFreeColorsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint32()
  int planeMask;
}

class xStoreColorsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;
}

class xStoreNamedColorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int flags;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint32()
  int pixel;

  @ffi.Uint16()
  int nbytes;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint8()
  int pad2;
}

class xQueryColorsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;
}

class xLookupColorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cmap;

  @ffi.Uint16()
  int nbytes;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint8()
  int pad2;
}

class xCreateCursorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cid;

  @ffi.Uint32()
  int source;

  @ffi.Uint32()
  int mask;

  @ffi.Uint16()
  int foreRed;

  @ffi.Uint16()
  int foreGreen;

  @ffi.Uint16()
  int foreBlue;

  @ffi.Uint16()
  int backRed;

  @ffi.Uint16()
  int backGreen;

  @ffi.Uint16()
  int backBlue;

  @ffi.Uint16()
  int x;

  @ffi.Uint16()
  int y;
}

class xCreateGlyphCursorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cid;

  @ffi.Uint32()
  int source;

  @ffi.Uint32()
  int mask;

  @ffi.Uint16()
  int sourceChar;

  @ffi.Uint16()
  int maskChar;

  @ffi.Uint16()
  int foreRed;

  @ffi.Uint16()
  int foreGreen;

  @ffi.Uint16()
  int foreBlue;

  @ffi.Uint16()
  int backRed;

  @ffi.Uint16()
  int backGreen;

  @ffi.Uint16()
  int backBlue;
}

class xRecolorCursorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int cursor;

  @ffi.Uint16()
  int foreRed;

  @ffi.Uint16()
  int foreGreen;

  @ffi.Uint16()
  int foreBlue;

  @ffi.Uint16()
  int backRed;

  @ffi.Uint16()
  int backGreen;

  @ffi.Uint16()
  int backBlue;
}

class xQueryBestSizeReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int class_1;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int drawable;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;
}

class xQueryExtensionReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int nbytes;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint8()
  int pad2;
}

class xSetModifierMappingReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int numKeyPerModifier;

  @ffi.Uint16()
  int length;
}

class xSetPointerMappingReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int nElts;

  @ffi.Uint16()
  int length;
}

class xGetKeyboardMappingReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint8()
  int firstKeyCode;

  @ffi.Uint8()
  int count;

  @ffi.Uint16()
  int pad1;
}

class xChangeKeyboardMappingReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int keyCodes;

  @ffi.Uint16()
  int length;

  @ffi.Uint8()
  int firstKeyCode;

  @ffi.Uint8()
  int keySymsPerKeyCode;

  @ffi.Uint16()
  int pad1;
}

class xChangeKeyboardControlReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int mask;
}

class xBellReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Int8()
  int percent;

  @ffi.Uint16()
  int length;
}

class xChangePointerControlReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Int16()
  int accelNum;

  @ffi.Int16()
  int accelDenum;

  @ffi.Int16()
  int threshold;

  @ffi.Uint8()
  int doAccel;

  @ffi.Uint8()
  int doThresh;
}

class xSetScreenSaverReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Int16()
  int timeout;

  @ffi.Int16()
  int interval;

  @ffi.Uint8()
  int preferBlank;

  @ffi.Uint8()
  int allowExpose;

  @ffi.Uint16()
  int pad2;
}

class xChangeHostsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;

  @ffi.Uint8()
  int hostFamily;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int hostLength;
}

class xListHostsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;
}

class xChangeModeReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int mode;

  @ffi.Uint16()
  int length;
}

class xRotatePropertiesReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int length;

  @ffi.Uint32()
  int window;

  @ffi.Uint16()
  int nAtoms;

  @ffi.Int16()
  int nPositions;
}

class _XQEvent extends ffi.Struct {}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  int quot;

  @ffi.Int32()
  int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  int quot;

  @ffi.Int64()
  int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  int quot;

  @ffi.Int64()
  int rem;
}

class random_data extends ffi.Struct {
  ffi.Pointer<ffi.Int32> fptr;

  ffi.Pointer<ffi.Int32> rptr;

  ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  int rand_type;

  @ffi.Int32()
  int rand_deg;

  @ffi.Int32()
  int rand_sep;

  ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {}

class LockInfoRec extends ffi.Struct {}

class _XLockPtrs extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_26>> lock_display;

  ffi.Pointer<ffi.NativeFunction<_typedefC_27>> unlock_display;
}

class _XAsyncHandler extends ffi.Struct {}

class _XAsyncErrorState extends ffi.Struct {
  @ffi.Uint64()
  int min_sequence_number;

  @ffi.Uint64()
  int max_sequence_number;

  @ffi.Uint8()
  int error_code;

  @ffi.Uint8()
  int major_opcode;

  @ffi.Uint16()
  int minor_opcode;

  @ffi.Uint8()
  int last_error_received;

  @ffi.Int32()
  int error_count;
}

class _XFreeFuncRec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<FreeFuncType>> atoms;

  ffi.Pointer<ffi.NativeFunction<FreeModmapType>> modifiermap;

  ffi.Pointer<ffi.NativeFunction<FreeFuncType>> key_bindings;

  ffi.Pointer<ffi.NativeFunction<FreeFuncType>> context_db;

  ffi.Pointer<ffi.NativeFunction<FreeFuncType>> defaultCCCs;

  ffi.Pointer<ffi.NativeFunction<FreeFuncType>> clientCmaps;

  ffi.Pointer<ffi.NativeFunction<FreeFuncType>> intensityMaps;

  ffi.Pointer<ffi.NativeFunction<FreeFuncType>> im_filters;

  ffi.Pointer<ffi.NativeFunction<FreeFuncType>> xkb;
}

class _XExtension extends ffi.Struct {}

class _XConnectionInfo extends ffi.Struct {
  @ffi.Int32()
  int fd;

  ffi.Pointer<ffi.NativeFunction<_XInternalConnectionProc>> read_callback;

  ffi.Pointer<ffi.Int8> call_data;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> watch_data;

  ffi.Pointer<_XConnectionInfo> next;
}

class _XConnWatchInfo extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> fn;

  ffi.Pointer<ffi.Int8> client_data;

  ffi.Pointer<_XConnWatchInfo> next;
}

class lconv extends ffi.Struct {
  ffi.Pointer<ffi.Int8> decimal_point;

  ffi.Pointer<ffi.Int8> thousands_sep;

  ffi.Pointer<ffi.Int8> grouping;

  ffi.Pointer<ffi.Int8> int_curr_symbol;

  ffi.Pointer<ffi.Int8> currency_symbol;

  ffi.Pointer<ffi.Int8> mon_decimal_point;

  ffi.Pointer<ffi.Int8> mon_thousands_sep;

  ffi.Pointer<ffi.Int8> mon_grouping;

  ffi.Pointer<ffi.Int8> positive_sign;

  ffi.Pointer<ffi.Int8> negative_sign;

  @ffi.Int8()
  int int_frac_digits;

  @ffi.Int8()
  int frac_digits;

  @ffi.Int8()
  int p_cs_precedes;

  @ffi.Int8()
  int p_sep_by_space;

  @ffi.Int8()
  int n_cs_precedes;

  @ffi.Int8()
  int n_sep_by_space;

  @ffi.Int8()
  int p_sign_posn;

  @ffi.Int8()
  int n_sign_posn;

  @ffi.Int8()
  int int_p_cs_precedes;

  @ffi.Int8()
  int int_p_sep_by_space;

  @ffi.Int8()
  int int_n_cs_precedes;

  @ffi.Int8()
  int int_n_sep_by_space;

  @ffi.Int8()
  int int_p_sign_posn;

  @ffi.Int8()
  int int_n_sign_posn;
}

class BoxPtr extends ffi.Struct {
  @ffi.Int16()
  int x1;

  @ffi.Int16()
  int x2;

  @ffi.Int16()
  int y1;

  @ffi.Int16()
  int y2;
}

class RectanglePtr extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;

  @ffi.Int16()
  int width;

  @ffi.Int16()
  int height;
}

class _XRegion extends ffi.Struct {}

class POINTBLOCK extends ffi.Struct {}

/// Conversion of Strings to Lists
abstract class XrmBindingList {
  static const int XrmBindTightly = 0;
  static const int XrmBindLoosely = 1;
}

class XrmValuePtr extends ffi.Struct {
  @ffi.Uint32()
  int size;

  ffi.Pointer<ffi.Int8> addr;
}

/// Command line option mapping to resource entries
abstract class XrmOptionKind {
  static const int XrmoptionNoArg = 0;
  static const int XrmoptionIsArg = 1;
  static const int XrmoptionStickyArg = 2;
  static const int XrmoptionSepArg = 3;
  static const int XrmoptionResArg = 4;
  static const int XrmoptionSkipArg = 5;
  static const int XrmoptionSkipLine = 6;
  static const int XrmoptionSkipNArgs = 7;
}

class XrmOptionDescList extends ffi.Struct {
  ffi.Pointer<ffi.Int8> option;

  ffi.Pointer<ffi.Int8> specifier;

  @ffi.Int32()
  int argKind;

  ffi.Pointer<ffi.Int8> value;
}

class XSizeHints extends ffi.Struct {}

class XWMHints extends ffi.Struct {
  @ffi.Int64()
  int flags;

  @ffi.Int32()
  int input;

  @ffi.Int32()
  int initial_state;

  @ffi.Uint64()
  int icon_pixmap;

  @ffi.Uint64()
  int icon_window;

  @ffi.Int32()
  int icon_x;

  @ffi.Int32()
  int icon_y;

  @ffi.Uint64()
  int icon_mask;

  @ffi.Uint64()
  int window_group;
}

class XTextProperty extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> value;

  @ffi.Uint64()
  int encoding;

  @ffi.Int32()
  int format;

  @ffi.Uint64()
  int nitems;
}

abstract class XICCEncodingStyle {
  static const int XStringStyle = 0;
  static const int XCompoundTextStyle = 1;
  static const int XTextStyle = 2;
  static const int XStdICCTextStyle = 3;
  static const int XUTF8StringStyle = 4;
}

class XIconSize extends ffi.Struct {
  @ffi.Int32()
  int min_width;

  @ffi.Int32()
  int min_height;

  @ffi.Int32()
  int max_width;

  @ffi.Int32()
  int max_height;

  @ffi.Int32()
  int width_inc;

  @ffi.Int32()
  int height_inc;
}

class XClassHint extends ffi.Struct {
  ffi.Pointer<ffi.Int8> res_name;

  ffi.Pointer<ffi.Int8> res_class;
}

class XComposeStatus extends ffi.Struct {
  ffi.Pointer<ffi.Int8> compose_ptr;

  @ffi.Int32()
  int chars_matched;
}

class XVisualInfo extends ffi.Struct {
  ffi.Pointer<Visual> visual;

  @ffi.Uint64()
  int visualid;

  @ffi.Int32()
  int screen;

  @ffi.Int32()
  int depth;

  @ffi.Int32()
  int class_1;

  @ffi.Uint64()
  int red_mask;

  @ffi.Uint64()
  int green_mask;

  @ffi.Uint64()
  int blue_mask;

  @ffi.Int32()
  int colormap_size;

  @ffi.Int32()
  int bits_per_rgb;
}

class XStandardColormap extends ffi.Struct {
  @ffi.Uint64()
  int colormap;

  @ffi.Uint64()
  int red_max;

  @ffi.Uint64()
  int red_mult;

  @ffi.Uint64()
  int green_max;

  @ffi.Uint64()
  int green_mult;

  @ffi.Uint64()
  int blue_max;

  @ffi.Uint64()
  int blue_mult;

  @ffi.Uint64()
  int base_pixel;

  @ffi.Uint64()
  int visualid;

  @ffi.Uint64()
  int killid;
}

abstract class XimCbStatus {
  static const int XimCbSuccess = 0;
  static const int XimCbNoCallback = 1;
  static const int XimCbError = 2;
  static const int XimCbQueued = 3;
  static const int XimCbBadContextID = 4;
  static const int XimCbBadOpcode = 5;
}

class XIM_QueryExtRec extends ffi.Struct {
  @ffi.Int32()
  int is_support;

  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int name_len;

  @ffi.Int32()
  int major_opcode;

  @ffi.Int32()
  int minor_opcode;

  @ffi.Int32()
  int idx;
}

class XimInstCallback extends ffi.Struct {
  @ffi.Int32()
  int call;

  @ffi.Int32()
  int destroy;

  ffi.Pointer<ffi.Int32> display;

  @ffi.Int32()
  int lcd;

  @ffi.Int8()
  int name;

  ffi.Pointer<ffi.Int8> modifiers;

  @ffi.Int32()
  int rdb;

  ffi.Pointer<ffi.Int8> res_name;

  ffi.Pointer<ffi.Int8> res_class;

  @ffi.Int32()
  int callback;

  @ffi.Int32()
  int client_data;

  ffi.Pointer<XimInstCallback> next;
}

class __mbstate_t extends ffi.Struct {}

class __fpos_t extends ffi.Struct {}

class __fpos64_t extends ffi.Struct {}

class _IO_FILE extends ffi.Struct {}

class _IO_marker extends ffi.Struct {}

class _IO_codecvt extends ffi.Struct {}

class _IO_wide_data extends ffi.Struct {}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  int gp_offset;

  @ffi.Uint32()
  int fp_offset;

  ffi.Pointer<ffi.Void> overflow_arg_area;

  ffi.Pointer<ffi.Void> reg_save_area;
}

class flock extends ffi.Struct {
  @ffi.Int16()
  int l_type;

  @ffi.Int16()
  int l_whence;

  @ffi.Int64()
  int l_start;

  @ffi.Int64()
  int l_len;

  @ffi.Int32()
  int l_pid;
}

class stat extends ffi.Struct {}

class timezone extends ffi.Struct {
  @ffi.Int32()
  int tz_minuteswest;

  @ffi.Int32()
  int tz_dsttime;
}

abstract class __itimer_which {
  static const int ITIMER_REAL = 0;
  static const int ITIMER_VIRTUAL = 1;
  static const int ITIMER_PROF = 2;
}

class itimerval extends ffi.Struct {}

class XimValueOffsetInfo extends ffi.Struct {
  @ffi.Uint16()
  int name_offset;

  @ffi.Int32()
  int quark;

  @ffi.Uint32()
  int offset;

  ffi.Pointer<ffi.NativeFunction<_typedefC_59>> defaults;

  ffi.Pointer<ffi.NativeFunction<_typedefC_60>> encode;

  ffi.Pointer<ffi.NativeFunction<_typedefC_61>> decode;
}

class XimIMMode extends ffi.Struct {
  @ffi.Uint16()
  int name_offset;

  @ffi.Uint16()
  int mode;
}

class XimICMode extends ffi.Struct {
  @ffi.Uint16()
  int name_offset;

  @ffi.Uint16()
  int preedit_callback_mode;

  @ffi.Uint16()
  int preedit_position_mode;

  @ffi.Uint16()
  int preedit_area_mode;

  @ffi.Uint16()
  int preedit_nothing_mode;

  @ffi.Uint16()
  int preedit_none_mode;

  @ffi.Uint16()
  int status_callback_mode;

  @ffi.Uint16()
  int status_area_mode;

  @ffi.Uint16()
  int status_nothing_mode;

  @ffi.Uint16()
  int status_none_mode;
}

abstract class __socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

class sockaddr extends ffi.Struct {}

class sockaddr_storage extends ffi.Struct {}

class msghdr extends ffi.Struct {
  ffi.Pointer<ffi.Void> msg_name;

  @ffi.Uint32()
  int msg_namelen;

  ffi.Pointer<iovec> msg_iov;

  @ffi.Uint64()
  int msg_iovlen;

  ffi.Pointer<ffi.Void> msg_control;

  @ffi.Uint64()
  int msg_controllen;

  @ffi.Int32()
  int msg_flags;
}

class cmsghdr extends ffi.Struct {}

class __kernel_fd_set extends ffi.Struct {}

class __kernel_fsid_t extends ffi.Struct {}

class linger extends ffi.Struct {
  @ffi.Int32()
  int l_onoff;

  @ffi.Int32()
  int l_linger;
}

class osockaddr extends ffi.Struct {}

class Xtransaddr extends ffi.Struct {}

class _XtransConnInfo extends ffi.Struct {}

class State extends ffi.Struct {}

class CTData extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Int8> encoding;
}

abstract class ClassType {
  static const int C_PRIMARY = 0;
  static const int C_SUBSTITUTE = 1;
  static const int C_VMAP = 2;
  static const int C_VROTATE = 3;
}

class XOCMethodsList extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int methods;
}

class _XCVList extends ffi.Struct {}

class _XLockInfo extends ffi.Struct {}

class PendingRequest extends ffi.Struct {}

class _X11XCBPrivate extends ffi.Struct {}

class TableEntry extends ffi.Struct {
  @ffi.Int32()
  int rid;

  @ffi.Int32()
  int context;

  @ffi.Int32()
  int data;

  ffi.Pointer<TableEntry> next;
}

class DB extends ffi.Struct {
  ffi.Pointer<ffi.Pointer<TableEntry>> table;

  @ffi.Int32()
  int mask;

  @ffi.Int32()
  int numentries;
}

class Entry extends ffi.Struct {
  @ffi.Uint64()
  int sig;

  @ffi.Uint64()
  int atom;
}

class AtomTable extends ffi.Struct {}

class _XGetAtomNameState extends ffi.Struct {
  @ffi.Int32()
  int start_seq;

  @ffi.Int32()
  int stop_seq;

  ffi.Pointer<ffi.Uint64> atoms;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> names;

  @ffi.Int32()
  int idx;

  @ffi.Int32()
  int count;

  @ffi.Int32()
  int status;
}

class passwd extends ffi.Struct {
  ffi.Pointer<ffi.Int8> pw_name;

  ffi.Pointer<ffi.Int8> pw_passwd;

  @ffi.Uint32()
  int pw_uid;

  @ffi.Uint32()
  int pw_gid;

  ffi.Pointer<ffi.Int8> pw_gecos;

  ffi.Pointer<ffi.Int8> pw_dir;

  ffi.Pointer<ffi.Int8> pw_shell;
}

class xPropSizeHints extends ffi.Struct {
  @ffi.Uint64()
  int flags;

  @ffi.Int64()
  int x;

  @ffi.Int64()
  int y;

  @ffi.Int64()
  int width;

  @ffi.Int64()
  int height;

  @ffi.Int64()
  int minWidth;

  @ffi.Int64()
  int minHeight;

  @ffi.Int64()
  int maxWidth;

  @ffi.Int64()
  int maxHeight;

  @ffi.Int64()
  int widthInc;

  @ffi.Int64()
  int heightInc;

  @ffi.Int64()
  int minAspectX;

  @ffi.Int64()
  int minAspectY;

  @ffi.Int64()
  int maxAspectX;

  @ffi.Int64()
  int maxAspectY;

  @ffi.Int64()
  int baseWidth;

  @ffi.Int64()
  int baseHeight;

  @ffi.Int64()
  int winGravity;
}

class xPropStandardColormap extends ffi.Struct {
  @ffi.Uint64()
  int colormap;

  @ffi.Uint64()
  int red_max;

  @ffi.Uint64()
  int red_mult;

  @ffi.Uint64()
  int green_max;

  @ffi.Uint64()
  int green_mult;

  @ffi.Uint64()
  int blue_max;

  @ffi.Uint64()
  int blue_mult;

  @ffi.Uint64()
  int base_pixel;

  @ffi.Uint64()
  int visualid;

  @ffi.Uint64()
  int killid;
}

class xPropWMHints extends ffi.Struct {
  @ffi.Uint64()
  int flags;

  @ffi.Int64()
  int input;

  @ffi.Int64()
  int initialState;

  @ffi.Uint64()
  int iconPixmap;

  @ffi.Uint64()
  int iconWindow;

  @ffi.Int64()
  int iconX;

  @ffi.Int64()
  int iconY;

  @ffi.Uint64()
  int iconMask;

  @ffi.Uint64()
  int windowGroup;
}

class xPropIconSize extends ffi.Struct {
  @ffi.Int64()
  int minWidth;

  @ffi.Int64()
  int minHeight;

  @ffi.Int64()
  int maxWidth;

  @ffi.Int64()
  int maxHeight;

  @ffi.Int64()
  int widthInc;

  @ffi.Int64()
  int heightInc;
}

class xPropWMState extends ffi.Struct {
  @ffi.Int64()
  int state;

  @ffi.Uint64()
  int iconWindow;
}

class _XWAttrsState extends ffi.Struct {
  @ffi.Int32()
  int attr_seq;

  @ffi.Int32()
  int geom_seq;

  ffi.Pointer<ffi.Int32> attr;
}

class SubstRec extends ffi.Struct {}

class _XIntAtomState extends ffi.Struct {
  @ffi.Int32()
  int start_seq;

  @ffi.Int32()
  int stop_seq;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> names;

  ffi.Pointer<ffi.Uint64> atoms;

  @ffi.Int32()
  int count;

  @ffi.Int32()
  int status;
}

class _XKeytrans extends ffi.Struct {
  ffi.Pointer<_XKeytrans> next;

  ffi.Pointer<ffi.Int8> string;

  @ffi.Int32()
  int len;

  @ffi.Uint64()
  int key;

  @ffi.Uint32()
  int state;

  ffi.Pointer<ffi.Uint64> modifiers;

  @ffi.Int32()
  int mlen;
}

class imaxdiv_t extends ffi.Struct {
  @ffi.Int64()
  int quot;

  @ffi.Int64()
  int rem;
}

class GRNData extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int type;

  ffi.Pointer<XrmValuePtr> value;
}

class select_data extends ffi.Struct {}

class BRESINFO extends ffi.Struct {
  @ffi.Int32()
  int minor_axis;

  @ffi.Int32()
  int d;

  @ffi.Int32()
  int m;

  @ffi.Int32()
  int m1;

  @ffi.Int32()
  int incr1;

  @ffi.Int32()
  int incr2;
}

class EdgeTableEntry extends ffi.Struct {}

class ScanLineList extends ffi.Struct {
  @ffi.Int32()
  int scanline;

  ffi.Pointer<EdgeTableEntry> edgelist;

  ffi.Pointer<ScanLineList> next;
}

class EdgeTable extends ffi.Struct {}

class ScanLineListBlock extends ffi.Struct {}

class TestType1 extends ffi.Struct {
  @ffi.Int8()
  int a;

  @ffi.Double()
  double b;
}

class TestType2 extends ffi.Struct {
  @ffi.Int8()
  int a;

  @ffi.Uint64()
  int b;
}

class kmap extends ffi.Struct {}

class info extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Uint64()
  int val;
}

class xcb_protocol_request_t extends ffi.Struct {
  @ffi.Uint64()
  int count;

  ffi.Pointer<xcb_extension_t> ext;

  @ffi.Uint8()
  int opcode;

  @ffi.Uint8()
  int isvoid;
}

abstract class xcb_send_request_flags_t {
  static const int XCB_REQUEST_CHECKED = 1;
  static const int XCB_REQUEST_RAW = 2;
  static const int XCB_REQUEST_DISCARD_REPLY = 4;
  static const int XCB_REQUEST_REPLY_FDS = 8;
}

class XcmsCmapRec extends ffi.Struct {
  @ffi.Uint64()
  int cmapID;

  ffi.Pointer<_XDisplay> dpy;

  @ffi.Uint64()
  int windowID;

  ffi.Pointer<Visual> visual;

  ffi.Pointer<XcmsCCCRec> ccc;

  ffi.Pointer<XcmsCmapRec> pNext;
}

class IntensityRec extends ffi.Struct {
  @ffi.Uint16()
  int value;

  @ffi.Double()
  double intensity;
}

class IntensityTbl extends ffi.Struct {
  ffi.Pointer<IntensityRec> pBase;

  @ffi.Uint32()
  int nEntries;
}

class XcmsIntensityMap extends ffi.Struct {
  @ffi.Uint64()
  int visualID;

  ffi.Pointer<ffi.Int8> screenData;

  ffi.Pointer<ffi.NativeFunction<_typedefC_95>> pFreeScreenData;

  ffi.Pointer<XcmsIntensityMap> pNext;
}

class XcmsRegColorSpaceEntry extends ffi.Struct {
  ffi.Pointer<ffi.Int8> prefix;

  @ffi.Uint64()
  int id;
}

class XcmsPerDpyInfoPtr extends ffi.Struct {
  ffi.Pointer<XcmsCCCRec> paDefaultCCC;

  ffi.Pointer<XcmsCmapRec> pClientCmaps;
}

class ConversionValues extends ffi.Struct {}

class LINEAR_RGB_SCCData extends ffi.Struct {}

class XcmsPair extends ffi.Struct {
  ffi.Pointer<ffi.Int8> first;

  ffi.Pointer<ffi.Int8> second;

  @ffi.Int32()
  int flag;
}

class xkbUseExtensionReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int wantedMajor;

  @ffi.Uint16()
  int wantedMinor;
}

class xkbUseExtensionReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int supported;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int serverMajor;

  @ffi.Uint16()
  int serverMinor;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xkbSelectEventsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int affectWhich;

  @ffi.Uint16()
  int clear;

  @ffi.Uint16()
  int selectAll;

  @ffi.Uint16()
  int affectMap;

  @ffi.Uint16()
  int map;
}

class xkbBellReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int bellClass;

  @ffi.Uint16()
  int bellID;

  @ffi.Int8()
  int percent;

  @ffi.Uint8()
  int forceSound;

  @ffi.Uint8()
  int eventOnly;

  @ffi.Uint8()
  int pad1;

  @ffi.Int16()
  int pitch;

  @ffi.Int16()
  int duration;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int name;

  @ffi.Uint32()
  int window;
}

class xkbGetStateReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int pad;
}

class xkbGetStateReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint8()
  int mods;

  @ffi.Uint8()
  int baseMods;

  @ffi.Uint8()
  int latchedMods;

  @ffi.Uint8()
  int lockedMods;

  @ffi.Uint8()
  int group;

  @ffi.Uint8()
  int lockedGroup;

  @ffi.Int16()
  int baseGroup;

  @ffi.Int16()
  int latchedGroup;

  @ffi.Uint8()
  int compatState;

  @ffi.Uint8()
  int grabMods;

  @ffi.Uint8()
  int compatGrabMods;

  @ffi.Uint8()
  int lookupMods;

  @ffi.Uint8()
  int compatLookupMods;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int ptrBtnState;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;
}

class xkbLatchLockStateReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint8()
  int affectModLocks;

  @ffi.Uint8()
  int modLocks;

  @ffi.Uint8()
  int lockGroup;

  @ffi.Uint8()
  int groupLock;

  @ffi.Uint8()
  int affectModLatches;

  @ffi.Uint8()
  int modLatches;

  @ffi.Uint8()
  int pad;

  @ffi.Uint8()
  int latchGroup;

  @ffi.Int16()
  int groupLatch;
}

class xkbGetControlsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int pad;
}

class xkbGetControlsReply extends ffi.Struct {}

class xkbSetControlsReq extends ffi.Struct {}

class xkbKTMapEntryWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int active;

  @ffi.Uint8()
  int mask;

  @ffi.Uint8()
  int level;

  @ffi.Uint8()
  int realMods;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint16()
  int pad;
}

class xkbKTSetMapEntryWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int level;

  @ffi.Uint8()
  int realMods;

  @ffi.Uint16()
  int virtualMods;
}

class xkbModsWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int mask;

  @ffi.Uint8()
  int realMods;

  @ffi.Uint16()
  int virtualMods;
}

class xkbKeyTypeWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int mask;

  @ffi.Uint8()
  int realMods;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint8()
  int numLevels;

  @ffi.Uint8()
  int nMapEntries;

  @ffi.Uint8()
  int preserve;

  @ffi.Uint8()
  int pad;
}

class xkbSymMapWireDesc extends ffi.Struct {}

class xkbVModMapWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int key;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int vmods;
}

class xkbBehaviorWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int key;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int data;

  @ffi.Uint8()
  int pad;
}

class xkbActionWireDesc extends ffi.Struct {}

class xkbGetMapReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int full;

  @ffi.Uint16()
  int partial;

  @ffi.Uint8()
  int firstType;

  @ffi.Uint8()
  int nTypes;

  @ffi.Uint8()
  int firstKeySym;

  @ffi.Uint8()
  int nKeySyms;

  @ffi.Uint8()
  int firstKeyAct;

  @ffi.Uint8()
  int nKeyActs;

  @ffi.Uint8()
  int firstKeyBehavior;

  @ffi.Uint8()
  int nKeyBehaviors;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint8()
  int firstKeyExplicit;

  @ffi.Uint8()
  int nKeyExplicit;

  @ffi.Uint8()
  int firstModMapKey;

  @ffi.Uint8()
  int nModMapKeys;

  @ffi.Uint8()
  int firstVModMapKey;

  @ffi.Uint8()
  int nVModMapKeys;

  @ffi.Uint16()
  int pad1;
}

class xkbGetMapReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint8()
  int minKeyCode;

  @ffi.Uint8()
  int maxKeyCode;

  @ffi.Uint16()
  int present;

  @ffi.Uint8()
  int firstType;

  @ffi.Uint8()
  int nTypes;

  @ffi.Uint8()
  int totalTypes;

  @ffi.Uint8()
  int firstKeySym;

  @ffi.Uint16()
  int totalSyms;

  @ffi.Uint8()
  int nKeySyms;

  @ffi.Uint8()
  int firstKeyAct;

  @ffi.Uint16()
  int totalActs;

  @ffi.Uint8()
  int nKeyActs;

  @ffi.Uint8()
  int firstKeyBehavior;

  @ffi.Uint8()
  int nKeyBehaviors;

  @ffi.Uint8()
  int totalKeyBehaviors;

  @ffi.Uint8()
  int firstKeyExplicit;

  @ffi.Uint8()
  int nKeyExplicit;

  @ffi.Uint8()
  int totalKeyExplicit;

  @ffi.Uint8()
  int firstModMapKey;

  @ffi.Uint8()
  int nModMapKeys;

  @ffi.Uint8()
  int totalModMapKeys;

  @ffi.Uint8()
  int firstVModMapKey;

  @ffi.Uint8()
  int nVModMapKeys;

  @ffi.Uint8()
  int totalVModMapKeys;

  @ffi.Uint8()
  int pad2;

  @ffi.Uint16()
  int virtualMods;
}

class xkbSetMapReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int present;

  @ffi.Uint16()
  int flags;

  @ffi.Uint8()
  int minKeyCode;

  @ffi.Uint8()
  int maxKeyCode;

  @ffi.Uint8()
  int firstType;

  @ffi.Uint8()
  int nTypes;

  @ffi.Uint8()
  int firstKeySym;

  @ffi.Uint8()
  int nKeySyms;

  @ffi.Uint16()
  int totalSyms;

  @ffi.Uint8()
  int firstKeyAct;

  @ffi.Uint8()
  int nKeyActs;

  @ffi.Uint16()
  int totalActs;

  @ffi.Uint8()
  int firstKeyBehavior;

  @ffi.Uint8()
  int nKeyBehaviors;

  @ffi.Uint8()
  int totalKeyBehaviors;

  @ffi.Uint8()
  int firstKeyExplicit;

  @ffi.Uint8()
  int nKeyExplicit;

  @ffi.Uint8()
  int totalKeyExplicit;

  @ffi.Uint8()
  int firstModMapKey;

  @ffi.Uint8()
  int nModMapKeys;

  @ffi.Uint8()
  int totalModMapKeys;

  @ffi.Uint8()
  int firstVModMapKey;

  @ffi.Uint8()
  int nVModMapKeys;

  @ffi.Uint8()
  int totalVModMapKeys;

  @ffi.Uint16()
  int virtualMods;
}

class xkbSymInterpretWireDesc extends ffi.Struct {}

class xkbGetCompatMapReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint8()
  int groups;

  @ffi.Uint8()
  int getAllSI;

  @ffi.Uint16()
  int firstSI;

  @ffi.Uint16()
  int nSI;
}

class xkbGetCompatMapReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint8()
  int groups;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int firstSI;

  @ffi.Uint16()
  int nSI;

  @ffi.Uint16()
  int nTotalSI;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xkbSetCompatMapReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint8()
  int recomputeActions;

  @ffi.Uint8()
  int truncateSI;

  @ffi.Uint8()
  int groups;

  @ffi.Uint16()
  int firstSI;

  @ffi.Uint16()
  int nSI;

  @ffi.Uint16()
  int pad2;
}

class xkbGetIndicatorStateReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int pad1;
}

class xkbGetIndicatorStateReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int state;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xkbGetIndicatorMapReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int pad;

  @ffi.Uint32()
  int which;
}

class xkbGetIndicatorMapReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int which;

  @ffi.Uint32()
  int realIndicators;

  @ffi.Uint8()
  int nIndicators;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xkbIndicatorMapWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int whichGroups;

  @ffi.Uint8()
  int groups;

  @ffi.Uint8()
  int whichMods;

  @ffi.Uint8()
  int mods;

  @ffi.Uint8()
  int realMods;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint32()
  int ctrls;
}

class xkbSetIndicatorMapReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int which;
}

class xkbGetNamedIndicatorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int ledClass;

  @ffi.Uint16()
  int ledID;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int indicator;
}

class xkbGetNamedIndicatorReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int indicator;

  @ffi.Uint8()
  int found;

  @ffi.Uint8()
  int on_1;

  @ffi.Uint8()
  int realIndicator;

  @ffi.Uint8()
  int ndx;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int whichGroups;

  @ffi.Uint8()
  int groups;

  @ffi.Uint8()
  int whichMods;

  @ffi.Uint8()
  int mods;

  @ffi.Uint8()
  int realMods;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint32()
  int ctrls;

  @ffi.Uint8()
  int supported;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int pad2;
}

class xkbSetNamedIndicatorReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int ledClass;

  @ffi.Uint16()
  int ledID;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int indicator;

  @ffi.Uint8()
  int setState;

  @ffi.Uint8()
  int on_1;

  @ffi.Uint8()
  int setMap;

  @ffi.Uint8()
  int createMap;

  @ffi.Uint8()
  int pad2;

  @ffi.Uint8()
  int flags;

  @ffi.Uint8()
  int whichGroups;

  @ffi.Uint8()
  int groups;

  @ffi.Uint8()
  int whichMods;

  @ffi.Uint8()
  int realMods;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint32()
  int ctrls;
}

class xkbGetNamesReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int pad;

  @ffi.Uint32()
  int which;
}

class xkbGetNamesReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int which;

  @ffi.Uint8()
  int minKeyCode;

  @ffi.Uint8()
  int maxKeyCode;

  @ffi.Uint8()
  int nTypes;

  @ffi.Uint8()
  int groupNames;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint8()
  int firstKey;

  @ffi.Uint8()
  int nKeys;

  @ffi.Uint32()
  int indicators;

  @ffi.Uint8()
  int nRadioGroups;

  @ffi.Uint8()
  int nKeyAliases;

  @ffi.Uint16()
  int nKTLevels;

  @ffi.Uint32()
  int pad3;
}

class xkbSetNamesReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint32()
  int which;

  @ffi.Uint8()
  int firstType;

  @ffi.Uint8()
  int nTypes;

  @ffi.Uint8()
  int firstKTLevel;

  @ffi.Uint8()
  int nKTLevels;

  @ffi.Uint32()
  int indicators;

  @ffi.Uint8()
  int groupNames;

  @ffi.Uint8()
  int nRadioGroups;

  @ffi.Uint8()
  int firstKey;

  @ffi.Uint8()
  int nKeys;

  @ffi.Uint8()
  int nKeyAliases;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int totalKTLevelNames;
}

class xkbPointWireDesc extends ffi.Struct {
  @ffi.Int16()
  int x;

  @ffi.Int16()
  int y;
}

class xkbOutlineWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int nPoints;

  @ffi.Uint8()
  int cornerRadius;

  @ffi.Uint16()
  int pad;
}

class xkbShapeWireDesc extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint8()
  int nOutlines;

  @ffi.Uint8()
  int primaryNdx;

  @ffi.Uint8()
  int approxNdx;

  @ffi.Uint8()
  int pad;
}

class xkbSectionWireDesc extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Int16()
  int angle;

  @ffi.Uint8()
  int priority;

  @ffi.Uint8()
  int nRows;

  @ffi.Uint8()
  int nDoodads;

  @ffi.Uint8()
  int nOverlays;

  @ffi.Uint16()
  int pad;
}

class xkbRowWireDesc extends ffi.Struct {
  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Uint8()
  int nKeys;

  @ffi.Uint8()
  int vertical;

  @ffi.Uint16()
  int pad;
}

class xkbKeyWireDesc extends ffi.Struct {}

class xkbOverlayWireDesc extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint8()
  int nRows;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int pad2;
}

class xkbOverlayRowWireDesc extends ffi.Struct {
  @ffi.Uint8()
  int rowUnder;

  @ffi.Uint8()
  int nKeys;

  @ffi.Uint16()
  int pad1;
}

class xkbOverlayKeyWireDesc extends ffi.Struct {}

class xkbShapeDoodadWireDesc extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Uint8()
  int colorNdx;

  @ffi.Uint8()
  int shapeNdx;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int pad2;
}

class xkbTextDoodadWireDesc extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Uint16()
  int width;

  @ffi.Uint16()
  int height;

  @ffi.Uint8()
  int colorNdx;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int pad2;
}

class xkbIndicatorDoodadWireDesc extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Uint8()
  int shapeNdx;

  @ffi.Uint8()
  int onColorNdx;

  @ffi.Uint8()
  int offColorNdx;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint32()
  int pad2;
}

class xkbLogoDoodadWireDesc extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Uint8()
  int colorNdx;

  @ffi.Uint8()
  int shapeNdx;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int pad2;
}

class xkbAnyDoodadWireDesc extends ffi.Struct {
  @ffi.Uint32()
  int name;

  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int priority;

  @ffi.Int16()
  int top;

  @ffi.Int16()
  int left;

  @ffi.Int16()
  int angle;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;
}

class xkbGetGeometryReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int pad;

  @ffi.Uint32()
  int name;
}

class xkbGetGeometryReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int name;

  @ffi.Uint8()
  int found;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int widthMM;

  @ffi.Uint16()
  int heightMM;

  @ffi.Uint16()
  int nProperties;

  @ffi.Uint16()
  int nColors;

  @ffi.Uint16()
  int nShapes;

  @ffi.Uint16()
  int nSections;

  @ffi.Uint16()
  int nDoodads;

  @ffi.Uint16()
  int nKeyAliases;

  @ffi.Uint8()
  int baseColorNdx;

  @ffi.Uint8()
  int labelColorNdx;
}

class xkbSetGeometryReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint8()
  int nShapes;

  @ffi.Uint8()
  int nSections;

  @ffi.Uint32()
  int name;

  @ffi.Uint16()
  int widthMM;

  @ffi.Uint16()
  int heightMM;

  @ffi.Uint16()
  int nProperties;

  @ffi.Uint16()
  int nColors;

  @ffi.Uint16()
  int nDoodads;

  @ffi.Uint16()
  int nKeyAliases;

  @ffi.Uint8()
  int baseColorNdx;

  @ffi.Uint8()
  int labelColorNdx;

  @ffi.Uint16()
  int pad;
}

class xkbPerClientFlagsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int change;

  @ffi.Uint32()
  int value;

  @ffi.Uint32()
  int ctrlsToChange;

  @ffi.Uint32()
  int autoCtrls;

  @ffi.Uint32()
  int autoCtrlValues;
}

class xkbPerClientFlagsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int supported;

  @ffi.Uint32()
  int value;

  @ffi.Uint32()
  int autoCtrls;

  @ffi.Uint32()
  int autoCtrlValues;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;
}

class xkbListComponentsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int maxNames;
}

class xkbListComponentsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int nKeymaps;

  @ffi.Uint16()
  int nKeycodes;

  @ffi.Uint16()
  int nTypes;

  @ffi.Uint16()
  int nCompatMaps;

  @ffi.Uint16()
  int nSymbols;

  @ffi.Uint16()
  int nGeometries;

  @ffi.Uint16()
  int extra;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;
}

class xkbGetKbdByNameReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int need;

  @ffi.Uint16()
  int want;

  @ffi.Uint8()
  int load;

  @ffi.Uint8()
  int pad;
}

class xkbGetKbdByNameReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint8()
  int minKeyCode;

  @ffi.Uint8()
  int maxKeyCode;

  @ffi.Uint8()
  int loaded;

  @ffi.Uint8()
  int newKeyboard;

  @ffi.Uint16()
  int found;

  @ffi.Uint16()
  int reported;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;
}

class xkbDeviceLedsWireDesc extends ffi.Struct {
  @ffi.Uint16()
  int ledClass;

  @ffi.Uint16()
  int ledID;

  @ffi.Uint32()
  int namesPresent;

  @ffi.Uint32()
  int mapsPresent;

  @ffi.Uint32()
  int physIndicators;

  @ffi.Uint32()
  int state;
}

class xkbGetDeviceInfoReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint16()
  int wanted;

  @ffi.Uint8()
  int allBtns;

  @ffi.Uint8()
  int firstBtn;

  @ffi.Uint8()
  int nBtns;

  @ffi.Uint8()
  int pad;

  @ffi.Uint16()
  int ledClass;

  @ffi.Uint16()
  int ledID;
}

class xkbGetDeviceInfoReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint16()
  int present;

  @ffi.Uint16()
  int supported;

  @ffi.Uint16()
  int unsupported;

  @ffi.Uint16()
  int nDeviceLedFBs;

  @ffi.Uint8()
  int firstBtnWanted;

  @ffi.Uint8()
  int nBtnsWanted;

  @ffi.Uint8()
  int firstBtnRtrn;

  @ffi.Uint8()
  int nBtnsRtrn;

  @ffi.Uint8()
  int totalBtns;

  @ffi.Uint8()
  int hasOwnState;

  @ffi.Uint16()
  int dfltKbdFB;

  @ffi.Uint16()
  int dfltLedFB;

  @ffi.Uint16()
  int pad;

  @ffi.Uint32()
  int devType;
}

class xkbSetDeviceInfoReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int deviceSpec;

  @ffi.Uint8()
  int firstBtn;

  @ffi.Uint8()
  int nBtns;

  @ffi.Uint16()
  int change;

  @ffi.Uint16()
  int nDeviceLedFBs;
}

class xkbSetDebuggingFlagsReq extends ffi.Struct {
  @ffi.Uint8()
  int reqType;

  @ffi.Uint8()
  int xkbReqType;

  @ffi.Uint16()
  int length;

  @ffi.Uint16()
  int msgLength;

  @ffi.Uint16()
  int pad;

  @ffi.Uint32()
  int affectFlags;

  @ffi.Uint32()
  int flags;

  @ffi.Uint32()
  int affectCtrls;

  @ffi.Uint32()
  int ctrls;
}

class xkbSetDebuggingFlagsReply extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int pad0;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int length;

  @ffi.Uint32()
  int currentFlags;

  @ffi.Uint32()
  int currentCtrls;

  @ffi.Uint32()
  int supportedFlags;

  @ffi.Uint32()
  int supportedCtrls;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;
}

class xkbAnyEvent extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;

  @ffi.Uint32()
  int pad6;

  @ffi.Uint32()
  int pad7;
}

class xkbNewKeyboardNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int oldDeviceID;

  @ffi.Uint8()
  int minKeyCode;

  @ffi.Uint8()
  int maxKeyCode;

  @ffi.Uint8()
  int oldMinKeyCode;

  @ffi.Uint8()
  int oldMaxKeyCode;

  @ffi.Uint8()
  int requestMajor;

  @ffi.Uint8()
  int requestMinor;

  @ffi.Uint16()
  int changed;

  @ffi.Uint8()
  int detail;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;
}

class xkbMapNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int ptrBtnActions;

  @ffi.Uint16()
  int changed;

  @ffi.Uint8()
  int minKeyCode;

  @ffi.Uint8()
  int maxKeyCode;

  @ffi.Uint8()
  int firstType;

  @ffi.Uint8()
  int nTypes;

  @ffi.Uint8()
  int firstKeySym;

  @ffi.Uint8()
  int nKeySyms;

  @ffi.Uint8()
  int firstKeyAct;

  @ffi.Uint8()
  int nKeyActs;

  @ffi.Uint8()
  int firstKeyBehavior;

  @ffi.Uint8()
  int nKeyBehaviors;

  @ffi.Uint8()
  int firstKeyExplicit;

  @ffi.Uint8()
  int nKeyExplicit;

  @ffi.Uint8()
  int firstModMapKey;

  @ffi.Uint8()
  int nModMapKeys;

  @ffi.Uint8()
  int firstVModMapKey;

  @ffi.Uint8()
  int nVModMapKeys;

  @ffi.Uint16()
  int virtualMods;

  @ffi.Uint16()
  int pad1;
}

class xkbStateNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int mods;

  @ffi.Uint8()
  int baseMods;

  @ffi.Uint8()
  int latchedMods;

  @ffi.Uint8()
  int lockedMods;

  @ffi.Uint8()
  int group;

  @ffi.Int16()
  int baseGroup;

  @ffi.Int16()
  int latchedGroup;

  @ffi.Uint8()
  int lockedGroup;

  @ffi.Uint8()
  int compatState;

  @ffi.Uint8()
  int grabMods;

  @ffi.Uint8()
  int compatGrabMods;

  @ffi.Uint8()
  int lookupMods;

  @ffi.Uint8()
  int compatLookupMods;

  @ffi.Uint16()
  int ptrBtnState;

  @ffi.Uint16()
  int changed;

  @ffi.Uint8()
  int keycode;

  @ffi.Uint8()
  int eventType;

  @ffi.Uint8()
  int requestMajor;

  @ffi.Uint8()
  int requestMinor;
}

class xkbControlsNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int numGroups;

  @ffi.Uint16()
  int pad1;

  @ffi.Uint32()
  int changedControls;

  @ffi.Uint32()
  int enabledControls;

  @ffi.Uint32()
  int enabledControlChanges;

  @ffi.Uint8()
  int keycode;

  @ffi.Uint8()
  int eventType;

  @ffi.Uint8()
  int requestMajor;

  @ffi.Uint8()
  int requestMinor;

  @ffi.Uint32()
  int pad2;
}

class xkbIndicatorNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int state;

  @ffi.Uint32()
  int changed;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;

  @ffi.Uint32()
  int pad5;
}

class xkbNamesNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int changed;

  @ffi.Uint8()
  int firstType;

  @ffi.Uint8()
  int nTypes;

  @ffi.Uint8()
  int firstLevelName;

  @ffi.Uint8()
  int nLevelNames;

  @ffi.Uint8()
  int pad2;

  @ffi.Uint8()
  int nRadioGroups;

  @ffi.Uint8()
  int nAliases;

  @ffi.Uint8()
  int changedGroupNames;

  @ffi.Uint16()
  int changedVirtualMods;

  @ffi.Uint8()
  int firstKey;

  @ffi.Uint8()
  int nKeys;

  @ffi.Uint32()
  int changedIndicators;

  @ffi.Uint32()
  int pad3;
}

class xkbCompatMapNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int changedGroups;

  @ffi.Uint16()
  int firstSI;

  @ffi.Uint16()
  int nSI;

  @ffi.Uint16()
  int nTotalSI;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;
}

class xkbBellNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int bellClass;

  @ffi.Uint8()
  int bellID;

  @ffi.Uint8()
  int percent;

  @ffi.Uint16()
  int pitch;

  @ffi.Uint16()
  int duration;

  @ffi.Uint32()
  int name;

  @ffi.Uint32()
  int window;

  @ffi.Uint8()
  int eventOnly;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int pad2;

  @ffi.Uint32()
  int pad3;
}

class xkbActionMessage extends ffi.Struct {}

class xkbAccessXNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int keycode;

  @ffi.Uint16()
  int detail;

  @ffi.Uint16()
  int slowKeysDelay;

  @ffi.Uint16()
  int debounceDelay;

  @ffi.Uint32()
  int pad1;

  @ffi.Uint32()
  int pad2;

  @ffi.Uint32()
  int pad3;

  @ffi.Uint32()
  int pad4;
}

class xkbExtensionDeviceNotify extends ffi.Struct {
  @ffi.Uint8()
  int type;

  @ffi.Uint8()
  int xkbType;

  @ffi.Uint16()
  int sequenceNumber;

  @ffi.Uint32()
  int time;

  @ffi.Uint8()
  int deviceID;

  @ffi.Uint8()
  int pad1;

  @ffi.Uint16()
  int reason;

  @ffi.Uint16()
  int ledClass;

  @ffi.Uint16()
  int ledID;

  @ffi.Uint32()
  int ledsDefined;

  @ffi.Uint32()
  int ledState;

  @ffi.Uint8()
  int firstBtn;

  @ffi.Uint8()
  int nBtns;

  @ffi.Uint16()
  int supported;

  @ffi.Uint16()
  int unsupported;

  @ffi.Uint16()
  int pad3;
}

class xkbEvent extends ffi.Struct {}

class XkbConverters extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<XkbKSToMBFunc>> KSToMB;

  ffi.Pointer<ffi.Int8> KSToMBPriv;

  ffi.Pointer<ffi.NativeFunction<XkbMBToKSFunc>> MBToKS;

  ffi.Pointer<ffi.Int8> MBToKSPriv;

  ffi.Pointer<ffi.NativeFunction<XkbToUpperFunc>> KSToUpper;
}

class XkbInfoPtr extends ffi.Struct {}

class XkbReadBufferPtr extends ffi.Struct {
  @ffi.Int32()
  int error;

  @ffi.Int32()
  int size;

  ffi.Pointer<ffi.Int8> start;

  ffi.Pointer<ffi.Int8> data;
}

class XkbToKS extends ffi.Struct {
  @ffi.Uint32()
  int prefix;

  ffi.Pointer<ffi.Int8> map;
}

class XExtensionVersion extends ffi.Struct {
  @ffi.Int32()
  int present;

  @ffi.Int16()
  int major_version;

  @ffi.Int16()
  int minor_version;
}

/// ====================================================================**
class LedInfoStuff extends ffi.Struct {
  @ffi.Int32()
  int used;

  ffi.Pointer<XkbDeviceLedInfoPtr> devli;
}

class SetLedStuff extends ffi.Struct {
  @ffi.Uint32()
  int wanted;

  @ffi.Int32()
  int num_info;

  @ffi.Int32()
  int dflt_class;

  ffi.Pointer<LedInfoStuff> dflt_kbd_fb;

  ffi.Pointer<LedInfoStuff> dflt_led_fb;

  ffi.Pointer<LedInfoStuff> info;
}

class XFilterEventList extends ffi.Struct {}

class XIMArg extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Int8> value;
}

class XIMResourceList extends ffi.Struct {
  ffi.Pointer<ffi.Int8> resource_name;

  @ffi.Int32()
  int xrm_name;

  @ffi.Int32()
  int resource_size;

  @ffi.Int64()
  int resource_offset;

  @ffi.Uint16()
  int mode;

  @ffi.Uint16()
  int id;
}

class ICPreeditAttributesPtr extends ffi.Struct {}

class ICStatusAttributesPtr extends ffi.Struct {}

class XrmMethodsRec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<XmbInitProc>> mbinit;

  ffi.Pointer<ffi.NativeFunction<XmbCharProc>> mbchar;

  ffi.Pointer<ffi.NativeFunction<XmbFinishProc>> mbfinish;

  ffi.Pointer<ffi.NativeFunction<XlcNameProc>> lcname;

  ffi.Pointer<ffi.NativeFunction<XrmDestroyProc>> destroy;
}

class XLCdRec extends ffi.Struct {}

class XLCdMethods extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<XCloseLCProc>> close;

  ffi.Pointer<ffi.NativeFunction<XlcMapModifiersProc>> map_modifiers;

  ffi.Pointer<ffi.NativeFunction<XOpenOMProc>> open_om;

  ffi.Pointer<ffi.NativeFunction<XOpenIMProc>> open_im;

  ffi.Pointer<ffi.NativeFunction<XrmInitParseInfoProc>> init_parse_info;

  ffi.Pointer<ffi.NativeFunction<XmbTextPropertyToTextListProc>>
      mb_text_prop_to_list;

  ffi.Pointer<ffi.NativeFunction<XwcTextPropertyToTextListProc>>
      wc_text_prop_to_list;

  ffi.Pointer<ffi.NativeFunction<XmbTextPropertyToTextListProc>>
      utf8_text_prop_to_list;

  ffi.Pointer<ffi.NativeFunction<XmbTextListToTextPropertyProc>>
      mb_text_list_to_prop;

  ffi.Pointer<ffi.NativeFunction<XwcTextListToTextPropertyProc>>
      wc_text_list_to_prop;

  ffi.Pointer<ffi.NativeFunction<XmbTextListToTextPropertyProc>>
      utf8_text_list_to_prop;

  ffi.Pointer<ffi.NativeFunction<XwcFreeStringListProc>> wc_free_string_list;

  ffi.Pointer<ffi.NativeFunction<XDefaultStringProc>> default_string;

  ffi.Pointer<ffi.NativeFunction<XRegisterIMInstantiateCBProc>>
      register_callback;

  ffi.Pointer<ffi.NativeFunction<XUnregisterIMInstantiateCBProc>>
      unregister_callback;
}

class XLCdCore extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Int8> modifiers;
}

class XlcArgList extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Int8> value;
}

class XlcResourceList extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int xrm_name;

  @ffi.Int32()
  int size;

  @ffi.Int32()
  int offset;

  @ffi.Uint64()
  int mask;
}

class XOMMethods extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<XCloseOMProc>> close;

  ffi.Pointer<ffi.NativeFunction<XSetOMValuesProc>> set_values;

  ffi.Pointer<ffi.NativeFunction<XGetOMValuesProc>> get_values;

  ffi.Pointer<ffi.NativeFunction<XCreateOCProc>> create_oc;
}

class XOMCore extends ffi.Struct {}

class XOCMethods extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<XDestroyOCProc>> destroy;

  ffi.Pointer<ffi.NativeFunction<XSetOCValuesProc>> set_values;

  ffi.Pointer<ffi.NativeFunction<XGetOCValuesProc>> get_values;

  ffi.Pointer<ffi.NativeFunction<XmbTextEscapementProc>> mb_escapement;

  ffi.Pointer<ffi.NativeFunction<XmbTextExtentsProc>> mb_extents;

  ffi.Pointer<ffi.NativeFunction<XmbTextPerCharExtentsProc>>
      mb_extents_per_char;

  ffi.Pointer<ffi.NativeFunction<XmbDrawStringProc>> mb_draw_string;

  ffi.Pointer<ffi.NativeFunction<XmbDrawImageStringProc>> mb_draw_image_string;

  ffi.Pointer<ffi.NativeFunction<XwcTextEscapementProc>> wc_escapement;

  ffi.Pointer<ffi.NativeFunction<XwcTextExtentsProc>> wc_extents;

  ffi.Pointer<ffi.NativeFunction<XwcTextPerCharExtentsProc>>
      wc_extents_per_char;

  ffi.Pointer<ffi.NativeFunction<XwcDrawStringProc>> wc_draw_string;

  ffi.Pointer<ffi.NativeFunction<XwcDrawImageStringProc>> wc_draw_image_string;

  ffi.Pointer<ffi.NativeFunction<XmbTextEscapementProc>> utf8_escapement;

  ffi.Pointer<ffi.NativeFunction<XmbTextExtentsProc>> utf8_extents;

  ffi.Pointer<ffi.NativeFunction<XmbTextPerCharExtentsProc>>
      utf8_extents_per_char;

  ffi.Pointer<ffi.NativeFunction<XmbDrawStringProc>> utf8_draw_string;

  ffi.Pointer<ffi.NativeFunction<XmbDrawImageStringProc>>
      utf8_draw_image_string;
}

class XOCCore extends ffi.Struct {}

class XIMMethods extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_102>> close;

  ffi.Pointer<ffi.NativeFunction<_typedefC_103>> set_values;

  ffi.Pointer<ffi.NativeFunction<_typedefC_104>> get_values;

  ffi.Pointer<ffi.NativeFunction<_typedefC_105>> create_ic;

  ffi.Pointer<ffi.NativeFunction<_typedefC_106>> ctstombs;

  ffi.Pointer<ffi.NativeFunction<_typedefC_107>> ctstowcs;

  ffi.Pointer<ffi.NativeFunction<_typedefC_108>> ctstoutf8;
}

class XIMCore extends ffi.Struct {}

class XICMethods extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_109>> destroy;

  ffi.Pointer<ffi.NativeFunction<_typedefC_110>> set_focus;

  ffi.Pointer<ffi.NativeFunction<_typedefC_111>> unset_focus;

  ffi.Pointer<ffi.NativeFunction<_typedefC_112>> set_values;

  ffi.Pointer<ffi.NativeFunction<_typedefC_113>> get_values;

  ffi.Pointer<ffi.NativeFunction<_typedefC_114>> mb_reset;

  ffi.Pointer<ffi.NativeFunction<_typedefC_115>> wc_reset;

  ffi.Pointer<ffi.NativeFunction<_typedefC_116>> utf8_reset;

  ffi.Pointer<ffi.NativeFunction<_typedefC_117>> mb_lookup_string;

  ffi.Pointer<ffi.NativeFunction<_typedefC_118>> wc_lookup_string;

  ffi.Pointer<ffi.NativeFunction<_typedefC_119>> utf8_lookup_string;
}

class XICCore extends ffi.Struct {}

class XimRec extends ffi.Struct {}

class XicRec extends ffi.Struct {}

abstract class XlcSide {
  static const int XlcUnknown = 0;
  static const int XlcC0 = 1;
  static const int XlcGL = 2;
  static const int XlcC1 = 3;
  static const int XlcGR = 4;
  static const int XlcGLGR = 5;
  static const int XlcOther = 6;
  static const int XlcNONE = 7;
}

class UDCArea extends ffi.Struct {
  @ffi.Uint64()
  int start;

  @ffi.Uint64()
  int end;
}

abstract class CSSrc {
  static const int CSsrcUndef = 0;
  static const int CSsrcStd = 1;
  static const int CSsrcXLC = 2;
}

class XlcCharSet extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int xrm_name;

  ffi.Pointer<ffi.Int8> encoding_name;

  @ffi.Int32()
  int xrm_encoding_name;

  @ffi.Int32()
  int side;

  @ffi.Int32()
  int char_size;

  @ffi.Int32()
  int set_size;

  ffi.Pointer<ffi.Int8> ct_sequence;

  @ffi.Int32()
  int string_encoding;

  ffi.Pointer<UDCArea> udc_area;

  @ffi.Int32()
  int udc_area_num;

  @ffi.Int32()
  int source;
}

class FontScope extends ffi.Struct {
  @ffi.Uint64()
  int start;

  @ffi.Uint64()
  int end;

  @ffi.Uint64()
  int shift;

  @ffi.Uint64()
  int shift_direction;
}

class XlcConvRec extends ffi.Struct {}

class XlcConvMethods extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<XlcCloseConverterProc>> close;

  ffi.Pointer<ffi.NativeFunction<XlcConvertProc>> convert;

  ffi.Pointer<ffi.NativeFunction<XlcResetConverterProc>> reset;
}

class XimProtoIntrRec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<XimProtoIntrProc>> func;

  @ffi.Int32()
  int major_code;

  @ffi.Int32()
  int minor_code;

  ffi.Pointer<ffi.Int8> call_data;

  ffi.Pointer<XimProtoIntrRec> next;
}

class XimProtoPrivateRec extends ffi.Struct {
  ffi.Pointer<XlcConvRec> ctom_conv;

  ffi.Pointer<XlcConvRec> ctow_conv;

  ffi.Pointer<XlcConvRec> ctoutf8_conv;

  ffi.Pointer<XlcConvRec> cstomb_conv;

  ffi.Pointer<XlcConvRec> cstowc_conv;

  ffi.Pointer<XlcConvRec> cstoutf8_conv;

  ffi.Pointer<XlcConvRec> ucstoc_conv;

  ffi.Pointer<XlcConvRec> ucstoutf8_conv;

  @ffi.Uint64()
  int im_window;

  @ffi.Int32()
  int imid;

  @ffi.Int32()
  int unused;

  ffi.Pointer<XIMStyles> default_styles;

  ffi.Pointer<ffi.Int32> im_onkeylist;

  ffi.Pointer<ffi.Int32> im_offkeylist;

  @ffi.Int32()
  int flag;

  @ffi.Int32()
  int registed_filter_event;

  @ffi.Int32()
  int forward_event_mask;

  @ffi.Int32()
  int synchronous_event_mask;

  ffi.Pointer<XimProtoIntrRec> intrproto;

  ffi.Pointer<XIMResourceList> im_inner_resources;

  @ffi.Uint32()
  int im_num_inner_resources;

  ffi.Pointer<XIMResourceList> ic_inner_resources;

  @ffi.Uint32()
  int ic_num_inner_resources;

  ffi.Pointer<ffi.Int8> hold_data;

  @ffi.Int32()
  int hold_data_len;

  ffi.Pointer<ffi.Int8> locale_name;

  @ffi.Int32()
  int protocol_major_version;

  @ffi.Int32()
  int protocol_minor_version;

  ffi.Pointer<ffi.Int32> saved_imvalues;

  @ffi.Int32()
  int num_saved_imvalues;

  ffi.Pointer<ffi.NativeFunction<XimTransConnectProc>> connect;

  ffi.Pointer<ffi.NativeFunction<XimTransShutdownProc>> shutdown;

  ffi.Pointer<ffi.NativeFunction<XimTransWriteProc>> write;

  ffi.Pointer<ffi.NativeFunction<XimTransReadProc>> read;

  ffi.Pointer<ffi.NativeFunction<XimTransFlushProc>> flush;

  ffi.Pointer<ffi.NativeFunction<XimTransRegDispatcher>> register_dispatcher;

  ffi.Pointer<ffi.NativeFunction<XimTransCallDispatcher>> call_dispatcher;

  ffi.Pointer<ffi.Int8> spec;
}

class XimCommitInfo extends ffi.Struct {
  ffi.Pointer<XimCommitInfo> next;

  ffi.Pointer<ffi.Int8> string;

  @ffi.Int32()
  int string_len;

  ffi.Pointer<ffi.Uint64> keysym;

  @ffi.Int32()
  int keysym_len;
}

class XimPendingCallback extends ffi.Struct {
  @ffi.Int32()
  int major_opcode;

  ffi.Pointer<XimRec> im;

  ffi.Pointer<XicRec> ic;

  ffi.Pointer<ffi.Int8> proto;

  @ffi.Int32()
  int proto_len;

  ffi.Pointer<XimPendingCallback> next;
}

class XicProtoPrivateRec extends ffi.Struct {
  @ffi.Int32()
  int icid;

  @ffi.Int32()
  int dmy;

  @ffi.Int32()
  int flag;

  @ffi.Int32()
  int registed_filter_event;

  @ffi.Int32()
  int forward_event_mask;

  @ffi.Int32()
  int synchronous_event_mask;

  @ffi.Int32()
  int filter_event_mask;

  @ffi.Int32()
  int intercept_event_mask;

  @ffi.Int32()
  int select_event_mask;

  ffi.Pointer<ffi.Int8> preedit_font;

  @ffi.Int32()
  int preedit_font_length;

  ffi.Pointer<ffi.Int8> status_font;

  @ffi.Int32()
  int status_font_length;

  ffi.Pointer<XimCommitInfo> commit_info;

  ffi.Pointer<XIMResourceList> ic_resources;

  @ffi.Uint32()
  int ic_num_resources;

  ffi.Pointer<XIMResourceList> ic_inner_resources;

  @ffi.Uint32()
  int ic_num_inner_resources;

  ffi.Pointer<ffi.Int32> saved_icvalues;

  @ffi.Int32()
  int num_saved_icvalues;

  ffi.Pointer<XimPendingCallback> pend_cb_que;

  @ffi.Int32()
  int waitCallback;
}

class DefTree extends ffi.Struct {
  @ffi.Int32()
  int next;

  @ffi.Int32()
  int succession;

  @ffi.Int32()
  int modifier_mask;

  @ffi.Int32()
  int modifier;

  @ffi.Uint64()
  int keysym;

  @ffi.Int32()
  int mb;

  @ffi.Int32()
  int wc;

  @ffi.Int32()
  int utf8;

  @ffi.Uint64()
  int ks;
}

class DefTreeBase extends ffi.Struct {
  ffi.Pointer<DefTree> tree;

  ffi.Pointer<ffi.Int8> mb;

  ffi.Pointer<ffi.Int32> wc;

  ffi.Pointer<ffi.Int8> utf8;

  @ffi.Int32()
  int treeused;

  @ffi.Int32()
  int treesize;

  @ffi.Int32()
  int mbused;

  @ffi.Int32()
  int mbsize;

  @ffi.Int32()
  int wcused;

  @ffi.Int32()
  int wcsize;

  @ffi.Int32()
  int utf8used;

  @ffi.Int32()
  int utf8size;
}

class XimLocalPrivateRec extends ffi.Struct {}

class XicThaiPart extends ffi.Struct {
  @ffi.Int32()
  int comp_state;

  @ffi.Uint64()
  int keysym;

  @ffi.Int32()
  int input_mode;
}

class XicLocalPrivateRec extends ffi.Struct {}

class XimCommonPrivateRec extends ffi.Struct {
  ffi.Pointer<XlcConvRec> ctom_conv;

  ffi.Pointer<XlcConvRec> ctow_conv;

  ffi.Pointer<XlcConvRec> ctoutf8_conv;

  ffi.Pointer<XlcConvRec> cstomb_conv;

  ffi.Pointer<XlcConvRec> cstowc_conv;

  ffi.Pointer<XlcConvRec> cstoutf8_conv;

  ffi.Pointer<XlcConvRec> ucstoc_conv;

  ffi.Pointer<XlcConvRec> ucstoutf8_conv;
}

class XimDefIMValues extends ffi.Struct {}

class XimDefICValues extends ffi.Struct {}

class XLCdPublicMethodsRec extends ffi.Struct {}

class XLCdPublicMethodsPart extends ffi.Struct {
  ffi.Pointer<XLCdPublicMethodsRec> superclass;

  ffi.Pointer<ffi.NativeFunction<XlcPubCreateProc>> create;

  ffi.Pointer<ffi.NativeFunction<XlcPubInitializeProc>> initialize;

  ffi.Pointer<ffi.NativeFunction<XlcPubDestroyProc>> destroy;

  ffi.Pointer<ffi.NativeFunction<XlcPubGetValuesProc>> get_values;

  ffi.Pointer<ffi.NativeFunction<XlcPubGetResourceProc>> get_resource;
}

class XLCdPublicPart extends ffi.Struct {
  ffi.Pointer<ffi.Int8> siname;

  ffi.Pointer<ffi.Int8> language;

  ffi.Pointer<ffi.Int8> territory;

  ffi.Pointer<ffi.Int8> codeset;

  ffi.Pointer<ffi.Int8> encoding_name;

  @ffi.Int32()
  int mb_cur_max;

  @ffi.Int32()
  int is_state_depend;

  ffi.Pointer<ffi.Int8> default_string;

  ffi.Pointer<ffi.Int8> xlocale_db;
}

class XLCdPublic extends ffi.Struct {}

class XlcCharSetList extends ffi.Struct {
  ffi.Pointer<XlcCharSet> charset;

  ffi.Pointer<XlcCharSetList> next;
}

class XlcConverterList extends ffi.Struct {
  ffi.Pointer<XLCdRec> from_lcd;

  ffi.Pointer<ffi.Int8> from;

  @ffi.Int32()
  int from_type;

  ffi.Pointer<XLCdRec> to_lcd;

  ffi.Pointer<ffi.Int8> to;

  @ffi.Int32()
  int to_type;

  ffi.Pointer<ffi.NativeFunction<XlcOpenConverterProc>> converter;

  ffi.Pointer<XlcConverterList> next;
}

class Conv extends ffi.Struct {
  ffi.Pointer<XlcConvRec> from_conv;

  ffi.Pointer<XlcConvRec> to_conv;
}

class CTInfo extends ffi.Struct {
  ffi.Pointer<XlcCharSet> charset;

  ffi.Pointer<ffi.Int8> ct_sequence;

  @ffi.Uint32()
  int type;

  @ffi.Uint8()
  int final_byte;

  ffi.Pointer<ffi.Int8> ext_segment;

  @ffi.Int32()
  int ext_segment_len;

  ffi.Pointer<CTInfo> next;
}

abstract class CheckResult {
  static const int resOK = 0;
  static const int resNotInList = 1;
  static const int resNotCTSeq = 2;
}

class Database extends ffi.Struct {
  ffi.Pointer<ffi.Int8> category;

  ffi.Pointer<ffi.Int8> name;

  ffi.Pointer<ffi.Pointer<ffi.Int8>> value;

  @ffi.Int32()
  int value_num;

  ffi.Pointer<Database> next;
}

abstract class ParseState {
  static const int S_NULL = 0;
  static const int S_CATEGORY = 1;
  static const int S_NAME = 2;
  static const int S_VALUE = 3;
}

abstract class Token {
  static const int T_NEWLINE = 0;
  static const int T_COMMENT = 1;
  static const int T_SEMICOLON = 2;
  static const int T_DOUBLE_QUOTE = 3;
  static const int T_LEFT_BRACE = 4;
  static const int T_RIGHT_BRACE = 5;
  static const int T_SPACE = 6;
  static const int T_TAB = 7;
  static const int T_BACKSLASH = 8;
  static const int T_NUMERIC_HEX = 9;
  static const int T_NUMERIC_DEC = 10;
  static const int T_NUMERIC_OCT = 11;
  static const int T_DEFAULT = 12;
}

class TokenTable extends ffi.Struct {
  @ffi.Int32()
  int token;

  @ffi.Int32()
  int len;
}

class DBParseInfo extends ffi.Struct {}

///
class Line extends ffi.Struct {
  ffi.Pointer<ffi.Int8> str;

  @ffi.Int32()
  int cursize;

  @ffi.Int32()
  int maxsize;

  @ffi.Int32()
  int seq;
}

class XlcDatabase extends ffi.Struct {
  @ffi.Int32()
  int category_q;

  @ffi.Int32()
  int name_q;

  ffi.Pointer<Database> db;

  ffi.Pointer<XlcDatabase> next;
}

class XlcDatabaseList extends ffi.Struct {
  @ffi.Int32()
  int name_q;

  ffi.Pointer<XlcDatabase> lc_db;

  ffi.Pointer<Database> database;

  @ffi.Int32()
  int ref_count;

  ffi.Pointer<XlcDatabaseList> next;
}

abstract class MapDirection {
  static const int LtoR = 0;
  static const int RtoL = 1;
}

class ByteInfo extends ffi.Struct {
  @ffi.Uint8()
  int start;

  @ffi.Uint8()
  int end;
}

class ByteInfoList extends ffi.Struct {
  @ffi.Int32()
  int M;

  @ffi.Int32()
  int byteinfo_num;

  ffi.Pointer<ByteInfo> byteinfo;
}

class Conversion extends ffi.Struct {
  @ffi.Uint64()
  int conversion_type;

  @ffi.Int32()
  int conv_num;

  ffi.Pointer<FontScope> convlist;

  ffi.Pointer<ffi.Int8> cnv_file;

  ffi.Pointer<XlcConvRec> cnvfunc;
}

class ExtdSegment extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int side;

  ffi.Pointer<FontScope> area;

  @ffi.Int32()
  int area_num;

  ffi.Pointer<XlcCharSet> charset;
}

class SegConv extends ffi.Struct {}

class ParseInfoRec extends ffi.Struct {}

class CodeSet extends ffi.Struct {
  ffi.Pointer<ffi.Pointer<XlcCharSet>> charset_list;

  @ffi.Int32()
  int num_charsets;

  @ffi.Int32()
  int cs_num;

  @ffi.Int32()
  int side;

  @ffi.Int32()
  int length;

  ffi.Pointer<ByteInfoList> byteM;

  ffi.Pointer<Conversion> mbconv;

  ffi.Pointer<Conversion> ctconv;

  ffi.Pointer<ExtdSegment> ctextseg;

  ffi.Pointer<ParseInfoRec> parse_info;

  @ffi.Uint64()
  int wc_encoding;

  @ffi.Int32()
  int string_encoding;
}

abstract class EncodingType {
  static const int E_GL = 0;
  static const int E_GR = 1;
  static const int E_SS = 2;
  static const int E_LSL = 3;
  static const int E_LSR = 4;
  static const int E_LAST = 5;
}

class XLCdGenericPart extends ffi.Struct {
  @ffi.Int32()
  int codeset_num;

  ffi.Pointer<ffi.Pointer<CodeSet>> codeset_list;

  ffi.Pointer<ffi.Uint8> mb_parse_table;

  @ffi.Int32()
  int mb_parse_list_num;

  ffi.Pointer<ffi.Pointer<ParseInfoRec>> mb_parse_list;

  @ffi.Uint64()
  int wc_encode_mask;

  @ffi.Uint64()
  int wc_shift_bits;

  ffi.Pointer<CodeSet> initial_state_GL;

  ffi.Pointer<CodeSet> initial_state_GR;

  @ffi.Int32()
  int segment_conv_num;

  ffi.Pointer<SegConv> segment_conv;

  @ffi.Int32()
  int use_stdc_env;

  @ffi.Int32()
  int force_convert_to_mb;
}

class XLCdGeneric extends ffi.Struct {}

class UbState extends ffi.Struct {
  ffi.Pointer<XLCdRec> lcd;
}

class MbState extends ffi.Struct {
  ffi.Pointer<XLCdRec> lcd;

  ffi.Pointer<XlcConvRec> conv;
}

class Block extends ffi.Struct {
  @ffi.Int32()
  int start;

  @ffi.Int32()
  int end;
}

class Encoding extends ffi.Struct {
  @ffi.Int32()
  int rows;

  @ffi.Int32()
  int cols;

  ffi.Pointer<ffi.NativeFunction<_typedefC_121>> row_byte;

  ffi.Pointer<ffi.NativeFunction<_typedefC_122>> col_byte;

  ffi.Pointer<ffi.NativeFunction<_typedefC_123>> byte_row;

  ffi.Pointer<ffi.NativeFunction<_typedefC_124>> byte_col;

  ffi.Pointer<ffi.Int8> check_row_expr;

  ffi.Pointer<ffi.Int8> check_col_expr;

  ffi.Pointer<ffi.Int8> byte_row_expr;

  ffi.Pointer<ffi.Int8> byte_col_expr;

  ffi.Pointer<ffi.Pointer<ffi.Int32>> charset2uni;

  ffi.Pointer<ffi.Int32> charsetpage;

  @ffi.Int32()
  int ncharsetblocks;

  ffi.Pointer<Block> charsetblocks;

  ffi.Pointer<ffi.Int32> uni2charset;
}

class Utf8Conv extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  int xrm_name;

  ffi.Pointer<ffi.NativeFunction<_typedefC_125>> cstowc;

  ffi.Pointer<ffi.NativeFunction<_typedefC_126>> wctocs;
}

class Summary16 extends ffi.Struct {
  @ffi.Uint16()
  int indx;

  @ffi.Uint16()
  int used;
}

class XLCdList extends ffi.Struct {
  ffi.Pointer<XLCdList> next;

  ffi.Pointer<XLCdRec> lcd;

  @ffi.Int32()
  int ref_count;
}

class XlcLoaderList extends ffi.Struct {
  ffi.Pointer<XlcLoaderList> next;

  ffi.Pointer<ffi.NativeFunction<XLCdLoadProc>> proc;
}

class _XlcCoreObj extends ffi.Struct {
  @ffi.Int32()
  int lc_object_header;

  ffi.Pointer<ffi.NativeFunction<_typedefC_127>> default_loader;

  @ffi.Int32()
  int sticky;
}

class StaticXIMRec extends ffi.Struct {}

class XIMStaticXIMRec extends ffi.Struct {
  ffi.Pointer<XlcConvRec> ctom_conv;

  ffi.Pointer<XlcConvRec> ctow_conv;
}

abstract class XICOp_t {
  static const int CREATE_IC = 1;
  static const int SET_ICVAL = 2;
  static const int GET_ICVAL = 3;
}

class FontData extends ffi.Struct {
  ffi.Pointer<ffi.Int8> name;
}

class OMData extends ffi.Struct {
  @ffi.Int32()
  int font_data_count;

  ffi.Pointer<FontData> font_data;
}

class XOMGenericPart extends ffi.Struct {
  ffi.Pointer<OMData> data;
}

class XOMGeneric extends ffi.Struct {}

class FontSet extends ffi.Struct {
  @ffi.Int32()
  int id;

  @ffi.Int32()
  int font_data_count;

  ffi.Pointer<FontData> font_data;

  ffi.Pointer<ffi.Int8> font_name;

  ffi.Pointer<XFontStruct> info;

  ffi.Pointer<XFontStruct> font;
}

class XOCGenericPart extends ffi.Struct {
  ffi.Pointer<XlcConvRec> wcs_to_cs;

  ffi.Pointer<FontSet> font_set;
}

class XOCGeneric extends ffi.Struct {}

class XimImsportSW extends ffi.Struct {
  ffi.NativeFunction<_typedefC_128> Bool;

  ffi.Pointer<ffi.NativeFunction<_typedefC_130>> im_free;
}

class TransIntrCallbackRec extends ffi.Struct {}

class TransSpecRec extends ffi.Struct {
  ffi.Pointer<TransIntrCallbackRec> intr_cb;

  ffi.Pointer<_XtransConnInfo> trans_conn;

  @ffi.Int32()
  int fd;

  ffi.Pointer<ffi.Int8> address;

  @ffi.Int32()
  int window;

  @ffi.Int32()
  int is_putback;
}

class TransportSW extends ffi.Struct {
  ffi.Pointer<ffi.Int8> transportname;

  ffi.Pointer<ffi.NativeFunction<_typedefC_133>> config;
}

class XIntrCallbackRec extends ffi.Struct {}

class XSpecRec extends ffi.Struct {
  ffi.Pointer<XIntrCallbackRec> intr_cb;

  @ffi.Int32()
  int imconnectid;

  @ffi.Int32()
  int improtocolid;

  @ffi.Int32()
  int immoredataid;

  @ffi.Int32()
  int lib_connect_wid;

  @ffi.Int32()
  int ims_connect_wid;

  @ffi.Int32()
  int ev;

  @ffi.Int32()
  int major_code;

  @ffi.Int32()
  int minor_code;

  @ffi.Int32()
  int BoundarySize;
}

class in_addr extends ffi.Struct {
  @ffi.Uint32()
  int s_addr;
}

class ip_opts extends ffi.Struct {}

class ip_mreqn extends ffi.Struct {}

class in_pktinfo extends ffi.Struct {}

class in6_addr extends ffi.Struct {}

class sockaddr_in extends ffi.Struct {}

class sockaddr_in6 extends ffi.Struct {}

class ip_mreq extends ffi.Struct {}

class ip_mreq_source extends ffi.Struct {}

class ipv6_mreq extends ffi.Struct {}

class group_req extends ffi.Struct {}

class group_source_req extends ffi.Struct {}

class ip_msfilter extends ffi.Struct {}

class group_filter extends ffi.Struct {}

class utsname extends ffi.Struct {}

class Xtransport extends ffi.Struct {
  ffi.Pointer<ffi.Int8> TransName;

  @ffi.Int32()
  int flags;

  ffi.Pointer<ffi.NativeFunction<_typedefC_134>> OpenCOTSClient;

  ffi.Pointer<ffi.NativeFunction<_typedefC_135>> SetOption;

  ffi.Pointer<ffi.NativeFunction<_typedefC_136>> Connect;

  ffi.Pointer<ffi.NativeFunction<_typedefC_137>> BytesReadable;

  ffi.Pointer<ffi.NativeFunction<_typedefC_138>> Read;

  ffi.Pointer<ffi.NativeFunction<_typedefC_139>> Write;

  ffi.Pointer<ffi.NativeFunction<_typedefC_140>> Readv;

  ffi.Pointer<ffi.NativeFunction<_typedefC_141>> Writev;

  ffi.Pointer<ffi.NativeFunction<_typedefC_142>> Disconnect;

  ffi.Pointer<ffi.NativeFunction<_typedefC_143>> Close;

  ffi.Pointer<ffi.NativeFunction<_typedefC_144>> CloseForCloning;
}

class Xtransport_table extends ffi.Struct {
  ffi.Pointer<Xtransport> transport;

  @ffi.Int32()
  int transport_id;
}

abstract class XI18NDLType {
  static const int XLC_OBJECT = 0;
  static const int XIM_OBJECT = 1;
  static const int XOM_OBJECT = 2;
}

class XI18NObjectsList extends ffi.Struct {
  @ffi.Int32()
  int type;

  @ffi.Int32()
  int locale_name_len;

  ffi.Pointer<ffi.Int8> locale_name;

  ffi.Pointer<ffi.Int8> dl_name;

  ffi.Pointer<ffi.Int8> open;

  ffi.Pointer<ffi.Int8> im_register;

  ffi.Pointer<ffi.Int8> im_unregister;

  @ffi.Int32()
  int dl_release;

  @ffi.Uint32()
  int refcount;

  ffi.Pointer<ffi.Void> dl_module;
}

class stored_event extends ffi.Struct {}

class CodeRange extends ffi.Struct {
  @ffi.Uint64()
  int start;

  @ffi.Uint64()
  int end;

  @ffi.Uint64()
  int dmy1;

  @ffi.Uint64()
  int dmy2;
}

class VRotate extends ffi.Struct {
  ffi.Pointer<ffi.Int8> charset_name;

  @ffi.Int32()
  int side;

  @ffi.Int32()
  int num_cr;

  ffi.Pointer<CodeRange> code_range;

  ffi.Pointer<ffi.Int8> xlfd_name;

  ffi.Pointer<ffi.Int32> font;
}

abstract class XOMTextType {
  static const int XOMMultiByte = 0;
  static const int XOMWideChar = 1;
  static const int XOMUtf8String = 2;
}

class VEntry extends ffi.Struct {}

class DEntry extends ffi.Struct {}

class NTable extends ffi.Struct {}

class LTable extends ffi.Struct {}

class VClosure extends ffi.Struct {
  ffi.Pointer<ffi.Int32> type;

  ffi.Pointer<XrmValuePtr> value;
}

class SClosure extends ffi.Struct {
  ffi.Pointer<ffi.Pointer<LTable>> list;

  @ffi.Int32()
  int idx;

  @ffi.Int32()
  int limit;
}

class EClosure extends ffi.Struct {
  ffi.Pointer<_XrmHashBucketRec> db;

  ffi.Pointer<ffi.NativeFunction<DBEnumProc>> proc;

  ffi.Pointer<ffi.Int8> closure;

  ffi.Pointer<ffi.Int32> bindings;

  ffi.Pointer<ffi.Int32> quarks;

  @ffi.Int32()
  int mode;
}

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int _ISupper = 256;

const int _ISlower = 512;

const int _ISalpha = 1024;

const int _ISdigit = 2048;

const int _ISxdigit = 4096;

const int _ISspace = 8192;

const int _ISprint = 16384;

const int _ISgraph = 32768;

const int _ISblank = 1;

const int _IScntrl = 2;

const int _ISpunct = 4;

const int _ISalnum = 8;

const int _PC_LINK_MAX_1 = 0;

const int _PC_MAX_CANON_1 = 1;

const int _PC_MAX_INPUT_1 = 2;

const int _PC_NAME_MAX_1 = 3;

const int _PC_PATH_MAX_1 = 4;

const int _PC_PIPE_BUF_1 = 5;

const int _PC_CHOWN_RESTRICTED_1 = 6;

const int _PC_NO_TRUNC_1 = 7;

const int _PC_VDISABLE_1 = 8;

const int _PC_SYNC_IO_1 = 9;

const int _PC_ASYNC_IO_1 = 10;

const int _PC_PRIO_IO_1 = 11;

const int _PC_SOCK_MAXBUF_1 = 12;

const int _PC_FILESIZEBITS_1 = 13;

const int _PC_REC_INCR_XFER_SIZE_1 = 14;

const int _PC_REC_MAX_XFER_SIZE_1 = 15;

const int _PC_REC_MIN_XFER_SIZE_1 = 16;

const int _PC_REC_XFER_ALIGN_1 = 17;

const int _PC_ALLOC_SIZE_MIN_1 = 18;

const int _PC_SYMLINK_MAX_1 = 19;

const int _PC_2_SYMLINKS_1 = 20;

const int _SC_ARG_MAX_1 = 0;

const int _SC_CHILD_MAX_1 = 1;

const int _SC_CLK_TCK_1 = 2;

const int _SC_NGROUPS_MAX_1 = 3;

const int _SC_OPEN_MAX_1 = 4;

const int _SC_STREAM_MAX_1 = 5;

const int _SC_TZNAME_MAX_1 = 6;

const int _SC_JOB_CONTROL_1 = 7;

const int _SC_SAVED_IDS_1 = 8;

const int _SC_REALTIME_SIGNALS_1 = 9;

const int _SC_PRIORITY_SCHEDULING_1 = 10;

const int _SC_TIMERS_1 = 11;

const int _SC_ASYNCHRONOUS_IO_1 = 12;

const int _SC_PRIORITIZED_IO_1 = 13;

const int _SC_SYNCHRONIZED_IO_1 = 14;

const int _SC_FSYNC_1 = 15;

const int _SC_MAPPED_FILES_1 = 16;

const int _SC_MEMLOCK_1 = 17;

const int _SC_MEMLOCK_RANGE_1 = 18;

const int _SC_MEMORY_PROTECTION_1 = 19;

const int _SC_MESSAGE_PASSING_1 = 20;

const int _SC_SEMAPHORES_1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_1 = 22;

const int _SC_AIO_LISTIO_MAX_1 = 23;

const int _SC_AIO_MAX_1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_1 = 25;

const int _SC_DELAYTIMER_MAX_1 = 26;

const int _SC_MQ_OPEN_MAX_1 = 27;

const int _SC_MQ_PRIO_MAX_1 = 28;

const int _SC_VERSION_1 = 29;

const int _SC_PAGESIZE_1 = 30;

const int _SC_RTSIG_MAX_1 = 31;

const int _SC_SEM_NSEMS_MAX_1 = 32;

const int _SC_SEM_VALUE_MAX_1 = 33;

const int _SC_SIGQUEUE_MAX_1 = 34;

const int _SC_TIMER_MAX_1 = 35;

const int _SC_BC_BASE_MAX_1 = 36;

const int _SC_BC_DIM_MAX_1 = 37;

const int _SC_BC_SCALE_MAX_1 = 38;

const int _SC_BC_STRING_MAX_1 = 39;

const int _SC_COLL_WEIGHTS_MAX_1 = 40;

const int _SC_EQUIV_CLASS_MAX_1 = 41;

const int _SC_EXPR_NEST_MAX_1 = 42;

const int _SC_LINE_MAX_1 = 43;

const int _SC_RE_DUP_MAX_1 = 44;

const int _SC_CHARCLASS_NAME_MAX_1 = 45;

const int _SC_2_VERSION_1 = 46;

const int _SC_2_C_BIND_1 = 47;

const int _SC_2_C_DEV_1 = 48;

const int _SC_2_FORT_DEV_1 = 49;

const int _SC_2_FORT_RUN_1 = 50;

const int _SC_2_SW_DEV_1 = 51;

const int _SC_2_LOCALEDEF_1 = 52;

const int _SC_PII_1 = 53;

const int _SC_PII_XTI_1 = 54;

const int _SC_PII_SOCKET_1 = 55;

const int _SC_PII_INTERNET_1 = 56;

const int _SC_PII_OSI_1 = 57;

const int _SC_POLL_1 = 58;

const int _SC_SELECT_1 = 59;

const int _SC_UIO_MAXIOV_1 = 60;

const int _SC_IOV_MAX_1 = 60;

const int _SC_PII_INTERNET_STREAM_1 = 61;

const int _SC_PII_INTERNET_DGRAM_1 = 62;

const int _SC_PII_OSI_COTS_1 = 63;

const int _SC_PII_OSI_CLTS_1 = 64;

const int _SC_PII_OSI_M_1 = 65;

const int _SC_T_IOV_MAX_1 = 66;

const int _SC_THREADS_1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_1 = 68;

const int _SC_GETGR_R_SIZE_MAX_1 = 69;

const int _SC_GETPW_R_SIZE_MAX_1 = 70;

const int _SC_LOGIN_NAME_MAX_1 = 71;

const int _SC_TTY_NAME_MAX_1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_1 = 73;

const int _SC_THREAD_KEYS_MAX_1 = 74;

const int _SC_THREAD_STACK_MIN_1 = 75;

const int _SC_THREAD_THREADS_MAX_1 = 76;

const int _SC_THREAD_ATTR_STACKADDR_1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_1 = 79;

const int _SC_THREAD_PRIO_INHERIT_1 = 80;

const int _SC_THREAD_PRIO_PROTECT_1 = 81;

const int _SC_THREAD_PROCESS_SHARED_1 = 82;

const int _SC_NPROCESSORS_CONF_1 = 83;

const int _SC_NPROCESSORS_ONLN_1 = 84;

const int _SC_PHYS_PAGES_1 = 85;

const int _SC_AVPHYS_PAGES_1 = 86;

const int _SC_ATEXIT_MAX_1 = 87;

const int _SC_PASS_MAX_1 = 88;

const int _SC_XOPEN_VERSION_1 = 89;

const int _SC_XOPEN_XCU_VERSION_1 = 90;

const int _SC_XOPEN_UNIX_1 = 91;

const int _SC_XOPEN_CRYPT_1 = 92;

const int _SC_XOPEN_ENH_I18N_1 = 93;

const int _SC_XOPEN_SHM_1 = 94;

const int _SC_2_CHAR_TERM_1 = 95;

const int _SC_2_C_VERSION_1 = 96;

const int _SC_2_UPE_1 = 97;

const int _SC_XOPEN_XPG2_1 = 98;

const int _SC_XOPEN_XPG3_1 = 99;

const int _SC_XOPEN_XPG4_1 = 100;

const int _SC_CHAR_BIT_1 = 101;

const int _SC_CHAR_MAX_1 = 102;

const int _SC_CHAR_MIN_1 = 103;

const int _SC_INT_MAX_1 = 104;

const int _SC_INT_MIN_1 = 105;

const int _SC_LONG_BIT_1 = 106;

const int _SC_WORD_BIT_1 = 107;

const int _SC_MB_LEN_MAX_1 = 108;

const int _SC_NZERO_1 = 109;

const int _SC_SSIZE_MAX_1 = 110;

const int _SC_SCHAR_MAX_1 = 111;

const int _SC_SCHAR_MIN_1 = 112;

const int _SC_SHRT_MAX_1 = 113;

const int _SC_SHRT_MIN_1 = 114;

const int _SC_UCHAR_MAX_1 = 115;

const int _SC_UINT_MAX_1 = 116;

const int _SC_ULONG_MAX_1 = 117;

const int _SC_USHRT_MAX_1 = 118;

const int _SC_NL_ARGMAX_1 = 119;

const int _SC_NL_LANGMAX_1 = 120;

const int _SC_NL_MSGMAX_1 = 121;

const int _SC_NL_NMAX_1 = 122;

const int _SC_NL_SETMAX_1 = 123;

const int _SC_NL_TEXTMAX_1 = 124;

const int _SC_XBS5_ILP32_OFF32_1 = 125;

const int _SC_XBS5_ILP32_OFFBIG_1 = 126;

const int _SC_XBS5_LP64_OFF64_1 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_1 = 128;

const int _SC_XOPEN_LEGACY_1 = 129;

const int _SC_XOPEN_REALTIME_1 = 130;

const int _SC_XOPEN_REALTIME_THREADS_1 = 131;

const int _SC_ADVISORY_INFO_1 = 132;

const int _SC_BARRIERS_1 = 133;

const int _SC_BASE_1 = 134;

const int _SC_C_LANG_SUPPORT_1 = 135;

const int _SC_C_LANG_SUPPORT_R_1 = 136;

const int _SC_CLOCK_SELECTION_1 = 137;

const int _SC_CPUTIME_1 = 138;

const int _SC_THREAD_CPUTIME_1 = 139;

const int _SC_DEVICE_IO_1 = 140;

const int _SC_DEVICE_SPECIFIC_1 = 141;

const int _SC_DEVICE_SPECIFIC_R_1 = 142;

const int _SC_FD_MGMT_1 = 143;

const int _SC_FIFO_1 = 144;

const int _SC_PIPE_1 = 145;

const int _SC_FILE_ATTRIBUTES_1 = 146;

const int _SC_FILE_LOCKING_1 = 147;

const int _SC_FILE_SYSTEM_1 = 148;

const int _SC_MONOTONIC_CLOCK_1 = 149;

const int _SC_MULTI_PROCESS_1 = 150;

const int _SC_SINGLE_PROCESS_1 = 151;

const int _SC_NETWORKING_1 = 152;

const int _SC_READER_WRITER_LOCKS_1 = 153;

const int _SC_SPIN_LOCKS_1 = 154;

const int _SC_REGEXP_1 = 155;

const int _SC_REGEX_VERSION_1 = 156;

const int _SC_SHELL_1 = 157;

const int _SC_SIGNALS_1 = 158;

const int _SC_SPAWN_1 = 159;

const int _SC_SPORADIC_SERVER_1 = 160;

const int _SC_THREAD_SPORADIC_SERVER_1 = 161;

const int _SC_SYSTEM_DATABASE_1 = 162;

const int _SC_SYSTEM_DATABASE_R_1 = 163;

const int _SC_TIMEOUTS_1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_1 = 165;

const int _SC_USER_GROUPS_1 = 166;

const int _SC_USER_GROUPS_R_1 = 167;

const int _SC_2_PBS_1 = 168;

const int _SC_2_PBS_ACCOUNTING_1 = 169;

const int _SC_2_PBS_LOCATE_1 = 170;

const int _SC_2_PBS_MESSAGE_1 = 171;

const int _SC_2_PBS_TRACK_1 = 172;

const int _SC_SYMLOOP_MAX_1 = 173;

const int _SC_STREAMS_1 = 174;

const int _SC_2_PBS_CHECKPOINT_1 = 175;

const int _SC_V6_ILP32_OFF32_1 = 176;

const int _SC_V6_ILP32_OFFBIG_1 = 177;

const int _SC_V6_LP64_OFF64_1 = 178;

const int _SC_V6_LPBIG_OFFBIG_1 = 179;

const int _SC_HOST_NAME_MAX_1 = 180;

const int _SC_TRACE_1 = 181;

const int _SC_TRACE_EVENT_FILTER_1 = 182;

const int _SC_TRACE_INHERIT_1 = 183;

const int _SC_TRACE_LOG_1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_1 = 190;

const int _SC_LEVEL2_CACHE_SIZE_1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_1 = 193;

const int _SC_LEVEL3_CACHE_SIZE_1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_1 = 196;

const int _SC_LEVEL4_CACHE_SIZE_1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_1 = 199;

const int _SC_IPV6_1 = 235;

const int _SC_RAW_SOCKETS_1 = 236;

const int _SC_V7_ILP32_OFF32_1 = 237;

const int _SC_V7_ILP32_OFFBIG_1 = 238;

const int _SC_V7_LP64_OFF64_1 = 239;

const int _SC_V7_LPBIG_OFFBIG_1 = 240;

const int _SC_SS_REPL_MAX_1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_1 = 242;

const int _SC_TRACE_NAME_MAX_1 = 243;

const int _SC_TRACE_SYS_MAX_1 = 244;

const int _SC_TRACE_USER_EVENT_MAX_1 = 245;

const int _SC_XOPEN_STREAMS_1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_1 = 248;

const int _CS_PATH_1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_1 = 1;

const int _CS_GNU_LIBC_VERSION_1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_1 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_1 = 5;

const int _CS_LFS_CFLAGS_1 = 1000;

const int _CS_LFS_LDFLAGS_1 = 1001;

const int _CS_LFS_LIBS_1 = 1002;

const int _CS_LFS_LINTFLAGS_1 = 1003;

const int _CS_LFS64_CFLAGS_1 = 1004;

const int _CS_LFS64_LDFLAGS_1 = 1005;

const int _CS_LFS64_LIBS_1 = 1006;

const int _CS_LFS64_LINTFLAGS_1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_1 = 1147;

const int _CS_V6_ENV_1 = 1148;

const int _CS_V7_ENV_1 = 1149;

const int _PC_LINK_MAX_2 = 0;

const int _PC_MAX_CANON_2 = 1;

const int _PC_MAX_INPUT_2 = 2;

const int _PC_NAME_MAX_2 = 3;

const int _PC_PATH_MAX_2 = 4;

const int _PC_PIPE_BUF_2 = 5;

const int _PC_CHOWN_RESTRICTED_2 = 6;

const int _PC_NO_TRUNC_2 = 7;

const int _PC_VDISABLE_2 = 8;

const int _PC_SYNC_IO_2 = 9;

const int _PC_ASYNC_IO_2 = 10;

const int _PC_PRIO_IO_2 = 11;

const int _PC_SOCK_MAXBUF_2 = 12;

const int _PC_FILESIZEBITS_2 = 13;

const int _PC_REC_INCR_XFER_SIZE_2 = 14;

const int _PC_REC_MAX_XFER_SIZE_2 = 15;

const int _PC_REC_MIN_XFER_SIZE_2 = 16;

const int _PC_REC_XFER_ALIGN_2 = 17;

const int _PC_ALLOC_SIZE_MIN_2 = 18;

const int _PC_SYMLINK_MAX_2 = 19;

const int _PC_2_SYMLINKS_2 = 20;

const int _SC_ARG_MAX_2 = 0;

const int _SC_CHILD_MAX_2 = 1;

const int _SC_CLK_TCK_2 = 2;

const int _SC_NGROUPS_MAX_2 = 3;

const int _SC_OPEN_MAX_2 = 4;

const int _SC_STREAM_MAX_2 = 5;

const int _SC_TZNAME_MAX_2 = 6;

const int _SC_JOB_CONTROL_2 = 7;

const int _SC_SAVED_IDS_2 = 8;

const int _SC_REALTIME_SIGNALS_2 = 9;

const int _SC_PRIORITY_SCHEDULING_2 = 10;

const int _SC_TIMERS_2 = 11;

const int _SC_ASYNCHRONOUS_IO_2 = 12;

const int _SC_PRIORITIZED_IO_2 = 13;

const int _SC_SYNCHRONIZED_IO_2 = 14;

const int _SC_FSYNC_2 = 15;

const int _SC_MAPPED_FILES_2 = 16;

const int _SC_MEMLOCK_2 = 17;

const int _SC_MEMLOCK_RANGE_2 = 18;

const int _SC_MEMORY_PROTECTION_2 = 19;

const int _SC_MESSAGE_PASSING_2 = 20;

const int _SC_SEMAPHORES_2 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_2 = 22;

const int _SC_AIO_LISTIO_MAX_2 = 23;

const int _SC_AIO_MAX_2 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_2 = 25;

const int _SC_DELAYTIMER_MAX_2 = 26;

const int _SC_MQ_OPEN_MAX_2 = 27;

const int _SC_MQ_PRIO_MAX_2 = 28;

const int _SC_VERSION_2 = 29;

const int _SC_PAGESIZE_2 = 30;

const int _SC_RTSIG_MAX_2 = 31;

const int _SC_SEM_NSEMS_MAX_2 = 32;

const int _SC_SEM_VALUE_MAX_2 = 33;

const int _SC_SIGQUEUE_MAX_2 = 34;

const int _SC_TIMER_MAX_2 = 35;

const int _SC_BC_BASE_MAX_2 = 36;

const int _SC_BC_DIM_MAX_2 = 37;

const int _SC_BC_SCALE_MAX_2 = 38;

const int _SC_BC_STRING_MAX_2 = 39;

const int _SC_COLL_WEIGHTS_MAX_2 = 40;

const int _SC_EQUIV_CLASS_MAX_2 = 41;

const int _SC_EXPR_NEST_MAX_2 = 42;

const int _SC_LINE_MAX_2 = 43;

const int _SC_RE_DUP_MAX_2 = 44;

const int _SC_CHARCLASS_NAME_MAX_2 = 45;

const int _SC_2_VERSION_2 = 46;

const int _SC_2_C_BIND_2 = 47;

const int _SC_2_C_DEV_2 = 48;

const int _SC_2_FORT_DEV_2 = 49;

const int _SC_2_FORT_RUN_2 = 50;

const int _SC_2_SW_DEV_2 = 51;

const int _SC_2_LOCALEDEF_2 = 52;

const int _SC_PII_2 = 53;

const int _SC_PII_XTI_2 = 54;

const int _SC_PII_SOCKET_2 = 55;

const int _SC_PII_INTERNET_2 = 56;

const int _SC_PII_OSI_2 = 57;

const int _SC_POLL_2 = 58;

const int _SC_SELECT_2 = 59;

const int _SC_UIO_MAXIOV_2 = 60;

const int _SC_IOV_MAX_2 = 60;

const int _SC_PII_INTERNET_STREAM_2 = 61;

const int _SC_PII_INTERNET_DGRAM_2 = 62;

const int _SC_PII_OSI_COTS_2 = 63;

const int _SC_PII_OSI_CLTS_2 = 64;

const int _SC_PII_OSI_M_2 = 65;

const int _SC_T_IOV_MAX_2 = 66;

const int _SC_THREADS_2 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_2 = 68;

const int _SC_GETGR_R_SIZE_MAX_2 = 69;

const int _SC_GETPW_R_SIZE_MAX_2 = 70;

const int _SC_LOGIN_NAME_MAX_2 = 71;

const int _SC_TTY_NAME_MAX_2 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_2 = 73;

const int _SC_THREAD_KEYS_MAX_2 = 74;

const int _SC_THREAD_STACK_MIN_2 = 75;

const int _SC_THREAD_THREADS_MAX_2 = 76;

const int _SC_THREAD_ATTR_STACKADDR_2 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_2 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_2 = 79;

const int _SC_THREAD_PRIO_INHERIT_2 = 80;

const int _SC_THREAD_PRIO_PROTECT_2 = 81;

const int _SC_THREAD_PROCESS_SHARED_2 = 82;

const int _SC_NPROCESSORS_CONF_2 = 83;

const int _SC_NPROCESSORS_ONLN_2 = 84;

const int _SC_PHYS_PAGES_2 = 85;

const int _SC_AVPHYS_PAGES_2 = 86;

const int _SC_ATEXIT_MAX_2 = 87;

const int _SC_PASS_MAX_2 = 88;

const int _SC_XOPEN_VERSION_2 = 89;

const int _SC_XOPEN_XCU_VERSION_2 = 90;

const int _SC_XOPEN_UNIX_2 = 91;

const int _SC_XOPEN_CRYPT_2 = 92;

const int _SC_XOPEN_ENH_I18N_2 = 93;

const int _SC_XOPEN_SHM_2 = 94;

const int _SC_2_CHAR_TERM_2 = 95;

const int _SC_2_C_VERSION_2 = 96;

const int _SC_2_UPE_2 = 97;

const int _SC_XOPEN_XPG2_2 = 98;

const int _SC_XOPEN_XPG3_2 = 99;

const int _SC_XOPEN_XPG4_2 = 100;

const int _SC_CHAR_BIT_2 = 101;

const int _SC_CHAR_MAX_2 = 102;

const int _SC_CHAR_MIN_2 = 103;

const int _SC_INT_MAX_2 = 104;

const int _SC_INT_MIN_2 = 105;

const int _SC_LONG_BIT_2 = 106;

const int _SC_WORD_BIT_2 = 107;

const int _SC_MB_LEN_MAX_2 = 108;

const int _SC_NZERO_2 = 109;

const int _SC_SSIZE_MAX_2 = 110;

const int _SC_SCHAR_MAX_2 = 111;

const int _SC_SCHAR_MIN_2 = 112;

const int _SC_SHRT_MAX_2 = 113;

const int _SC_SHRT_MIN_2 = 114;

const int _SC_UCHAR_MAX_2 = 115;

const int _SC_UINT_MAX_2 = 116;

const int _SC_ULONG_MAX_2 = 117;

const int _SC_USHRT_MAX_2 = 118;

const int _SC_NL_ARGMAX_2 = 119;

const int _SC_NL_LANGMAX_2 = 120;

const int _SC_NL_MSGMAX_2 = 121;

const int _SC_NL_NMAX_2 = 122;

const int _SC_NL_SETMAX_2 = 123;

const int _SC_NL_TEXTMAX_2 = 124;

const int _SC_XBS5_ILP32_OFF32_2 = 125;

const int _SC_XBS5_ILP32_OFFBIG_2 = 126;

const int _SC_XBS5_LP64_OFF64_2 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_2 = 128;

const int _SC_XOPEN_LEGACY_2 = 129;

const int _SC_XOPEN_REALTIME_2 = 130;

const int _SC_XOPEN_REALTIME_THREADS_2 = 131;

const int _SC_ADVISORY_INFO_2 = 132;

const int _SC_BARRIERS_2 = 133;

const int _SC_BASE_2 = 134;

const int _SC_C_LANG_SUPPORT_2 = 135;

const int _SC_C_LANG_SUPPORT_R_2 = 136;

const int _SC_CLOCK_SELECTION_2 = 137;

const int _SC_CPUTIME_2 = 138;

const int _SC_THREAD_CPUTIME_2 = 139;

const int _SC_DEVICE_IO_2 = 140;

const int _SC_DEVICE_SPECIFIC_2 = 141;

const int _SC_DEVICE_SPECIFIC_R_2 = 142;

const int _SC_FD_MGMT_2 = 143;

const int _SC_FIFO_2 = 144;

const int _SC_PIPE_2 = 145;

const int _SC_FILE_ATTRIBUTES_2 = 146;

const int _SC_FILE_LOCKING_2 = 147;

const int _SC_FILE_SYSTEM_2 = 148;

const int _SC_MONOTONIC_CLOCK_2 = 149;

const int _SC_MULTI_PROCESS_2 = 150;

const int _SC_SINGLE_PROCESS_2 = 151;

const int _SC_NETWORKING_2 = 152;

const int _SC_READER_WRITER_LOCKS_2 = 153;

const int _SC_SPIN_LOCKS_2 = 154;

const int _SC_REGEXP_2 = 155;

const int _SC_REGEX_VERSION_2 = 156;

const int _SC_SHELL_2 = 157;

const int _SC_SIGNALS_2 = 158;

const int _SC_SPAWN_2 = 159;

const int _SC_SPORADIC_SERVER_2 = 160;

const int _SC_THREAD_SPORADIC_SERVER_2 = 161;

const int _SC_SYSTEM_DATABASE_2 = 162;

const int _SC_SYSTEM_DATABASE_R_2 = 163;

const int _SC_TIMEOUTS_2 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_2 = 165;

const int _SC_USER_GROUPS_2 = 166;

const int _SC_USER_GROUPS_R_2 = 167;

const int _SC_2_PBS_2 = 168;

const int _SC_2_PBS_ACCOUNTING_2 = 169;

const int _SC_2_PBS_LOCATE_2 = 170;

const int _SC_2_PBS_MESSAGE_2 = 171;

const int _SC_2_PBS_TRACK_2 = 172;

const int _SC_SYMLOOP_MAX_2 = 173;

const int _SC_STREAMS_2 = 174;

const int _SC_2_PBS_CHECKPOINT_2 = 175;

const int _SC_V6_ILP32_OFF32_2 = 176;

const int _SC_V6_ILP32_OFFBIG_2 = 177;

const int _SC_V6_LP64_OFF64_2 = 178;

const int _SC_V6_LPBIG_OFFBIG_2 = 179;

const int _SC_HOST_NAME_MAX_2 = 180;

const int _SC_TRACE_2 = 181;

const int _SC_TRACE_EVENT_FILTER_2 = 182;

const int _SC_TRACE_INHERIT_2 = 183;

const int _SC_TRACE_LOG_2 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_2 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_2 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_2 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_2 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_2 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_2 = 190;

const int _SC_LEVEL2_CACHE_SIZE_2 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_2 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_2 = 193;

const int _SC_LEVEL3_CACHE_SIZE_2 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_2 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_2 = 196;

const int _SC_LEVEL4_CACHE_SIZE_2 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_2 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_2 = 199;

const int _SC_IPV6_2 = 235;

const int _SC_RAW_SOCKETS_2 = 236;

const int _SC_V7_ILP32_OFF32_2 = 237;

const int _SC_V7_ILP32_OFFBIG_2 = 238;

const int _SC_V7_LP64_OFF64_2 = 239;

const int _SC_V7_LPBIG_OFFBIG_2 = 240;

const int _SC_SS_REPL_MAX_2 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_2 = 242;

const int _SC_TRACE_NAME_MAX_2 = 243;

const int _SC_TRACE_SYS_MAX_2 = 244;

const int _SC_TRACE_USER_EVENT_MAX_2 = 245;

const int _SC_XOPEN_STREAMS_2 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_2 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_2 = 248;

const int _CS_PATH_2 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_2 = 1;

const int _CS_GNU_LIBC_VERSION_2 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_2 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_2 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_2 = 5;

const int _CS_LFS_CFLAGS_2 = 1000;

const int _CS_LFS_LDFLAGS_2 = 1001;

const int _CS_LFS_LIBS_2 = 1002;

const int _CS_LFS_LINTFLAGS_2 = 1003;

const int _CS_LFS64_CFLAGS_2 = 1004;

const int _CS_LFS64_LDFLAGS_2 = 1005;

const int _CS_LFS64_LIBS_2 = 1006;

const int _CS_LFS64_LINTFLAGS_2 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_2 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_2 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_2 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_2 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_2 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_2 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_2 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_2 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_2 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_2 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_2 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_2 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_2 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_2 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_2 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_2 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_2 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_2 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_2 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_2 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_2 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_2 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_2 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_2 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_2 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_2 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_2 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_2 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_2 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_2 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_2 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_2 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_2 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_2 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_2 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_2 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_2 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_2 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_2 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_2 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_2 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_2 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_2 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_2 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_2 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_2 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_2 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_2 = 1147;

const int _CS_V6_ENV_2 = 1148;

const int _CS_V7_ENV_2 = 1149;

const int _PC_LINK_MAX_3 = 0;

const int _PC_MAX_CANON_3 = 1;

const int _PC_MAX_INPUT_3 = 2;

const int _PC_NAME_MAX_3 = 3;

const int _PC_PATH_MAX_3 = 4;

const int _PC_PIPE_BUF_3 = 5;

const int _PC_CHOWN_RESTRICTED_3 = 6;

const int _PC_NO_TRUNC_3 = 7;

const int _PC_VDISABLE_3 = 8;

const int _PC_SYNC_IO_3 = 9;

const int _PC_ASYNC_IO_3 = 10;

const int _PC_PRIO_IO_3 = 11;

const int _PC_SOCK_MAXBUF_3 = 12;

const int _PC_FILESIZEBITS_3 = 13;

const int _PC_REC_INCR_XFER_SIZE_3 = 14;

const int _PC_REC_MAX_XFER_SIZE_3 = 15;

const int _PC_REC_MIN_XFER_SIZE_3 = 16;

const int _PC_REC_XFER_ALIGN_3 = 17;

const int _PC_ALLOC_SIZE_MIN_3 = 18;

const int _PC_SYMLINK_MAX_3 = 19;

const int _PC_2_SYMLINKS_3 = 20;

const int _SC_ARG_MAX_3 = 0;

const int _SC_CHILD_MAX_3 = 1;

const int _SC_CLK_TCK_3 = 2;

const int _SC_NGROUPS_MAX_3 = 3;

const int _SC_OPEN_MAX_3 = 4;

const int _SC_STREAM_MAX_3 = 5;

const int _SC_TZNAME_MAX_3 = 6;

const int _SC_JOB_CONTROL_3 = 7;

const int _SC_SAVED_IDS_3 = 8;

const int _SC_REALTIME_SIGNALS_3 = 9;

const int _SC_PRIORITY_SCHEDULING_3 = 10;

const int _SC_TIMERS_3 = 11;

const int _SC_ASYNCHRONOUS_IO_3 = 12;

const int _SC_PRIORITIZED_IO_3 = 13;

const int _SC_SYNCHRONIZED_IO_3 = 14;

const int _SC_FSYNC_3 = 15;

const int _SC_MAPPED_FILES_3 = 16;

const int _SC_MEMLOCK_3 = 17;

const int _SC_MEMLOCK_RANGE_3 = 18;

const int _SC_MEMORY_PROTECTION_3 = 19;

const int _SC_MESSAGE_PASSING_3 = 20;

const int _SC_SEMAPHORES_3 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_3 = 22;

const int _SC_AIO_LISTIO_MAX_3 = 23;

const int _SC_AIO_MAX_3 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_3 = 25;

const int _SC_DELAYTIMER_MAX_3 = 26;

const int _SC_MQ_OPEN_MAX_3 = 27;

const int _SC_MQ_PRIO_MAX_3 = 28;

const int _SC_VERSION_3 = 29;

const int _SC_PAGESIZE_3 = 30;

const int _SC_RTSIG_MAX_3 = 31;

const int _SC_SEM_NSEMS_MAX_3 = 32;

const int _SC_SEM_VALUE_MAX_3 = 33;

const int _SC_SIGQUEUE_MAX_3 = 34;

const int _SC_TIMER_MAX_3 = 35;

const int _SC_BC_BASE_MAX_3 = 36;

const int _SC_BC_DIM_MAX_3 = 37;

const int _SC_BC_SCALE_MAX_3 = 38;

const int _SC_BC_STRING_MAX_3 = 39;

const int _SC_COLL_WEIGHTS_MAX_3 = 40;

const int _SC_EQUIV_CLASS_MAX_3 = 41;

const int _SC_EXPR_NEST_MAX_3 = 42;

const int _SC_LINE_MAX_3 = 43;

const int _SC_RE_DUP_MAX_3 = 44;

const int _SC_CHARCLASS_NAME_MAX_3 = 45;

const int _SC_2_VERSION_3 = 46;

const int _SC_2_C_BIND_3 = 47;

const int _SC_2_C_DEV_3 = 48;

const int _SC_2_FORT_DEV_3 = 49;

const int _SC_2_FORT_RUN_3 = 50;

const int _SC_2_SW_DEV_3 = 51;

const int _SC_2_LOCALEDEF_3 = 52;

const int _SC_PII_3 = 53;

const int _SC_PII_XTI_3 = 54;

const int _SC_PII_SOCKET_3 = 55;

const int _SC_PII_INTERNET_3 = 56;

const int _SC_PII_OSI_3 = 57;

const int _SC_POLL_3 = 58;

const int _SC_SELECT_3 = 59;

const int _SC_UIO_MAXIOV_3 = 60;

const int _SC_IOV_MAX_3 = 60;

const int _SC_PII_INTERNET_STREAM_3 = 61;

const int _SC_PII_INTERNET_DGRAM_3 = 62;

const int _SC_PII_OSI_COTS_3 = 63;

const int _SC_PII_OSI_CLTS_3 = 64;

const int _SC_PII_OSI_M_3 = 65;

const int _SC_T_IOV_MAX_3 = 66;

const int _SC_THREADS_3 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_3 = 68;

const int _SC_GETGR_R_SIZE_MAX_3 = 69;

const int _SC_GETPW_R_SIZE_MAX_3 = 70;

const int _SC_LOGIN_NAME_MAX_3 = 71;

const int _SC_TTY_NAME_MAX_3 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_3 = 73;

const int _SC_THREAD_KEYS_MAX_3 = 74;

const int _SC_THREAD_STACK_MIN_3 = 75;

const int _SC_THREAD_THREADS_MAX_3 = 76;

const int _SC_THREAD_ATTR_STACKADDR_3 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_3 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_3 = 79;

const int _SC_THREAD_PRIO_INHERIT_3 = 80;

const int _SC_THREAD_PRIO_PROTECT_3 = 81;

const int _SC_THREAD_PROCESS_SHARED_3 = 82;

const int _SC_NPROCESSORS_CONF_3 = 83;

const int _SC_NPROCESSORS_ONLN_3 = 84;

const int _SC_PHYS_PAGES_3 = 85;

const int _SC_AVPHYS_PAGES_3 = 86;

const int _SC_ATEXIT_MAX_3 = 87;

const int _SC_PASS_MAX_3 = 88;

const int _SC_XOPEN_VERSION_3 = 89;

const int _SC_XOPEN_XCU_VERSION_3 = 90;

const int _SC_XOPEN_UNIX_3 = 91;

const int _SC_XOPEN_CRYPT_3 = 92;

const int _SC_XOPEN_ENH_I18N_3 = 93;

const int _SC_XOPEN_SHM_3 = 94;

const int _SC_2_CHAR_TERM_3 = 95;

const int _SC_2_C_VERSION_3 = 96;

const int _SC_2_UPE_3 = 97;

const int _SC_XOPEN_XPG2_3 = 98;

const int _SC_XOPEN_XPG3_3 = 99;

const int _SC_XOPEN_XPG4_3 = 100;

const int _SC_CHAR_BIT_3 = 101;

const int _SC_CHAR_MAX_3 = 102;

const int _SC_CHAR_MIN_3 = 103;

const int _SC_INT_MAX_3 = 104;

const int _SC_INT_MIN_3 = 105;

const int _SC_LONG_BIT_3 = 106;

const int _SC_WORD_BIT_3 = 107;

const int _SC_MB_LEN_MAX_3 = 108;

const int _SC_NZERO_3 = 109;

const int _SC_SSIZE_MAX_3 = 110;

const int _SC_SCHAR_MAX_3 = 111;

const int _SC_SCHAR_MIN_3 = 112;

const int _SC_SHRT_MAX_3 = 113;

const int _SC_SHRT_MIN_3 = 114;

const int _SC_UCHAR_MAX_3 = 115;

const int _SC_UINT_MAX_3 = 116;

const int _SC_ULONG_MAX_3 = 117;

const int _SC_USHRT_MAX_3 = 118;

const int _SC_NL_ARGMAX_3 = 119;

const int _SC_NL_LANGMAX_3 = 120;

const int _SC_NL_MSGMAX_3 = 121;

const int _SC_NL_NMAX_3 = 122;

const int _SC_NL_SETMAX_3 = 123;

const int _SC_NL_TEXTMAX_3 = 124;

const int _SC_XBS5_ILP32_OFF32_3 = 125;

const int _SC_XBS5_ILP32_OFFBIG_3 = 126;

const int _SC_XBS5_LP64_OFF64_3 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_3 = 128;

const int _SC_XOPEN_LEGACY_3 = 129;

const int _SC_XOPEN_REALTIME_3 = 130;

const int _SC_XOPEN_REALTIME_THREADS_3 = 131;

const int _SC_ADVISORY_INFO_3 = 132;

const int _SC_BARRIERS_3 = 133;

const int _SC_BASE_3 = 134;

const int _SC_C_LANG_SUPPORT_3 = 135;

const int _SC_C_LANG_SUPPORT_R_3 = 136;

const int _SC_CLOCK_SELECTION_3 = 137;

const int _SC_CPUTIME_3 = 138;

const int _SC_THREAD_CPUTIME_3 = 139;

const int _SC_DEVICE_IO_3 = 140;

const int _SC_DEVICE_SPECIFIC_3 = 141;

const int _SC_DEVICE_SPECIFIC_R_3 = 142;

const int _SC_FD_MGMT_3 = 143;

const int _SC_FIFO_3 = 144;

const int _SC_PIPE_3 = 145;

const int _SC_FILE_ATTRIBUTES_3 = 146;

const int _SC_FILE_LOCKING_3 = 147;

const int _SC_FILE_SYSTEM_3 = 148;

const int _SC_MONOTONIC_CLOCK_3 = 149;

const int _SC_MULTI_PROCESS_3 = 150;

const int _SC_SINGLE_PROCESS_3 = 151;

const int _SC_NETWORKING_3 = 152;

const int _SC_READER_WRITER_LOCKS_3 = 153;

const int _SC_SPIN_LOCKS_3 = 154;

const int _SC_REGEXP_3 = 155;

const int _SC_REGEX_VERSION_3 = 156;

const int _SC_SHELL_3 = 157;

const int _SC_SIGNALS_3 = 158;

const int _SC_SPAWN_3 = 159;

const int _SC_SPORADIC_SERVER_3 = 160;

const int _SC_THREAD_SPORADIC_SERVER_3 = 161;

const int _SC_SYSTEM_DATABASE_3 = 162;

const int _SC_SYSTEM_DATABASE_R_3 = 163;

const int _SC_TIMEOUTS_3 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_3 = 165;

const int _SC_USER_GROUPS_3 = 166;

const int _SC_USER_GROUPS_R_3 = 167;

const int _SC_2_PBS_3 = 168;

const int _SC_2_PBS_ACCOUNTING_3 = 169;

const int _SC_2_PBS_LOCATE_3 = 170;

const int _SC_2_PBS_MESSAGE_3 = 171;

const int _SC_2_PBS_TRACK_3 = 172;

const int _SC_SYMLOOP_MAX_3 = 173;

const int _SC_STREAMS_3 = 174;

const int _SC_2_PBS_CHECKPOINT_3 = 175;

const int _SC_V6_ILP32_OFF32_3 = 176;

const int _SC_V6_ILP32_OFFBIG_3 = 177;

const int _SC_V6_LP64_OFF64_3 = 178;

const int _SC_V6_LPBIG_OFFBIG_3 = 179;

const int _SC_HOST_NAME_MAX_3 = 180;

const int _SC_TRACE_3 = 181;

const int _SC_TRACE_EVENT_FILTER_3 = 182;

const int _SC_TRACE_INHERIT_3 = 183;

const int _SC_TRACE_LOG_3 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_3 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_3 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_3 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_3 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_3 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_3 = 190;

const int _SC_LEVEL2_CACHE_SIZE_3 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_3 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_3 = 193;

const int _SC_LEVEL3_CACHE_SIZE_3 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_3 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_3 = 196;

const int _SC_LEVEL4_CACHE_SIZE_3 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_3 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_3 = 199;

const int _SC_IPV6_3 = 235;

const int _SC_RAW_SOCKETS_3 = 236;

const int _SC_V7_ILP32_OFF32_3 = 237;

const int _SC_V7_ILP32_OFFBIG_3 = 238;

const int _SC_V7_LP64_OFF64_3 = 239;

const int _SC_V7_LPBIG_OFFBIG_3 = 240;

const int _SC_SS_REPL_MAX_3 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_3 = 242;

const int _SC_TRACE_NAME_MAX_3 = 243;

const int _SC_TRACE_SYS_MAX_3 = 244;

const int _SC_TRACE_USER_EVENT_MAX_3 = 245;

const int _SC_XOPEN_STREAMS_3 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_3 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_3 = 248;

const int _CS_PATH_3 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_3 = 1;

const int _CS_GNU_LIBC_VERSION_3 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_3 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_3 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_3 = 5;

const int _CS_LFS_CFLAGS_3 = 1000;

const int _CS_LFS_LDFLAGS_3 = 1001;

const int _CS_LFS_LIBS_3 = 1002;

const int _CS_LFS_LINTFLAGS_3 = 1003;

const int _CS_LFS64_CFLAGS_3 = 1004;

const int _CS_LFS64_LDFLAGS_3 = 1005;

const int _CS_LFS64_LIBS_3 = 1006;

const int _CS_LFS64_LINTFLAGS_3 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_3 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_3 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_3 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_3 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_3 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_3 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_3 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_3 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_3 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_3 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_3 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_3 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_3 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_3 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_3 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_3 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_3 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_3 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_3 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_3 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_3 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_3 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_3 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_3 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_3 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_3 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_3 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_3 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_3 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_3 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_3 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_3 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_3 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_3 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_3 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_3 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_3 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_3 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_3 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_3 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_3 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_3 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_3 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_3 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_3 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_3 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_3 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_3 = 1147;

const int _CS_V6_ENV_3 = 1148;

const int _CS_V7_ENV_3 = 1149;

const int _PC_LINK_MAX_4 = 0;

const int _PC_MAX_CANON_4 = 1;

const int _PC_MAX_INPUT_4 = 2;

const int _PC_NAME_MAX_4 = 3;

const int _PC_PATH_MAX_4 = 4;

const int _PC_PIPE_BUF_4 = 5;

const int _PC_CHOWN_RESTRICTED_4 = 6;

const int _PC_NO_TRUNC_4 = 7;

const int _PC_VDISABLE_4 = 8;

const int _PC_SYNC_IO_4 = 9;

const int _PC_ASYNC_IO_4 = 10;

const int _PC_PRIO_IO_4 = 11;

const int _PC_SOCK_MAXBUF_4 = 12;

const int _PC_FILESIZEBITS_4 = 13;

const int _PC_REC_INCR_XFER_SIZE_4 = 14;

const int _PC_REC_MAX_XFER_SIZE_4 = 15;

const int _PC_REC_MIN_XFER_SIZE_4 = 16;

const int _PC_REC_XFER_ALIGN_4 = 17;

const int _PC_ALLOC_SIZE_MIN_4 = 18;

const int _PC_SYMLINK_MAX_4 = 19;

const int _PC_2_SYMLINKS_4 = 20;

const int _SC_ARG_MAX_4 = 0;

const int _SC_CHILD_MAX_4 = 1;

const int _SC_CLK_TCK_4 = 2;

const int _SC_NGROUPS_MAX_4 = 3;

const int _SC_OPEN_MAX_4 = 4;

const int _SC_STREAM_MAX_4 = 5;

const int _SC_TZNAME_MAX_4 = 6;

const int _SC_JOB_CONTROL_4 = 7;

const int _SC_SAVED_IDS_4 = 8;

const int _SC_REALTIME_SIGNALS_4 = 9;

const int _SC_PRIORITY_SCHEDULING_4 = 10;

const int _SC_TIMERS_4 = 11;

const int _SC_ASYNCHRONOUS_IO_4 = 12;

const int _SC_PRIORITIZED_IO_4 = 13;

const int _SC_SYNCHRONIZED_IO_4 = 14;

const int _SC_FSYNC_4 = 15;

const int _SC_MAPPED_FILES_4 = 16;

const int _SC_MEMLOCK_4 = 17;

const int _SC_MEMLOCK_RANGE_4 = 18;

const int _SC_MEMORY_PROTECTION_4 = 19;

const int _SC_MESSAGE_PASSING_4 = 20;

const int _SC_SEMAPHORES_4 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_4 = 22;

const int _SC_AIO_LISTIO_MAX_4 = 23;

const int _SC_AIO_MAX_4 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_4 = 25;

const int _SC_DELAYTIMER_MAX_4 = 26;

const int _SC_MQ_OPEN_MAX_4 = 27;

const int _SC_MQ_PRIO_MAX_4 = 28;

const int _SC_VERSION_4 = 29;

const int _SC_PAGESIZE_4 = 30;

const int _SC_RTSIG_MAX_4 = 31;

const int _SC_SEM_NSEMS_MAX_4 = 32;

const int _SC_SEM_VALUE_MAX_4 = 33;

const int _SC_SIGQUEUE_MAX_4 = 34;

const int _SC_TIMER_MAX_4 = 35;

const int _SC_BC_BASE_MAX_4 = 36;

const int _SC_BC_DIM_MAX_4 = 37;

const int _SC_BC_SCALE_MAX_4 = 38;

const int _SC_BC_STRING_MAX_4 = 39;

const int _SC_COLL_WEIGHTS_MAX_4 = 40;

const int _SC_EQUIV_CLASS_MAX_4 = 41;

const int _SC_EXPR_NEST_MAX_4 = 42;

const int _SC_LINE_MAX_4 = 43;

const int _SC_RE_DUP_MAX_4 = 44;

const int _SC_CHARCLASS_NAME_MAX_4 = 45;

const int _SC_2_VERSION_4 = 46;

const int _SC_2_C_BIND_4 = 47;

const int _SC_2_C_DEV_4 = 48;

const int _SC_2_FORT_DEV_4 = 49;

const int _SC_2_FORT_RUN_4 = 50;

const int _SC_2_SW_DEV_4 = 51;

const int _SC_2_LOCALEDEF_4 = 52;

const int _SC_PII_4 = 53;

const int _SC_PII_XTI_4 = 54;

const int _SC_PII_SOCKET_4 = 55;

const int _SC_PII_INTERNET_4 = 56;

const int _SC_PII_OSI_4 = 57;

const int _SC_POLL_4 = 58;

const int _SC_SELECT_4 = 59;

const int _SC_UIO_MAXIOV_4 = 60;

const int _SC_IOV_MAX_4 = 60;

const int _SC_PII_INTERNET_STREAM_4 = 61;

const int _SC_PII_INTERNET_DGRAM_4 = 62;

const int _SC_PII_OSI_COTS_4 = 63;

const int _SC_PII_OSI_CLTS_4 = 64;

const int _SC_PII_OSI_M_4 = 65;

const int _SC_T_IOV_MAX_4 = 66;

const int _SC_THREADS_4 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_4 = 68;

const int _SC_GETGR_R_SIZE_MAX_4 = 69;

const int _SC_GETPW_R_SIZE_MAX_4 = 70;

const int _SC_LOGIN_NAME_MAX_4 = 71;

const int _SC_TTY_NAME_MAX_4 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_4 = 73;

const int _SC_THREAD_KEYS_MAX_4 = 74;

const int _SC_THREAD_STACK_MIN_4 = 75;

const int _SC_THREAD_THREADS_MAX_4 = 76;

const int _SC_THREAD_ATTR_STACKADDR_4 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_4 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_4 = 79;

const int _SC_THREAD_PRIO_INHERIT_4 = 80;

const int _SC_THREAD_PRIO_PROTECT_4 = 81;

const int _SC_THREAD_PROCESS_SHARED_4 = 82;

const int _SC_NPROCESSORS_CONF_4 = 83;

const int _SC_NPROCESSORS_ONLN_4 = 84;

const int _SC_PHYS_PAGES_4 = 85;

const int _SC_AVPHYS_PAGES_4 = 86;

const int _SC_ATEXIT_MAX_4 = 87;

const int _SC_PASS_MAX_4 = 88;

const int _SC_XOPEN_VERSION_4 = 89;

const int _SC_XOPEN_XCU_VERSION_4 = 90;

const int _SC_XOPEN_UNIX_4 = 91;

const int _SC_XOPEN_CRYPT_4 = 92;

const int _SC_XOPEN_ENH_I18N_4 = 93;

const int _SC_XOPEN_SHM_4 = 94;

const int _SC_2_CHAR_TERM_4 = 95;

const int _SC_2_C_VERSION_4 = 96;

const int _SC_2_UPE_4 = 97;

const int _SC_XOPEN_XPG2_4 = 98;

const int _SC_XOPEN_XPG3_4 = 99;

const int _SC_XOPEN_XPG4_4 = 100;

const int _SC_CHAR_BIT_4 = 101;

const int _SC_CHAR_MAX_4 = 102;

const int _SC_CHAR_MIN_4 = 103;

const int _SC_INT_MAX_4 = 104;

const int _SC_INT_MIN_4 = 105;

const int _SC_LONG_BIT_4 = 106;

const int _SC_WORD_BIT_4 = 107;

const int _SC_MB_LEN_MAX_4 = 108;

const int _SC_NZERO_4 = 109;

const int _SC_SSIZE_MAX_4 = 110;

const int _SC_SCHAR_MAX_4 = 111;

const int _SC_SCHAR_MIN_4 = 112;

const int _SC_SHRT_MAX_4 = 113;

const int _SC_SHRT_MIN_4 = 114;

const int _SC_UCHAR_MAX_4 = 115;

const int _SC_UINT_MAX_4 = 116;

const int _SC_ULONG_MAX_4 = 117;

const int _SC_USHRT_MAX_4 = 118;

const int _SC_NL_ARGMAX_4 = 119;

const int _SC_NL_LANGMAX_4 = 120;

const int _SC_NL_MSGMAX_4 = 121;

const int _SC_NL_NMAX_4 = 122;

const int _SC_NL_SETMAX_4 = 123;

const int _SC_NL_TEXTMAX_4 = 124;

const int _SC_XBS5_ILP32_OFF32_4 = 125;

const int _SC_XBS5_ILP32_OFFBIG_4 = 126;

const int _SC_XBS5_LP64_OFF64_4 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_4 = 128;

const int _SC_XOPEN_LEGACY_4 = 129;

const int _SC_XOPEN_REALTIME_4 = 130;

const int _SC_XOPEN_REALTIME_THREADS_4 = 131;

const int _SC_ADVISORY_INFO_4 = 132;

const int _SC_BARRIERS_4 = 133;

const int _SC_BASE_4 = 134;

const int _SC_C_LANG_SUPPORT_4 = 135;

const int _SC_C_LANG_SUPPORT_R_4 = 136;

const int _SC_CLOCK_SELECTION_4 = 137;

const int _SC_CPUTIME_4 = 138;

const int _SC_THREAD_CPUTIME_4 = 139;

const int _SC_DEVICE_IO_4 = 140;

const int _SC_DEVICE_SPECIFIC_4 = 141;

const int _SC_DEVICE_SPECIFIC_R_4 = 142;

const int _SC_FD_MGMT_4 = 143;

const int _SC_FIFO_4 = 144;

const int _SC_PIPE_4 = 145;

const int _SC_FILE_ATTRIBUTES_4 = 146;

const int _SC_FILE_LOCKING_4 = 147;

const int _SC_FILE_SYSTEM_4 = 148;

const int _SC_MONOTONIC_CLOCK_4 = 149;

const int _SC_MULTI_PROCESS_4 = 150;

const int _SC_SINGLE_PROCESS_4 = 151;

const int _SC_NETWORKING_4 = 152;

const int _SC_READER_WRITER_LOCKS_4 = 153;

const int _SC_SPIN_LOCKS_4 = 154;

const int _SC_REGEXP_4 = 155;

const int _SC_REGEX_VERSION_4 = 156;

const int _SC_SHELL_4 = 157;

const int _SC_SIGNALS_4 = 158;

const int _SC_SPAWN_4 = 159;

const int _SC_SPORADIC_SERVER_4 = 160;

const int _SC_THREAD_SPORADIC_SERVER_4 = 161;

const int _SC_SYSTEM_DATABASE_4 = 162;

const int _SC_SYSTEM_DATABASE_R_4 = 163;

const int _SC_TIMEOUTS_4 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_4 = 165;

const int _SC_USER_GROUPS_4 = 166;

const int _SC_USER_GROUPS_R_4 = 167;

const int _SC_2_PBS_4 = 168;

const int _SC_2_PBS_ACCOUNTING_4 = 169;

const int _SC_2_PBS_LOCATE_4 = 170;

const int _SC_2_PBS_MESSAGE_4 = 171;

const int _SC_2_PBS_TRACK_4 = 172;

const int _SC_SYMLOOP_MAX_4 = 173;

const int _SC_STREAMS_4 = 174;

const int _SC_2_PBS_CHECKPOINT_4 = 175;

const int _SC_V6_ILP32_OFF32_4 = 176;

const int _SC_V6_ILP32_OFFBIG_4 = 177;

const int _SC_V6_LP64_OFF64_4 = 178;

const int _SC_V6_LPBIG_OFFBIG_4 = 179;

const int _SC_HOST_NAME_MAX_4 = 180;

const int _SC_TRACE_4 = 181;

const int _SC_TRACE_EVENT_FILTER_4 = 182;

const int _SC_TRACE_INHERIT_4 = 183;

const int _SC_TRACE_LOG_4 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_4 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_4 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_4 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_4 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_4 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_4 = 190;

const int _SC_LEVEL2_CACHE_SIZE_4 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_4 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_4 = 193;

const int _SC_LEVEL3_CACHE_SIZE_4 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_4 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_4 = 196;

const int _SC_LEVEL4_CACHE_SIZE_4 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_4 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_4 = 199;

const int _SC_IPV6_4 = 235;

const int _SC_RAW_SOCKETS_4 = 236;

const int _SC_V7_ILP32_OFF32_4 = 237;

const int _SC_V7_ILP32_OFFBIG_4 = 238;

const int _SC_V7_LP64_OFF64_4 = 239;

const int _SC_V7_LPBIG_OFFBIG_4 = 240;

const int _SC_SS_REPL_MAX_4 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_4 = 242;

const int _SC_TRACE_NAME_MAX_4 = 243;

const int _SC_TRACE_SYS_MAX_4 = 244;

const int _SC_TRACE_USER_EVENT_MAX_4 = 245;

const int _SC_XOPEN_STREAMS_4 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_4 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_4 = 248;

const int _CS_PATH_4 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_4 = 1;

const int _CS_GNU_LIBC_VERSION_4 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_4 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_4 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_4 = 5;

const int _CS_LFS_CFLAGS_4 = 1000;

const int _CS_LFS_LDFLAGS_4 = 1001;

const int _CS_LFS_LIBS_4 = 1002;

const int _CS_LFS_LINTFLAGS_4 = 1003;

const int _CS_LFS64_CFLAGS_4 = 1004;

const int _CS_LFS64_LDFLAGS_4 = 1005;

const int _CS_LFS64_LIBS_4 = 1006;

const int _CS_LFS64_LINTFLAGS_4 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_4 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_4 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_4 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_4 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_4 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_4 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_4 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_4 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_4 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_4 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_4 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_4 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_4 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_4 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_4 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_4 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_4 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_4 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_4 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_4 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_4 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_4 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_4 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_4 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_4 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_4 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_4 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_4 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_4 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_4 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_4 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_4 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_4 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_4 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_4 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_4 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_4 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_4 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_4 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_4 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_4 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_4 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_4 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_4 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_4 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_4 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_4 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_4 = 1147;

const int _CS_V6_ENV_4 = 1148;

const int _CS_V7_ENV_4 = 1149;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int _PC_LINK_MAX_5 = 0;

const int _PC_MAX_CANON_5 = 1;

const int _PC_MAX_INPUT_5 = 2;

const int _PC_NAME_MAX_5 = 3;

const int _PC_PATH_MAX_5 = 4;

const int _PC_PIPE_BUF_5 = 5;

const int _PC_CHOWN_RESTRICTED_5 = 6;

const int _PC_NO_TRUNC_5 = 7;

const int _PC_VDISABLE_5 = 8;

const int _PC_SYNC_IO_5 = 9;

const int _PC_ASYNC_IO_5 = 10;

const int _PC_PRIO_IO_5 = 11;

const int _PC_SOCK_MAXBUF_5 = 12;

const int _PC_FILESIZEBITS_5 = 13;

const int _PC_REC_INCR_XFER_SIZE_5 = 14;

const int _PC_REC_MAX_XFER_SIZE_5 = 15;

const int _PC_REC_MIN_XFER_SIZE_5 = 16;

const int _PC_REC_XFER_ALIGN_5 = 17;

const int _PC_ALLOC_SIZE_MIN_5 = 18;

const int _PC_SYMLINK_MAX_5 = 19;

const int _PC_2_SYMLINKS_5 = 20;

const int _SC_ARG_MAX_5 = 0;

const int _SC_CHILD_MAX_5 = 1;

const int _SC_CLK_TCK_5 = 2;

const int _SC_NGROUPS_MAX_5 = 3;

const int _SC_OPEN_MAX_5 = 4;

const int _SC_STREAM_MAX_5 = 5;

const int _SC_TZNAME_MAX_5 = 6;

const int _SC_JOB_CONTROL_5 = 7;

const int _SC_SAVED_IDS_5 = 8;

const int _SC_REALTIME_SIGNALS_5 = 9;

const int _SC_PRIORITY_SCHEDULING_5 = 10;

const int _SC_TIMERS_5 = 11;

const int _SC_ASYNCHRONOUS_IO_5 = 12;

const int _SC_PRIORITIZED_IO_5 = 13;

const int _SC_SYNCHRONIZED_IO_5 = 14;

const int _SC_FSYNC_5 = 15;

const int _SC_MAPPED_FILES_5 = 16;

const int _SC_MEMLOCK_5 = 17;

const int _SC_MEMLOCK_RANGE_5 = 18;

const int _SC_MEMORY_PROTECTION_5 = 19;

const int _SC_MESSAGE_PASSING_5 = 20;

const int _SC_SEMAPHORES_5 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_5 = 22;

const int _SC_AIO_LISTIO_MAX_5 = 23;

const int _SC_AIO_MAX_5 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_5 = 25;

const int _SC_DELAYTIMER_MAX_5 = 26;

const int _SC_MQ_OPEN_MAX_5 = 27;

const int _SC_MQ_PRIO_MAX_5 = 28;

const int _SC_VERSION_5 = 29;

const int _SC_PAGESIZE_5 = 30;

const int _SC_RTSIG_MAX_5 = 31;

const int _SC_SEM_NSEMS_MAX_5 = 32;

const int _SC_SEM_VALUE_MAX_5 = 33;

const int _SC_SIGQUEUE_MAX_5 = 34;

const int _SC_TIMER_MAX_5 = 35;

const int _SC_BC_BASE_MAX_5 = 36;

const int _SC_BC_DIM_MAX_5 = 37;

const int _SC_BC_SCALE_MAX_5 = 38;

const int _SC_BC_STRING_MAX_5 = 39;

const int _SC_COLL_WEIGHTS_MAX_5 = 40;

const int _SC_EQUIV_CLASS_MAX_5 = 41;

const int _SC_EXPR_NEST_MAX_5 = 42;

const int _SC_LINE_MAX_5 = 43;

const int _SC_RE_DUP_MAX_5 = 44;

const int _SC_CHARCLASS_NAME_MAX_5 = 45;

const int _SC_2_VERSION_5 = 46;

const int _SC_2_C_BIND_5 = 47;

const int _SC_2_C_DEV_5 = 48;

const int _SC_2_FORT_DEV_5 = 49;

const int _SC_2_FORT_RUN_5 = 50;

const int _SC_2_SW_DEV_5 = 51;

const int _SC_2_LOCALEDEF_5 = 52;

const int _SC_PII_5 = 53;

const int _SC_PII_XTI_5 = 54;

const int _SC_PII_SOCKET_5 = 55;

const int _SC_PII_INTERNET_5 = 56;

const int _SC_PII_OSI_5 = 57;

const int _SC_POLL_5 = 58;

const int _SC_SELECT_5 = 59;

const int _SC_UIO_MAXIOV_5 = 60;

const int _SC_IOV_MAX_5 = 60;

const int _SC_PII_INTERNET_STREAM_5 = 61;

const int _SC_PII_INTERNET_DGRAM_5 = 62;

const int _SC_PII_OSI_COTS_5 = 63;

const int _SC_PII_OSI_CLTS_5 = 64;

const int _SC_PII_OSI_M_5 = 65;

const int _SC_T_IOV_MAX_5 = 66;

const int _SC_THREADS_5 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_5 = 68;

const int _SC_GETGR_R_SIZE_MAX_5 = 69;

const int _SC_GETPW_R_SIZE_MAX_5 = 70;

const int _SC_LOGIN_NAME_MAX_5 = 71;

const int _SC_TTY_NAME_MAX_5 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_5 = 73;

const int _SC_THREAD_KEYS_MAX_5 = 74;

const int _SC_THREAD_STACK_MIN_5 = 75;

const int _SC_THREAD_THREADS_MAX_5 = 76;

const int _SC_THREAD_ATTR_STACKADDR_5 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_5 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_5 = 79;

const int _SC_THREAD_PRIO_INHERIT_5 = 80;

const int _SC_THREAD_PRIO_PROTECT_5 = 81;

const int _SC_THREAD_PROCESS_SHARED_5 = 82;

const int _SC_NPROCESSORS_CONF_5 = 83;

const int _SC_NPROCESSORS_ONLN_5 = 84;

const int _SC_PHYS_PAGES_5 = 85;

const int _SC_AVPHYS_PAGES_5 = 86;

const int _SC_ATEXIT_MAX_5 = 87;

const int _SC_PASS_MAX_5 = 88;

const int _SC_XOPEN_VERSION_5 = 89;

const int _SC_XOPEN_XCU_VERSION_5 = 90;

const int _SC_XOPEN_UNIX_5 = 91;

const int _SC_XOPEN_CRYPT_5 = 92;

const int _SC_XOPEN_ENH_I18N_5 = 93;

const int _SC_XOPEN_SHM_5 = 94;

const int _SC_2_CHAR_TERM_5 = 95;

const int _SC_2_C_VERSION_5 = 96;

const int _SC_2_UPE_5 = 97;

const int _SC_XOPEN_XPG2_5 = 98;

const int _SC_XOPEN_XPG3_5 = 99;

const int _SC_XOPEN_XPG4_5 = 100;

const int _SC_CHAR_BIT_5 = 101;

const int _SC_CHAR_MAX_5 = 102;

const int _SC_CHAR_MIN_5 = 103;

const int _SC_INT_MAX_5 = 104;

const int _SC_INT_MIN_5 = 105;

const int _SC_LONG_BIT_5 = 106;

const int _SC_WORD_BIT_5 = 107;

const int _SC_MB_LEN_MAX_5 = 108;

const int _SC_NZERO_5 = 109;

const int _SC_SSIZE_MAX_5 = 110;

const int _SC_SCHAR_MAX_5 = 111;

const int _SC_SCHAR_MIN_5 = 112;

const int _SC_SHRT_MAX_5 = 113;

const int _SC_SHRT_MIN_5 = 114;

const int _SC_UCHAR_MAX_5 = 115;

const int _SC_UINT_MAX_5 = 116;

const int _SC_ULONG_MAX_5 = 117;

const int _SC_USHRT_MAX_5 = 118;

const int _SC_NL_ARGMAX_5 = 119;

const int _SC_NL_LANGMAX_5 = 120;

const int _SC_NL_MSGMAX_5 = 121;

const int _SC_NL_NMAX_5 = 122;

const int _SC_NL_SETMAX_5 = 123;

const int _SC_NL_TEXTMAX_5 = 124;

const int _SC_XBS5_ILP32_OFF32_5 = 125;

const int _SC_XBS5_ILP32_OFFBIG_5 = 126;

const int _SC_XBS5_LP64_OFF64_5 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_5 = 128;

const int _SC_XOPEN_LEGACY_5 = 129;

const int _SC_XOPEN_REALTIME_5 = 130;

const int _SC_XOPEN_REALTIME_THREADS_5 = 131;

const int _SC_ADVISORY_INFO_5 = 132;

const int _SC_BARRIERS_5 = 133;

const int _SC_BASE_5 = 134;

const int _SC_C_LANG_SUPPORT_5 = 135;

const int _SC_C_LANG_SUPPORT_R_5 = 136;

const int _SC_CLOCK_SELECTION_5 = 137;

const int _SC_CPUTIME_5 = 138;

const int _SC_THREAD_CPUTIME_5 = 139;

const int _SC_DEVICE_IO_5 = 140;

const int _SC_DEVICE_SPECIFIC_5 = 141;

const int _SC_DEVICE_SPECIFIC_R_5 = 142;

const int _SC_FD_MGMT_5 = 143;

const int _SC_FIFO_5 = 144;

const int _SC_PIPE_5 = 145;

const int _SC_FILE_ATTRIBUTES_5 = 146;

const int _SC_FILE_LOCKING_5 = 147;

const int _SC_FILE_SYSTEM_5 = 148;

const int _SC_MONOTONIC_CLOCK_5 = 149;

const int _SC_MULTI_PROCESS_5 = 150;

const int _SC_SINGLE_PROCESS_5 = 151;

const int _SC_NETWORKING_5 = 152;

const int _SC_READER_WRITER_LOCKS_5 = 153;

const int _SC_SPIN_LOCKS_5 = 154;

const int _SC_REGEXP_5 = 155;

const int _SC_REGEX_VERSION_5 = 156;

const int _SC_SHELL_5 = 157;

const int _SC_SIGNALS_5 = 158;

const int _SC_SPAWN_5 = 159;

const int _SC_SPORADIC_SERVER_5 = 160;

const int _SC_THREAD_SPORADIC_SERVER_5 = 161;

const int _SC_SYSTEM_DATABASE_5 = 162;

const int _SC_SYSTEM_DATABASE_R_5 = 163;

const int _SC_TIMEOUTS_5 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_5 = 165;

const int _SC_USER_GROUPS_5 = 166;

const int _SC_USER_GROUPS_R_5 = 167;

const int _SC_2_PBS_5 = 168;

const int _SC_2_PBS_ACCOUNTING_5 = 169;

const int _SC_2_PBS_LOCATE_5 = 170;

const int _SC_2_PBS_MESSAGE_5 = 171;

const int _SC_2_PBS_TRACK_5 = 172;

const int _SC_SYMLOOP_MAX_5 = 173;

const int _SC_STREAMS_5 = 174;

const int _SC_2_PBS_CHECKPOINT_5 = 175;

const int _SC_V6_ILP32_OFF32_5 = 176;

const int _SC_V6_ILP32_OFFBIG_5 = 177;

const int _SC_V6_LP64_OFF64_5 = 178;

const int _SC_V6_LPBIG_OFFBIG_5 = 179;

const int _SC_HOST_NAME_MAX_5 = 180;

const int _SC_TRACE_5 = 181;

const int _SC_TRACE_EVENT_FILTER_5 = 182;

const int _SC_TRACE_INHERIT_5 = 183;

const int _SC_TRACE_LOG_5 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_5 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_5 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_5 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_5 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_5 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_5 = 190;

const int _SC_LEVEL2_CACHE_SIZE_5 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_5 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_5 = 193;

const int _SC_LEVEL3_CACHE_SIZE_5 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_5 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_5 = 196;

const int _SC_LEVEL4_CACHE_SIZE_5 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_5 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_5 = 199;

const int _SC_IPV6_5 = 235;

const int _SC_RAW_SOCKETS_5 = 236;

const int _SC_V7_ILP32_OFF32_5 = 237;

const int _SC_V7_ILP32_OFFBIG_5 = 238;

const int _SC_V7_LP64_OFF64_5 = 239;

const int _SC_V7_LPBIG_OFFBIG_5 = 240;

const int _SC_SS_REPL_MAX_5 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_5 = 242;

const int _SC_TRACE_NAME_MAX_5 = 243;

const int _SC_TRACE_SYS_MAX_5 = 244;

const int _SC_TRACE_USER_EVENT_MAX_5 = 245;

const int _SC_XOPEN_STREAMS_5 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_5 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_5 = 248;

const int _CS_PATH_5 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_5 = 1;

const int _CS_GNU_LIBC_VERSION_5 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_5 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_5 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_5 = 5;

const int _CS_LFS_CFLAGS_5 = 1000;

const int _CS_LFS_LDFLAGS_5 = 1001;

const int _CS_LFS_LIBS_5 = 1002;

const int _CS_LFS_LINTFLAGS_5 = 1003;

const int _CS_LFS64_CFLAGS_5 = 1004;

const int _CS_LFS64_LDFLAGS_5 = 1005;

const int _CS_LFS64_LIBS_5 = 1006;

const int _CS_LFS64_LINTFLAGS_5 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_5 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_5 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_5 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_5 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_5 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_5 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_5 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_5 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_5 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_5 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_5 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_5 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_5 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_5 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_5 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_5 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_5 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_5 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_5 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_5 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_5 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_5 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_5 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_5 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_5 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_5 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_5 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_5 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_5 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_5 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_5 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_5 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_5 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_5 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_5 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_5 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_5 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_5 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_5 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_5 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_5 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_5 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_5 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_5 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_5 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_5 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_5 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_5 = 1147;

const int _CS_V6_ENV_5 = 1148;

const int _CS_V7_ENV_5 = 1149;

const int _PC_LINK_MAX_6 = 0;

const int _PC_MAX_CANON_6 = 1;

const int _PC_MAX_INPUT_6 = 2;

const int _PC_NAME_MAX_6 = 3;

const int _PC_PATH_MAX_6 = 4;

const int _PC_PIPE_BUF_6 = 5;

const int _PC_CHOWN_RESTRICTED_6 = 6;

const int _PC_NO_TRUNC_6 = 7;

const int _PC_VDISABLE_6 = 8;

const int _PC_SYNC_IO_6 = 9;

const int _PC_ASYNC_IO_6 = 10;

const int _PC_PRIO_IO_6 = 11;

const int _PC_SOCK_MAXBUF_6 = 12;

const int _PC_FILESIZEBITS_6 = 13;

const int _PC_REC_INCR_XFER_SIZE_6 = 14;

const int _PC_REC_MAX_XFER_SIZE_6 = 15;

const int _PC_REC_MIN_XFER_SIZE_6 = 16;

const int _PC_REC_XFER_ALIGN_6 = 17;

const int _PC_ALLOC_SIZE_MIN_6 = 18;

const int _PC_SYMLINK_MAX_6 = 19;

const int _PC_2_SYMLINKS_6 = 20;

const int _SC_ARG_MAX_6 = 0;

const int _SC_CHILD_MAX_6 = 1;

const int _SC_CLK_TCK_6 = 2;

const int _SC_NGROUPS_MAX_6 = 3;

const int _SC_OPEN_MAX_6 = 4;

const int _SC_STREAM_MAX_6 = 5;

const int _SC_TZNAME_MAX_6 = 6;

const int _SC_JOB_CONTROL_6 = 7;

const int _SC_SAVED_IDS_6 = 8;

const int _SC_REALTIME_SIGNALS_6 = 9;

const int _SC_PRIORITY_SCHEDULING_6 = 10;

const int _SC_TIMERS_6 = 11;

const int _SC_ASYNCHRONOUS_IO_6 = 12;

const int _SC_PRIORITIZED_IO_6 = 13;

const int _SC_SYNCHRONIZED_IO_6 = 14;

const int _SC_FSYNC_6 = 15;

const int _SC_MAPPED_FILES_6 = 16;

const int _SC_MEMLOCK_6 = 17;

const int _SC_MEMLOCK_RANGE_6 = 18;

const int _SC_MEMORY_PROTECTION_6 = 19;

const int _SC_MESSAGE_PASSING_6 = 20;

const int _SC_SEMAPHORES_6 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_6 = 22;

const int _SC_AIO_LISTIO_MAX_6 = 23;

const int _SC_AIO_MAX_6 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_6 = 25;

const int _SC_DELAYTIMER_MAX_6 = 26;

const int _SC_MQ_OPEN_MAX_6 = 27;

const int _SC_MQ_PRIO_MAX_6 = 28;

const int _SC_VERSION_6 = 29;

const int _SC_PAGESIZE_6 = 30;

const int _SC_RTSIG_MAX_6 = 31;

const int _SC_SEM_NSEMS_MAX_6 = 32;

const int _SC_SEM_VALUE_MAX_6 = 33;

const int _SC_SIGQUEUE_MAX_6 = 34;

const int _SC_TIMER_MAX_6 = 35;

const int _SC_BC_BASE_MAX_6 = 36;

const int _SC_BC_DIM_MAX_6 = 37;

const int _SC_BC_SCALE_MAX_6 = 38;

const int _SC_BC_STRING_MAX_6 = 39;

const int _SC_COLL_WEIGHTS_MAX_6 = 40;

const int _SC_EQUIV_CLASS_MAX_6 = 41;

const int _SC_EXPR_NEST_MAX_6 = 42;

const int _SC_LINE_MAX_6 = 43;

const int _SC_RE_DUP_MAX_6 = 44;

const int _SC_CHARCLASS_NAME_MAX_6 = 45;

const int _SC_2_VERSION_6 = 46;

const int _SC_2_C_BIND_6 = 47;

const int _SC_2_C_DEV_6 = 48;

const int _SC_2_FORT_DEV_6 = 49;

const int _SC_2_FORT_RUN_6 = 50;

const int _SC_2_SW_DEV_6 = 51;

const int _SC_2_LOCALEDEF_6 = 52;

const int _SC_PII_6 = 53;

const int _SC_PII_XTI_6 = 54;

const int _SC_PII_SOCKET_6 = 55;

const int _SC_PII_INTERNET_6 = 56;

const int _SC_PII_OSI_6 = 57;

const int _SC_POLL_6 = 58;

const int _SC_SELECT_6 = 59;

const int _SC_UIO_MAXIOV_6 = 60;

const int _SC_IOV_MAX_6 = 60;

const int _SC_PII_INTERNET_STREAM_6 = 61;

const int _SC_PII_INTERNET_DGRAM_6 = 62;

const int _SC_PII_OSI_COTS_6 = 63;

const int _SC_PII_OSI_CLTS_6 = 64;

const int _SC_PII_OSI_M_6 = 65;

const int _SC_T_IOV_MAX_6 = 66;

const int _SC_THREADS_6 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_6 = 68;

const int _SC_GETGR_R_SIZE_MAX_6 = 69;

const int _SC_GETPW_R_SIZE_MAX_6 = 70;

const int _SC_LOGIN_NAME_MAX_6 = 71;

const int _SC_TTY_NAME_MAX_6 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_6 = 73;

const int _SC_THREAD_KEYS_MAX_6 = 74;

const int _SC_THREAD_STACK_MIN_6 = 75;

const int _SC_THREAD_THREADS_MAX_6 = 76;

const int _SC_THREAD_ATTR_STACKADDR_6 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_6 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_6 = 79;

const int _SC_THREAD_PRIO_INHERIT_6 = 80;

const int _SC_THREAD_PRIO_PROTECT_6 = 81;

const int _SC_THREAD_PROCESS_SHARED_6 = 82;

const int _SC_NPROCESSORS_CONF_6 = 83;

const int _SC_NPROCESSORS_ONLN_6 = 84;

const int _SC_PHYS_PAGES_6 = 85;

const int _SC_AVPHYS_PAGES_6 = 86;

const int _SC_ATEXIT_MAX_6 = 87;

const int _SC_PASS_MAX_6 = 88;

const int _SC_XOPEN_VERSION_6 = 89;

const int _SC_XOPEN_XCU_VERSION_6 = 90;

const int _SC_XOPEN_UNIX_6 = 91;

const int _SC_XOPEN_CRYPT_6 = 92;

const int _SC_XOPEN_ENH_I18N_6 = 93;

const int _SC_XOPEN_SHM_6 = 94;

const int _SC_2_CHAR_TERM_6 = 95;

const int _SC_2_C_VERSION_6 = 96;

const int _SC_2_UPE_6 = 97;

const int _SC_XOPEN_XPG2_6 = 98;

const int _SC_XOPEN_XPG3_6 = 99;

const int _SC_XOPEN_XPG4_6 = 100;

const int _SC_CHAR_BIT_6 = 101;

const int _SC_CHAR_MAX_6 = 102;

const int _SC_CHAR_MIN_6 = 103;

const int _SC_INT_MAX_6 = 104;

const int _SC_INT_MIN_6 = 105;

const int _SC_LONG_BIT_6 = 106;

const int _SC_WORD_BIT_6 = 107;

const int _SC_MB_LEN_MAX_6 = 108;

const int _SC_NZERO_6 = 109;

const int _SC_SSIZE_MAX_6 = 110;

const int _SC_SCHAR_MAX_6 = 111;

const int _SC_SCHAR_MIN_6 = 112;

const int _SC_SHRT_MAX_6 = 113;

const int _SC_SHRT_MIN_6 = 114;

const int _SC_UCHAR_MAX_6 = 115;

const int _SC_UINT_MAX_6 = 116;

const int _SC_ULONG_MAX_6 = 117;

const int _SC_USHRT_MAX_6 = 118;

const int _SC_NL_ARGMAX_6 = 119;

const int _SC_NL_LANGMAX_6 = 120;

const int _SC_NL_MSGMAX_6 = 121;

const int _SC_NL_NMAX_6 = 122;

const int _SC_NL_SETMAX_6 = 123;

const int _SC_NL_TEXTMAX_6 = 124;

const int _SC_XBS5_ILP32_OFF32_6 = 125;

const int _SC_XBS5_ILP32_OFFBIG_6 = 126;

const int _SC_XBS5_LP64_OFF64_6 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_6 = 128;

const int _SC_XOPEN_LEGACY_6 = 129;

const int _SC_XOPEN_REALTIME_6 = 130;

const int _SC_XOPEN_REALTIME_THREADS_6 = 131;

const int _SC_ADVISORY_INFO_6 = 132;

const int _SC_BARRIERS_6 = 133;

const int _SC_BASE_6 = 134;

const int _SC_C_LANG_SUPPORT_6 = 135;

const int _SC_C_LANG_SUPPORT_R_6 = 136;

const int _SC_CLOCK_SELECTION_6 = 137;

const int _SC_CPUTIME_6 = 138;

const int _SC_THREAD_CPUTIME_6 = 139;

const int _SC_DEVICE_IO_6 = 140;

const int _SC_DEVICE_SPECIFIC_6 = 141;

const int _SC_DEVICE_SPECIFIC_R_6 = 142;

const int _SC_FD_MGMT_6 = 143;

const int _SC_FIFO_6 = 144;

const int _SC_PIPE_6 = 145;

const int _SC_FILE_ATTRIBUTES_6 = 146;

const int _SC_FILE_LOCKING_6 = 147;

const int _SC_FILE_SYSTEM_6 = 148;

const int _SC_MONOTONIC_CLOCK_6 = 149;

const int _SC_MULTI_PROCESS_6 = 150;

const int _SC_SINGLE_PROCESS_6 = 151;

const int _SC_NETWORKING_6 = 152;

const int _SC_READER_WRITER_LOCKS_6 = 153;

const int _SC_SPIN_LOCKS_6 = 154;

const int _SC_REGEXP_6 = 155;

const int _SC_REGEX_VERSION_6 = 156;

const int _SC_SHELL_6 = 157;

const int _SC_SIGNALS_6 = 158;

const int _SC_SPAWN_6 = 159;

const int _SC_SPORADIC_SERVER_6 = 160;

const int _SC_THREAD_SPORADIC_SERVER_6 = 161;

const int _SC_SYSTEM_DATABASE_6 = 162;

const int _SC_SYSTEM_DATABASE_R_6 = 163;

const int _SC_TIMEOUTS_6 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_6 = 165;

const int _SC_USER_GROUPS_6 = 166;

const int _SC_USER_GROUPS_R_6 = 167;

const int _SC_2_PBS_6 = 168;

const int _SC_2_PBS_ACCOUNTING_6 = 169;

const int _SC_2_PBS_LOCATE_6 = 170;

const int _SC_2_PBS_MESSAGE_6 = 171;

const int _SC_2_PBS_TRACK_6 = 172;

const int _SC_SYMLOOP_MAX_6 = 173;

const int _SC_STREAMS_6 = 174;

const int _SC_2_PBS_CHECKPOINT_6 = 175;

const int _SC_V6_ILP32_OFF32_6 = 176;

const int _SC_V6_ILP32_OFFBIG_6 = 177;

const int _SC_V6_LP64_OFF64_6 = 178;

const int _SC_V6_LPBIG_OFFBIG_6 = 179;

const int _SC_HOST_NAME_MAX_6 = 180;

const int _SC_TRACE_6 = 181;

const int _SC_TRACE_EVENT_FILTER_6 = 182;

const int _SC_TRACE_INHERIT_6 = 183;

const int _SC_TRACE_LOG_6 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_6 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_6 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_6 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_6 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_6 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_6 = 190;

const int _SC_LEVEL2_CACHE_SIZE_6 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_6 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_6 = 193;

const int _SC_LEVEL3_CACHE_SIZE_6 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_6 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_6 = 196;

const int _SC_LEVEL4_CACHE_SIZE_6 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_6 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_6 = 199;

const int _SC_IPV6_6 = 235;

const int _SC_RAW_SOCKETS_6 = 236;

const int _SC_V7_ILP32_OFF32_6 = 237;

const int _SC_V7_ILP32_OFFBIG_6 = 238;

const int _SC_V7_LP64_OFF64_6 = 239;

const int _SC_V7_LPBIG_OFFBIG_6 = 240;

const int _SC_SS_REPL_MAX_6 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_6 = 242;

const int _SC_TRACE_NAME_MAX_6 = 243;

const int _SC_TRACE_SYS_MAX_6 = 244;

const int _SC_TRACE_USER_EVENT_MAX_6 = 245;

const int _SC_XOPEN_STREAMS_6 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_6 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_6 = 248;

const int _CS_PATH_6 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_6 = 1;

const int _CS_GNU_LIBC_VERSION_6 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_6 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_6 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_6 = 5;

const int _CS_LFS_CFLAGS_6 = 1000;

const int _CS_LFS_LDFLAGS_6 = 1001;

const int _CS_LFS_LIBS_6 = 1002;

const int _CS_LFS_LINTFLAGS_6 = 1003;

const int _CS_LFS64_CFLAGS_6 = 1004;

const int _CS_LFS64_LDFLAGS_6 = 1005;

const int _CS_LFS64_LIBS_6 = 1006;

const int _CS_LFS64_LINTFLAGS_6 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_6 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_6 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_6 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_6 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_6 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_6 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_6 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_6 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_6 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_6 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_6 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_6 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_6 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_6 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_6 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_6 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_6 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_6 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_6 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_6 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_6 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_6 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_6 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_6 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_6 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_6 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_6 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_6 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_6 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_6 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_6 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_6 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_6 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_6 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_6 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_6 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_6 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_6 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_6 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_6 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_6 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_6 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_6 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_6 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_6 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_6 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_6 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_6 = 1147;

const int _CS_V6_ENV_6 = 1148;

const int _CS_V7_ENV_6 = 1149;

const int _ISupper_1 = 256;

const int _ISlower_1 = 512;

const int _ISalpha_1 = 1024;

const int _ISdigit_1 = 2048;

const int _ISxdigit_1 = 4096;

const int _ISspace_1 = 8192;

const int _ISprint_1 = 16384;

const int _ISgraph_1 = 32768;

const int _ISblank_1 = 1;

const int _IScntrl_1 = 2;

const int _ISpunct_1 = 4;

const int _ISalnum_1 = 8;

const int PTHREAD_CREATE_JOINABLE_1 = 0;

const int PTHREAD_CREATE_DETACHED_1 = 1;

const int PTHREAD_MUTEX_TIMED_NP_1 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_1 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_1 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_1 = 3;

const int PTHREAD_MUTEX_NORMAL_1 = 0;

const int PTHREAD_MUTEX_RECURSIVE_1 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_1 = 2;

const int PTHREAD_MUTEX_DEFAULT_1 = 0;

const int PTHREAD_MUTEX_STALLED_1 = 0;

const int PTHREAD_MUTEX_STALLED_NP_1 = 0;

const int PTHREAD_MUTEX_ROBUST_1 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_1 = 1;

const int PTHREAD_PRIO_NONE_1 = 0;

const int PTHREAD_PRIO_INHERIT_1 = 1;

const int PTHREAD_PRIO_PROTECT_1 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_1 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_1 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_1 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_1 = 0;

const int PTHREAD_INHERIT_SCHED_1 = 0;

const int PTHREAD_EXPLICIT_SCHED_1 = 1;

const int PTHREAD_SCOPE_SYSTEM_1 = 0;

const int PTHREAD_SCOPE_PROCESS_1 = 1;

const int PTHREAD_PROCESS_PRIVATE_1 = 0;

const int PTHREAD_PROCESS_SHARED_1 = 1;

const int PTHREAD_CANCEL_ENABLE_1 = 0;

const int PTHREAD_CANCEL_DISABLE_1 = 1;

const int PTHREAD_CANCEL_DEFERRED_1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_1 = 1;

const int _PC_LINK_MAX_7 = 0;

const int _PC_MAX_CANON_7 = 1;

const int _PC_MAX_INPUT_7 = 2;

const int _PC_NAME_MAX_7 = 3;

const int _PC_PATH_MAX_7 = 4;

const int _PC_PIPE_BUF_7 = 5;

const int _PC_CHOWN_RESTRICTED_7 = 6;

const int _PC_NO_TRUNC_7 = 7;

const int _PC_VDISABLE_7 = 8;

const int _PC_SYNC_IO_7 = 9;

const int _PC_ASYNC_IO_7 = 10;

const int _PC_PRIO_IO_7 = 11;

const int _PC_SOCK_MAXBUF_7 = 12;

const int _PC_FILESIZEBITS_7 = 13;

const int _PC_REC_INCR_XFER_SIZE_7 = 14;

const int _PC_REC_MAX_XFER_SIZE_7 = 15;

const int _PC_REC_MIN_XFER_SIZE_7 = 16;

const int _PC_REC_XFER_ALIGN_7 = 17;

const int _PC_ALLOC_SIZE_MIN_7 = 18;

const int _PC_SYMLINK_MAX_7 = 19;

const int _PC_2_SYMLINKS_7 = 20;

const int _SC_ARG_MAX_7 = 0;

const int _SC_CHILD_MAX_7 = 1;

const int _SC_CLK_TCK_7 = 2;

const int _SC_NGROUPS_MAX_7 = 3;

const int _SC_OPEN_MAX_7 = 4;

const int _SC_STREAM_MAX_7 = 5;

const int _SC_TZNAME_MAX_7 = 6;

const int _SC_JOB_CONTROL_7 = 7;

const int _SC_SAVED_IDS_7 = 8;

const int _SC_REALTIME_SIGNALS_7 = 9;

const int _SC_PRIORITY_SCHEDULING_7 = 10;

const int _SC_TIMERS_7 = 11;

const int _SC_ASYNCHRONOUS_IO_7 = 12;

const int _SC_PRIORITIZED_IO_7 = 13;

const int _SC_SYNCHRONIZED_IO_7 = 14;

const int _SC_FSYNC_7 = 15;

const int _SC_MAPPED_FILES_7 = 16;

const int _SC_MEMLOCK_7 = 17;

const int _SC_MEMLOCK_RANGE_7 = 18;

const int _SC_MEMORY_PROTECTION_7 = 19;

const int _SC_MESSAGE_PASSING_7 = 20;

const int _SC_SEMAPHORES_7 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_7 = 22;

const int _SC_AIO_LISTIO_MAX_7 = 23;

const int _SC_AIO_MAX_7 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_7 = 25;

const int _SC_DELAYTIMER_MAX_7 = 26;

const int _SC_MQ_OPEN_MAX_7 = 27;

const int _SC_MQ_PRIO_MAX_7 = 28;

const int _SC_VERSION_7 = 29;

const int _SC_PAGESIZE_7 = 30;

const int _SC_RTSIG_MAX_7 = 31;

const int _SC_SEM_NSEMS_MAX_7 = 32;

const int _SC_SEM_VALUE_MAX_7 = 33;

const int _SC_SIGQUEUE_MAX_7 = 34;

const int _SC_TIMER_MAX_7 = 35;

const int _SC_BC_BASE_MAX_7 = 36;

const int _SC_BC_DIM_MAX_7 = 37;

const int _SC_BC_SCALE_MAX_7 = 38;

const int _SC_BC_STRING_MAX_7 = 39;

const int _SC_COLL_WEIGHTS_MAX_7 = 40;

const int _SC_EQUIV_CLASS_MAX_7 = 41;

const int _SC_EXPR_NEST_MAX_7 = 42;

const int _SC_LINE_MAX_7 = 43;

const int _SC_RE_DUP_MAX_7 = 44;

const int _SC_CHARCLASS_NAME_MAX_7 = 45;

const int _SC_2_VERSION_7 = 46;

const int _SC_2_C_BIND_7 = 47;

const int _SC_2_C_DEV_7 = 48;

const int _SC_2_FORT_DEV_7 = 49;

const int _SC_2_FORT_RUN_7 = 50;

const int _SC_2_SW_DEV_7 = 51;

const int _SC_2_LOCALEDEF_7 = 52;

const int _SC_PII_7 = 53;

const int _SC_PII_XTI_7 = 54;

const int _SC_PII_SOCKET_7 = 55;

const int _SC_PII_INTERNET_7 = 56;

const int _SC_PII_OSI_7 = 57;

const int _SC_POLL_7 = 58;

const int _SC_SELECT_7 = 59;

const int _SC_UIO_MAXIOV_7 = 60;

const int _SC_IOV_MAX_7 = 60;

const int _SC_PII_INTERNET_STREAM_7 = 61;

const int _SC_PII_INTERNET_DGRAM_7 = 62;

const int _SC_PII_OSI_COTS_7 = 63;

const int _SC_PII_OSI_CLTS_7 = 64;

const int _SC_PII_OSI_M_7 = 65;

const int _SC_T_IOV_MAX_7 = 66;

const int _SC_THREADS_7 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_7 = 68;

const int _SC_GETGR_R_SIZE_MAX_7 = 69;

const int _SC_GETPW_R_SIZE_MAX_7 = 70;

const int _SC_LOGIN_NAME_MAX_7 = 71;

const int _SC_TTY_NAME_MAX_7 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_7 = 73;

const int _SC_THREAD_KEYS_MAX_7 = 74;

const int _SC_THREAD_STACK_MIN_7 = 75;

const int _SC_THREAD_THREADS_MAX_7 = 76;

const int _SC_THREAD_ATTR_STACKADDR_7 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_7 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_7 = 79;

const int _SC_THREAD_PRIO_INHERIT_7 = 80;

const int _SC_THREAD_PRIO_PROTECT_7 = 81;

const int _SC_THREAD_PROCESS_SHARED_7 = 82;

const int _SC_NPROCESSORS_CONF_7 = 83;

const int _SC_NPROCESSORS_ONLN_7 = 84;

const int _SC_PHYS_PAGES_7 = 85;

const int _SC_AVPHYS_PAGES_7 = 86;

const int _SC_ATEXIT_MAX_7 = 87;

const int _SC_PASS_MAX_7 = 88;

const int _SC_XOPEN_VERSION_7 = 89;

const int _SC_XOPEN_XCU_VERSION_7 = 90;

const int _SC_XOPEN_UNIX_7 = 91;

const int _SC_XOPEN_CRYPT_7 = 92;

const int _SC_XOPEN_ENH_I18N_7 = 93;

const int _SC_XOPEN_SHM_7 = 94;

const int _SC_2_CHAR_TERM_7 = 95;

const int _SC_2_C_VERSION_7 = 96;

const int _SC_2_UPE_7 = 97;

const int _SC_XOPEN_XPG2_7 = 98;

const int _SC_XOPEN_XPG3_7 = 99;

const int _SC_XOPEN_XPG4_7 = 100;

const int _SC_CHAR_BIT_7 = 101;

const int _SC_CHAR_MAX_7 = 102;

const int _SC_CHAR_MIN_7 = 103;

const int _SC_INT_MAX_7 = 104;

const int _SC_INT_MIN_7 = 105;

const int _SC_LONG_BIT_7 = 106;

const int _SC_WORD_BIT_7 = 107;

const int _SC_MB_LEN_MAX_7 = 108;

const int _SC_NZERO_7 = 109;

const int _SC_SSIZE_MAX_7 = 110;

const int _SC_SCHAR_MAX_7 = 111;

const int _SC_SCHAR_MIN_7 = 112;

const int _SC_SHRT_MAX_7 = 113;

const int _SC_SHRT_MIN_7 = 114;

const int _SC_UCHAR_MAX_7 = 115;

const int _SC_UINT_MAX_7 = 116;

const int _SC_ULONG_MAX_7 = 117;

const int _SC_USHRT_MAX_7 = 118;

const int _SC_NL_ARGMAX_7 = 119;

const int _SC_NL_LANGMAX_7 = 120;

const int _SC_NL_MSGMAX_7 = 121;

const int _SC_NL_NMAX_7 = 122;

const int _SC_NL_SETMAX_7 = 123;

const int _SC_NL_TEXTMAX_7 = 124;

const int _SC_XBS5_ILP32_OFF32_7 = 125;

const int _SC_XBS5_ILP32_OFFBIG_7 = 126;

const int _SC_XBS5_LP64_OFF64_7 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_7 = 128;

const int _SC_XOPEN_LEGACY_7 = 129;

const int _SC_XOPEN_REALTIME_7 = 130;

const int _SC_XOPEN_REALTIME_THREADS_7 = 131;

const int _SC_ADVISORY_INFO_7 = 132;

const int _SC_BARRIERS_7 = 133;

const int _SC_BASE_7 = 134;

const int _SC_C_LANG_SUPPORT_7 = 135;

const int _SC_C_LANG_SUPPORT_R_7 = 136;

const int _SC_CLOCK_SELECTION_7 = 137;

const int _SC_CPUTIME_7 = 138;

const int _SC_THREAD_CPUTIME_7 = 139;

const int _SC_DEVICE_IO_7 = 140;

const int _SC_DEVICE_SPECIFIC_7 = 141;

const int _SC_DEVICE_SPECIFIC_R_7 = 142;

const int _SC_FD_MGMT_7 = 143;

const int _SC_FIFO_7 = 144;

const int _SC_PIPE_7 = 145;

const int _SC_FILE_ATTRIBUTES_7 = 146;

const int _SC_FILE_LOCKING_7 = 147;

const int _SC_FILE_SYSTEM_7 = 148;

const int _SC_MONOTONIC_CLOCK_7 = 149;

const int _SC_MULTI_PROCESS_7 = 150;

const int _SC_SINGLE_PROCESS_7 = 151;

const int _SC_NETWORKING_7 = 152;

const int _SC_READER_WRITER_LOCKS_7 = 153;

const int _SC_SPIN_LOCKS_7 = 154;

const int _SC_REGEXP_7 = 155;

const int _SC_REGEX_VERSION_7 = 156;

const int _SC_SHELL_7 = 157;

const int _SC_SIGNALS_7 = 158;

const int _SC_SPAWN_7 = 159;

const int _SC_SPORADIC_SERVER_7 = 160;

const int _SC_THREAD_SPORADIC_SERVER_7 = 161;

const int _SC_SYSTEM_DATABASE_7 = 162;

const int _SC_SYSTEM_DATABASE_R_7 = 163;

const int _SC_TIMEOUTS_7 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_7 = 165;

const int _SC_USER_GROUPS_7 = 166;

const int _SC_USER_GROUPS_R_7 = 167;

const int _SC_2_PBS_7 = 168;

const int _SC_2_PBS_ACCOUNTING_7 = 169;

const int _SC_2_PBS_LOCATE_7 = 170;

const int _SC_2_PBS_MESSAGE_7 = 171;

const int _SC_2_PBS_TRACK_7 = 172;

const int _SC_SYMLOOP_MAX_7 = 173;

const int _SC_STREAMS_7 = 174;

const int _SC_2_PBS_CHECKPOINT_7 = 175;

const int _SC_V6_ILP32_OFF32_7 = 176;

const int _SC_V6_ILP32_OFFBIG_7 = 177;

const int _SC_V6_LP64_OFF64_7 = 178;

const int _SC_V6_LPBIG_OFFBIG_7 = 179;

const int _SC_HOST_NAME_MAX_7 = 180;

const int _SC_TRACE_7 = 181;

const int _SC_TRACE_EVENT_FILTER_7 = 182;

const int _SC_TRACE_INHERIT_7 = 183;

const int _SC_TRACE_LOG_7 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_7 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_7 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_7 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_7 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_7 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_7 = 190;

const int _SC_LEVEL2_CACHE_SIZE_7 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_7 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_7 = 193;

const int _SC_LEVEL3_CACHE_SIZE_7 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_7 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_7 = 196;

const int _SC_LEVEL4_CACHE_SIZE_7 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_7 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_7 = 199;

const int _SC_IPV6_7 = 235;

const int _SC_RAW_SOCKETS_7 = 236;

const int _SC_V7_ILP32_OFF32_7 = 237;

const int _SC_V7_ILP32_OFFBIG_7 = 238;

const int _SC_V7_LP64_OFF64_7 = 239;

const int _SC_V7_LPBIG_OFFBIG_7 = 240;

const int _SC_SS_REPL_MAX_7 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_7 = 242;

const int _SC_TRACE_NAME_MAX_7 = 243;

const int _SC_TRACE_SYS_MAX_7 = 244;

const int _SC_TRACE_USER_EVENT_MAX_7 = 245;

const int _SC_XOPEN_STREAMS_7 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_7 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_7 = 248;

const int _CS_PATH_7 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_7 = 1;

const int _CS_GNU_LIBC_VERSION_7 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_7 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_7 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_7 = 5;

const int _CS_LFS_CFLAGS_7 = 1000;

const int _CS_LFS_LDFLAGS_7 = 1001;

const int _CS_LFS_LIBS_7 = 1002;

const int _CS_LFS_LINTFLAGS_7 = 1003;

const int _CS_LFS64_CFLAGS_7 = 1004;

const int _CS_LFS64_LDFLAGS_7 = 1005;

const int _CS_LFS64_LIBS_7 = 1006;

const int _CS_LFS64_LINTFLAGS_7 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_7 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_7 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_7 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_7 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_7 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_7 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_7 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_7 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_7 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_7 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_7 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_7 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_7 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_7 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_7 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_7 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_7 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_7 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_7 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_7 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_7 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_7 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_7 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_7 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_7 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_7 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_7 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_7 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_7 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_7 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_7 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_7 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_7 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_7 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_7 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_7 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_7 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_7 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_7 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_7 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_7 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_7 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_7 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_7 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_7 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_7 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_7 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_7 = 1147;

const int _CS_V6_ENV_7 = 1148;

const int _CS_V7_ENV_7 = 1149;

const int _PC_LINK_MAX_8 = 0;

const int _PC_MAX_CANON_8 = 1;

const int _PC_MAX_INPUT_8 = 2;

const int _PC_NAME_MAX_8 = 3;

const int _PC_PATH_MAX_8 = 4;

const int _PC_PIPE_BUF_8 = 5;

const int _PC_CHOWN_RESTRICTED_8 = 6;

const int _PC_NO_TRUNC_8 = 7;

const int _PC_VDISABLE_8 = 8;

const int _PC_SYNC_IO_8 = 9;

const int _PC_ASYNC_IO_8 = 10;

const int _PC_PRIO_IO_8 = 11;

const int _PC_SOCK_MAXBUF_8 = 12;

const int _PC_FILESIZEBITS_8 = 13;

const int _PC_REC_INCR_XFER_SIZE_8 = 14;

const int _PC_REC_MAX_XFER_SIZE_8 = 15;

const int _PC_REC_MIN_XFER_SIZE_8 = 16;

const int _PC_REC_XFER_ALIGN_8 = 17;

const int _PC_ALLOC_SIZE_MIN_8 = 18;

const int _PC_SYMLINK_MAX_8 = 19;

const int _PC_2_SYMLINKS_8 = 20;

const int _SC_ARG_MAX_8 = 0;

const int _SC_CHILD_MAX_8 = 1;

const int _SC_CLK_TCK_8 = 2;

const int _SC_NGROUPS_MAX_8 = 3;

const int _SC_OPEN_MAX_8 = 4;

const int _SC_STREAM_MAX_8 = 5;

const int _SC_TZNAME_MAX_8 = 6;

const int _SC_JOB_CONTROL_8 = 7;

const int _SC_SAVED_IDS_8 = 8;

const int _SC_REALTIME_SIGNALS_8 = 9;

const int _SC_PRIORITY_SCHEDULING_8 = 10;

const int _SC_TIMERS_8 = 11;

const int _SC_ASYNCHRONOUS_IO_8 = 12;

const int _SC_PRIORITIZED_IO_8 = 13;

const int _SC_SYNCHRONIZED_IO_8 = 14;

const int _SC_FSYNC_8 = 15;

const int _SC_MAPPED_FILES_8 = 16;

const int _SC_MEMLOCK_8 = 17;

const int _SC_MEMLOCK_RANGE_8 = 18;

const int _SC_MEMORY_PROTECTION_8 = 19;

const int _SC_MESSAGE_PASSING_8 = 20;

const int _SC_SEMAPHORES_8 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_8 = 22;

const int _SC_AIO_LISTIO_MAX_8 = 23;

const int _SC_AIO_MAX_8 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_8 = 25;

const int _SC_DELAYTIMER_MAX_8 = 26;

const int _SC_MQ_OPEN_MAX_8 = 27;

const int _SC_MQ_PRIO_MAX_8 = 28;

const int _SC_VERSION_8 = 29;

const int _SC_PAGESIZE_8 = 30;

const int _SC_RTSIG_MAX_8 = 31;

const int _SC_SEM_NSEMS_MAX_8 = 32;

const int _SC_SEM_VALUE_MAX_8 = 33;

const int _SC_SIGQUEUE_MAX_8 = 34;

const int _SC_TIMER_MAX_8 = 35;

const int _SC_BC_BASE_MAX_8 = 36;

const int _SC_BC_DIM_MAX_8 = 37;

const int _SC_BC_SCALE_MAX_8 = 38;

const int _SC_BC_STRING_MAX_8 = 39;

const int _SC_COLL_WEIGHTS_MAX_8 = 40;

const int _SC_EQUIV_CLASS_MAX_8 = 41;

const int _SC_EXPR_NEST_MAX_8 = 42;

const int _SC_LINE_MAX_8 = 43;

const int _SC_RE_DUP_MAX_8 = 44;

const int _SC_CHARCLASS_NAME_MAX_8 = 45;

const int _SC_2_VERSION_8 = 46;

const int _SC_2_C_BIND_8 = 47;

const int _SC_2_C_DEV_8 = 48;

const int _SC_2_FORT_DEV_8 = 49;

const int _SC_2_FORT_RUN_8 = 50;

const int _SC_2_SW_DEV_8 = 51;

const int _SC_2_LOCALEDEF_8 = 52;

const int _SC_PII_8 = 53;

const int _SC_PII_XTI_8 = 54;

const int _SC_PII_SOCKET_8 = 55;

const int _SC_PII_INTERNET_8 = 56;

const int _SC_PII_OSI_8 = 57;

const int _SC_POLL_8 = 58;

const int _SC_SELECT_8 = 59;

const int _SC_UIO_MAXIOV_8 = 60;

const int _SC_IOV_MAX_8 = 60;

const int _SC_PII_INTERNET_STREAM_8 = 61;

const int _SC_PII_INTERNET_DGRAM_8 = 62;

const int _SC_PII_OSI_COTS_8 = 63;

const int _SC_PII_OSI_CLTS_8 = 64;

const int _SC_PII_OSI_M_8 = 65;

const int _SC_T_IOV_MAX_8 = 66;

const int _SC_THREADS_8 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_8 = 68;

const int _SC_GETGR_R_SIZE_MAX_8 = 69;

const int _SC_GETPW_R_SIZE_MAX_8 = 70;

const int _SC_LOGIN_NAME_MAX_8 = 71;

const int _SC_TTY_NAME_MAX_8 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_8 = 73;

const int _SC_THREAD_KEYS_MAX_8 = 74;

const int _SC_THREAD_STACK_MIN_8 = 75;

const int _SC_THREAD_THREADS_MAX_8 = 76;

const int _SC_THREAD_ATTR_STACKADDR_8 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_8 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_8 = 79;

const int _SC_THREAD_PRIO_INHERIT_8 = 80;

const int _SC_THREAD_PRIO_PROTECT_8 = 81;

const int _SC_THREAD_PROCESS_SHARED_8 = 82;

const int _SC_NPROCESSORS_CONF_8 = 83;

const int _SC_NPROCESSORS_ONLN_8 = 84;

const int _SC_PHYS_PAGES_8 = 85;

const int _SC_AVPHYS_PAGES_8 = 86;

const int _SC_ATEXIT_MAX_8 = 87;

const int _SC_PASS_MAX_8 = 88;

const int _SC_XOPEN_VERSION_8 = 89;

const int _SC_XOPEN_XCU_VERSION_8 = 90;

const int _SC_XOPEN_UNIX_8 = 91;

const int _SC_XOPEN_CRYPT_8 = 92;

const int _SC_XOPEN_ENH_I18N_8 = 93;

const int _SC_XOPEN_SHM_8 = 94;

const int _SC_2_CHAR_TERM_8 = 95;

const int _SC_2_C_VERSION_8 = 96;

const int _SC_2_UPE_8 = 97;

const int _SC_XOPEN_XPG2_8 = 98;

const int _SC_XOPEN_XPG3_8 = 99;

const int _SC_XOPEN_XPG4_8 = 100;

const int _SC_CHAR_BIT_8 = 101;

const int _SC_CHAR_MAX_8 = 102;

const int _SC_CHAR_MIN_8 = 103;

const int _SC_INT_MAX_8 = 104;

const int _SC_INT_MIN_8 = 105;

const int _SC_LONG_BIT_8 = 106;

const int _SC_WORD_BIT_8 = 107;

const int _SC_MB_LEN_MAX_8 = 108;

const int _SC_NZERO_8 = 109;

const int _SC_SSIZE_MAX_8 = 110;

const int _SC_SCHAR_MAX_8 = 111;

const int _SC_SCHAR_MIN_8 = 112;

const int _SC_SHRT_MAX_8 = 113;

const int _SC_SHRT_MIN_8 = 114;

const int _SC_UCHAR_MAX_8 = 115;

const int _SC_UINT_MAX_8 = 116;

const int _SC_ULONG_MAX_8 = 117;

const int _SC_USHRT_MAX_8 = 118;

const int _SC_NL_ARGMAX_8 = 119;

const int _SC_NL_LANGMAX_8 = 120;

const int _SC_NL_MSGMAX_8 = 121;

const int _SC_NL_NMAX_8 = 122;

const int _SC_NL_SETMAX_8 = 123;

const int _SC_NL_TEXTMAX_8 = 124;

const int _SC_XBS5_ILP32_OFF32_8 = 125;

const int _SC_XBS5_ILP32_OFFBIG_8 = 126;

const int _SC_XBS5_LP64_OFF64_8 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_8 = 128;

const int _SC_XOPEN_LEGACY_8 = 129;

const int _SC_XOPEN_REALTIME_8 = 130;

const int _SC_XOPEN_REALTIME_THREADS_8 = 131;

const int _SC_ADVISORY_INFO_8 = 132;

const int _SC_BARRIERS_8 = 133;

const int _SC_BASE_8 = 134;

const int _SC_C_LANG_SUPPORT_8 = 135;

const int _SC_C_LANG_SUPPORT_R_8 = 136;

const int _SC_CLOCK_SELECTION_8 = 137;

const int _SC_CPUTIME_8 = 138;

const int _SC_THREAD_CPUTIME_8 = 139;

const int _SC_DEVICE_IO_8 = 140;

const int _SC_DEVICE_SPECIFIC_8 = 141;

const int _SC_DEVICE_SPECIFIC_R_8 = 142;

const int _SC_FD_MGMT_8 = 143;

const int _SC_FIFO_8 = 144;

const int _SC_PIPE_8 = 145;

const int _SC_FILE_ATTRIBUTES_8 = 146;

const int _SC_FILE_LOCKING_8 = 147;

const int _SC_FILE_SYSTEM_8 = 148;

const int _SC_MONOTONIC_CLOCK_8 = 149;

const int _SC_MULTI_PROCESS_8 = 150;

const int _SC_SINGLE_PROCESS_8 = 151;

const int _SC_NETWORKING_8 = 152;

const int _SC_READER_WRITER_LOCKS_8 = 153;

const int _SC_SPIN_LOCKS_8 = 154;

const int _SC_REGEXP_8 = 155;

const int _SC_REGEX_VERSION_8 = 156;

const int _SC_SHELL_8 = 157;

const int _SC_SIGNALS_8 = 158;

const int _SC_SPAWN_8 = 159;

const int _SC_SPORADIC_SERVER_8 = 160;

const int _SC_THREAD_SPORADIC_SERVER_8 = 161;

const int _SC_SYSTEM_DATABASE_8 = 162;

const int _SC_SYSTEM_DATABASE_R_8 = 163;

const int _SC_TIMEOUTS_8 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_8 = 165;

const int _SC_USER_GROUPS_8 = 166;

const int _SC_USER_GROUPS_R_8 = 167;

const int _SC_2_PBS_8 = 168;

const int _SC_2_PBS_ACCOUNTING_8 = 169;

const int _SC_2_PBS_LOCATE_8 = 170;

const int _SC_2_PBS_MESSAGE_8 = 171;

const int _SC_2_PBS_TRACK_8 = 172;

const int _SC_SYMLOOP_MAX_8 = 173;

const int _SC_STREAMS_8 = 174;

const int _SC_2_PBS_CHECKPOINT_8 = 175;

const int _SC_V6_ILP32_OFF32_8 = 176;

const int _SC_V6_ILP32_OFFBIG_8 = 177;

const int _SC_V6_LP64_OFF64_8 = 178;

const int _SC_V6_LPBIG_OFFBIG_8 = 179;

const int _SC_HOST_NAME_MAX_8 = 180;

const int _SC_TRACE_8 = 181;

const int _SC_TRACE_EVENT_FILTER_8 = 182;

const int _SC_TRACE_INHERIT_8 = 183;

const int _SC_TRACE_LOG_8 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_8 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_8 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_8 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_8 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_8 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_8 = 190;

const int _SC_LEVEL2_CACHE_SIZE_8 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_8 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_8 = 193;

const int _SC_LEVEL3_CACHE_SIZE_8 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_8 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_8 = 196;

const int _SC_LEVEL4_CACHE_SIZE_8 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_8 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_8 = 199;

const int _SC_IPV6_8 = 235;

const int _SC_RAW_SOCKETS_8 = 236;

const int _SC_V7_ILP32_OFF32_8 = 237;

const int _SC_V7_ILP32_OFFBIG_8 = 238;

const int _SC_V7_LP64_OFF64_8 = 239;

const int _SC_V7_LPBIG_OFFBIG_8 = 240;

const int _SC_SS_REPL_MAX_8 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_8 = 242;

const int _SC_TRACE_NAME_MAX_8 = 243;

const int _SC_TRACE_SYS_MAX_8 = 244;

const int _SC_TRACE_USER_EVENT_MAX_8 = 245;

const int _SC_XOPEN_STREAMS_8 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_8 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_8 = 248;

const int _CS_PATH_8 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_8 = 1;

const int _CS_GNU_LIBC_VERSION_8 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_8 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_8 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_8 = 5;

const int _CS_LFS_CFLAGS_8 = 1000;

const int _CS_LFS_LDFLAGS_8 = 1001;

const int _CS_LFS_LIBS_8 = 1002;

const int _CS_LFS_LINTFLAGS_8 = 1003;

const int _CS_LFS64_CFLAGS_8 = 1004;

const int _CS_LFS64_LDFLAGS_8 = 1005;

const int _CS_LFS64_LIBS_8 = 1006;

const int _CS_LFS64_LINTFLAGS_8 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_8 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_8 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_8 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_8 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_8 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_8 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_8 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_8 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_8 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_8 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_8 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_8 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_8 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_8 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_8 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_8 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_8 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_8 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_8 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_8 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_8 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_8 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_8 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_8 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_8 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_8 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_8 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_8 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_8 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_8 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_8 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_8 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_8 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_8 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_8 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_8 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_8 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_8 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_8 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_8 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_8 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_8 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_8 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_8 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_8 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_8 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_8 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_8 = 1147;

const int _CS_V6_ENV_8 = 1148;

const int _CS_V7_ENV_8 = 1149;

const int _ISupper_2 = 256;

const int _ISlower_2 = 512;

const int _ISalpha_2 = 1024;

const int _ISdigit_2 = 2048;

const int _ISxdigit_2 = 4096;

const int _ISspace_2 = 8192;

const int _ISprint_2 = 16384;

const int _ISgraph_2 = 32768;

const int _ISblank_2 = 1;

const int _IScntrl_2 = 2;

const int _ISpunct_2 = 4;

const int _ISalnum_2 = 8;

const int _PC_LINK_MAX_9 = 0;

const int _PC_MAX_CANON_9 = 1;

const int _PC_MAX_INPUT_9 = 2;

const int _PC_NAME_MAX_9 = 3;

const int _PC_PATH_MAX_9 = 4;

const int _PC_PIPE_BUF_9 = 5;

const int _PC_CHOWN_RESTRICTED_9 = 6;

const int _PC_NO_TRUNC_9 = 7;

const int _PC_VDISABLE_9 = 8;

const int _PC_SYNC_IO_9 = 9;

const int _PC_ASYNC_IO_9 = 10;

const int _PC_PRIO_IO_9 = 11;

const int _PC_SOCK_MAXBUF_9 = 12;

const int _PC_FILESIZEBITS_9 = 13;

const int _PC_REC_INCR_XFER_SIZE_9 = 14;

const int _PC_REC_MAX_XFER_SIZE_9 = 15;

const int _PC_REC_MIN_XFER_SIZE_9 = 16;

const int _PC_REC_XFER_ALIGN_9 = 17;

const int _PC_ALLOC_SIZE_MIN_9 = 18;

const int _PC_SYMLINK_MAX_9 = 19;

const int _PC_2_SYMLINKS_9 = 20;

const int _SC_ARG_MAX_9 = 0;

const int _SC_CHILD_MAX_9 = 1;

const int _SC_CLK_TCK_9 = 2;

const int _SC_NGROUPS_MAX_9 = 3;

const int _SC_OPEN_MAX_9 = 4;

const int _SC_STREAM_MAX_9 = 5;

const int _SC_TZNAME_MAX_9 = 6;

const int _SC_JOB_CONTROL_9 = 7;

const int _SC_SAVED_IDS_9 = 8;

const int _SC_REALTIME_SIGNALS_9 = 9;

const int _SC_PRIORITY_SCHEDULING_9 = 10;

const int _SC_TIMERS_9 = 11;

const int _SC_ASYNCHRONOUS_IO_9 = 12;

const int _SC_PRIORITIZED_IO_9 = 13;

const int _SC_SYNCHRONIZED_IO_9 = 14;

const int _SC_FSYNC_9 = 15;

const int _SC_MAPPED_FILES_9 = 16;

const int _SC_MEMLOCK_9 = 17;

const int _SC_MEMLOCK_RANGE_9 = 18;

const int _SC_MEMORY_PROTECTION_9 = 19;

const int _SC_MESSAGE_PASSING_9 = 20;

const int _SC_SEMAPHORES_9 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_9 = 22;

const int _SC_AIO_LISTIO_MAX_9 = 23;

const int _SC_AIO_MAX_9 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_9 = 25;

const int _SC_DELAYTIMER_MAX_9 = 26;

const int _SC_MQ_OPEN_MAX_9 = 27;

const int _SC_MQ_PRIO_MAX_9 = 28;

const int _SC_VERSION_9 = 29;

const int _SC_PAGESIZE_9 = 30;

const int _SC_RTSIG_MAX_9 = 31;

const int _SC_SEM_NSEMS_MAX_9 = 32;

const int _SC_SEM_VALUE_MAX_9 = 33;

const int _SC_SIGQUEUE_MAX_9 = 34;

const int _SC_TIMER_MAX_9 = 35;

const int _SC_BC_BASE_MAX_9 = 36;

const int _SC_BC_DIM_MAX_9 = 37;

const int _SC_BC_SCALE_MAX_9 = 38;

const int _SC_BC_STRING_MAX_9 = 39;

const int _SC_COLL_WEIGHTS_MAX_9 = 40;

const int _SC_EQUIV_CLASS_MAX_9 = 41;

const int _SC_EXPR_NEST_MAX_9 = 42;

const int _SC_LINE_MAX_9 = 43;

const int _SC_RE_DUP_MAX_9 = 44;

const int _SC_CHARCLASS_NAME_MAX_9 = 45;

const int _SC_2_VERSION_9 = 46;

const int _SC_2_C_BIND_9 = 47;

const int _SC_2_C_DEV_9 = 48;

const int _SC_2_FORT_DEV_9 = 49;

const int _SC_2_FORT_RUN_9 = 50;

const int _SC_2_SW_DEV_9 = 51;

const int _SC_2_LOCALEDEF_9 = 52;

const int _SC_PII_9 = 53;

const int _SC_PII_XTI_9 = 54;

const int _SC_PII_SOCKET_9 = 55;

const int _SC_PII_INTERNET_9 = 56;

const int _SC_PII_OSI_9 = 57;

const int _SC_POLL_9 = 58;

const int _SC_SELECT_9 = 59;

const int _SC_UIO_MAXIOV_9 = 60;

const int _SC_IOV_MAX_9 = 60;

const int _SC_PII_INTERNET_STREAM_9 = 61;

const int _SC_PII_INTERNET_DGRAM_9 = 62;

const int _SC_PII_OSI_COTS_9 = 63;

const int _SC_PII_OSI_CLTS_9 = 64;

const int _SC_PII_OSI_M_9 = 65;

const int _SC_T_IOV_MAX_9 = 66;

const int _SC_THREADS_9 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_9 = 68;

const int _SC_GETGR_R_SIZE_MAX_9 = 69;

const int _SC_GETPW_R_SIZE_MAX_9 = 70;

const int _SC_LOGIN_NAME_MAX_9 = 71;

const int _SC_TTY_NAME_MAX_9 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_9 = 73;

const int _SC_THREAD_KEYS_MAX_9 = 74;

const int _SC_THREAD_STACK_MIN_9 = 75;

const int _SC_THREAD_THREADS_MAX_9 = 76;

const int _SC_THREAD_ATTR_STACKADDR_9 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_9 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_9 = 79;

const int _SC_THREAD_PRIO_INHERIT_9 = 80;

const int _SC_THREAD_PRIO_PROTECT_9 = 81;

const int _SC_THREAD_PROCESS_SHARED_9 = 82;

const int _SC_NPROCESSORS_CONF_9 = 83;

const int _SC_NPROCESSORS_ONLN_9 = 84;

const int _SC_PHYS_PAGES_9 = 85;

const int _SC_AVPHYS_PAGES_9 = 86;

const int _SC_ATEXIT_MAX_9 = 87;

const int _SC_PASS_MAX_9 = 88;

const int _SC_XOPEN_VERSION_9 = 89;

const int _SC_XOPEN_XCU_VERSION_9 = 90;

const int _SC_XOPEN_UNIX_9 = 91;

const int _SC_XOPEN_CRYPT_9 = 92;

const int _SC_XOPEN_ENH_I18N_9 = 93;

const int _SC_XOPEN_SHM_9 = 94;

const int _SC_2_CHAR_TERM_9 = 95;

const int _SC_2_C_VERSION_9 = 96;

const int _SC_2_UPE_9 = 97;

const int _SC_XOPEN_XPG2_9 = 98;

const int _SC_XOPEN_XPG3_9 = 99;

const int _SC_XOPEN_XPG4_9 = 100;

const int _SC_CHAR_BIT_9 = 101;

const int _SC_CHAR_MAX_9 = 102;

const int _SC_CHAR_MIN_9 = 103;

const int _SC_INT_MAX_9 = 104;

const int _SC_INT_MIN_9 = 105;

const int _SC_LONG_BIT_9 = 106;

const int _SC_WORD_BIT_9 = 107;

const int _SC_MB_LEN_MAX_9 = 108;

const int _SC_NZERO_9 = 109;

const int _SC_SSIZE_MAX_9 = 110;

const int _SC_SCHAR_MAX_9 = 111;

const int _SC_SCHAR_MIN_9 = 112;

const int _SC_SHRT_MAX_9 = 113;

const int _SC_SHRT_MIN_9 = 114;

const int _SC_UCHAR_MAX_9 = 115;

const int _SC_UINT_MAX_9 = 116;

const int _SC_ULONG_MAX_9 = 117;

const int _SC_USHRT_MAX_9 = 118;

const int _SC_NL_ARGMAX_9 = 119;

const int _SC_NL_LANGMAX_9 = 120;

const int _SC_NL_MSGMAX_9 = 121;

const int _SC_NL_NMAX_9 = 122;

const int _SC_NL_SETMAX_9 = 123;

const int _SC_NL_TEXTMAX_9 = 124;

const int _SC_XBS5_ILP32_OFF32_9 = 125;

const int _SC_XBS5_ILP32_OFFBIG_9 = 126;

const int _SC_XBS5_LP64_OFF64_9 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_9 = 128;

const int _SC_XOPEN_LEGACY_9 = 129;

const int _SC_XOPEN_REALTIME_9 = 130;

const int _SC_XOPEN_REALTIME_THREADS_9 = 131;

const int _SC_ADVISORY_INFO_9 = 132;

const int _SC_BARRIERS_9 = 133;

const int _SC_BASE_9 = 134;

const int _SC_C_LANG_SUPPORT_9 = 135;

const int _SC_C_LANG_SUPPORT_R_9 = 136;

const int _SC_CLOCK_SELECTION_9 = 137;

const int _SC_CPUTIME_9 = 138;

const int _SC_THREAD_CPUTIME_9 = 139;

const int _SC_DEVICE_IO_9 = 140;

const int _SC_DEVICE_SPECIFIC_9 = 141;

const int _SC_DEVICE_SPECIFIC_R_9 = 142;

const int _SC_FD_MGMT_9 = 143;

const int _SC_FIFO_9 = 144;

const int _SC_PIPE_9 = 145;

const int _SC_FILE_ATTRIBUTES_9 = 146;

const int _SC_FILE_LOCKING_9 = 147;

const int _SC_FILE_SYSTEM_9 = 148;

const int _SC_MONOTONIC_CLOCK_9 = 149;

const int _SC_MULTI_PROCESS_9 = 150;

const int _SC_SINGLE_PROCESS_9 = 151;

const int _SC_NETWORKING_9 = 152;

const int _SC_READER_WRITER_LOCKS_9 = 153;

const int _SC_SPIN_LOCKS_9 = 154;

const int _SC_REGEXP_9 = 155;

const int _SC_REGEX_VERSION_9 = 156;

const int _SC_SHELL_9 = 157;

const int _SC_SIGNALS_9 = 158;

const int _SC_SPAWN_9 = 159;

const int _SC_SPORADIC_SERVER_9 = 160;

const int _SC_THREAD_SPORADIC_SERVER_9 = 161;

const int _SC_SYSTEM_DATABASE_9 = 162;

const int _SC_SYSTEM_DATABASE_R_9 = 163;

const int _SC_TIMEOUTS_9 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_9 = 165;

const int _SC_USER_GROUPS_9 = 166;

const int _SC_USER_GROUPS_R_9 = 167;

const int _SC_2_PBS_9 = 168;

const int _SC_2_PBS_ACCOUNTING_9 = 169;

const int _SC_2_PBS_LOCATE_9 = 170;

const int _SC_2_PBS_MESSAGE_9 = 171;

const int _SC_2_PBS_TRACK_9 = 172;

const int _SC_SYMLOOP_MAX_9 = 173;

const int _SC_STREAMS_9 = 174;

const int _SC_2_PBS_CHECKPOINT_9 = 175;

const int _SC_V6_ILP32_OFF32_9 = 176;

const int _SC_V6_ILP32_OFFBIG_9 = 177;

const int _SC_V6_LP64_OFF64_9 = 178;

const int _SC_V6_LPBIG_OFFBIG_9 = 179;

const int _SC_HOST_NAME_MAX_9 = 180;

const int _SC_TRACE_9 = 181;

const int _SC_TRACE_EVENT_FILTER_9 = 182;

const int _SC_TRACE_INHERIT_9 = 183;

const int _SC_TRACE_LOG_9 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_9 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_9 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_9 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_9 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_9 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_9 = 190;

const int _SC_LEVEL2_CACHE_SIZE_9 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_9 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_9 = 193;

const int _SC_LEVEL3_CACHE_SIZE_9 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_9 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_9 = 196;

const int _SC_LEVEL4_CACHE_SIZE_9 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_9 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_9 = 199;

const int _SC_IPV6_9 = 235;

const int _SC_RAW_SOCKETS_9 = 236;

const int _SC_V7_ILP32_OFF32_9 = 237;

const int _SC_V7_ILP32_OFFBIG_9 = 238;

const int _SC_V7_LP64_OFF64_9 = 239;

const int _SC_V7_LPBIG_OFFBIG_9 = 240;

const int _SC_SS_REPL_MAX_9 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_9 = 242;

const int _SC_TRACE_NAME_MAX_9 = 243;

const int _SC_TRACE_SYS_MAX_9 = 244;

const int _SC_TRACE_USER_EVENT_MAX_9 = 245;

const int _SC_XOPEN_STREAMS_9 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_9 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_9 = 248;

const int _CS_PATH_9 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_9 = 1;

const int _CS_GNU_LIBC_VERSION_9 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_9 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_9 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_9 = 5;

const int _CS_LFS_CFLAGS_9 = 1000;

const int _CS_LFS_LDFLAGS_9 = 1001;

const int _CS_LFS_LIBS_9 = 1002;

const int _CS_LFS_LINTFLAGS_9 = 1003;

const int _CS_LFS64_CFLAGS_9 = 1004;

const int _CS_LFS64_LDFLAGS_9 = 1005;

const int _CS_LFS64_LIBS_9 = 1006;

const int _CS_LFS64_LINTFLAGS_9 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_9 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_9 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_9 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_9 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_9 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_9 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_9 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_9 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_9 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_9 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_9 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_9 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_9 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_9 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_9 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_9 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_9 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_9 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_9 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_9 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_9 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_9 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_9 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_9 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_9 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_9 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_9 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_9 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_9 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_9 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_9 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_9 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_9 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_9 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_9 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_9 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_9 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_9 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_9 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_9 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_9 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_9 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_9 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_9 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_9 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_9 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_9 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_9 = 1147;

const int _CS_V6_ENV_9 = 1148;

const int _CS_V7_ENV_9 = 1149;

const int _PC_LINK_MAX_10 = 0;

const int _PC_MAX_CANON_10 = 1;

const int _PC_MAX_INPUT_10 = 2;

const int _PC_NAME_MAX_10 = 3;

const int _PC_PATH_MAX_10 = 4;

const int _PC_PIPE_BUF_10 = 5;

const int _PC_CHOWN_RESTRICTED_10 = 6;

const int _PC_NO_TRUNC_10 = 7;

const int _PC_VDISABLE_10 = 8;

const int _PC_SYNC_IO_10 = 9;

const int _PC_ASYNC_IO_10 = 10;

const int _PC_PRIO_IO_10 = 11;

const int _PC_SOCK_MAXBUF_10 = 12;

const int _PC_FILESIZEBITS_10 = 13;

const int _PC_REC_INCR_XFER_SIZE_10 = 14;

const int _PC_REC_MAX_XFER_SIZE_10 = 15;

const int _PC_REC_MIN_XFER_SIZE_10 = 16;

const int _PC_REC_XFER_ALIGN_10 = 17;

const int _PC_ALLOC_SIZE_MIN_10 = 18;

const int _PC_SYMLINK_MAX_10 = 19;

const int _PC_2_SYMLINKS_10 = 20;

const int _SC_ARG_MAX_10 = 0;

const int _SC_CHILD_MAX_10 = 1;

const int _SC_CLK_TCK_10 = 2;

const int _SC_NGROUPS_MAX_10 = 3;

const int _SC_OPEN_MAX_10 = 4;

const int _SC_STREAM_MAX_10 = 5;

const int _SC_TZNAME_MAX_10 = 6;

const int _SC_JOB_CONTROL_10 = 7;

const int _SC_SAVED_IDS_10 = 8;

const int _SC_REALTIME_SIGNALS_10 = 9;

const int _SC_PRIORITY_SCHEDULING_10 = 10;

const int _SC_TIMERS_10 = 11;

const int _SC_ASYNCHRONOUS_IO_10 = 12;

const int _SC_PRIORITIZED_IO_10 = 13;

const int _SC_SYNCHRONIZED_IO_10 = 14;

const int _SC_FSYNC_10 = 15;

const int _SC_MAPPED_FILES_10 = 16;

const int _SC_MEMLOCK_10 = 17;

const int _SC_MEMLOCK_RANGE_10 = 18;

const int _SC_MEMORY_PROTECTION_10 = 19;

const int _SC_MESSAGE_PASSING_10 = 20;

const int _SC_SEMAPHORES_10 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_10 = 22;

const int _SC_AIO_LISTIO_MAX_10 = 23;

const int _SC_AIO_MAX_10 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_10 = 25;

const int _SC_DELAYTIMER_MAX_10 = 26;

const int _SC_MQ_OPEN_MAX_10 = 27;

const int _SC_MQ_PRIO_MAX_10 = 28;

const int _SC_VERSION_10 = 29;

const int _SC_PAGESIZE_10 = 30;

const int _SC_RTSIG_MAX_10 = 31;

const int _SC_SEM_NSEMS_MAX_10 = 32;

const int _SC_SEM_VALUE_MAX_10 = 33;

const int _SC_SIGQUEUE_MAX_10 = 34;

const int _SC_TIMER_MAX_10 = 35;

const int _SC_BC_BASE_MAX_10 = 36;

const int _SC_BC_DIM_MAX_10 = 37;

const int _SC_BC_SCALE_MAX_10 = 38;

const int _SC_BC_STRING_MAX_10 = 39;

const int _SC_COLL_WEIGHTS_MAX_10 = 40;

const int _SC_EQUIV_CLASS_MAX_10 = 41;

const int _SC_EXPR_NEST_MAX_10 = 42;

const int _SC_LINE_MAX_10 = 43;

const int _SC_RE_DUP_MAX_10 = 44;

const int _SC_CHARCLASS_NAME_MAX_10 = 45;

const int _SC_2_VERSION_10 = 46;

const int _SC_2_C_BIND_10 = 47;

const int _SC_2_C_DEV_10 = 48;

const int _SC_2_FORT_DEV_10 = 49;

const int _SC_2_FORT_RUN_10 = 50;

const int _SC_2_SW_DEV_10 = 51;

const int _SC_2_LOCALEDEF_10 = 52;

const int _SC_PII_10 = 53;

const int _SC_PII_XTI_10 = 54;

const int _SC_PII_SOCKET_10 = 55;

const int _SC_PII_INTERNET_10 = 56;

const int _SC_PII_OSI_10 = 57;

const int _SC_POLL_10 = 58;

const int _SC_SELECT_10 = 59;

const int _SC_UIO_MAXIOV_10 = 60;

const int _SC_IOV_MAX_10 = 60;

const int _SC_PII_INTERNET_STREAM_10 = 61;

const int _SC_PII_INTERNET_DGRAM_10 = 62;

const int _SC_PII_OSI_COTS_10 = 63;

const int _SC_PII_OSI_CLTS_10 = 64;

const int _SC_PII_OSI_M_10 = 65;

const int _SC_T_IOV_MAX_10 = 66;

const int _SC_THREADS_10 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_10 = 68;

const int _SC_GETGR_R_SIZE_MAX_10 = 69;

const int _SC_GETPW_R_SIZE_MAX_10 = 70;

const int _SC_LOGIN_NAME_MAX_10 = 71;

const int _SC_TTY_NAME_MAX_10 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_10 = 73;

const int _SC_THREAD_KEYS_MAX_10 = 74;

const int _SC_THREAD_STACK_MIN_10 = 75;

const int _SC_THREAD_THREADS_MAX_10 = 76;

const int _SC_THREAD_ATTR_STACKADDR_10 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_10 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_10 = 79;

const int _SC_THREAD_PRIO_INHERIT_10 = 80;

const int _SC_THREAD_PRIO_PROTECT_10 = 81;

const int _SC_THREAD_PROCESS_SHARED_10 = 82;

const int _SC_NPROCESSORS_CONF_10 = 83;

const int _SC_NPROCESSORS_ONLN_10 = 84;

const int _SC_PHYS_PAGES_10 = 85;

const int _SC_AVPHYS_PAGES_10 = 86;

const int _SC_ATEXIT_MAX_10 = 87;

const int _SC_PASS_MAX_10 = 88;

const int _SC_XOPEN_VERSION_10 = 89;

const int _SC_XOPEN_XCU_VERSION_10 = 90;

const int _SC_XOPEN_UNIX_10 = 91;

const int _SC_XOPEN_CRYPT_10 = 92;

const int _SC_XOPEN_ENH_I18N_10 = 93;

const int _SC_XOPEN_SHM_10 = 94;

const int _SC_2_CHAR_TERM_10 = 95;

const int _SC_2_C_VERSION_10 = 96;

const int _SC_2_UPE_10 = 97;

const int _SC_XOPEN_XPG2_10 = 98;

const int _SC_XOPEN_XPG3_10 = 99;

const int _SC_XOPEN_XPG4_10 = 100;

const int _SC_CHAR_BIT_10 = 101;

const int _SC_CHAR_MAX_10 = 102;

const int _SC_CHAR_MIN_10 = 103;

const int _SC_INT_MAX_10 = 104;

const int _SC_INT_MIN_10 = 105;

const int _SC_LONG_BIT_10 = 106;

const int _SC_WORD_BIT_10 = 107;

const int _SC_MB_LEN_MAX_10 = 108;

const int _SC_NZERO_10 = 109;

const int _SC_SSIZE_MAX_10 = 110;

const int _SC_SCHAR_MAX_10 = 111;

const int _SC_SCHAR_MIN_10 = 112;

const int _SC_SHRT_MAX_10 = 113;

const int _SC_SHRT_MIN_10 = 114;

const int _SC_UCHAR_MAX_10 = 115;

const int _SC_UINT_MAX_10 = 116;

const int _SC_ULONG_MAX_10 = 117;

const int _SC_USHRT_MAX_10 = 118;

const int _SC_NL_ARGMAX_10 = 119;

const int _SC_NL_LANGMAX_10 = 120;

const int _SC_NL_MSGMAX_10 = 121;

const int _SC_NL_NMAX_10 = 122;

const int _SC_NL_SETMAX_10 = 123;

const int _SC_NL_TEXTMAX_10 = 124;

const int _SC_XBS5_ILP32_OFF32_10 = 125;

const int _SC_XBS5_ILP32_OFFBIG_10 = 126;

const int _SC_XBS5_LP64_OFF64_10 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_10 = 128;

const int _SC_XOPEN_LEGACY_10 = 129;

const int _SC_XOPEN_REALTIME_10 = 130;

const int _SC_XOPEN_REALTIME_THREADS_10 = 131;

const int _SC_ADVISORY_INFO_10 = 132;

const int _SC_BARRIERS_10 = 133;

const int _SC_BASE_10 = 134;

const int _SC_C_LANG_SUPPORT_10 = 135;

const int _SC_C_LANG_SUPPORT_R_10 = 136;

const int _SC_CLOCK_SELECTION_10 = 137;

const int _SC_CPUTIME_10 = 138;

const int _SC_THREAD_CPUTIME_10 = 139;

const int _SC_DEVICE_IO_10 = 140;

const int _SC_DEVICE_SPECIFIC_10 = 141;

const int _SC_DEVICE_SPECIFIC_R_10 = 142;

const int _SC_FD_MGMT_10 = 143;

const int _SC_FIFO_10 = 144;

const int _SC_PIPE_10 = 145;

const int _SC_FILE_ATTRIBUTES_10 = 146;

const int _SC_FILE_LOCKING_10 = 147;

const int _SC_FILE_SYSTEM_10 = 148;

const int _SC_MONOTONIC_CLOCK_10 = 149;

const int _SC_MULTI_PROCESS_10 = 150;

const int _SC_SINGLE_PROCESS_10 = 151;

const int _SC_NETWORKING_10 = 152;

const int _SC_READER_WRITER_LOCKS_10 = 153;

const int _SC_SPIN_LOCKS_10 = 154;

const int _SC_REGEXP_10 = 155;

const int _SC_REGEX_VERSION_10 = 156;

const int _SC_SHELL_10 = 157;

const int _SC_SIGNALS_10 = 158;

const int _SC_SPAWN_10 = 159;

const int _SC_SPORADIC_SERVER_10 = 160;

const int _SC_THREAD_SPORADIC_SERVER_10 = 161;

const int _SC_SYSTEM_DATABASE_10 = 162;

const int _SC_SYSTEM_DATABASE_R_10 = 163;

const int _SC_TIMEOUTS_10 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_10 = 165;

const int _SC_USER_GROUPS_10 = 166;

const int _SC_USER_GROUPS_R_10 = 167;

const int _SC_2_PBS_10 = 168;

const int _SC_2_PBS_ACCOUNTING_10 = 169;

const int _SC_2_PBS_LOCATE_10 = 170;

const int _SC_2_PBS_MESSAGE_10 = 171;

const int _SC_2_PBS_TRACK_10 = 172;

const int _SC_SYMLOOP_MAX_10 = 173;

const int _SC_STREAMS_10 = 174;

const int _SC_2_PBS_CHECKPOINT_10 = 175;

const int _SC_V6_ILP32_OFF32_10 = 176;

const int _SC_V6_ILP32_OFFBIG_10 = 177;

const int _SC_V6_LP64_OFF64_10 = 178;

const int _SC_V6_LPBIG_OFFBIG_10 = 179;

const int _SC_HOST_NAME_MAX_10 = 180;

const int _SC_TRACE_10 = 181;

const int _SC_TRACE_EVENT_FILTER_10 = 182;

const int _SC_TRACE_INHERIT_10 = 183;

const int _SC_TRACE_LOG_10 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_10 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_10 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_10 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_10 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_10 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_10 = 190;

const int _SC_LEVEL2_CACHE_SIZE_10 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_10 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_10 = 193;

const int _SC_LEVEL3_CACHE_SIZE_10 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_10 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_10 = 196;

const int _SC_LEVEL4_CACHE_SIZE_10 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_10 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_10 = 199;

const int _SC_IPV6_10 = 235;

const int _SC_RAW_SOCKETS_10 = 236;

const int _SC_V7_ILP32_OFF32_10 = 237;

const int _SC_V7_ILP32_OFFBIG_10 = 238;

const int _SC_V7_LP64_OFF64_10 = 239;

const int _SC_V7_LPBIG_OFFBIG_10 = 240;

const int _SC_SS_REPL_MAX_10 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_10 = 242;

const int _SC_TRACE_NAME_MAX_10 = 243;

const int _SC_TRACE_SYS_MAX_10 = 244;

const int _SC_TRACE_USER_EVENT_MAX_10 = 245;

const int _SC_XOPEN_STREAMS_10 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_10 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_10 = 248;

const int _CS_PATH_10 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_10 = 1;

const int _CS_GNU_LIBC_VERSION_10 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_10 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_10 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_10 = 5;

const int _CS_LFS_CFLAGS_10 = 1000;

const int _CS_LFS_LDFLAGS_10 = 1001;

const int _CS_LFS_LIBS_10 = 1002;

const int _CS_LFS_LINTFLAGS_10 = 1003;

const int _CS_LFS64_CFLAGS_10 = 1004;

const int _CS_LFS64_LDFLAGS_10 = 1005;

const int _CS_LFS64_LIBS_10 = 1006;

const int _CS_LFS64_LINTFLAGS_10 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_10 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_10 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_10 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_10 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_10 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_10 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_10 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_10 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_10 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_10 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_10 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_10 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_10 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_10 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_10 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_10 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_10 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_10 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_10 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_10 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_10 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_10 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_10 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_10 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_10 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_10 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_10 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_10 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_10 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_10 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_10 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_10 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_10 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_10 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_10 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_10 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_10 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_10 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_10 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_10 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_10 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_10 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_10 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_10 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_10 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_10 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_10 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_10 = 1147;

const int _CS_V6_ENV_10 = 1148;

const int _CS_V7_ENV_10 = 1149;

const int _ISupper_3 = 256;

const int _ISlower_3 = 512;

const int _ISalpha_3 = 1024;

const int _ISdigit_3 = 2048;

const int _ISxdigit_3 = 4096;

const int _ISspace_3 = 8192;

const int _ISprint_3 = 16384;

const int _ISgraph_3 = 32768;

const int _ISblank_3 = 1;

const int _IScntrl_3 = 2;

const int _ISpunct_3 = 4;

const int _ISalnum_3 = 8;

const int _PC_LINK_MAX_11 = 0;

const int _PC_MAX_CANON_11 = 1;

const int _PC_MAX_INPUT_11 = 2;

const int _PC_NAME_MAX_11 = 3;

const int _PC_PATH_MAX_11 = 4;

const int _PC_PIPE_BUF_11 = 5;

const int _PC_CHOWN_RESTRICTED_11 = 6;

const int _PC_NO_TRUNC_11 = 7;

const int _PC_VDISABLE_11 = 8;

const int _PC_SYNC_IO_11 = 9;

const int _PC_ASYNC_IO_11 = 10;

const int _PC_PRIO_IO_11 = 11;

const int _PC_SOCK_MAXBUF_11 = 12;

const int _PC_FILESIZEBITS_11 = 13;

const int _PC_REC_INCR_XFER_SIZE_11 = 14;

const int _PC_REC_MAX_XFER_SIZE_11 = 15;

const int _PC_REC_MIN_XFER_SIZE_11 = 16;

const int _PC_REC_XFER_ALIGN_11 = 17;

const int _PC_ALLOC_SIZE_MIN_11 = 18;

const int _PC_SYMLINK_MAX_11 = 19;

const int _PC_2_SYMLINKS_11 = 20;

const int _SC_ARG_MAX_11 = 0;

const int _SC_CHILD_MAX_11 = 1;

const int _SC_CLK_TCK_11 = 2;

const int _SC_NGROUPS_MAX_11 = 3;

const int _SC_OPEN_MAX_11 = 4;

const int _SC_STREAM_MAX_11 = 5;

const int _SC_TZNAME_MAX_11 = 6;

const int _SC_JOB_CONTROL_11 = 7;

const int _SC_SAVED_IDS_11 = 8;

const int _SC_REALTIME_SIGNALS_11 = 9;

const int _SC_PRIORITY_SCHEDULING_11 = 10;

const int _SC_TIMERS_11 = 11;

const int _SC_ASYNCHRONOUS_IO_11 = 12;

const int _SC_PRIORITIZED_IO_11 = 13;

const int _SC_SYNCHRONIZED_IO_11 = 14;

const int _SC_FSYNC_11 = 15;

const int _SC_MAPPED_FILES_11 = 16;

const int _SC_MEMLOCK_11 = 17;

const int _SC_MEMLOCK_RANGE_11 = 18;

const int _SC_MEMORY_PROTECTION_11 = 19;

const int _SC_MESSAGE_PASSING_11 = 20;

const int _SC_SEMAPHORES_11 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_11 = 22;

const int _SC_AIO_LISTIO_MAX_11 = 23;

const int _SC_AIO_MAX_11 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_11 = 25;

const int _SC_DELAYTIMER_MAX_11 = 26;

const int _SC_MQ_OPEN_MAX_11 = 27;

const int _SC_MQ_PRIO_MAX_11 = 28;

const int _SC_VERSION_11 = 29;

const int _SC_PAGESIZE_11 = 30;

const int _SC_RTSIG_MAX_11 = 31;

const int _SC_SEM_NSEMS_MAX_11 = 32;

const int _SC_SEM_VALUE_MAX_11 = 33;

const int _SC_SIGQUEUE_MAX_11 = 34;

const int _SC_TIMER_MAX_11 = 35;

const int _SC_BC_BASE_MAX_11 = 36;

const int _SC_BC_DIM_MAX_11 = 37;

const int _SC_BC_SCALE_MAX_11 = 38;

const int _SC_BC_STRING_MAX_11 = 39;

const int _SC_COLL_WEIGHTS_MAX_11 = 40;

const int _SC_EQUIV_CLASS_MAX_11 = 41;

const int _SC_EXPR_NEST_MAX_11 = 42;

const int _SC_LINE_MAX_11 = 43;

const int _SC_RE_DUP_MAX_11 = 44;

const int _SC_CHARCLASS_NAME_MAX_11 = 45;

const int _SC_2_VERSION_11 = 46;

const int _SC_2_C_BIND_11 = 47;

const int _SC_2_C_DEV_11 = 48;

const int _SC_2_FORT_DEV_11 = 49;

const int _SC_2_FORT_RUN_11 = 50;

const int _SC_2_SW_DEV_11 = 51;

const int _SC_2_LOCALEDEF_11 = 52;

const int _SC_PII_11 = 53;

const int _SC_PII_XTI_11 = 54;

const int _SC_PII_SOCKET_11 = 55;

const int _SC_PII_INTERNET_11 = 56;

const int _SC_PII_OSI_11 = 57;

const int _SC_POLL_11 = 58;

const int _SC_SELECT_11 = 59;

const int _SC_UIO_MAXIOV_11 = 60;

const int _SC_IOV_MAX_11 = 60;

const int _SC_PII_INTERNET_STREAM_11 = 61;

const int _SC_PII_INTERNET_DGRAM_11 = 62;

const int _SC_PII_OSI_COTS_11 = 63;

const int _SC_PII_OSI_CLTS_11 = 64;

const int _SC_PII_OSI_M_11 = 65;

const int _SC_T_IOV_MAX_11 = 66;

const int _SC_THREADS_11 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_11 = 68;

const int _SC_GETGR_R_SIZE_MAX_11 = 69;

const int _SC_GETPW_R_SIZE_MAX_11 = 70;

const int _SC_LOGIN_NAME_MAX_11 = 71;

const int _SC_TTY_NAME_MAX_11 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_11 = 73;

const int _SC_THREAD_KEYS_MAX_11 = 74;

const int _SC_THREAD_STACK_MIN_11 = 75;

const int _SC_THREAD_THREADS_MAX_11 = 76;

const int _SC_THREAD_ATTR_STACKADDR_11 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_11 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_11 = 79;

const int _SC_THREAD_PRIO_INHERIT_11 = 80;

const int _SC_THREAD_PRIO_PROTECT_11 = 81;

const int _SC_THREAD_PROCESS_SHARED_11 = 82;

const int _SC_NPROCESSORS_CONF_11 = 83;

const int _SC_NPROCESSORS_ONLN_11 = 84;

const int _SC_PHYS_PAGES_11 = 85;

const int _SC_AVPHYS_PAGES_11 = 86;

const int _SC_ATEXIT_MAX_11 = 87;

const int _SC_PASS_MAX_11 = 88;

const int _SC_XOPEN_VERSION_11 = 89;

const int _SC_XOPEN_XCU_VERSION_11 = 90;

const int _SC_XOPEN_UNIX_11 = 91;

const int _SC_XOPEN_CRYPT_11 = 92;

const int _SC_XOPEN_ENH_I18N_11 = 93;

const int _SC_XOPEN_SHM_11 = 94;

const int _SC_2_CHAR_TERM_11 = 95;

const int _SC_2_C_VERSION_11 = 96;

const int _SC_2_UPE_11 = 97;

const int _SC_XOPEN_XPG2_11 = 98;

const int _SC_XOPEN_XPG3_11 = 99;

const int _SC_XOPEN_XPG4_11 = 100;

const int _SC_CHAR_BIT_11 = 101;

const int _SC_CHAR_MAX_11 = 102;

const int _SC_CHAR_MIN_11 = 103;

const int _SC_INT_MAX_11 = 104;

const int _SC_INT_MIN_11 = 105;

const int _SC_LONG_BIT_11 = 106;

const int _SC_WORD_BIT_11 = 107;

const int _SC_MB_LEN_MAX_11 = 108;

const int _SC_NZERO_11 = 109;

const int _SC_SSIZE_MAX_11 = 110;

const int _SC_SCHAR_MAX_11 = 111;

const int _SC_SCHAR_MIN_11 = 112;

const int _SC_SHRT_MAX_11 = 113;

const int _SC_SHRT_MIN_11 = 114;

const int _SC_UCHAR_MAX_11 = 115;

const int _SC_UINT_MAX_11 = 116;

const int _SC_ULONG_MAX_11 = 117;

const int _SC_USHRT_MAX_11 = 118;

const int _SC_NL_ARGMAX_11 = 119;

const int _SC_NL_LANGMAX_11 = 120;

const int _SC_NL_MSGMAX_11 = 121;

const int _SC_NL_NMAX_11 = 122;

const int _SC_NL_SETMAX_11 = 123;

const int _SC_NL_TEXTMAX_11 = 124;

const int _SC_XBS5_ILP32_OFF32_11 = 125;

const int _SC_XBS5_ILP32_OFFBIG_11 = 126;

const int _SC_XBS5_LP64_OFF64_11 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_11 = 128;

const int _SC_XOPEN_LEGACY_11 = 129;

const int _SC_XOPEN_REALTIME_11 = 130;

const int _SC_XOPEN_REALTIME_THREADS_11 = 131;

const int _SC_ADVISORY_INFO_11 = 132;

const int _SC_BARRIERS_11 = 133;

const int _SC_BASE_11 = 134;

const int _SC_C_LANG_SUPPORT_11 = 135;

const int _SC_C_LANG_SUPPORT_R_11 = 136;

const int _SC_CLOCK_SELECTION_11 = 137;

const int _SC_CPUTIME_11 = 138;

const int _SC_THREAD_CPUTIME_11 = 139;

const int _SC_DEVICE_IO_11 = 140;

const int _SC_DEVICE_SPECIFIC_11 = 141;

const int _SC_DEVICE_SPECIFIC_R_11 = 142;

const int _SC_FD_MGMT_11 = 143;

const int _SC_FIFO_11 = 144;

const int _SC_PIPE_11 = 145;

const int _SC_FILE_ATTRIBUTES_11 = 146;

const int _SC_FILE_LOCKING_11 = 147;

const int _SC_FILE_SYSTEM_11 = 148;

const int _SC_MONOTONIC_CLOCK_11 = 149;

const int _SC_MULTI_PROCESS_11 = 150;

const int _SC_SINGLE_PROCESS_11 = 151;

const int _SC_NETWORKING_11 = 152;

const int _SC_READER_WRITER_LOCKS_11 = 153;

const int _SC_SPIN_LOCKS_11 = 154;

const int _SC_REGEXP_11 = 155;

const int _SC_REGEX_VERSION_11 = 156;

const int _SC_SHELL_11 = 157;

const int _SC_SIGNALS_11 = 158;

const int _SC_SPAWN_11 = 159;

const int _SC_SPORADIC_SERVER_11 = 160;

const int _SC_THREAD_SPORADIC_SERVER_11 = 161;

const int _SC_SYSTEM_DATABASE_11 = 162;

const int _SC_SYSTEM_DATABASE_R_11 = 163;

const int _SC_TIMEOUTS_11 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_11 = 165;

const int _SC_USER_GROUPS_11 = 166;

const int _SC_USER_GROUPS_R_11 = 167;

const int _SC_2_PBS_11 = 168;

const int _SC_2_PBS_ACCOUNTING_11 = 169;

const int _SC_2_PBS_LOCATE_11 = 170;

const int _SC_2_PBS_MESSAGE_11 = 171;

const int _SC_2_PBS_TRACK_11 = 172;

const int _SC_SYMLOOP_MAX_11 = 173;

const int _SC_STREAMS_11 = 174;

const int _SC_2_PBS_CHECKPOINT_11 = 175;

const int _SC_V6_ILP32_OFF32_11 = 176;

const int _SC_V6_ILP32_OFFBIG_11 = 177;

const int _SC_V6_LP64_OFF64_11 = 178;

const int _SC_V6_LPBIG_OFFBIG_11 = 179;

const int _SC_HOST_NAME_MAX_11 = 180;

const int _SC_TRACE_11 = 181;

const int _SC_TRACE_EVENT_FILTER_11 = 182;

const int _SC_TRACE_INHERIT_11 = 183;

const int _SC_TRACE_LOG_11 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_11 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_11 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_11 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_11 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_11 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_11 = 190;

const int _SC_LEVEL2_CACHE_SIZE_11 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_11 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_11 = 193;

const int _SC_LEVEL3_CACHE_SIZE_11 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_11 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_11 = 196;

const int _SC_LEVEL4_CACHE_SIZE_11 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_11 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_11 = 199;

const int _SC_IPV6_11 = 235;

const int _SC_RAW_SOCKETS_11 = 236;

const int _SC_V7_ILP32_OFF32_11 = 237;

const int _SC_V7_ILP32_OFFBIG_11 = 238;

const int _SC_V7_LP64_OFF64_11 = 239;

const int _SC_V7_LPBIG_OFFBIG_11 = 240;

const int _SC_SS_REPL_MAX_11 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_11 = 242;

const int _SC_TRACE_NAME_MAX_11 = 243;

const int _SC_TRACE_SYS_MAX_11 = 244;

const int _SC_TRACE_USER_EVENT_MAX_11 = 245;

const int _SC_XOPEN_STREAMS_11 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_11 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_11 = 248;

const int _CS_PATH_11 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_11 = 1;

const int _CS_GNU_LIBC_VERSION_11 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_11 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_11 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_11 = 5;

const int _CS_LFS_CFLAGS_11 = 1000;

const int _CS_LFS_LDFLAGS_11 = 1001;

const int _CS_LFS_LIBS_11 = 1002;

const int _CS_LFS_LINTFLAGS_11 = 1003;

const int _CS_LFS64_CFLAGS_11 = 1004;

const int _CS_LFS64_LDFLAGS_11 = 1005;

const int _CS_LFS64_LIBS_11 = 1006;

const int _CS_LFS64_LINTFLAGS_11 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_11 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_11 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_11 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_11 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_11 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_11 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_11 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_11 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_11 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_11 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_11 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_11 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_11 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_11 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_11 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_11 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_11 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_11 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_11 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_11 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_11 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_11 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_11 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_11 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_11 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_11 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_11 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_11 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_11 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_11 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_11 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_11 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_11 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_11 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_11 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_11 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_11 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_11 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_11 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_11 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_11 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_11 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_11 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_11 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_11 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_11 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_11 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_11 = 1147;

const int _CS_V6_ENV_11 = 1148;

const int _CS_V7_ENV_11 = 1149;

const int _PC_LINK_MAX_12 = 0;

const int _PC_MAX_CANON_12 = 1;

const int _PC_MAX_INPUT_12 = 2;

const int _PC_NAME_MAX_12 = 3;

const int _PC_PATH_MAX_12 = 4;

const int _PC_PIPE_BUF_12 = 5;

const int _PC_CHOWN_RESTRICTED_12 = 6;

const int _PC_NO_TRUNC_12 = 7;

const int _PC_VDISABLE_12 = 8;

const int _PC_SYNC_IO_12 = 9;

const int _PC_ASYNC_IO_12 = 10;

const int _PC_PRIO_IO_12 = 11;

const int _PC_SOCK_MAXBUF_12 = 12;

const int _PC_FILESIZEBITS_12 = 13;

const int _PC_REC_INCR_XFER_SIZE_12 = 14;

const int _PC_REC_MAX_XFER_SIZE_12 = 15;

const int _PC_REC_MIN_XFER_SIZE_12 = 16;

const int _PC_REC_XFER_ALIGN_12 = 17;

const int _PC_ALLOC_SIZE_MIN_12 = 18;

const int _PC_SYMLINK_MAX_12 = 19;

const int _PC_2_SYMLINKS_12 = 20;

const int _SC_ARG_MAX_12 = 0;

const int _SC_CHILD_MAX_12 = 1;

const int _SC_CLK_TCK_12 = 2;

const int _SC_NGROUPS_MAX_12 = 3;

const int _SC_OPEN_MAX_12 = 4;

const int _SC_STREAM_MAX_12 = 5;

const int _SC_TZNAME_MAX_12 = 6;

const int _SC_JOB_CONTROL_12 = 7;

const int _SC_SAVED_IDS_12 = 8;

const int _SC_REALTIME_SIGNALS_12 = 9;

const int _SC_PRIORITY_SCHEDULING_12 = 10;

const int _SC_TIMERS_12 = 11;

const int _SC_ASYNCHRONOUS_IO_12 = 12;

const int _SC_PRIORITIZED_IO_12 = 13;

const int _SC_SYNCHRONIZED_IO_12 = 14;

const int _SC_FSYNC_12 = 15;

const int _SC_MAPPED_FILES_12 = 16;

const int _SC_MEMLOCK_12 = 17;

const int _SC_MEMLOCK_RANGE_12 = 18;

const int _SC_MEMORY_PROTECTION_12 = 19;

const int _SC_MESSAGE_PASSING_12 = 20;

const int _SC_SEMAPHORES_12 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_12 = 22;

const int _SC_AIO_LISTIO_MAX_12 = 23;

const int _SC_AIO_MAX_12 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_12 = 25;

const int _SC_DELAYTIMER_MAX_12 = 26;

const int _SC_MQ_OPEN_MAX_12 = 27;

const int _SC_MQ_PRIO_MAX_12 = 28;

const int _SC_VERSION_12 = 29;

const int _SC_PAGESIZE_12 = 30;

const int _SC_RTSIG_MAX_12 = 31;

const int _SC_SEM_NSEMS_MAX_12 = 32;

const int _SC_SEM_VALUE_MAX_12 = 33;

const int _SC_SIGQUEUE_MAX_12 = 34;

const int _SC_TIMER_MAX_12 = 35;

const int _SC_BC_BASE_MAX_12 = 36;

const int _SC_BC_DIM_MAX_12 = 37;

const int _SC_BC_SCALE_MAX_12 = 38;

const int _SC_BC_STRING_MAX_12 = 39;

const int _SC_COLL_WEIGHTS_MAX_12 = 40;

const int _SC_EQUIV_CLASS_MAX_12 = 41;

const int _SC_EXPR_NEST_MAX_12 = 42;

const int _SC_LINE_MAX_12 = 43;

const int _SC_RE_DUP_MAX_12 = 44;

const int _SC_CHARCLASS_NAME_MAX_12 = 45;

const int _SC_2_VERSION_12 = 46;

const int _SC_2_C_BIND_12 = 47;

const int _SC_2_C_DEV_12 = 48;

const int _SC_2_FORT_DEV_12 = 49;

const int _SC_2_FORT_RUN_12 = 50;

const int _SC_2_SW_DEV_12 = 51;

const int _SC_2_LOCALEDEF_12 = 52;

const int _SC_PII_12 = 53;

const int _SC_PII_XTI_12 = 54;

const int _SC_PII_SOCKET_12 = 55;

const int _SC_PII_INTERNET_12 = 56;

const int _SC_PII_OSI_12 = 57;

const int _SC_POLL_12 = 58;

const int _SC_SELECT_12 = 59;

const int _SC_UIO_MAXIOV_12 = 60;

const int _SC_IOV_MAX_12 = 60;

const int _SC_PII_INTERNET_STREAM_12 = 61;

const int _SC_PII_INTERNET_DGRAM_12 = 62;

const int _SC_PII_OSI_COTS_12 = 63;

const int _SC_PII_OSI_CLTS_12 = 64;

const int _SC_PII_OSI_M_12 = 65;

const int _SC_T_IOV_MAX_12 = 66;

const int _SC_THREADS_12 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_12 = 68;

const int _SC_GETGR_R_SIZE_MAX_12 = 69;

const int _SC_GETPW_R_SIZE_MAX_12 = 70;

const int _SC_LOGIN_NAME_MAX_12 = 71;

const int _SC_TTY_NAME_MAX_12 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_12 = 73;

const int _SC_THREAD_KEYS_MAX_12 = 74;

const int _SC_THREAD_STACK_MIN_12 = 75;

const int _SC_THREAD_THREADS_MAX_12 = 76;

const int _SC_THREAD_ATTR_STACKADDR_12 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_12 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_12 = 79;

const int _SC_THREAD_PRIO_INHERIT_12 = 80;

const int _SC_THREAD_PRIO_PROTECT_12 = 81;

const int _SC_THREAD_PROCESS_SHARED_12 = 82;

const int _SC_NPROCESSORS_CONF_12 = 83;

const int _SC_NPROCESSORS_ONLN_12 = 84;

const int _SC_PHYS_PAGES_12 = 85;

const int _SC_AVPHYS_PAGES_12 = 86;

const int _SC_ATEXIT_MAX_12 = 87;

const int _SC_PASS_MAX_12 = 88;

const int _SC_XOPEN_VERSION_12 = 89;

const int _SC_XOPEN_XCU_VERSION_12 = 90;

const int _SC_XOPEN_UNIX_12 = 91;

const int _SC_XOPEN_CRYPT_12 = 92;

const int _SC_XOPEN_ENH_I18N_12 = 93;

const int _SC_XOPEN_SHM_12 = 94;

const int _SC_2_CHAR_TERM_12 = 95;

const int _SC_2_C_VERSION_12 = 96;

const int _SC_2_UPE_12 = 97;

const int _SC_XOPEN_XPG2_12 = 98;

const int _SC_XOPEN_XPG3_12 = 99;

const int _SC_XOPEN_XPG4_12 = 100;

const int _SC_CHAR_BIT_12 = 101;

const int _SC_CHAR_MAX_12 = 102;

const int _SC_CHAR_MIN_12 = 103;

const int _SC_INT_MAX_12 = 104;

const int _SC_INT_MIN_12 = 105;

const int _SC_LONG_BIT_12 = 106;

const int _SC_WORD_BIT_12 = 107;

const int _SC_MB_LEN_MAX_12 = 108;

const int _SC_NZERO_12 = 109;

const int _SC_SSIZE_MAX_12 = 110;

const int _SC_SCHAR_MAX_12 = 111;

const int _SC_SCHAR_MIN_12 = 112;

const int _SC_SHRT_MAX_12 = 113;

const int _SC_SHRT_MIN_12 = 114;

const int _SC_UCHAR_MAX_12 = 115;

const int _SC_UINT_MAX_12 = 116;

const int _SC_ULONG_MAX_12 = 117;

const int _SC_USHRT_MAX_12 = 118;

const int _SC_NL_ARGMAX_12 = 119;

const int _SC_NL_LANGMAX_12 = 120;

const int _SC_NL_MSGMAX_12 = 121;

const int _SC_NL_NMAX_12 = 122;

const int _SC_NL_SETMAX_12 = 123;

const int _SC_NL_TEXTMAX_12 = 124;

const int _SC_XBS5_ILP32_OFF32_12 = 125;

const int _SC_XBS5_ILP32_OFFBIG_12 = 126;

const int _SC_XBS5_LP64_OFF64_12 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_12 = 128;

const int _SC_XOPEN_LEGACY_12 = 129;

const int _SC_XOPEN_REALTIME_12 = 130;

const int _SC_XOPEN_REALTIME_THREADS_12 = 131;

const int _SC_ADVISORY_INFO_12 = 132;

const int _SC_BARRIERS_12 = 133;

const int _SC_BASE_12 = 134;

const int _SC_C_LANG_SUPPORT_12 = 135;

const int _SC_C_LANG_SUPPORT_R_12 = 136;

const int _SC_CLOCK_SELECTION_12 = 137;

const int _SC_CPUTIME_12 = 138;

const int _SC_THREAD_CPUTIME_12 = 139;

const int _SC_DEVICE_IO_12 = 140;

const int _SC_DEVICE_SPECIFIC_12 = 141;

const int _SC_DEVICE_SPECIFIC_R_12 = 142;

const int _SC_FD_MGMT_12 = 143;

const int _SC_FIFO_12 = 144;

const int _SC_PIPE_12 = 145;

const int _SC_FILE_ATTRIBUTES_12 = 146;

const int _SC_FILE_LOCKING_12 = 147;

const int _SC_FILE_SYSTEM_12 = 148;

const int _SC_MONOTONIC_CLOCK_12 = 149;

const int _SC_MULTI_PROCESS_12 = 150;

const int _SC_SINGLE_PROCESS_12 = 151;

const int _SC_NETWORKING_12 = 152;

const int _SC_READER_WRITER_LOCKS_12 = 153;

const int _SC_SPIN_LOCKS_12 = 154;

const int _SC_REGEXP_12 = 155;

const int _SC_REGEX_VERSION_12 = 156;

const int _SC_SHELL_12 = 157;

const int _SC_SIGNALS_12 = 158;

const int _SC_SPAWN_12 = 159;

const int _SC_SPORADIC_SERVER_12 = 160;

const int _SC_THREAD_SPORADIC_SERVER_12 = 161;

const int _SC_SYSTEM_DATABASE_12 = 162;

const int _SC_SYSTEM_DATABASE_R_12 = 163;

const int _SC_TIMEOUTS_12 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_12 = 165;

const int _SC_USER_GROUPS_12 = 166;

const int _SC_USER_GROUPS_R_12 = 167;

const int _SC_2_PBS_12 = 168;

const int _SC_2_PBS_ACCOUNTING_12 = 169;

const int _SC_2_PBS_LOCATE_12 = 170;

const int _SC_2_PBS_MESSAGE_12 = 171;

const int _SC_2_PBS_TRACK_12 = 172;

const int _SC_SYMLOOP_MAX_12 = 173;

const int _SC_STREAMS_12 = 174;

const int _SC_2_PBS_CHECKPOINT_12 = 175;

const int _SC_V6_ILP32_OFF32_12 = 176;

const int _SC_V6_ILP32_OFFBIG_12 = 177;

const int _SC_V6_LP64_OFF64_12 = 178;

const int _SC_V6_LPBIG_OFFBIG_12 = 179;

const int _SC_HOST_NAME_MAX_12 = 180;

const int _SC_TRACE_12 = 181;

const int _SC_TRACE_EVENT_FILTER_12 = 182;

const int _SC_TRACE_INHERIT_12 = 183;

const int _SC_TRACE_LOG_12 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_12 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_12 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_12 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_12 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_12 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_12 = 190;

const int _SC_LEVEL2_CACHE_SIZE_12 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_12 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_12 = 193;

const int _SC_LEVEL3_CACHE_SIZE_12 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_12 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_12 = 196;

const int _SC_LEVEL4_CACHE_SIZE_12 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_12 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_12 = 199;

const int _SC_IPV6_12 = 235;

const int _SC_RAW_SOCKETS_12 = 236;

const int _SC_V7_ILP32_OFF32_12 = 237;

const int _SC_V7_ILP32_OFFBIG_12 = 238;

const int _SC_V7_LP64_OFF64_12 = 239;

const int _SC_V7_LPBIG_OFFBIG_12 = 240;

const int _SC_SS_REPL_MAX_12 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_12 = 242;

const int _SC_TRACE_NAME_MAX_12 = 243;

const int _SC_TRACE_SYS_MAX_12 = 244;

const int _SC_TRACE_USER_EVENT_MAX_12 = 245;

const int _SC_XOPEN_STREAMS_12 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_12 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_12 = 248;

const int _CS_PATH_12 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_12 = 1;

const int _CS_GNU_LIBC_VERSION_12 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_12 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_12 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_12 = 5;

const int _CS_LFS_CFLAGS_12 = 1000;

const int _CS_LFS_LDFLAGS_12 = 1001;

const int _CS_LFS_LIBS_12 = 1002;

const int _CS_LFS_LINTFLAGS_12 = 1003;

const int _CS_LFS64_CFLAGS_12 = 1004;

const int _CS_LFS64_LDFLAGS_12 = 1005;

const int _CS_LFS64_LIBS_12 = 1006;

const int _CS_LFS64_LINTFLAGS_12 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_12 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_12 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_12 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_12 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_12 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_12 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_12 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_12 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_12 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_12 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_12 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_12 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_12 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_12 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_12 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_12 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_12 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_12 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_12 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_12 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_12 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_12 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_12 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_12 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_12 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_12 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_12 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_12 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_12 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_12 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_12 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_12 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_12 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_12 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_12 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_12 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_12 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_12 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_12 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_12 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_12 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_12 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_12 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_12 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_12 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_12 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_12 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_12 = 1147;

const int _CS_V6_ENV_12 = 1148;

const int _CS_V7_ENV_12 = 1149;

const int _PC_LINK_MAX_13 = 0;

const int _PC_MAX_CANON_13 = 1;

const int _PC_MAX_INPUT_13 = 2;

const int _PC_NAME_MAX_13 = 3;

const int _PC_PATH_MAX_13 = 4;

const int _PC_PIPE_BUF_13 = 5;

const int _PC_CHOWN_RESTRICTED_13 = 6;

const int _PC_NO_TRUNC_13 = 7;

const int _PC_VDISABLE_13 = 8;

const int _PC_SYNC_IO_13 = 9;

const int _PC_ASYNC_IO_13 = 10;

const int _PC_PRIO_IO_13 = 11;

const int _PC_SOCK_MAXBUF_13 = 12;

const int _PC_FILESIZEBITS_13 = 13;

const int _PC_REC_INCR_XFER_SIZE_13 = 14;

const int _PC_REC_MAX_XFER_SIZE_13 = 15;

const int _PC_REC_MIN_XFER_SIZE_13 = 16;

const int _PC_REC_XFER_ALIGN_13 = 17;

const int _PC_ALLOC_SIZE_MIN_13 = 18;

const int _PC_SYMLINK_MAX_13 = 19;

const int _PC_2_SYMLINKS_13 = 20;

const int _SC_ARG_MAX_13 = 0;

const int _SC_CHILD_MAX_13 = 1;

const int _SC_CLK_TCK_13 = 2;

const int _SC_NGROUPS_MAX_13 = 3;

const int _SC_OPEN_MAX_13 = 4;

const int _SC_STREAM_MAX_13 = 5;

const int _SC_TZNAME_MAX_13 = 6;

const int _SC_JOB_CONTROL_13 = 7;

const int _SC_SAVED_IDS_13 = 8;

const int _SC_REALTIME_SIGNALS_13 = 9;

const int _SC_PRIORITY_SCHEDULING_13 = 10;

const int _SC_TIMERS_13 = 11;

const int _SC_ASYNCHRONOUS_IO_13 = 12;

const int _SC_PRIORITIZED_IO_13 = 13;

const int _SC_SYNCHRONIZED_IO_13 = 14;

const int _SC_FSYNC_13 = 15;

const int _SC_MAPPED_FILES_13 = 16;

const int _SC_MEMLOCK_13 = 17;

const int _SC_MEMLOCK_RANGE_13 = 18;

const int _SC_MEMORY_PROTECTION_13 = 19;

const int _SC_MESSAGE_PASSING_13 = 20;

const int _SC_SEMAPHORES_13 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_13 = 22;

const int _SC_AIO_LISTIO_MAX_13 = 23;

const int _SC_AIO_MAX_13 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_13 = 25;

const int _SC_DELAYTIMER_MAX_13 = 26;

const int _SC_MQ_OPEN_MAX_13 = 27;

const int _SC_MQ_PRIO_MAX_13 = 28;

const int _SC_VERSION_13 = 29;

const int _SC_PAGESIZE_13 = 30;

const int _SC_RTSIG_MAX_13 = 31;

const int _SC_SEM_NSEMS_MAX_13 = 32;

const int _SC_SEM_VALUE_MAX_13 = 33;

const int _SC_SIGQUEUE_MAX_13 = 34;

const int _SC_TIMER_MAX_13 = 35;

const int _SC_BC_BASE_MAX_13 = 36;

const int _SC_BC_DIM_MAX_13 = 37;

const int _SC_BC_SCALE_MAX_13 = 38;

const int _SC_BC_STRING_MAX_13 = 39;

const int _SC_COLL_WEIGHTS_MAX_13 = 40;

const int _SC_EQUIV_CLASS_MAX_13 = 41;

const int _SC_EXPR_NEST_MAX_13 = 42;

const int _SC_LINE_MAX_13 = 43;

const int _SC_RE_DUP_MAX_13 = 44;

const int _SC_CHARCLASS_NAME_MAX_13 = 45;

const int _SC_2_VERSION_13 = 46;

const int _SC_2_C_BIND_13 = 47;

const int _SC_2_C_DEV_13 = 48;

const int _SC_2_FORT_DEV_13 = 49;

const int _SC_2_FORT_RUN_13 = 50;

const int _SC_2_SW_DEV_13 = 51;

const int _SC_2_LOCALEDEF_13 = 52;

const int _SC_PII_13 = 53;

const int _SC_PII_XTI_13 = 54;

const int _SC_PII_SOCKET_13 = 55;

const int _SC_PII_INTERNET_13 = 56;

const int _SC_PII_OSI_13 = 57;

const int _SC_POLL_13 = 58;

const int _SC_SELECT_13 = 59;

const int _SC_UIO_MAXIOV_13 = 60;

const int _SC_IOV_MAX_13 = 60;

const int _SC_PII_INTERNET_STREAM_13 = 61;

const int _SC_PII_INTERNET_DGRAM_13 = 62;

const int _SC_PII_OSI_COTS_13 = 63;

const int _SC_PII_OSI_CLTS_13 = 64;

const int _SC_PII_OSI_M_13 = 65;

const int _SC_T_IOV_MAX_13 = 66;

const int _SC_THREADS_13 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_13 = 68;

const int _SC_GETGR_R_SIZE_MAX_13 = 69;

const int _SC_GETPW_R_SIZE_MAX_13 = 70;

const int _SC_LOGIN_NAME_MAX_13 = 71;

const int _SC_TTY_NAME_MAX_13 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_13 = 73;

const int _SC_THREAD_KEYS_MAX_13 = 74;

const int _SC_THREAD_STACK_MIN_13 = 75;

const int _SC_THREAD_THREADS_MAX_13 = 76;

const int _SC_THREAD_ATTR_STACKADDR_13 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_13 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_13 = 79;

const int _SC_THREAD_PRIO_INHERIT_13 = 80;

const int _SC_THREAD_PRIO_PROTECT_13 = 81;

const int _SC_THREAD_PROCESS_SHARED_13 = 82;

const int _SC_NPROCESSORS_CONF_13 = 83;

const int _SC_NPROCESSORS_ONLN_13 = 84;

const int _SC_PHYS_PAGES_13 = 85;

const int _SC_AVPHYS_PAGES_13 = 86;

const int _SC_ATEXIT_MAX_13 = 87;

const int _SC_PASS_MAX_13 = 88;

const int _SC_XOPEN_VERSION_13 = 89;

const int _SC_XOPEN_XCU_VERSION_13 = 90;

const int _SC_XOPEN_UNIX_13 = 91;

const int _SC_XOPEN_CRYPT_13 = 92;

const int _SC_XOPEN_ENH_I18N_13 = 93;

const int _SC_XOPEN_SHM_13 = 94;

const int _SC_2_CHAR_TERM_13 = 95;

const int _SC_2_C_VERSION_13 = 96;

const int _SC_2_UPE_13 = 97;

const int _SC_XOPEN_XPG2_13 = 98;

const int _SC_XOPEN_XPG3_13 = 99;

const int _SC_XOPEN_XPG4_13 = 100;

const int _SC_CHAR_BIT_13 = 101;

const int _SC_CHAR_MAX_13 = 102;

const int _SC_CHAR_MIN_13 = 103;

const int _SC_INT_MAX_13 = 104;

const int _SC_INT_MIN_13 = 105;

const int _SC_LONG_BIT_13 = 106;

const int _SC_WORD_BIT_13 = 107;

const int _SC_MB_LEN_MAX_13 = 108;

const int _SC_NZERO_13 = 109;

const int _SC_SSIZE_MAX_13 = 110;

const int _SC_SCHAR_MAX_13 = 111;

const int _SC_SCHAR_MIN_13 = 112;

const int _SC_SHRT_MAX_13 = 113;

const int _SC_SHRT_MIN_13 = 114;

const int _SC_UCHAR_MAX_13 = 115;

const int _SC_UINT_MAX_13 = 116;

const int _SC_ULONG_MAX_13 = 117;

const int _SC_USHRT_MAX_13 = 118;

const int _SC_NL_ARGMAX_13 = 119;

const int _SC_NL_LANGMAX_13 = 120;

const int _SC_NL_MSGMAX_13 = 121;

const int _SC_NL_NMAX_13 = 122;

const int _SC_NL_SETMAX_13 = 123;

const int _SC_NL_TEXTMAX_13 = 124;

const int _SC_XBS5_ILP32_OFF32_13 = 125;

const int _SC_XBS5_ILP32_OFFBIG_13 = 126;

const int _SC_XBS5_LP64_OFF64_13 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_13 = 128;

const int _SC_XOPEN_LEGACY_13 = 129;

const int _SC_XOPEN_REALTIME_13 = 130;

const int _SC_XOPEN_REALTIME_THREADS_13 = 131;

const int _SC_ADVISORY_INFO_13 = 132;

const int _SC_BARRIERS_13 = 133;

const int _SC_BASE_13 = 134;

const int _SC_C_LANG_SUPPORT_13 = 135;

const int _SC_C_LANG_SUPPORT_R_13 = 136;

const int _SC_CLOCK_SELECTION_13 = 137;

const int _SC_CPUTIME_13 = 138;

const int _SC_THREAD_CPUTIME_13 = 139;

const int _SC_DEVICE_IO_13 = 140;

const int _SC_DEVICE_SPECIFIC_13 = 141;

const int _SC_DEVICE_SPECIFIC_R_13 = 142;

const int _SC_FD_MGMT_13 = 143;

const int _SC_FIFO_13 = 144;

const int _SC_PIPE_13 = 145;

const int _SC_FILE_ATTRIBUTES_13 = 146;

const int _SC_FILE_LOCKING_13 = 147;

const int _SC_FILE_SYSTEM_13 = 148;

const int _SC_MONOTONIC_CLOCK_13 = 149;

const int _SC_MULTI_PROCESS_13 = 150;

const int _SC_SINGLE_PROCESS_13 = 151;

const int _SC_NETWORKING_13 = 152;

const int _SC_READER_WRITER_LOCKS_13 = 153;

const int _SC_SPIN_LOCKS_13 = 154;

const int _SC_REGEXP_13 = 155;

const int _SC_REGEX_VERSION_13 = 156;

const int _SC_SHELL_13 = 157;

const int _SC_SIGNALS_13 = 158;

const int _SC_SPAWN_13 = 159;

const int _SC_SPORADIC_SERVER_13 = 160;

const int _SC_THREAD_SPORADIC_SERVER_13 = 161;

const int _SC_SYSTEM_DATABASE_13 = 162;

const int _SC_SYSTEM_DATABASE_R_13 = 163;

const int _SC_TIMEOUTS_13 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_13 = 165;

const int _SC_USER_GROUPS_13 = 166;

const int _SC_USER_GROUPS_R_13 = 167;

const int _SC_2_PBS_13 = 168;

const int _SC_2_PBS_ACCOUNTING_13 = 169;

const int _SC_2_PBS_LOCATE_13 = 170;

const int _SC_2_PBS_MESSAGE_13 = 171;

const int _SC_2_PBS_TRACK_13 = 172;

const int _SC_SYMLOOP_MAX_13 = 173;

const int _SC_STREAMS_13 = 174;

const int _SC_2_PBS_CHECKPOINT_13 = 175;

const int _SC_V6_ILP32_OFF32_13 = 176;

const int _SC_V6_ILP32_OFFBIG_13 = 177;

const int _SC_V6_LP64_OFF64_13 = 178;

const int _SC_V6_LPBIG_OFFBIG_13 = 179;

const int _SC_HOST_NAME_MAX_13 = 180;

const int _SC_TRACE_13 = 181;

const int _SC_TRACE_EVENT_FILTER_13 = 182;

const int _SC_TRACE_INHERIT_13 = 183;

const int _SC_TRACE_LOG_13 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_13 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_13 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_13 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_13 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_13 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_13 = 190;

const int _SC_LEVEL2_CACHE_SIZE_13 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_13 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_13 = 193;

const int _SC_LEVEL3_CACHE_SIZE_13 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_13 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_13 = 196;

const int _SC_LEVEL4_CACHE_SIZE_13 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_13 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_13 = 199;

const int _SC_IPV6_13 = 235;

const int _SC_RAW_SOCKETS_13 = 236;

const int _SC_V7_ILP32_OFF32_13 = 237;

const int _SC_V7_ILP32_OFFBIG_13 = 238;

const int _SC_V7_LP64_OFF64_13 = 239;

const int _SC_V7_LPBIG_OFFBIG_13 = 240;

const int _SC_SS_REPL_MAX_13 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_13 = 242;

const int _SC_TRACE_NAME_MAX_13 = 243;

const int _SC_TRACE_SYS_MAX_13 = 244;

const int _SC_TRACE_USER_EVENT_MAX_13 = 245;

const int _SC_XOPEN_STREAMS_13 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_13 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_13 = 248;

const int _CS_PATH_13 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_13 = 1;

const int _CS_GNU_LIBC_VERSION_13 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_13 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_13 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_13 = 5;

const int _CS_LFS_CFLAGS_13 = 1000;

const int _CS_LFS_LDFLAGS_13 = 1001;

const int _CS_LFS_LIBS_13 = 1002;

const int _CS_LFS_LINTFLAGS_13 = 1003;

const int _CS_LFS64_CFLAGS_13 = 1004;

const int _CS_LFS64_LDFLAGS_13 = 1005;

const int _CS_LFS64_LIBS_13 = 1006;

const int _CS_LFS64_LINTFLAGS_13 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_13 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_13 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_13 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_13 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_13 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_13 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_13 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_13 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_13 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_13 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_13 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_13 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_13 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_13 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_13 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_13 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_13 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_13 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_13 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_13 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_13 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_13 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_13 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_13 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_13 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_13 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_13 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_13 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_13 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_13 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_13 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_13 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_13 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_13 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_13 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_13 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_13 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_13 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_13 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_13 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_13 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_13 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_13 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_13 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_13 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_13 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_13 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_13 = 1147;

const int _CS_V6_ENV_13 = 1148;

const int _CS_V7_ENV_13 = 1149;

const int _PC_LINK_MAX_14 = 0;

const int _PC_MAX_CANON_14 = 1;

const int _PC_MAX_INPUT_14 = 2;

const int _PC_NAME_MAX_14 = 3;

const int _PC_PATH_MAX_14 = 4;

const int _PC_PIPE_BUF_14 = 5;

const int _PC_CHOWN_RESTRICTED_14 = 6;

const int _PC_NO_TRUNC_14 = 7;

const int _PC_VDISABLE_14 = 8;

const int _PC_SYNC_IO_14 = 9;

const int _PC_ASYNC_IO_14 = 10;

const int _PC_PRIO_IO_14 = 11;

const int _PC_SOCK_MAXBUF_14 = 12;

const int _PC_FILESIZEBITS_14 = 13;

const int _PC_REC_INCR_XFER_SIZE_14 = 14;

const int _PC_REC_MAX_XFER_SIZE_14 = 15;

const int _PC_REC_MIN_XFER_SIZE_14 = 16;

const int _PC_REC_XFER_ALIGN_14 = 17;

const int _PC_ALLOC_SIZE_MIN_14 = 18;

const int _PC_SYMLINK_MAX_14 = 19;

const int _PC_2_SYMLINKS_14 = 20;

const int _SC_ARG_MAX_14 = 0;

const int _SC_CHILD_MAX_14 = 1;

const int _SC_CLK_TCK_14 = 2;

const int _SC_NGROUPS_MAX_14 = 3;

const int _SC_OPEN_MAX_14 = 4;

const int _SC_STREAM_MAX_14 = 5;

const int _SC_TZNAME_MAX_14 = 6;

const int _SC_JOB_CONTROL_14 = 7;

const int _SC_SAVED_IDS_14 = 8;

const int _SC_REALTIME_SIGNALS_14 = 9;

const int _SC_PRIORITY_SCHEDULING_14 = 10;

const int _SC_TIMERS_14 = 11;

const int _SC_ASYNCHRONOUS_IO_14 = 12;

const int _SC_PRIORITIZED_IO_14 = 13;

const int _SC_SYNCHRONIZED_IO_14 = 14;

const int _SC_FSYNC_14 = 15;

const int _SC_MAPPED_FILES_14 = 16;

const int _SC_MEMLOCK_14 = 17;

const int _SC_MEMLOCK_RANGE_14 = 18;

const int _SC_MEMORY_PROTECTION_14 = 19;

const int _SC_MESSAGE_PASSING_14 = 20;

const int _SC_SEMAPHORES_14 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_14 = 22;

const int _SC_AIO_LISTIO_MAX_14 = 23;

const int _SC_AIO_MAX_14 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_14 = 25;

const int _SC_DELAYTIMER_MAX_14 = 26;

const int _SC_MQ_OPEN_MAX_14 = 27;

const int _SC_MQ_PRIO_MAX_14 = 28;

const int _SC_VERSION_14 = 29;

const int _SC_PAGESIZE_14 = 30;

const int _SC_RTSIG_MAX_14 = 31;

const int _SC_SEM_NSEMS_MAX_14 = 32;

const int _SC_SEM_VALUE_MAX_14 = 33;

const int _SC_SIGQUEUE_MAX_14 = 34;

const int _SC_TIMER_MAX_14 = 35;

const int _SC_BC_BASE_MAX_14 = 36;

const int _SC_BC_DIM_MAX_14 = 37;

const int _SC_BC_SCALE_MAX_14 = 38;

const int _SC_BC_STRING_MAX_14 = 39;

const int _SC_COLL_WEIGHTS_MAX_14 = 40;

const int _SC_EQUIV_CLASS_MAX_14 = 41;

const int _SC_EXPR_NEST_MAX_14 = 42;

const int _SC_LINE_MAX_14 = 43;

const int _SC_RE_DUP_MAX_14 = 44;

const int _SC_CHARCLASS_NAME_MAX_14 = 45;

const int _SC_2_VERSION_14 = 46;

const int _SC_2_C_BIND_14 = 47;

const int _SC_2_C_DEV_14 = 48;

const int _SC_2_FORT_DEV_14 = 49;

const int _SC_2_FORT_RUN_14 = 50;

const int _SC_2_SW_DEV_14 = 51;

const int _SC_2_LOCALEDEF_14 = 52;

const int _SC_PII_14 = 53;

const int _SC_PII_XTI_14 = 54;

const int _SC_PII_SOCKET_14 = 55;

const int _SC_PII_INTERNET_14 = 56;

const int _SC_PII_OSI_14 = 57;

const int _SC_POLL_14 = 58;

const int _SC_SELECT_14 = 59;

const int _SC_UIO_MAXIOV_14 = 60;

const int _SC_IOV_MAX_14 = 60;

const int _SC_PII_INTERNET_STREAM_14 = 61;

const int _SC_PII_INTERNET_DGRAM_14 = 62;

const int _SC_PII_OSI_COTS_14 = 63;

const int _SC_PII_OSI_CLTS_14 = 64;

const int _SC_PII_OSI_M_14 = 65;

const int _SC_T_IOV_MAX_14 = 66;

const int _SC_THREADS_14 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_14 = 68;

const int _SC_GETGR_R_SIZE_MAX_14 = 69;

const int _SC_GETPW_R_SIZE_MAX_14 = 70;

const int _SC_LOGIN_NAME_MAX_14 = 71;

const int _SC_TTY_NAME_MAX_14 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_14 = 73;

const int _SC_THREAD_KEYS_MAX_14 = 74;

const int _SC_THREAD_STACK_MIN_14 = 75;

const int _SC_THREAD_THREADS_MAX_14 = 76;

const int _SC_THREAD_ATTR_STACKADDR_14 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_14 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_14 = 79;

const int _SC_THREAD_PRIO_INHERIT_14 = 80;

const int _SC_THREAD_PRIO_PROTECT_14 = 81;

const int _SC_THREAD_PROCESS_SHARED_14 = 82;

const int _SC_NPROCESSORS_CONF_14 = 83;

const int _SC_NPROCESSORS_ONLN_14 = 84;

const int _SC_PHYS_PAGES_14 = 85;

const int _SC_AVPHYS_PAGES_14 = 86;

const int _SC_ATEXIT_MAX_14 = 87;

const int _SC_PASS_MAX_14 = 88;

const int _SC_XOPEN_VERSION_14 = 89;

const int _SC_XOPEN_XCU_VERSION_14 = 90;

const int _SC_XOPEN_UNIX_14 = 91;

const int _SC_XOPEN_CRYPT_14 = 92;

const int _SC_XOPEN_ENH_I18N_14 = 93;

const int _SC_XOPEN_SHM_14 = 94;

const int _SC_2_CHAR_TERM_14 = 95;

const int _SC_2_C_VERSION_14 = 96;

const int _SC_2_UPE_14 = 97;

const int _SC_XOPEN_XPG2_14 = 98;

const int _SC_XOPEN_XPG3_14 = 99;

const int _SC_XOPEN_XPG4_14 = 100;

const int _SC_CHAR_BIT_14 = 101;

const int _SC_CHAR_MAX_14 = 102;

const int _SC_CHAR_MIN_14 = 103;

const int _SC_INT_MAX_14 = 104;

const int _SC_INT_MIN_14 = 105;

const int _SC_LONG_BIT_14 = 106;

const int _SC_WORD_BIT_14 = 107;

const int _SC_MB_LEN_MAX_14 = 108;

const int _SC_NZERO_14 = 109;

const int _SC_SSIZE_MAX_14 = 110;

const int _SC_SCHAR_MAX_14 = 111;

const int _SC_SCHAR_MIN_14 = 112;

const int _SC_SHRT_MAX_14 = 113;

const int _SC_SHRT_MIN_14 = 114;

const int _SC_UCHAR_MAX_14 = 115;

const int _SC_UINT_MAX_14 = 116;

const int _SC_ULONG_MAX_14 = 117;

const int _SC_USHRT_MAX_14 = 118;

const int _SC_NL_ARGMAX_14 = 119;

const int _SC_NL_LANGMAX_14 = 120;

const int _SC_NL_MSGMAX_14 = 121;

const int _SC_NL_NMAX_14 = 122;

const int _SC_NL_SETMAX_14 = 123;

const int _SC_NL_TEXTMAX_14 = 124;

const int _SC_XBS5_ILP32_OFF32_14 = 125;

const int _SC_XBS5_ILP32_OFFBIG_14 = 126;

const int _SC_XBS5_LP64_OFF64_14 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_14 = 128;

const int _SC_XOPEN_LEGACY_14 = 129;

const int _SC_XOPEN_REALTIME_14 = 130;

const int _SC_XOPEN_REALTIME_THREADS_14 = 131;

const int _SC_ADVISORY_INFO_14 = 132;

const int _SC_BARRIERS_14 = 133;

const int _SC_BASE_14 = 134;

const int _SC_C_LANG_SUPPORT_14 = 135;

const int _SC_C_LANG_SUPPORT_R_14 = 136;

const int _SC_CLOCK_SELECTION_14 = 137;

const int _SC_CPUTIME_14 = 138;

const int _SC_THREAD_CPUTIME_14 = 139;

const int _SC_DEVICE_IO_14 = 140;

const int _SC_DEVICE_SPECIFIC_14 = 141;

const int _SC_DEVICE_SPECIFIC_R_14 = 142;

const int _SC_FD_MGMT_14 = 143;

const int _SC_FIFO_14 = 144;

const int _SC_PIPE_14 = 145;

const int _SC_FILE_ATTRIBUTES_14 = 146;

const int _SC_FILE_LOCKING_14 = 147;

const int _SC_FILE_SYSTEM_14 = 148;

const int _SC_MONOTONIC_CLOCK_14 = 149;

const int _SC_MULTI_PROCESS_14 = 150;

const int _SC_SINGLE_PROCESS_14 = 151;

const int _SC_NETWORKING_14 = 152;

const int _SC_READER_WRITER_LOCKS_14 = 153;

const int _SC_SPIN_LOCKS_14 = 154;

const int _SC_REGEXP_14 = 155;

const int _SC_REGEX_VERSION_14 = 156;

const int _SC_SHELL_14 = 157;

const int _SC_SIGNALS_14 = 158;

const int _SC_SPAWN_14 = 159;

const int _SC_SPORADIC_SERVER_14 = 160;

const int _SC_THREAD_SPORADIC_SERVER_14 = 161;

const int _SC_SYSTEM_DATABASE_14 = 162;

const int _SC_SYSTEM_DATABASE_R_14 = 163;

const int _SC_TIMEOUTS_14 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_14 = 165;

const int _SC_USER_GROUPS_14 = 166;

const int _SC_USER_GROUPS_R_14 = 167;

const int _SC_2_PBS_14 = 168;

const int _SC_2_PBS_ACCOUNTING_14 = 169;

const int _SC_2_PBS_LOCATE_14 = 170;

const int _SC_2_PBS_MESSAGE_14 = 171;

const int _SC_2_PBS_TRACK_14 = 172;

const int _SC_SYMLOOP_MAX_14 = 173;

const int _SC_STREAMS_14 = 174;

const int _SC_2_PBS_CHECKPOINT_14 = 175;

const int _SC_V6_ILP32_OFF32_14 = 176;

const int _SC_V6_ILP32_OFFBIG_14 = 177;

const int _SC_V6_LP64_OFF64_14 = 178;

const int _SC_V6_LPBIG_OFFBIG_14 = 179;

const int _SC_HOST_NAME_MAX_14 = 180;

const int _SC_TRACE_14 = 181;

const int _SC_TRACE_EVENT_FILTER_14 = 182;

const int _SC_TRACE_INHERIT_14 = 183;

const int _SC_TRACE_LOG_14 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_14 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_14 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_14 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_14 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_14 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_14 = 190;

const int _SC_LEVEL2_CACHE_SIZE_14 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_14 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_14 = 193;

const int _SC_LEVEL3_CACHE_SIZE_14 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_14 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_14 = 196;

const int _SC_LEVEL4_CACHE_SIZE_14 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_14 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_14 = 199;

const int _SC_IPV6_14 = 235;

const int _SC_RAW_SOCKETS_14 = 236;

const int _SC_V7_ILP32_OFF32_14 = 237;

const int _SC_V7_ILP32_OFFBIG_14 = 238;

const int _SC_V7_LP64_OFF64_14 = 239;

const int _SC_V7_LPBIG_OFFBIG_14 = 240;

const int _SC_SS_REPL_MAX_14 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_14 = 242;

const int _SC_TRACE_NAME_MAX_14 = 243;

const int _SC_TRACE_SYS_MAX_14 = 244;

const int _SC_TRACE_USER_EVENT_MAX_14 = 245;

const int _SC_XOPEN_STREAMS_14 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_14 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_14 = 248;

const int _CS_PATH_14 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_14 = 1;

const int _CS_GNU_LIBC_VERSION_14 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_14 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_14 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_14 = 5;

const int _CS_LFS_CFLAGS_14 = 1000;

const int _CS_LFS_LDFLAGS_14 = 1001;

const int _CS_LFS_LIBS_14 = 1002;

const int _CS_LFS_LINTFLAGS_14 = 1003;

const int _CS_LFS64_CFLAGS_14 = 1004;

const int _CS_LFS64_LDFLAGS_14 = 1005;

const int _CS_LFS64_LIBS_14 = 1006;

const int _CS_LFS64_LINTFLAGS_14 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_14 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_14 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_14 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_14 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_14 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_14 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_14 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_14 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_14 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_14 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_14 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_14 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_14 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_14 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_14 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_14 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_14 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_14 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_14 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_14 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_14 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_14 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_14 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_14 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_14 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_14 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_14 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_14 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_14 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_14 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_14 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_14 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_14 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_14 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_14 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_14 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_14 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_14 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_14 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_14 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_14 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_14 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_14 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_14 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_14 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_14 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_14 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_14 = 1147;

const int _CS_V6_ENV_14 = 1148;

const int _CS_V7_ENV_14 = 1149;

const int PTHREAD_CREATE_JOINABLE_2 = 0;

const int PTHREAD_CREATE_DETACHED_2 = 1;

const int PTHREAD_MUTEX_TIMED_NP_2 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_2 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_2 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_2 = 3;

const int PTHREAD_MUTEX_NORMAL_2 = 0;

const int PTHREAD_MUTEX_RECURSIVE_2 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_2 = 2;

const int PTHREAD_MUTEX_DEFAULT_2 = 0;

const int PTHREAD_MUTEX_STALLED_2 = 0;

const int PTHREAD_MUTEX_STALLED_NP_2 = 0;

const int PTHREAD_MUTEX_ROBUST_2 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_2 = 1;

const int PTHREAD_PRIO_NONE_2 = 0;

const int PTHREAD_PRIO_INHERIT_2 = 1;

const int PTHREAD_PRIO_PROTECT_2 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_2 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_2 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_2 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_2 = 0;

const int PTHREAD_INHERIT_SCHED_2 = 0;

const int PTHREAD_EXPLICIT_SCHED_2 = 1;

const int PTHREAD_SCOPE_SYSTEM_2 = 0;

const int PTHREAD_SCOPE_PROCESS_2 = 1;

const int PTHREAD_PROCESS_PRIVATE_2 = 0;

const int PTHREAD_PROCESS_SHARED_2 = 1;

const int PTHREAD_CANCEL_ENABLE_2 = 0;

const int PTHREAD_CANCEL_DISABLE_2 = 1;

const int PTHREAD_CANCEL_DEFERRED_2 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_2 = 1;

const int PTHREAD_CREATE_JOINABLE_3 = 0;

const int PTHREAD_CREATE_DETACHED_3 = 1;

const int PTHREAD_MUTEX_TIMED_NP_3 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_3 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_3 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_3 = 3;

const int PTHREAD_MUTEX_NORMAL_3 = 0;

const int PTHREAD_MUTEX_RECURSIVE_3 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_3 = 2;

const int PTHREAD_MUTEX_DEFAULT_3 = 0;

const int PTHREAD_MUTEX_STALLED_3 = 0;

const int PTHREAD_MUTEX_STALLED_NP_3 = 0;

const int PTHREAD_MUTEX_ROBUST_3 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_3 = 1;

const int PTHREAD_PRIO_NONE_3 = 0;

const int PTHREAD_PRIO_INHERIT_3 = 1;

const int PTHREAD_PRIO_PROTECT_3 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_3 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_3 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_3 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_3 = 0;

const int PTHREAD_INHERIT_SCHED_3 = 0;

const int PTHREAD_EXPLICIT_SCHED_3 = 1;

const int PTHREAD_SCOPE_SYSTEM_3 = 0;

const int PTHREAD_SCOPE_PROCESS_3 = 1;

const int PTHREAD_PROCESS_PRIVATE_3 = 0;

const int PTHREAD_PROCESS_SHARED_3 = 1;

const int PTHREAD_CANCEL_ENABLE_3 = 0;

const int PTHREAD_CANCEL_DISABLE_3 = 1;

const int PTHREAD_CANCEL_DEFERRED_3 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_3 = 1;

const int PTHREAD_CREATE_JOINABLE_4 = 0;

const int PTHREAD_CREATE_DETACHED_4 = 1;

const int PTHREAD_MUTEX_TIMED_NP_4 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_4 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_4 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_4 = 3;

const int PTHREAD_MUTEX_NORMAL_4 = 0;

const int PTHREAD_MUTEX_RECURSIVE_4 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_4 = 2;

const int PTHREAD_MUTEX_DEFAULT_4 = 0;

const int PTHREAD_MUTEX_STALLED_4 = 0;

const int PTHREAD_MUTEX_STALLED_NP_4 = 0;

const int PTHREAD_MUTEX_ROBUST_4 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_4 = 1;

const int PTHREAD_PRIO_NONE_4 = 0;

const int PTHREAD_PRIO_INHERIT_4 = 1;

const int PTHREAD_PRIO_PROTECT_4 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_4 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_4 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_4 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_4 = 0;

const int PTHREAD_INHERIT_SCHED_4 = 0;

const int PTHREAD_EXPLICIT_SCHED_4 = 1;

const int PTHREAD_SCOPE_SYSTEM_4 = 0;

const int PTHREAD_SCOPE_PROCESS_4 = 1;

const int PTHREAD_PROCESS_PRIVATE_4 = 0;

const int PTHREAD_PROCESS_SHARED_4 = 1;

const int PTHREAD_CANCEL_ENABLE_4 = 0;

const int PTHREAD_CANCEL_DISABLE_4 = 1;

const int PTHREAD_CANCEL_DEFERRED_4 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_4 = 1;

const int _PC_LINK_MAX_15 = 0;

const int _PC_MAX_CANON_15 = 1;

const int _PC_MAX_INPUT_15 = 2;

const int _PC_NAME_MAX_15 = 3;

const int _PC_PATH_MAX_15 = 4;

const int _PC_PIPE_BUF_15 = 5;

const int _PC_CHOWN_RESTRICTED_15 = 6;

const int _PC_NO_TRUNC_15 = 7;

const int _PC_VDISABLE_15 = 8;

const int _PC_SYNC_IO_15 = 9;

const int _PC_ASYNC_IO_15 = 10;

const int _PC_PRIO_IO_15 = 11;

const int _PC_SOCK_MAXBUF_15 = 12;

const int _PC_FILESIZEBITS_15 = 13;

const int _PC_REC_INCR_XFER_SIZE_15 = 14;

const int _PC_REC_MAX_XFER_SIZE_15 = 15;

const int _PC_REC_MIN_XFER_SIZE_15 = 16;

const int _PC_REC_XFER_ALIGN_15 = 17;

const int _PC_ALLOC_SIZE_MIN_15 = 18;

const int _PC_SYMLINK_MAX_15 = 19;

const int _PC_2_SYMLINKS_15 = 20;

const int _SC_ARG_MAX_15 = 0;

const int _SC_CHILD_MAX_15 = 1;

const int _SC_CLK_TCK_15 = 2;

const int _SC_NGROUPS_MAX_15 = 3;

const int _SC_OPEN_MAX_15 = 4;

const int _SC_STREAM_MAX_15 = 5;

const int _SC_TZNAME_MAX_15 = 6;

const int _SC_JOB_CONTROL_15 = 7;

const int _SC_SAVED_IDS_15 = 8;

const int _SC_REALTIME_SIGNALS_15 = 9;

const int _SC_PRIORITY_SCHEDULING_15 = 10;

const int _SC_TIMERS_15 = 11;

const int _SC_ASYNCHRONOUS_IO_15 = 12;

const int _SC_PRIORITIZED_IO_15 = 13;

const int _SC_SYNCHRONIZED_IO_15 = 14;

const int _SC_FSYNC_15 = 15;

const int _SC_MAPPED_FILES_15 = 16;

const int _SC_MEMLOCK_15 = 17;

const int _SC_MEMLOCK_RANGE_15 = 18;

const int _SC_MEMORY_PROTECTION_15 = 19;

const int _SC_MESSAGE_PASSING_15 = 20;

const int _SC_SEMAPHORES_15 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_15 = 22;

const int _SC_AIO_LISTIO_MAX_15 = 23;

const int _SC_AIO_MAX_15 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_15 = 25;

const int _SC_DELAYTIMER_MAX_15 = 26;

const int _SC_MQ_OPEN_MAX_15 = 27;

const int _SC_MQ_PRIO_MAX_15 = 28;

const int _SC_VERSION_15 = 29;

const int _SC_PAGESIZE_15 = 30;

const int _SC_RTSIG_MAX_15 = 31;

const int _SC_SEM_NSEMS_MAX_15 = 32;

const int _SC_SEM_VALUE_MAX_15 = 33;

const int _SC_SIGQUEUE_MAX_15 = 34;

const int _SC_TIMER_MAX_15 = 35;

const int _SC_BC_BASE_MAX_15 = 36;

const int _SC_BC_DIM_MAX_15 = 37;

const int _SC_BC_SCALE_MAX_15 = 38;

const int _SC_BC_STRING_MAX_15 = 39;

const int _SC_COLL_WEIGHTS_MAX_15 = 40;

const int _SC_EQUIV_CLASS_MAX_15 = 41;

const int _SC_EXPR_NEST_MAX_15 = 42;

const int _SC_LINE_MAX_15 = 43;

const int _SC_RE_DUP_MAX_15 = 44;

const int _SC_CHARCLASS_NAME_MAX_15 = 45;

const int _SC_2_VERSION_15 = 46;

const int _SC_2_C_BIND_15 = 47;

const int _SC_2_C_DEV_15 = 48;

const int _SC_2_FORT_DEV_15 = 49;

const int _SC_2_FORT_RUN_15 = 50;

const int _SC_2_SW_DEV_15 = 51;

const int _SC_2_LOCALEDEF_15 = 52;

const int _SC_PII_15 = 53;

const int _SC_PII_XTI_15 = 54;

const int _SC_PII_SOCKET_15 = 55;

const int _SC_PII_INTERNET_15 = 56;

const int _SC_PII_OSI_15 = 57;

const int _SC_POLL_15 = 58;

const int _SC_SELECT_15 = 59;

const int _SC_UIO_MAXIOV_15 = 60;

const int _SC_IOV_MAX_15 = 60;

const int _SC_PII_INTERNET_STREAM_15 = 61;

const int _SC_PII_INTERNET_DGRAM_15 = 62;

const int _SC_PII_OSI_COTS_15 = 63;

const int _SC_PII_OSI_CLTS_15 = 64;

const int _SC_PII_OSI_M_15 = 65;

const int _SC_T_IOV_MAX_15 = 66;

const int _SC_THREADS_15 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_15 = 68;

const int _SC_GETGR_R_SIZE_MAX_15 = 69;

const int _SC_GETPW_R_SIZE_MAX_15 = 70;

const int _SC_LOGIN_NAME_MAX_15 = 71;

const int _SC_TTY_NAME_MAX_15 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_15 = 73;

const int _SC_THREAD_KEYS_MAX_15 = 74;

const int _SC_THREAD_STACK_MIN_15 = 75;

const int _SC_THREAD_THREADS_MAX_15 = 76;

const int _SC_THREAD_ATTR_STACKADDR_15 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_15 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_15 = 79;

const int _SC_THREAD_PRIO_INHERIT_15 = 80;

const int _SC_THREAD_PRIO_PROTECT_15 = 81;

const int _SC_THREAD_PROCESS_SHARED_15 = 82;

const int _SC_NPROCESSORS_CONF_15 = 83;

const int _SC_NPROCESSORS_ONLN_15 = 84;

const int _SC_PHYS_PAGES_15 = 85;

const int _SC_AVPHYS_PAGES_15 = 86;

const int _SC_ATEXIT_MAX_15 = 87;

const int _SC_PASS_MAX_15 = 88;

const int _SC_XOPEN_VERSION_15 = 89;

const int _SC_XOPEN_XCU_VERSION_15 = 90;

const int _SC_XOPEN_UNIX_15 = 91;

const int _SC_XOPEN_CRYPT_15 = 92;

const int _SC_XOPEN_ENH_I18N_15 = 93;

const int _SC_XOPEN_SHM_15 = 94;

const int _SC_2_CHAR_TERM_15 = 95;

const int _SC_2_C_VERSION_15 = 96;

const int _SC_2_UPE_15 = 97;

const int _SC_XOPEN_XPG2_15 = 98;

const int _SC_XOPEN_XPG3_15 = 99;

const int _SC_XOPEN_XPG4_15 = 100;

const int _SC_CHAR_BIT_15 = 101;

const int _SC_CHAR_MAX_15 = 102;

const int _SC_CHAR_MIN_15 = 103;

const int _SC_INT_MAX_15 = 104;

const int _SC_INT_MIN_15 = 105;

const int _SC_LONG_BIT_15 = 106;

const int _SC_WORD_BIT_15 = 107;

const int _SC_MB_LEN_MAX_15 = 108;

const int _SC_NZERO_15 = 109;

const int _SC_SSIZE_MAX_15 = 110;

const int _SC_SCHAR_MAX_15 = 111;

const int _SC_SCHAR_MIN_15 = 112;

const int _SC_SHRT_MAX_15 = 113;

const int _SC_SHRT_MIN_15 = 114;

const int _SC_UCHAR_MAX_15 = 115;

const int _SC_UINT_MAX_15 = 116;

const int _SC_ULONG_MAX_15 = 117;

const int _SC_USHRT_MAX_15 = 118;

const int _SC_NL_ARGMAX_15 = 119;

const int _SC_NL_LANGMAX_15 = 120;

const int _SC_NL_MSGMAX_15 = 121;

const int _SC_NL_NMAX_15 = 122;

const int _SC_NL_SETMAX_15 = 123;

const int _SC_NL_TEXTMAX_15 = 124;

const int _SC_XBS5_ILP32_OFF32_15 = 125;

const int _SC_XBS5_ILP32_OFFBIG_15 = 126;

const int _SC_XBS5_LP64_OFF64_15 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_15 = 128;

const int _SC_XOPEN_LEGACY_15 = 129;

const int _SC_XOPEN_REALTIME_15 = 130;

const int _SC_XOPEN_REALTIME_THREADS_15 = 131;

const int _SC_ADVISORY_INFO_15 = 132;

const int _SC_BARRIERS_15 = 133;

const int _SC_BASE_15 = 134;

const int _SC_C_LANG_SUPPORT_15 = 135;

const int _SC_C_LANG_SUPPORT_R_15 = 136;

const int _SC_CLOCK_SELECTION_15 = 137;

const int _SC_CPUTIME_15 = 138;

const int _SC_THREAD_CPUTIME_15 = 139;

const int _SC_DEVICE_IO_15 = 140;

const int _SC_DEVICE_SPECIFIC_15 = 141;

const int _SC_DEVICE_SPECIFIC_R_15 = 142;

const int _SC_FD_MGMT_15 = 143;

const int _SC_FIFO_15 = 144;

const int _SC_PIPE_15 = 145;

const int _SC_FILE_ATTRIBUTES_15 = 146;

const int _SC_FILE_LOCKING_15 = 147;

const int _SC_FILE_SYSTEM_15 = 148;

const int _SC_MONOTONIC_CLOCK_15 = 149;

const int _SC_MULTI_PROCESS_15 = 150;

const int _SC_SINGLE_PROCESS_15 = 151;

const int _SC_NETWORKING_15 = 152;

const int _SC_READER_WRITER_LOCKS_15 = 153;

const int _SC_SPIN_LOCKS_15 = 154;

const int _SC_REGEXP_15 = 155;

const int _SC_REGEX_VERSION_15 = 156;

const int _SC_SHELL_15 = 157;

const int _SC_SIGNALS_15 = 158;

const int _SC_SPAWN_15 = 159;

const int _SC_SPORADIC_SERVER_15 = 160;

const int _SC_THREAD_SPORADIC_SERVER_15 = 161;

const int _SC_SYSTEM_DATABASE_15 = 162;

const int _SC_SYSTEM_DATABASE_R_15 = 163;

const int _SC_TIMEOUTS_15 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_15 = 165;

const int _SC_USER_GROUPS_15 = 166;

const int _SC_USER_GROUPS_R_15 = 167;

const int _SC_2_PBS_15 = 168;

const int _SC_2_PBS_ACCOUNTING_15 = 169;

const int _SC_2_PBS_LOCATE_15 = 170;

const int _SC_2_PBS_MESSAGE_15 = 171;

const int _SC_2_PBS_TRACK_15 = 172;

const int _SC_SYMLOOP_MAX_15 = 173;

const int _SC_STREAMS_15 = 174;

const int _SC_2_PBS_CHECKPOINT_15 = 175;

const int _SC_V6_ILP32_OFF32_15 = 176;

const int _SC_V6_ILP32_OFFBIG_15 = 177;

const int _SC_V6_LP64_OFF64_15 = 178;

const int _SC_V6_LPBIG_OFFBIG_15 = 179;

const int _SC_HOST_NAME_MAX_15 = 180;

const int _SC_TRACE_15 = 181;

const int _SC_TRACE_EVENT_FILTER_15 = 182;

const int _SC_TRACE_INHERIT_15 = 183;

const int _SC_TRACE_LOG_15 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_15 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_15 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_15 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_15 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_15 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_15 = 190;

const int _SC_LEVEL2_CACHE_SIZE_15 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_15 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_15 = 193;

const int _SC_LEVEL3_CACHE_SIZE_15 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_15 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_15 = 196;

const int _SC_LEVEL4_CACHE_SIZE_15 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_15 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_15 = 199;

const int _SC_IPV6_15 = 235;

const int _SC_RAW_SOCKETS_15 = 236;

const int _SC_V7_ILP32_OFF32_15 = 237;

const int _SC_V7_ILP32_OFFBIG_15 = 238;

const int _SC_V7_LP64_OFF64_15 = 239;

const int _SC_V7_LPBIG_OFFBIG_15 = 240;

const int _SC_SS_REPL_MAX_15 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_15 = 242;

const int _SC_TRACE_NAME_MAX_15 = 243;

const int _SC_TRACE_SYS_MAX_15 = 244;

const int _SC_TRACE_USER_EVENT_MAX_15 = 245;

const int _SC_XOPEN_STREAMS_15 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_15 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_15 = 248;

const int _CS_PATH_15 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_15 = 1;

const int _CS_GNU_LIBC_VERSION_15 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_15 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_15 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_15 = 5;

const int _CS_LFS_CFLAGS_15 = 1000;

const int _CS_LFS_LDFLAGS_15 = 1001;

const int _CS_LFS_LIBS_15 = 1002;

const int _CS_LFS_LINTFLAGS_15 = 1003;

const int _CS_LFS64_CFLAGS_15 = 1004;

const int _CS_LFS64_LDFLAGS_15 = 1005;

const int _CS_LFS64_LIBS_15 = 1006;

const int _CS_LFS64_LINTFLAGS_15 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_15 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_15 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_15 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_15 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_15 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_15 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_15 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_15 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_15 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_15 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_15 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_15 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_15 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_15 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_15 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_15 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_15 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_15 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_15 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_15 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_15 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_15 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_15 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_15 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_15 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_15 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_15 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_15 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_15 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_15 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_15 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_15 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_15 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_15 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_15 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_15 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_15 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_15 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_15 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_15 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_15 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_15 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_15 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_15 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_15 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_15 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_15 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_15 = 1147;

const int _CS_V6_ENV_15 = 1148;

const int _CS_V7_ENV_15 = 1149;

const int _PC_LINK_MAX_16 = 0;

const int _PC_MAX_CANON_16 = 1;

const int _PC_MAX_INPUT_16 = 2;

const int _PC_NAME_MAX_16 = 3;

const int _PC_PATH_MAX_16 = 4;

const int _PC_PIPE_BUF_16 = 5;

const int _PC_CHOWN_RESTRICTED_16 = 6;

const int _PC_NO_TRUNC_16 = 7;

const int _PC_VDISABLE_16 = 8;

const int _PC_SYNC_IO_16 = 9;

const int _PC_ASYNC_IO_16 = 10;

const int _PC_PRIO_IO_16 = 11;

const int _PC_SOCK_MAXBUF_16 = 12;

const int _PC_FILESIZEBITS_16 = 13;

const int _PC_REC_INCR_XFER_SIZE_16 = 14;

const int _PC_REC_MAX_XFER_SIZE_16 = 15;

const int _PC_REC_MIN_XFER_SIZE_16 = 16;

const int _PC_REC_XFER_ALIGN_16 = 17;

const int _PC_ALLOC_SIZE_MIN_16 = 18;

const int _PC_SYMLINK_MAX_16 = 19;

const int _PC_2_SYMLINKS_16 = 20;

const int _SC_ARG_MAX_16 = 0;

const int _SC_CHILD_MAX_16 = 1;

const int _SC_CLK_TCK_16 = 2;

const int _SC_NGROUPS_MAX_16 = 3;

const int _SC_OPEN_MAX_16 = 4;

const int _SC_STREAM_MAX_16 = 5;

const int _SC_TZNAME_MAX_16 = 6;

const int _SC_JOB_CONTROL_16 = 7;

const int _SC_SAVED_IDS_16 = 8;

const int _SC_REALTIME_SIGNALS_16 = 9;

const int _SC_PRIORITY_SCHEDULING_16 = 10;

const int _SC_TIMERS_16 = 11;

const int _SC_ASYNCHRONOUS_IO_16 = 12;

const int _SC_PRIORITIZED_IO_16 = 13;

const int _SC_SYNCHRONIZED_IO_16 = 14;

const int _SC_FSYNC_16 = 15;

const int _SC_MAPPED_FILES_16 = 16;

const int _SC_MEMLOCK_16 = 17;

const int _SC_MEMLOCK_RANGE_16 = 18;

const int _SC_MEMORY_PROTECTION_16 = 19;

const int _SC_MESSAGE_PASSING_16 = 20;

const int _SC_SEMAPHORES_16 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_16 = 22;

const int _SC_AIO_LISTIO_MAX_16 = 23;

const int _SC_AIO_MAX_16 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_16 = 25;

const int _SC_DELAYTIMER_MAX_16 = 26;

const int _SC_MQ_OPEN_MAX_16 = 27;

const int _SC_MQ_PRIO_MAX_16 = 28;

const int _SC_VERSION_16 = 29;

const int _SC_PAGESIZE_16 = 30;

const int _SC_RTSIG_MAX_16 = 31;

const int _SC_SEM_NSEMS_MAX_16 = 32;

const int _SC_SEM_VALUE_MAX_16 = 33;

const int _SC_SIGQUEUE_MAX_16 = 34;

const int _SC_TIMER_MAX_16 = 35;

const int _SC_BC_BASE_MAX_16 = 36;

const int _SC_BC_DIM_MAX_16 = 37;

const int _SC_BC_SCALE_MAX_16 = 38;

const int _SC_BC_STRING_MAX_16 = 39;

const int _SC_COLL_WEIGHTS_MAX_16 = 40;

const int _SC_EQUIV_CLASS_MAX_16 = 41;

const int _SC_EXPR_NEST_MAX_16 = 42;

const int _SC_LINE_MAX_16 = 43;

const int _SC_RE_DUP_MAX_16 = 44;

const int _SC_CHARCLASS_NAME_MAX_16 = 45;

const int _SC_2_VERSION_16 = 46;

const int _SC_2_C_BIND_16 = 47;

const int _SC_2_C_DEV_16 = 48;

const int _SC_2_FORT_DEV_16 = 49;

const int _SC_2_FORT_RUN_16 = 50;

const int _SC_2_SW_DEV_16 = 51;

const int _SC_2_LOCALEDEF_16 = 52;

const int _SC_PII_16 = 53;

const int _SC_PII_XTI_16 = 54;

const int _SC_PII_SOCKET_16 = 55;

const int _SC_PII_INTERNET_16 = 56;

const int _SC_PII_OSI_16 = 57;

const int _SC_POLL_16 = 58;

const int _SC_SELECT_16 = 59;

const int _SC_UIO_MAXIOV_16 = 60;

const int _SC_IOV_MAX_16 = 60;

const int _SC_PII_INTERNET_STREAM_16 = 61;

const int _SC_PII_INTERNET_DGRAM_16 = 62;

const int _SC_PII_OSI_COTS_16 = 63;

const int _SC_PII_OSI_CLTS_16 = 64;

const int _SC_PII_OSI_M_16 = 65;

const int _SC_T_IOV_MAX_16 = 66;

const int _SC_THREADS_16 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_16 = 68;

const int _SC_GETGR_R_SIZE_MAX_16 = 69;

const int _SC_GETPW_R_SIZE_MAX_16 = 70;

const int _SC_LOGIN_NAME_MAX_16 = 71;

const int _SC_TTY_NAME_MAX_16 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_16 = 73;

const int _SC_THREAD_KEYS_MAX_16 = 74;

const int _SC_THREAD_STACK_MIN_16 = 75;

const int _SC_THREAD_THREADS_MAX_16 = 76;

const int _SC_THREAD_ATTR_STACKADDR_16 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_16 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_16 = 79;

const int _SC_THREAD_PRIO_INHERIT_16 = 80;

const int _SC_THREAD_PRIO_PROTECT_16 = 81;

const int _SC_THREAD_PROCESS_SHARED_16 = 82;

const int _SC_NPROCESSORS_CONF_16 = 83;

const int _SC_NPROCESSORS_ONLN_16 = 84;

const int _SC_PHYS_PAGES_16 = 85;

const int _SC_AVPHYS_PAGES_16 = 86;

const int _SC_ATEXIT_MAX_16 = 87;

const int _SC_PASS_MAX_16 = 88;

const int _SC_XOPEN_VERSION_16 = 89;

const int _SC_XOPEN_XCU_VERSION_16 = 90;

const int _SC_XOPEN_UNIX_16 = 91;

const int _SC_XOPEN_CRYPT_16 = 92;

const int _SC_XOPEN_ENH_I18N_16 = 93;

const int _SC_XOPEN_SHM_16 = 94;

const int _SC_2_CHAR_TERM_16 = 95;

const int _SC_2_C_VERSION_16 = 96;

const int _SC_2_UPE_16 = 97;

const int _SC_XOPEN_XPG2_16 = 98;

const int _SC_XOPEN_XPG3_16 = 99;

const int _SC_XOPEN_XPG4_16 = 100;

const int _SC_CHAR_BIT_16 = 101;

const int _SC_CHAR_MAX_16 = 102;

const int _SC_CHAR_MIN_16 = 103;

const int _SC_INT_MAX_16 = 104;

const int _SC_INT_MIN_16 = 105;

const int _SC_LONG_BIT_16 = 106;

const int _SC_WORD_BIT_16 = 107;

const int _SC_MB_LEN_MAX_16 = 108;

const int _SC_NZERO_16 = 109;

const int _SC_SSIZE_MAX_16 = 110;

const int _SC_SCHAR_MAX_16 = 111;

const int _SC_SCHAR_MIN_16 = 112;

const int _SC_SHRT_MAX_16 = 113;

const int _SC_SHRT_MIN_16 = 114;

const int _SC_UCHAR_MAX_16 = 115;

const int _SC_UINT_MAX_16 = 116;

const int _SC_ULONG_MAX_16 = 117;

const int _SC_USHRT_MAX_16 = 118;

const int _SC_NL_ARGMAX_16 = 119;

const int _SC_NL_LANGMAX_16 = 120;

const int _SC_NL_MSGMAX_16 = 121;

const int _SC_NL_NMAX_16 = 122;

const int _SC_NL_SETMAX_16 = 123;

const int _SC_NL_TEXTMAX_16 = 124;

const int _SC_XBS5_ILP32_OFF32_16 = 125;

const int _SC_XBS5_ILP32_OFFBIG_16 = 126;

const int _SC_XBS5_LP64_OFF64_16 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_16 = 128;

const int _SC_XOPEN_LEGACY_16 = 129;

const int _SC_XOPEN_REALTIME_16 = 130;

const int _SC_XOPEN_REALTIME_THREADS_16 = 131;

const int _SC_ADVISORY_INFO_16 = 132;

const int _SC_BARRIERS_16 = 133;

const int _SC_BASE_16 = 134;

const int _SC_C_LANG_SUPPORT_16 = 135;

const int _SC_C_LANG_SUPPORT_R_16 = 136;

const int _SC_CLOCK_SELECTION_16 = 137;

const int _SC_CPUTIME_16 = 138;

const int _SC_THREAD_CPUTIME_16 = 139;

const int _SC_DEVICE_IO_16 = 140;

const int _SC_DEVICE_SPECIFIC_16 = 141;

const int _SC_DEVICE_SPECIFIC_R_16 = 142;

const int _SC_FD_MGMT_16 = 143;

const int _SC_FIFO_16 = 144;

const int _SC_PIPE_16 = 145;

const int _SC_FILE_ATTRIBUTES_16 = 146;

const int _SC_FILE_LOCKING_16 = 147;

const int _SC_FILE_SYSTEM_16 = 148;

const int _SC_MONOTONIC_CLOCK_16 = 149;

const int _SC_MULTI_PROCESS_16 = 150;

const int _SC_SINGLE_PROCESS_16 = 151;

const int _SC_NETWORKING_16 = 152;

const int _SC_READER_WRITER_LOCKS_16 = 153;

const int _SC_SPIN_LOCKS_16 = 154;

const int _SC_REGEXP_16 = 155;

const int _SC_REGEX_VERSION_16 = 156;

const int _SC_SHELL_16 = 157;

const int _SC_SIGNALS_16 = 158;

const int _SC_SPAWN_16 = 159;

const int _SC_SPORADIC_SERVER_16 = 160;

const int _SC_THREAD_SPORADIC_SERVER_16 = 161;

const int _SC_SYSTEM_DATABASE_16 = 162;

const int _SC_SYSTEM_DATABASE_R_16 = 163;

const int _SC_TIMEOUTS_16 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_16 = 165;

const int _SC_USER_GROUPS_16 = 166;

const int _SC_USER_GROUPS_R_16 = 167;

const int _SC_2_PBS_16 = 168;

const int _SC_2_PBS_ACCOUNTING_16 = 169;

const int _SC_2_PBS_LOCATE_16 = 170;

const int _SC_2_PBS_MESSAGE_16 = 171;

const int _SC_2_PBS_TRACK_16 = 172;

const int _SC_SYMLOOP_MAX_16 = 173;

const int _SC_STREAMS_16 = 174;

const int _SC_2_PBS_CHECKPOINT_16 = 175;

const int _SC_V6_ILP32_OFF32_16 = 176;

const int _SC_V6_ILP32_OFFBIG_16 = 177;

const int _SC_V6_LP64_OFF64_16 = 178;

const int _SC_V6_LPBIG_OFFBIG_16 = 179;

const int _SC_HOST_NAME_MAX_16 = 180;

const int _SC_TRACE_16 = 181;

const int _SC_TRACE_EVENT_FILTER_16 = 182;

const int _SC_TRACE_INHERIT_16 = 183;

const int _SC_TRACE_LOG_16 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_16 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_16 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_16 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_16 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_16 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_16 = 190;

const int _SC_LEVEL2_CACHE_SIZE_16 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_16 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_16 = 193;

const int _SC_LEVEL3_CACHE_SIZE_16 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_16 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_16 = 196;

const int _SC_LEVEL4_CACHE_SIZE_16 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_16 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_16 = 199;

const int _SC_IPV6_16 = 235;

const int _SC_RAW_SOCKETS_16 = 236;

const int _SC_V7_ILP32_OFF32_16 = 237;

const int _SC_V7_ILP32_OFFBIG_16 = 238;

const int _SC_V7_LP64_OFF64_16 = 239;

const int _SC_V7_LPBIG_OFFBIG_16 = 240;

const int _SC_SS_REPL_MAX_16 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_16 = 242;

const int _SC_TRACE_NAME_MAX_16 = 243;

const int _SC_TRACE_SYS_MAX_16 = 244;

const int _SC_TRACE_USER_EVENT_MAX_16 = 245;

const int _SC_XOPEN_STREAMS_16 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_16 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_16 = 248;

const int _CS_PATH_16 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_16 = 1;

const int _CS_GNU_LIBC_VERSION_16 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_16 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_16 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_16 = 5;

const int _CS_LFS_CFLAGS_16 = 1000;

const int _CS_LFS_LDFLAGS_16 = 1001;

const int _CS_LFS_LIBS_16 = 1002;

const int _CS_LFS_LINTFLAGS_16 = 1003;

const int _CS_LFS64_CFLAGS_16 = 1004;

const int _CS_LFS64_LDFLAGS_16 = 1005;

const int _CS_LFS64_LIBS_16 = 1006;

const int _CS_LFS64_LINTFLAGS_16 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_16 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_16 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_16 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_16 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_16 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_16 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_16 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_16 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_16 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_16 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_16 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_16 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_16 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_16 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_16 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_16 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_16 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_16 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_16 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_16 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_16 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_16 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_16 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_16 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_16 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_16 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_16 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_16 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_16 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_16 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_16 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_16 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_16 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_16 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_16 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_16 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_16 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_16 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_16 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_16 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_16 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_16 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_16 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_16 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_16 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_16 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_16 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_16 = 1147;

const int _CS_V6_ENV_16 = 1148;

const int _CS_V7_ENV_16 = 1149;

const int _PC_LINK_MAX_17 = 0;

const int _PC_MAX_CANON_17 = 1;

const int _PC_MAX_INPUT_17 = 2;

const int _PC_NAME_MAX_17 = 3;

const int _PC_PATH_MAX_17 = 4;

const int _PC_PIPE_BUF_17 = 5;

const int _PC_CHOWN_RESTRICTED_17 = 6;

const int _PC_NO_TRUNC_17 = 7;

const int _PC_VDISABLE_17 = 8;

const int _PC_SYNC_IO_17 = 9;

const int _PC_ASYNC_IO_17 = 10;

const int _PC_PRIO_IO_17 = 11;

const int _PC_SOCK_MAXBUF_17 = 12;

const int _PC_FILESIZEBITS_17 = 13;

const int _PC_REC_INCR_XFER_SIZE_17 = 14;

const int _PC_REC_MAX_XFER_SIZE_17 = 15;

const int _PC_REC_MIN_XFER_SIZE_17 = 16;

const int _PC_REC_XFER_ALIGN_17 = 17;

const int _PC_ALLOC_SIZE_MIN_17 = 18;

const int _PC_SYMLINK_MAX_17 = 19;

const int _PC_2_SYMLINKS_17 = 20;

const int _SC_ARG_MAX_17 = 0;

const int _SC_CHILD_MAX_17 = 1;

const int _SC_CLK_TCK_17 = 2;

const int _SC_NGROUPS_MAX_17 = 3;

const int _SC_OPEN_MAX_17 = 4;

const int _SC_STREAM_MAX_17 = 5;

const int _SC_TZNAME_MAX_17 = 6;

const int _SC_JOB_CONTROL_17 = 7;

const int _SC_SAVED_IDS_17 = 8;

const int _SC_REALTIME_SIGNALS_17 = 9;

const int _SC_PRIORITY_SCHEDULING_17 = 10;

const int _SC_TIMERS_17 = 11;

const int _SC_ASYNCHRONOUS_IO_17 = 12;

const int _SC_PRIORITIZED_IO_17 = 13;

const int _SC_SYNCHRONIZED_IO_17 = 14;

const int _SC_FSYNC_17 = 15;

const int _SC_MAPPED_FILES_17 = 16;

const int _SC_MEMLOCK_17 = 17;

const int _SC_MEMLOCK_RANGE_17 = 18;

const int _SC_MEMORY_PROTECTION_17 = 19;

const int _SC_MESSAGE_PASSING_17 = 20;

const int _SC_SEMAPHORES_17 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_17 = 22;

const int _SC_AIO_LISTIO_MAX_17 = 23;

const int _SC_AIO_MAX_17 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_17 = 25;

const int _SC_DELAYTIMER_MAX_17 = 26;

const int _SC_MQ_OPEN_MAX_17 = 27;

const int _SC_MQ_PRIO_MAX_17 = 28;

const int _SC_VERSION_17 = 29;

const int _SC_PAGESIZE_17 = 30;

const int _SC_RTSIG_MAX_17 = 31;

const int _SC_SEM_NSEMS_MAX_17 = 32;

const int _SC_SEM_VALUE_MAX_17 = 33;

const int _SC_SIGQUEUE_MAX_17 = 34;

const int _SC_TIMER_MAX_17 = 35;

const int _SC_BC_BASE_MAX_17 = 36;

const int _SC_BC_DIM_MAX_17 = 37;

const int _SC_BC_SCALE_MAX_17 = 38;

const int _SC_BC_STRING_MAX_17 = 39;

const int _SC_COLL_WEIGHTS_MAX_17 = 40;

const int _SC_EQUIV_CLASS_MAX_17 = 41;

const int _SC_EXPR_NEST_MAX_17 = 42;

const int _SC_LINE_MAX_17 = 43;

const int _SC_RE_DUP_MAX_17 = 44;

const int _SC_CHARCLASS_NAME_MAX_17 = 45;

const int _SC_2_VERSION_17 = 46;

const int _SC_2_C_BIND_17 = 47;

const int _SC_2_C_DEV_17 = 48;

const int _SC_2_FORT_DEV_17 = 49;

const int _SC_2_FORT_RUN_17 = 50;

const int _SC_2_SW_DEV_17 = 51;

const int _SC_2_LOCALEDEF_17 = 52;

const int _SC_PII_17 = 53;

const int _SC_PII_XTI_17 = 54;

const int _SC_PII_SOCKET_17 = 55;

const int _SC_PII_INTERNET_17 = 56;

const int _SC_PII_OSI_17 = 57;

const int _SC_POLL_17 = 58;

const int _SC_SELECT_17 = 59;

const int _SC_UIO_MAXIOV_17 = 60;

const int _SC_IOV_MAX_17 = 60;

const int _SC_PII_INTERNET_STREAM_17 = 61;

const int _SC_PII_INTERNET_DGRAM_17 = 62;

const int _SC_PII_OSI_COTS_17 = 63;

const int _SC_PII_OSI_CLTS_17 = 64;

const int _SC_PII_OSI_M_17 = 65;

const int _SC_T_IOV_MAX_17 = 66;

const int _SC_THREADS_17 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_17 = 68;

const int _SC_GETGR_R_SIZE_MAX_17 = 69;

const int _SC_GETPW_R_SIZE_MAX_17 = 70;

const int _SC_LOGIN_NAME_MAX_17 = 71;

const int _SC_TTY_NAME_MAX_17 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_17 = 73;

const int _SC_THREAD_KEYS_MAX_17 = 74;

const int _SC_THREAD_STACK_MIN_17 = 75;

const int _SC_THREAD_THREADS_MAX_17 = 76;

const int _SC_THREAD_ATTR_STACKADDR_17 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_17 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_17 = 79;

const int _SC_THREAD_PRIO_INHERIT_17 = 80;

const int _SC_THREAD_PRIO_PROTECT_17 = 81;

const int _SC_THREAD_PROCESS_SHARED_17 = 82;

const int _SC_NPROCESSORS_CONF_17 = 83;

const int _SC_NPROCESSORS_ONLN_17 = 84;

const int _SC_PHYS_PAGES_17 = 85;

const int _SC_AVPHYS_PAGES_17 = 86;

const int _SC_ATEXIT_MAX_17 = 87;

const int _SC_PASS_MAX_17 = 88;

const int _SC_XOPEN_VERSION_17 = 89;

const int _SC_XOPEN_XCU_VERSION_17 = 90;

const int _SC_XOPEN_UNIX_17 = 91;

const int _SC_XOPEN_CRYPT_17 = 92;

const int _SC_XOPEN_ENH_I18N_17 = 93;

const int _SC_XOPEN_SHM_17 = 94;

const int _SC_2_CHAR_TERM_17 = 95;

const int _SC_2_C_VERSION_17 = 96;

const int _SC_2_UPE_17 = 97;

const int _SC_XOPEN_XPG2_17 = 98;

const int _SC_XOPEN_XPG3_17 = 99;

const int _SC_XOPEN_XPG4_17 = 100;

const int _SC_CHAR_BIT_17 = 101;

const int _SC_CHAR_MAX_17 = 102;

const int _SC_CHAR_MIN_17 = 103;

const int _SC_INT_MAX_17 = 104;

const int _SC_INT_MIN_17 = 105;

const int _SC_LONG_BIT_17 = 106;

const int _SC_WORD_BIT_17 = 107;

const int _SC_MB_LEN_MAX_17 = 108;

const int _SC_NZERO_17 = 109;

const int _SC_SSIZE_MAX_17 = 110;

const int _SC_SCHAR_MAX_17 = 111;

const int _SC_SCHAR_MIN_17 = 112;

const int _SC_SHRT_MAX_17 = 113;

const int _SC_SHRT_MIN_17 = 114;

const int _SC_UCHAR_MAX_17 = 115;

const int _SC_UINT_MAX_17 = 116;

const int _SC_ULONG_MAX_17 = 117;

const int _SC_USHRT_MAX_17 = 118;

const int _SC_NL_ARGMAX_17 = 119;

const int _SC_NL_LANGMAX_17 = 120;

const int _SC_NL_MSGMAX_17 = 121;

const int _SC_NL_NMAX_17 = 122;

const int _SC_NL_SETMAX_17 = 123;

const int _SC_NL_TEXTMAX_17 = 124;

const int _SC_XBS5_ILP32_OFF32_17 = 125;

const int _SC_XBS5_ILP32_OFFBIG_17 = 126;

const int _SC_XBS5_LP64_OFF64_17 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_17 = 128;

const int _SC_XOPEN_LEGACY_17 = 129;

const int _SC_XOPEN_REALTIME_17 = 130;

const int _SC_XOPEN_REALTIME_THREADS_17 = 131;

const int _SC_ADVISORY_INFO_17 = 132;

const int _SC_BARRIERS_17 = 133;

const int _SC_BASE_17 = 134;

const int _SC_C_LANG_SUPPORT_17 = 135;

const int _SC_C_LANG_SUPPORT_R_17 = 136;

const int _SC_CLOCK_SELECTION_17 = 137;

const int _SC_CPUTIME_17 = 138;

const int _SC_THREAD_CPUTIME_17 = 139;

const int _SC_DEVICE_IO_17 = 140;

const int _SC_DEVICE_SPECIFIC_17 = 141;

const int _SC_DEVICE_SPECIFIC_R_17 = 142;

const int _SC_FD_MGMT_17 = 143;

const int _SC_FIFO_17 = 144;

const int _SC_PIPE_17 = 145;

const int _SC_FILE_ATTRIBUTES_17 = 146;

const int _SC_FILE_LOCKING_17 = 147;

const int _SC_FILE_SYSTEM_17 = 148;

const int _SC_MONOTONIC_CLOCK_17 = 149;

const int _SC_MULTI_PROCESS_17 = 150;

const int _SC_SINGLE_PROCESS_17 = 151;

const int _SC_NETWORKING_17 = 152;

const int _SC_READER_WRITER_LOCKS_17 = 153;

const int _SC_SPIN_LOCKS_17 = 154;

const int _SC_REGEXP_17 = 155;

const int _SC_REGEX_VERSION_17 = 156;

const int _SC_SHELL_17 = 157;

const int _SC_SIGNALS_17 = 158;

const int _SC_SPAWN_17 = 159;

const int _SC_SPORADIC_SERVER_17 = 160;

const int _SC_THREAD_SPORADIC_SERVER_17 = 161;

const int _SC_SYSTEM_DATABASE_17 = 162;

const int _SC_SYSTEM_DATABASE_R_17 = 163;

const int _SC_TIMEOUTS_17 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_17 = 165;

const int _SC_USER_GROUPS_17 = 166;

const int _SC_USER_GROUPS_R_17 = 167;

const int _SC_2_PBS_17 = 168;

const int _SC_2_PBS_ACCOUNTING_17 = 169;

const int _SC_2_PBS_LOCATE_17 = 170;

const int _SC_2_PBS_MESSAGE_17 = 171;

const int _SC_2_PBS_TRACK_17 = 172;

const int _SC_SYMLOOP_MAX_17 = 173;

const int _SC_STREAMS_17 = 174;

const int _SC_2_PBS_CHECKPOINT_17 = 175;

const int _SC_V6_ILP32_OFF32_17 = 176;

const int _SC_V6_ILP32_OFFBIG_17 = 177;

const int _SC_V6_LP64_OFF64_17 = 178;

const int _SC_V6_LPBIG_OFFBIG_17 = 179;

const int _SC_HOST_NAME_MAX_17 = 180;

const int _SC_TRACE_17 = 181;

const int _SC_TRACE_EVENT_FILTER_17 = 182;

const int _SC_TRACE_INHERIT_17 = 183;

const int _SC_TRACE_LOG_17 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_17 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_17 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_17 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_17 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_17 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_17 = 190;

const int _SC_LEVEL2_CACHE_SIZE_17 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_17 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_17 = 193;

const int _SC_LEVEL3_CACHE_SIZE_17 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_17 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_17 = 196;

const int _SC_LEVEL4_CACHE_SIZE_17 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_17 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_17 = 199;

const int _SC_IPV6_17 = 235;

const int _SC_RAW_SOCKETS_17 = 236;

const int _SC_V7_ILP32_OFF32_17 = 237;

const int _SC_V7_ILP32_OFFBIG_17 = 238;

const int _SC_V7_LP64_OFF64_17 = 239;

const int _SC_V7_LPBIG_OFFBIG_17 = 240;

const int _SC_SS_REPL_MAX_17 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_17 = 242;

const int _SC_TRACE_NAME_MAX_17 = 243;

const int _SC_TRACE_SYS_MAX_17 = 244;

const int _SC_TRACE_USER_EVENT_MAX_17 = 245;

const int _SC_XOPEN_STREAMS_17 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_17 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_17 = 248;

const int _CS_PATH_17 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_17 = 1;

const int _CS_GNU_LIBC_VERSION_17 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_17 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_17 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_17 = 5;

const int _CS_LFS_CFLAGS_17 = 1000;

const int _CS_LFS_LDFLAGS_17 = 1001;

const int _CS_LFS_LIBS_17 = 1002;

const int _CS_LFS_LINTFLAGS_17 = 1003;

const int _CS_LFS64_CFLAGS_17 = 1004;

const int _CS_LFS64_LDFLAGS_17 = 1005;

const int _CS_LFS64_LIBS_17 = 1006;

const int _CS_LFS64_LINTFLAGS_17 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_17 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_17 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_17 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_17 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_17 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_17 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_17 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_17 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_17 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_17 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_17 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_17 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_17 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_17 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_17 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_17 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_17 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_17 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_17 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_17 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_17 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_17 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_17 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_17 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_17 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_17 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_17 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_17 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_17 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_17 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_17 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_17 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_17 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_17 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_17 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_17 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_17 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_17 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_17 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_17 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_17 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_17 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_17 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_17 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_17 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_17 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_17 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_17 = 1147;

const int _CS_V6_ENV_17 = 1148;

const int _CS_V7_ENV_17 = 1149;

const int _ISupper_4 = 256;

const int _ISlower_4 = 512;

const int _ISalpha_4 = 1024;

const int _ISdigit_4 = 2048;

const int _ISxdigit_4 = 4096;

const int _ISspace_4 = 8192;

const int _ISprint_4 = 16384;

const int _ISgraph_4 = 32768;

const int _ISblank_4 = 1;

const int _IScntrl_4 = 2;

const int _ISpunct_4 = 4;

const int _ISalnum_4 = 8;

const int _PC_LINK_MAX_18 = 0;

const int _PC_MAX_CANON_18 = 1;

const int _PC_MAX_INPUT_18 = 2;

const int _PC_NAME_MAX_18 = 3;

const int _PC_PATH_MAX_18 = 4;

const int _PC_PIPE_BUF_18 = 5;

const int _PC_CHOWN_RESTRICTED_18 = 6;

const int _PC_NO_TRUNC_18 = 7;

const int _PC_VDISABLE_18 = 8;

const int _PC_SYNC_IO_18 = 9;

const int _PC_ASYNC_IO_18 = 10;

const int _PC_PRIO_IO_18 = 11;

const int _PC_SOCK_MAXBUF_18 = 12;

const int _PC_FILESIZEBITS_18 = 13;

const int _PC_REC_INCR_XFER_SIZE_18 = 14;

const int _PC_REC_MAX_XFER_SIZE_18 = 15;

const int _PC_REC_MIN_XFER_SIZE_18 = 16;

const int _PC_REC_XFER_ALIGN_18 = 17;

const int _PC_ALLOC_SIZE_MIN_18 = 18;

const int _PC_SYMLINK_MAX_18 = 19;

const int _PC_2_SYMLINKS_18 = 20;

const int _SC_ARG_MAX_18 = 0;

const int _SC_CHILD_MAX_18 = 1;

const int _SC_CLK_TCK_18 = 2;

const int _SC_NGROUPS_MAX_18 = 3;

const int _SC_OPEN_MAX_18 = 4;

const int _SC_STREAM_MAX_18 = 5;

const int _SC_TZNAME_MAX_18 = 6;

const int _SC_JOB_CONTROL_18 = 7;

const int _SC_SAVED_IDS_18 = 8;

const int _SC_REALTIME_SIGNALS_18 = 9;

const int _SC_PRIORITY_SCHEDULING_18 = 10;

const int _SC_TIMERS_18 = 11;

const int _SC_ASYNCHRONOUS_IO_18 = 12;

const int _SC_PRIORITIZED_IO_18 = 13;

const int _SC_SYNCHRONIZED_IO_18 = 14;

const int _SC_FSYNC_18 = 15;

const int _SC_MAPPED_FILES_18 = 16;

const int _SC_MEMLOCK_18 = 17;

const int _SC_MEMLOCK_RANGE_18 = 18;

const int _SC_MEMORY_PROTECTION_18 = 19;

const int _SC_MESSAGE_PASSING_18 = 20;

const int _SC_SEMAPHORES_18 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_18 = 22;

const int _SC_AIO_LISTIO_MAX_18 = 23;

const int _SC_AIO_MAX_18 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_18 = 25;

const int _SC_DELAYTIMER_MAX_18 = 26;

const int _SC_MQ_OPEN_MAX_18 = 27;

const int _SC_MQ_PRIO_MAX_18 = 28;

const int _SC_VERSION_18 = 29;

const int _SC_PAGESIZE_18 = 30;

const int _SC_RTSIG_MAX_18 = 31;

const int _SC_SEM_NSEMS_MAX_18 = 32;

const int _SC_SEM_VALUE_MAX_18 = 33;

const int _SC_SIGQUEUE_MAX_18 = 34;

const int _SC_TIMER_MAX_18 = 35;

const int _SC_BC_BASE_MAX_18 = 36;

const int _SC_BC_DIM_MAX_18 = 37;

const int _SC_BC_SCALE_MAX_18 = 38;

const int _SC_BC_STRING_MAX_18 = 39;

const int _SC_COLL_WEIGHTS_MAX_18 = 40;

const int _SC_EQUIV_CLASS_MAX_18 = 41;

const int _SC_EXPR_NEST_MAX_18 = 42;

const int _SC_LINE_MAX_18 = 43;

const int _SC_RE_DUP_MAX_18 = 44;

const int _SC_CHARCLASS_NAME_MAX_18 = 45;

const int _SC_2_VERSION_18 = 46;

const int _SC_2_C_BIND_18 = 47;

const int _SC_2_C_DEV_18 = 48;

const int _SC_2_FORT_DEV_18 = 49;

const int _SC_2_FORT_RUN_18 = 50;

const int _SC_2_SW_DEV_18 = 51;

const int _SC_2_LOCALEDEF_18 = 52;

const int _SC_PII_18 = 53;

const int _SC_PII_XTI_18 = 54;

const int _SC_PII_SOCKET_18 = 55;

const int _SC_PII_INTERNET_18 = 56;

const int _SC_PII_OSI_18 = 57;

const int _SC_POLL_18 = 58;

const int _SC_SELECT_18 = 59;

const int _SC_UIO_MAXIOV_18 = 60;

const int _SC_IOV_MAX_18 = 60;

const int _SC_PII_INTERNET_STREAM_18 = 61;

const int _SC_PII_INTERNET_DGRAM_18 = 62;

const int _SC_PII_OSI_COTS_18 = 63;

const int _SC_PII_OSI_CLTS_18 = 64;

const int _SC_PII_OSI_M_18 = 65;

const int _SC_T_IOV_MAX_18 = 66;

const int _SC_THREADS_18 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_18 = 68;

const int _SC_GETGR_R_SIZE_MAX_18 = 69;

const int _SC_GETPW_R_SIZE_MAX_18 = 70;

const int _SC_LOGIN_NAME_MAX_18 = 71;

const int _SC_TTY_NAME_MAX_18 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_18 = 73;

const int _SC_THREAD_KEYS_MAX_18 = 74;

const int _SC_THREAD_STACK_MIN_18 = 75;

const int _SC_THREAD_THREADS_MAX_18 = 76;

const int _SC_THREAD_ATTR_STACKADDR_18 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_18 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_18 = 79;

const int _SC_THREAD_PRIO_INHERIT_18 = 80;

const int _SC_THREAD_PRIO_PROTECT_18 = 81;

const int _SC_THREAD_PROCESS_SHARED_18 = 82;

const int _SC_NPROCESSORS_CONF_18 = 83;

const int _SC_NPROCESSORS_ONLN_18 = 84;

const int _SC_PHYS_PAGES_18 = 85;

const int _SC_AVPHYS_PAGES_18 = 86;

const int _SC_ATEXIT_MAX_18 = 87;

const int _SC_PASS_MAX_18 = 88;

const int _SC_XOPEN_VERSION_18 = 89;

const int _SC_XOPEN_XCU_VERSION_18 = 90;

const int _SC_XOPEN_UNIX_18 = 91;

const int _SC_XOPEN_CRYPT_18 = 92;

const int _SC_XOPEN_ENH_I18N_18 = 93;

const int _SC_XOPEN_SHM_18 = 94;

const int _SC_2_CHAR_TERM_18 = 95;

const int _SC_2_C_VERSION_18 = 96;

const int _SC_2_UPE_18 = 97;

const int _SC_XOPEN_XPG2_18 = 98;

const int _SC_XOPEN_XPG3_18 = 99;

const int _SC_XOPEN_XPG4_18 = 100;

const int _SC_CHAR_BIT_18 = 101;

const int _SC_CHAR_MAX_18 = 102;

const int _SC_CHAR_MIN_18 = 103;

const int _SC_INT_MAX_18 = 104;

const int _SC_INT_MIN_18 = 105;

const int _SC_LONG_BIT_18 = 106;

const int _SC_WORD_BIT_18 = 107;

const int _SC_MB_LEN_MAX_18 = 108;

const int _SC_NZERO_18 = 109;

const int _SC_SSIZE_MAX_18 = 110;

const int _SC_SCHAR_MAX_18 = 111;

const int _SC_SCHAR_MIN_18 = 112;

const int _SC_SHRT_MAX_18 = 113;

const int _SC_SHRT_MIN_18 = 114;

const int _SC_UCHAR_MAX_18 = 115;

const int _SC_UINT_MAX_18 = 116;

const int _SC_ULONG_MAX_18 = 117;

const int _SC_USHRT_MAX_18 = 118;

const int _SC_NL_ARGMAX_18 = 119;

const int _SC_NL_LANGMAX_18 = 120;

const int _SC_NL_MSGMAX_18 = 121;

const int _SC_NL_NMAX_18 = 122;

const int _SC_NL_SETMAX_18 = 123;

const int _SC_NL_TEXTMAX_18 = 124;

const int _SC_XBS5_ILP32_OFF32_18 = 125;

const int _SC_XBS5_ILP32_OFFBIG_18 = 126;

const int _SC_XBS5_LP64_OFF64_18 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_18 = 128;

const int _SC_XOPEN_LEGACY_18 = 129;

const int _SC_XOPEN_REALTIME_18 = 130;

const int _SC_XOPEN_REALTIME_THREADS_18 = 131;

const int _SC_ADVISORY_INFO_18 = 132;

const int _SC_BARRIERS_18 = 133;

const int _SC_BASE_18 = 134;

const int _SC_C_LANG_SUPPORT_18 = 135;

const int _SC_C_LANG_SUPPORT_R_18 = 136;

const int _SC_CLOCK_SELECTION_18 = 137;

const int _SC_CPUTIME_18 = 138;

const int _SC_THREAD_CPUTIME_18 = 139;

const int _SC_DEVICE_IO_18 = 140;

const int _SC_DEVICE_SPECIFIC_18 = 141;

const int _SC_DEVICE_SPECIFIC_R_18 = 142;

const int _SC_FD_MGMT_18 = 143;

const int _SC_FIFO_18 = 144;

const int _SC_PIPE_18 = 145;

const int _SC_FILE_ATTRIBUTES_18 = 146;

const int _SC_FILE_LOCKING_18 = 147;

const int _SC_FILE_SYSTEM_18 = 148;

const int _SC_MONOTONIC_CLOCK_18 = 149;

const int _SC_MULTI_PROCESS_18 = 150;

const int _SC_SINGLE_PROCESS_18 = 151;

const int _SC_NETWORKING_18 = 152;

const int _SC_READER_WRITER_LOCKS_18 = 153;

const int _SC_SPIN_LOCKS_18 = 154;

const int _SC_REGEXP_18 = 155;

const int _SC_REGEX_VERSION_18 = 156;

const int _SC_SHELL_18 = 157;

const int _SC_SIGNALS_18 = 158;

const int _SC_SPAWN_18 = 159;

const int _SC_SPORADIC_SERVER_18 = 160;

const int _SC_THREAD_SPORADIC_SERVER_18 = 161;

const int _SC_SYSTEM_DATABASE_18 = 162;

const int _SC_SYSTEM_DATABASE_R_18 = 163;

const int _SC_TIMEOUTS_18 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_18 = 165;

const int _SC_USER_GROUPS_18 = 166;

const int _SC_USER_GROUPS_R_18 = 167;

const int _SC_2_PBS_18 = 168;

const int _SC_2_PBS_ACCOUNTING_18 = 169;

const int _SC_2_PBS_LOCATE_18 = 170;

const int _SC_2_PBS_MESSAGE_18 = 171;

const int _SC_2_PBS_TRACK_18 = 172;

const int _SC_SYMLOOP_MAX_18 = 173;

const int _SC_STREAMS_18 = 174;

const int _SC_2_PBS_CHECKPOINT_18 = 175;

const int _SC_V6_ILP32_OFF32_18 = 176;

const int _SC_V6_ILP32_OFFBIG_18 = 177;

const int _SC_V6_LP64_OFF64_18 = 178;

const int _SC_V6_LPBIG_OFFBIG_18 = 179;

const int _SC_HOST_NAME_MAX_18 = 180;

const int _SC_TRACE_18 = 181;

const int _SC_TRACE_EVENT_FILTER_18 = 182;

const int _SC_TRACE_INHERIT_18 = 183;

const int _SC_TRACE_LOG_18 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_18 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_18 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_18 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_18 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_18 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_18 = 190;

const int _SC_LEVEL2_CACHE_SIZE_18 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_18 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_18 = 193;

const int _SC_LEVEL3_CACHE_SIZE_18 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_18 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_18 = 196;

const int _SC_LEVEL4_CACHE_SIZE_18 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_18 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_18 = 199;

const int _SC_IPV6_18 = 235;

const int _SC_RAW_SOCKETS_18 = 236;

const int _SC_V7_ILP32_OFF32_18 = 237;

const int _SC_V7_ILP32_OFFBIG_18 = 238;

const int _SC_V7_LP64_OFF64_18 = 239;

const int _SC_V7_LPBIG_OFFBIG_18 = 240;

const int _SC_SS_REPL_MAX_18 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_18 = 242;

const int _SC_TRACE_NAME_MAX_18 = 243;

const int _SC_TRACE_SYS_MAX_18 = 244;

const int _SC_TRACE_USER_EVENT_MAX_18 = 245;

const int _SC_XOPEN_STREAMS_18 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_18 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_18 = 248;

const int _CS_PATH_18 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_18 = 1;

const int _CS_GNU_LIBC_VERSION_18 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_18 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_18 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_18 = 5;

const int _CS_LFS_CFLAGS_18 = 1000;

const int _CS_LFS_LDFLAGS_18 = 1001;

const int _CS_LFS_LIBS_18 = 1002;

const int _CS_LFS_LINTFLAGS_18 = 1003;

const int _CS_LFS64_CFLAGS_18 = 1004;

const int _CS_LFS64_LDFLAGS_18 = 1005;

const int _CS_LFS64_LIBS_18 = 1006;

const int _CS_LFS64_LINTFLAGS_18 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_18 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_18 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_18 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_18 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_18 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_18 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_18 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_18 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_18 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_18 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_18 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_18 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_18 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_18 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_18 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_18 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_18 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_18 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_18 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_18 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_18 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_18 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_18 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_18 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_18 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_18 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_18 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_18 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_18 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_18 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_18 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_18 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_18 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_18 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_18 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_18 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_18 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_18 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_18 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_18 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_18 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_18 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_18 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_18 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_18 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_18 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_18 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_18 = 1147;

const int _CS_V6_ENV_18 = 1148;

const int _CS_V7_ENV_18 = 1149;

const int _PC_LINK_MAX_19 = 0;

const int _PC_MAX_CANON_19 = 1;

const int _PC_MAX_INPUT_19 = 2;

const int _PC_NAME_MAX_19 = 3;

const int _PC_PATH_MAX_19 = 4;

const int _PC_PIPE_BUF_19 = 5;

const int _PC_CHOWN_RESTRICTED_19 = 6;

const int _PC_NO_TRUNC_19 = 7;

const int _PC_VDISABLE_19 = 8;

const int _PC_SYNC_IO_19 = 9;

const int _PC_ASYNC_IO_19 = 10;

const int _PC_PRIO_IO_19 = 11;

const int _PC_SOCK_MAXBUF_19 = 12;

const int _PC_FILESIZEBITS_19 = 13;

const int _PC_REC_INCR_XFER_SIZE_19 = 14;

const int _PC_REC_MAX_XFER_SIZE_19 = 15;

const int _PC_REC_MIN_XFER_SIZE_19 = 16;

const int _PC_REC_XFER_ALIGN_19 = 17;

const int _PC_ALLOC_SIZE_MIN_19 = 18;

const int _PC_SYMLINK_MAX_19 = 19;

const int _PC_2_SYMLINKS_19 = 20;

const int _SC_ARG_MAX_19 = 0;

const int _SC_CHILD_MAX_19 = 1;

const int _SC_CLK_TCK_19 = 2;

const int _SC_NGROUPS_MAX_19 = 3;

const int _SC_OPEN_MAX_19 = 4;

const int _SC_STREAM_MAX_19 = 5;

const int _SC_TZNAME_MAX_19 = 6;

const int _SC_JOB_CONTROL_19 = 7;

const int _SC_SAVED_IDS_19 = 8;

const int _SC_REALTIME_SIGNALS_19 = 9;

const int _SC_PRIORITY_SCHEDULING_19 = 10;

const int _SC_TIMERS_19 = 11;

const int _SC_ASYNCHRONOUS_IO_19 = 12;

const int _SC_PRIORITIZED_IO_19 = 13;

const int _SC_SYNCHRONIZED_IO_19 = 14;

const int _SC_FSYNC_19 = 15;

const int _SC_MAPPED_FILES_19 = 16;

const int _SC_MEMLOCK_19 = 17;

const int _SC_MEMLOCK_RANGE_19 = 18;

const int _SC_MEMORY_PROTECTION_19 = 19;

const int _SC_MESSAGE_PASSING_19 = 20;

const int _SC_SEMAPHORES_19 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_19 = 22;

const int _SC_AIO_LISTIO_MAX_19 = 23;

const int _SC_AIO_MAX_19 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_19 = 25;

const int _SC_DELAYTIMER_MAX_19 = 26;

const int _SC_MQ_OPEN_MAX_19 = 27;

const int _SC_MQ_PRIO_MAX_19 = 28;

const int _SC_VERSION_19 = 29;

const int _SC_PAGESIZE_19 = 30;

const int _SC_RTSIG_MAX_19 = 31;

const int _SC_SEM_NSEMS_MAX_19 = 32;

const int _SC_SEM_VALUE_MAX_19 = 33;

const int _SC_SIGQUEUE_MAX_19 = 34;

const int _SC_TIMER_MAX_19 = 35;

const int _SC_BC_BASE_MAX_19 = 36;

const int _SC_BC_DIM_MAX_19 = 37;

const int _SC_BC_SCALE_MAX_19 = 38;

const int _SC_BC_STRING_MAX_19 = 39;

const int _SC_COLL_WEIGHTS_MAX_19 = 40;

const int _SC_EQUIV_CLASS_MAX_19 = 41;

const int _SC_EXPR_NEST_MAX_19 = 42;

const int _SC_LINE_MAX_19 = 43;

const int _SC_RE_DUP_MAX_19 = 44;

const int _SC_CHARCLASS_NAME_MAX_19 = 45;

const int _SC_2_VERSION_19 = 46;

const int _SC_2_C_BIND_19 = 47;

const int _SC_2_C_DEV_19 = 48;

const int _SC_2_FORT_DEV_19 = 49;

const int _SC_2_FORT_RUN_19 = 50;

const int _SC_2_SW_DEV_19 = 51;

const int _SC_2_LOCALEDEF_19 = 52;

const int _SC_PII_19 = 53;

const int _SC_PII_XTI_19 = 54;

const int _SC_PII_SOCKET_19 = 55;

const int _SC_PII_INTERNET_19 = 56;

const int _SC_PII_OSI_19 = 57;

const int _SC_POLL_19 = 58;

const int _SC_SELECT_19 = 59;

const int _SC_UIO_MAXIOV_19 = 60;

const int _SC_IOV_MAX_19 = 60;

const int _SC_PII_INTERNET_STREAM_19 = 61;

const int _SC_PII_INTERNET_DGRAM_19 = 62;

const int _SC_PII_OSI_COTS_19 = 63;

const int _SC_PII_OSI_CLTS_19 = 64;

const int _SC_PII_OSI_M_19 = 65;

const int _SC_T_IOV_MAX_19 = 66;

const int _SC_THREADS_19 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_19 = 68;

const int _SC_GETGR_R_SIZE_MAX_19 = 69;

const int _SC_GETPW_R_SIZE_MAX_19 = 70;

const int _SC_LOGIN_NAME_MAX_19 = 71;

const int _SC_TTY_NAME_MAX_19 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_19 = 73;

const int _SC_THREAD_KEYS_MAX_19 = 74;

const int _SC_THREAD_STACK_MIN_19 = 75;

const int _SC_THREAD_THREADS_MAX_19 = 76;

const int _SC_THREAD_ATTR_STACKADDR_19 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_19 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_19 = 79;

const int _SC_THREAD_PRIO_INHERIT_19 = 80;

const int _SC_THREAD_PRIO_PROTECT_19 = 81;

const int _SC_THREAD_PROCESS_SHARED_19 = 82;

const int _SC_NPROCESSORS_CONF_19 = 83;

const int _SC_NPROCESSORS_ONLN_19 = 84;

const int _SC_PHYS_PAGES_19 = 85;

const int _SC_AVPHYS_PAGES_19 = 86;

const int _SC_ATEXIT_MAX_19 = 87;

const int _SC_PASS_MAX_19 = 88;

const int _SC_XOPEN_VERSION_19 = 89;

const int _SC_XOPEN_XCU_VERSION_19 = 90;

const int _SC_XOPEN_UNIX_19 = 91;

const int _SC_XOPEN_CRYPT_19 = 92;

const int _SC_XOPEN_ENH_I18N_19 = 93;

const int _SC_XOPEN_SHM_19 = 94;

const int _SC_2_CHAR_TERM_19 = 95;

const int _SC_2_C_VERSION_19 = 96;

const int _SC_2_UPE_19 = 97;

const int _SC_XOPEN_XPG2_19 = 98;

const int _SC_XOPEN_XPG3_19 = 99;

const int _SC_XOPEN_XPG4_19 = 100;

const int _SC_CHAR_BIT_19 = 101;

const int _SC_CHAR_MAX_19 = 102;

const int _SC_CHAR_MIN_19 = 103;

const int _SC_INT_MAX_19 = 104;

const int _SC_INT_MIN_19 = 105;

const int _SC_LONG_BIT_19 = 106;

const int _SC_WORD_BIT_19 = 107;

const int _SC_MB_LEN_MAX_19 = 108;

const int _SC_NZERO_19 = 109;

const int _SC_SSIZE_MAX_19 = 110;

const int _SC_SCHAR_MAX_19 = 111;

const int _SC_SCHAR_MIN_19 = 112;

const int _SC_SHRT_MAX_19 = 113;

const int _SC_SHRT_MIN_19 = 114;

const int _SC_UCHAR_MAX_19 = 115;

const int _SC_UINT_MAX_19 = 116;

const int _SC_ULONG_MAX_19 = 117;

const int _SC_USHRT_MAX_19 = 118;

const int _SC_NL_ARGMAX_19 = 119;

const int _SC_NL_LANGMAX_19 = 120;

const int _SC_NL_MSGMAX_19 = 121;

const int _SC_NL_NMAX_19 = 122;

const int _SC_NL_SETMAX_19 = 123;

const int _SC_NL_TEXTMAX_19 = 124;

const int _SC_XBS5_ILP32_OFF32_19 = 125;

const int _SC_XBS5_ILP32_OFFBIG_19 = 126;

const int _SC_XBS5_LP64_OFF64_19 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_19 = 128;

const int _SC_XOPEN_LEGACY_19 = 129;

const int _SC_XOPEN_REALTIME_19 = 130;

const int _SC_XOPEN_REALTIME_THREADS_19 = 131;

const int _SC_ADVISORY_INFO_19 = 132;

const int _SC_BARRIERS_19 = 133;

const int _SC_BASE_19 = 134;

const int _SC_C_LANG_SUPPORT_19 = 135;

const int _SC_C_LANG_SUPPORT_R_19 = 136;

const int _SC_CLOCK_SELECTION_19 = 137;

const int _SC_CPUTIME_19 = 138;

const int _SC_THREAD_CPUTIME_19 = 139;

const int _SC_DEVICE_IO_19 = 140;

const int _SC_DEVICE_SPECIFIC_19 = 141;

const int _SC_DEVICE_SPECIFIC_R_19 = 142;

const int _SC_FD_MGMT_19 = 143;

const int _SC_FIFO_19 = 144;

const int _SC_PIPE_19 = 145;

const int _SC_FILE_ATTRIBUTES_19 = 146;

const int _SC_FILE_LOCKING_19 = 147;

const int _SC_FILE_SYSTEM_19 = 148;

const int _SC_MONOTONIC_CLOCK_19 = 149;

const int _SC_MULTI_PROCESS_19 = 150;

const int _SC_SINGLE_PROCESS_19 = 151;

const int _SC_NETWORKING_19 = 152;

const int _SC_READER_WRITER_LOCKS_19 = 153;

const int _SC_SPIN_LOCKS_19 = 154;

const int _SC_REGEXP_19 = 155;

const int _SC_REGEX_VERSION_19 = 156;

const int _SC_SHELL_19 = 157;

const int _SC_SIGNALS_19 = 158;

const int _SC_SPAWN_19 = 159;

const int _SC_SPORADIC_SERVER_19 = 160;

const int _SC_THREAD_SPORADIC_SERVER_19 = 161;

const int _SC_SYSTEM_DATABASE_19 = 162;

const int _SC_SYSTEM_DATABASE_R_19 = 163;

const int _SC_TIMEOUTS_19 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_19 = 165;

const int _SC_USER_GROUPS_19 = 166;

const int _SC_USER_GROUPS_R_19 = 167;

const int _SC_2_PBS_19 = 168;

const int _SC_2_PBS_ACCOUNTING_19 = 169;

const int _SC_2_PBS_LOCATE_19 = 170;

const int _SC_2_PBS_MESSAGE_19 = 171;

const int _SC_2_PBS_TRACK_19 = 172;

const int _SC_SYMLOOP_MAX_19 = 173;

const int _SC_STREAMS_19 = 174;

const int _SC_2_PBS_CHECKPOINT_19 = 175;

const int _SC_V6_ILP32_OFF32_19 = 176;

const int _SC_V6_ILP32_OFFBIG_19 = 177;

const int _SC_V6_LP64_OFF64_19 = 178;

const int _SC_V6_LPBIG_OFFBIG_19 = 179;

const int _SC_HOST_NAME_MAX_19 = 180;

const int _SC_TRACE_19 = 181;

const int _SC_TRACE_EVENT_FILTER_19 = 182;

const int _SC_TRACE_INHERIT_19 = 183;

const int _SC_TRACE_LOG_19 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_19 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_19 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_19 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_19 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_19 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_19 = 190;

const int _SC_LEVEL2_CACHE_SIZE_19 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_19 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_19 = 193;

const int _SC_LEVEL3_CACHE_SIZE_19 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_19 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_19 = 196;

const int _SC_LEVEL4_CACHE_SIZE_19 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_19 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_19 = 199;

const int _SC_IPV6_19 = 235;

const int _SC_RAW_SOCKETS_19 = 236;

const int _SC_V7_ILP32_OFF32_19 = 237;

const int _SC_V7_ILP32_OFFBIG_19 = 238;

const int _SC_V7_LP64_OFF64_19 = 239;

const int _SC_V7_LPBIG_OFFBIG_19 = 240;

const int _SC_SS_REPL_MAX_19 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_19 = 242;

const int _SC_TRACE_NAME_MAX_19 = 243;

const int _SC_TRACE_SYS_MAX_19 = 244;

const int _SC_TRACE_USER_EVENT_MAX_19 = 245;

const int _SC_XOPEN_STREAMS_19 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_19 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_19 = 248;

const int _CS_PATH_19 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_19 = 1;

const int _CS_GNU_LIBC_VERSION_19 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_19 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_19 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_19 = 5;

const int _CS_LFS_CFLAGS_19 = 1000;

const int _CS_LFS_LDFLAGS_19 = 1001;

const int _CS_LFS_LIBS_19 = 1002;

const int _CS_LFS_LINTFLAGS_19 = 1003;

const int _CS_LFS64_CFLAGS_19 = 1004;

const int _CS_LFS64_LDFLAGS_19 = 1005;

const int _CS_LFS64_LIBS_19 = 1006;

const int _CS_LFS64_LINTFLAGS_19 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_19 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_19 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_19 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_19 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_19 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_19 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_19 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_19 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_19 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_19 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_19 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_19 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_19 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_19 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_19 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_19 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_19 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_19 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_19 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_19 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_19 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_19 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_19 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_19 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_19 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_19 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_19 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_19 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_19 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_19 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_19 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_19 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_19 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_19 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_19 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_19 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_19 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_19 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_19 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_19 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_19 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_19 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_19 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_19 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_19 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_19 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_19 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_19 = 1147;

const int _CS_V6_ENV_19 = 1148;

const int _CS_V7_ENV_19 = 1149;

const int _PC_LINK_MAX_20 = 0;

const int _PC_MAX_CANON_20 = 1;

const int _PC_MAX_INPUT_20 = 2;

const int _PC_NAME_MAX_20 = 3;

const int _PC_PATH_MAX_20 = 4;

const int _PC_PIPE_BUF_20 = 5;

const int _PC_CHOWN_RESTRICTED_20 = 6;

const int _PC_NO_TRUNC_20 = 7;

const int _PC_VDISABLE_20 = 8;

const int _PC_SYNC_IO_20 = 9;

const int _PC_ASYNC_IO_20 = 10;

const int _PC_PRIO_IO_20 = 11;

const int _PC_SOCK_MAXBUF_20 = 12;

const int _PC_FILESIZEBITS_20 = 13;

const int _PC_REC_INCR_XFER_SIZE_20 = 14;

const int _PC_REC_MAX_XFER_SIZE_20 = 15;

const int _PC_REC_MIN_XFER_SIZE_20 = 16;

const int _PC_REC_XFER_ALIGN_20 = 17;

const int _PC_ALLOC_SIZE_MIN_20 = 18;

const int _PC_SYMLINK_MAX_20 = 19;

const int _PC_2_SYMLINKS_20 = 20;

const int _SC_ARG_MAX_20 = 0;

const int _SC_CHILD_MAX_20 = 1;

const int _SC_CLK_TCK_20 = 2;

const int _SC_NGROUPS_MAX_20 = 3;

const int _SC_OPEN_MAX_20 = 4;

const int _SC_STREAM_MAX_20 = 5;

const int _SC_TZNAME_MAX_20 = 6;

const int _SC_JOB_CONTROL_20 = 7;

const int _SC_SAVED_IDS_20 = 8;

const int _SC_REALTIME_SIGNALS_20 = 9;

const int _SC_PRIORITY_SCHEDULING_20 = 10;

const int _SC_TIMERS_20 = 11;

const int _SC_ASYNCHRONOUS_IO_20 = 12;

const int _SC_PRIORITIZED_IO_20 = 13;

const int _SC_SYNCHRONIZED_IO_20 = 14;

const int _SC_FSYNC_20 = 15;

const int _SC_MAPPED_FILES_20 = 16;

const int _SC_MEMLOCK_20 = 17;

const int _SC_MEMLOCK_RANGE_20 = 18;

const int _SC_MEMORY_PROTECTION_20 = 19;

const int _SC_MESSAGE_PASSING_20 = 20;

const int _SC_SEMAPHORES_20 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_20 = 22;

const int _SC_AIO_LISTIO_MAX_20 = 23;

const int _SC_AIO_MAX_20 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_20 = 25;

const int _SC_DELAYTIMER_MAX_20 = 26;

const int _SC_MQ_OPEN_MAX_20 = 27;

const int _SC_MQ_PRIO_MAX_20 = 28;

const int _SC_VERSION_20 = 29;

const int _SC_PAGESIZE_20 = 30;

const int _SC_RTSIG_MAX_20 = 31;

const int _SC_SEM_NSEMS_MAX_20 = 32;

const int _SC_SEM_VALUE_MAX_20 = 33;

const int _SC_SIGQUEUE_MAX_20 = 34;

const int _SC_TIMER_MAX_20 = 35;

const int _SC_BC_BASE_MAX_20 = 36;

const int _SC_BC_DIM_MAX_20 = 37;

const int _SC_BC_SCALE_MAX_20 = 38;

const int _SC_BC_STRING_MAX_20 = 39;

const int _SC_COLL_WEIGHTS_MAX_20 = 40;

const int _SC_EQUIV_CLASS_MAX_20 = 41;

const int _SC_EXPR_NEST_MAX_20 = 42;

const int _SC_LINE_MAX_20 = 43;

const int _SC_RE_DUP_MAX_20 = 44;

const int _SC_CHARCLASS_NAME_MAX_20 = 45;

const int _SC_2_VERSION_20 = 46;

const int _SC_2_C_BIND_20 = 47;

const int _SC_2_C_DEV_20 = 48;

const int _SC_2_FORT_DEV_20 = 49;

const int _SC_2_FORT_RUN_20 = 50;

const int _SC_2_SW_DEV_20 = 51;

const int _SC_2_LOCALEDEF_20 = 52;

const int _SC_PII_20 = 53;

const int _SC_PII_XTI_20 = 54;

const int _SC_PII_SOCKET_20 = 55;

const int _SC_PII_INTERNET_20 = 56;

const int _SC_PII_OSI_20 = 57;

const int _SC_POLL_20 = 58;

const int _SC_SELECT_20 = 59;

const int _SC_UIO_MAXIOV_20 = 60;

const int _SC_IOV_MAX_20 = 60;

const int _SC_PII_INTERNET_STREAM_20 = 61;

const int _SC_PII_INTERNET_DGRAM_20 = 62;

const int _SC_PII_OSI_COTS_20 = 63;

const int _SC_PII_OSI_CLTS_20 = 64;

const int _SC_PII_OSI_M_20 = 65;

const int _SC_T_IOV_MAX_20 = 66;

const int _SC_THREADS_20 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_20 = 68;

const int _SC_GETGR_R_SIZE_MAX_20 = 69;

const int _SC_GETPW_R_SIZE_MAX_20 = 70;

const int _SC_LOGIN_NAME_MAX_20 = 71;

const int _SC_TTY_NAME_MAX_20 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_20 = 73;

const int _SC_THREAD_KEYS_MAX_20 = 74;

const int _SC_THREAD_STACK_MIN_20 = 75;

const int _SC_THREAD_THREADS_MAX_20 = 76;

const int _SC_THREAD_ATTR_STACKADDR_20 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_20 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_20 = 79;

const int _SC_THREAD_PRIO_INHERIT_20 = 80;

const int _SC_THREAD_PRIO_PROTECT_20 = 81;

const int _SC_THREAD_PROCESS_SHARED_20 = 82;

const int _SC_NPROCESSORS_CONF_20 = 83;

const int _SC_NPROCESSORS_ONLN_20 = 84;

const int _SC_PHYS_PAGES_20 = 85;

const int _SC_AVPHYS_PAGES_20 = 86;

const int _SC_ATEXIT_MAX_20 = 87;

const int _SC_PASS_MAX_20 = 88;

const int _SC_XOPEN_VERSION_20 = 89;

const int _SC_XOPEN_XCU_VERSION_20 = 90;

const int _SC_XOPEN_UNIX_20 = 91;

const int _SC_XOPEN_CRYPT_20 = 92;

const int _SC_XOPEN_ENH_I18N_20 = 93;

const int _SC_XOPEN_SHM_20 = 94;

const int _SC_2_CHAR_TERM_20 = 95;

const int _SC_2_C_VERSION_20 = 96;

const int _SC_2_UPE_20 = 97;

const int _SC_XOPEN_XPG2_20 = 98;

const int _SC_XOPEN_XPG3_20 = 99;

const int _SC_XOPEN_XPG4_20 = 100;

const int _SC_CHAR_BIT_20 = 101;

const int _SC_CHAR_MAX_20 = 102;

const int _SC_CHAR_MIN_20 = 103;

const int _SC_INT_MAX_20 = 104;

const int _SC_INT_MIN_20 = 105;

const int _SC_LONG_BIT_20 = 106;

const int _SC_WORD_BIT_20 = 107;

const int _SC_MB_LEN_MAX_20 = 108;

const int _SC_NZERO_20 = 109;

const int _SC_SSIZE_MAX_20 = 110;

const int _SC_SCHAR_MAX_20 = 111;

const int _SC_SCHAR_MIN_20 = 112;

const int _SC_SHRT_MAX_20 = 113;

const int _SC_SHRT_MIN_20 = 114;

const int _SC_UCHAR_MAX_20 = 115;

const int _SC_UINT_MAX_20 = 116;

const int _SC_ULONG_MAX_20 = 117;

const int _SC_USHRT_MAX_20 = 118;

const int _SC_NL_ARGMAX_20 = 119;

const int _SC_NL_LANGMAX_20 = 120;

const int _SC_NL_MSGMAX_20 = 121;

const int _SC_NL_NMAX_20 = 122;

const int _SC_NL_SETMAX_20 = 123;

const int _SC_NL_TEXTMAX_20 = 124;

const int _SC_XBS5_ILP32_OFF32_20 = 125;

const int _SC_XBS5_ILP32_OFFBIG_20 = 126;

const int _SC_XBS5_LP64_OFF64_20 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_20 = 128;

const int _SC_XOPEN_LEGACY_20 = 129;

const int _SC_XOPEN_REALTIME_20 = 130;

const int _SC_XOPEN_REALTIME_THREADS_20 = 131;

const int _SC_ADVISORY_INFO_20 = 132;

const int _SC_BARRIERS_20 = 133;

const int _SC_BASE_20 = 134;

const int _SC_C_LANG_SUPPORT_20 = 135;

const int _SC_C_LANG_SUPPORT_R_20 = 136;

const int _SC_CLOCK_SELECTION_20 = 137;

const int _SC_CPUTIME_20 = 138;

const int _SC_THREAD_CPUTIME_20 = 139;

const int _SC_DEVICE_IO_20 = 140;

const int _SC_DEVICE_SPECIFIC_20 = 141;

const int _SC_DEVICE_SPECIFIC_R_20 = 142;

const int _SC_FD_MGMT_20 = 143;

const int _SC_FIFO_20 = 144;

const int _SC_PIPE_20 = 145;

const int _SC_FILE_ATTRIBUTES_20 = 146;

const int _SC_FILE_LOCKING_20 = 147;

const int _SC_FILE_SYSTEM_20 = 148;

const int _SC_MONOTONIC_CLOCK_20 = 149;

const int _SC_MULTI_PROCESS_20 = 150;

const int _SC_SINGLE_PROCESS_20 = 151;

const int _SC_NETWORKING_20 = 152;

const int _SC_READER_WRITER_LOCKS_20 = 153;

const int _SC_SPIN_LOCKS_20 = 154;

const int _SC_REGEXP_20 = 155;

const int _SC_REGEX_VERSION_20 = 156;

const int _SC_SHELL_20 = 157;

const int _SC_SIGNALS_20 = 158;

const int _SC_SPAWN_20 = 159;

const int _SC_SPORADIC_SERVER_20 = 160;

const int _SC_THREAD_SPORADIC_SERVER_20 = 161;

const int _SC_SYSTEM_DATABASE_20 = 162;

const int _SC_SYSTEM_DATABASE_R_20 = 163;

const int _SC_TIMEOUTS_20 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_20 = 165;

const int _SC_USER_GROUPS_20 = 166;

const int _SC_USER_GROUPS_R_20 = 167;

const int _SC_2_PBS_20 = 168;

const int _SC_2_PBS_ACCOUNTING_20 = 169;

const int _SC_2_PBS_LOCATE_20 = 170;

const int _SC_2_PBS_MESSAGE_20 = 171;

const int _SC_2_PBS_TRACK_20 = 172;

const int _SC_SYMLOOP_MAX_20 = 173;

const int _SC_STREAMS_20 = 174;

const int _SC_2_PBS_CHECKPOINT_20 = 175;

const int _SC_V6_ILP32_OFF32_20 = 176;

const int _SC_V6_ILP32_OFFBIG_20 = 177;

const int _SC_V6_LP64_OFF64_20 = 178;

const int _SC_V6_LPBIG_OFFBIG_20 = 179;

const int _SC_HOST_NAME_MAX_20 = 180;

const int _SC_TRACE_20 = 181;

const int _SC_TRACE_EVENT_FILTER_20 = 182;

const int _SC_TRACE_INHERIT_20 = 183;

const int _SC_TRACE_LOG_20 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_20 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_20 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_20 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_20 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_20 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_20 = 190;

const int _SC_LEVEL2_CACHE_SIZE_20 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_20 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_20 = 193;

const int _SC_LEVEL3_CACHE_SIZE_20 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_20 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_20 = 196;

const int _SC_LEVEL4_CACHE_SIZE_20 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_20 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_20 = 199;

const int _SC_IPV6_20 = 235;

const int _SC_RAW_SOCKETS_20 = 236;

const int _SC_V7_ILP32_OFF32_20 = 237;

const int _SC_V7_ILP32_OFFBIG_20 = 238;

const int _SC_V7_LP64_OFF64_20 = 239;

const int _SC_V7_LPBIG_OFFBIG_20 = 240;

const int _SC_SS_REPL_MAX_20 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_20 = 242;

const int _SC_TRACE_NAME_MAX_20 = 243;

const int _SC_TRACE_SYS_MAX_20 = 244;

const int _SC_TRACE_USER_EVENT_MAX_20 = 245;

const int _SC_XOPEN_STREAMS_20 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_20 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_20 = 248;

const int _CS_PATH_20 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_20 = 1;

const int _CS_GNU_LIBC_VERSION_20 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_20 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_20 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_20 = 5;

const int _CS_LFS_CFLAGS_20 = 1000;

const int _CS_LFS_LDFLAGS_20 = 1001;

const int _CS_LFS_LIBS_20 = 1002;

const int _CS_LFS_LINTFLAGS_20 = 1003;

const int _CS_LFS64_CFLAGS_20 = 1004;

const int _CS_LFS64_LDFLAGS_20 = 1005;

const int _CS_LFS64_LIBS_20 = 1006;

const int _CS_LFS64_LINTFLAGS_20 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_20 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_20 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_20 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_20 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_20 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_20 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_20 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_20 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_20 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_20 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_20 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_20 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_20 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_20 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_20 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_20 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_20 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_20 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_20 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_20 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_20 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_20 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_20 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_20 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_20 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_20 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_20 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_20 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_20 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_20 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_20 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_20 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_20 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_20 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_20 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_20 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_20 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_20 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_20 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_20 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_20 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_20 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_20 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_20 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_20 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_20 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_20 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_20 = 1147;

const int _CS_V6_ENV_20 = 1148;

const int _CS_V7_ENV_20 = 1149;

const int _PC_LINK_MAX_21 = 0;

const int _PC_MAX_CANON_21 = 1;

const int _PC_MAX_INPUT_21 = 2;

const int _PC_NAME_MAX_21 = 3;

const int _PC_PATH_MAX_21 = 4;

const int _PC_PIPE_BUF_21 = 5;

const int _PC_CHOWN_RESTRICTED_21 = 6;

const int _PC_NO_TRUNC_21 = 7;

const int _PC_VDISABLE_21 = 8;

const int _PC_SYNC_IO_21 = 9;

const int _PC_ASYNC_IO_21 = 10;

const int _PC_PRIO_IO_21 = 11;

const int _PC_SOCK_MAXBUF_21 = 12;

const int _PC_FILESIZEBITS_21 = 13;

const int _PC_REC_INCR_XFER_SIZE_21 = 14;

const int _PC_REC_MAX_XFER_SIZE_21 = 15;

const int _PC_REC_MIN_XFER_SIZE_21 = 16;

const int _PC_REC_XFER_ALIGN_21 = 17;

const int _PC_ALLOC_SIZE_MIN_21 = 18;

const int _PC_SYMLINK_MAX_21 = 19;

const int _PC_2_SYMLINKS_21 = 20;

const int _SC_ARG_MAX_21 = 0;

const int _SC_CHILD_MAX_21 = 1;

const int _SC_CLK_TCK_21 = 2;

const int _SC_NGROUPS_MAX_21 = 3;

const int _SC_OPEN_MAX_21 = 4;

const int _SC_STREAM_MAX_21 = 5;

const int _SC_TZNAME_MAX_21 = 6;

const int _SC_JOB_CONTROL_21 = 7;

const int _SC_SAVED_IDS_21 = 8;

const int _SC_REALTIME_SIGNALS_21 = 9;

const int _SC_PRIORITY_SCHEDULING_21 = 10;

const int _SC_TIMERS_21 = 11;

const int _SC_ASYNCHRONOUS_IO_21 = 12;

const int _SC_PRIORITIZED_IO_21 = 13;

const int _SC_SYNCHRONIZED_IO_21 = 14;

const int _SC_FSYNC_21 = 15;

const int _SC_MAPPED_FILES_21 = 16;

const int _SC_MEMLOCK_21 = 17;

const int _SC_MEMLOCK_RANGE_21 = 18;

const int _SC_MEMORY_PROTECTION_21 = 19;

const int _SC_MESSAGE_PASSING_21 = 20;

const int _SC_SEMAPHORES_21 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_21 = 22;

const int _SC_AIO_LISTIO_MAX_21 = 23;

const int _SC_AIO_MAX_21 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_21 = 25;

const int _SC_DELAYTIMER_MAX_21 = 26;

const int _SC_MQ_OPEN_MAX_21 = 27;

const int _SC_MQ_PRIO_MAX_21 = 28;

const int _SC_VERSION_21 = 29;

const int _SC_PAGESIZE_21 = 30;

const int _SC_RTSIG_MAX_21 = 31;

const int _SC_SEM_NSEMS_MAX_21 = 32;

const int _SC_SEM_VALUE_MAX_21 = 33;

const int _SC_SIGQUEUE_MAX_21 = 34;

const int _SC_TIMER_MAX_21 = 35;

const int _SC_BC_BASE_MAX_21 = 36;

const int _SC_BC_DIM_MAX_21 = 37;

const int _SC_BC_SCALE_MAX_21 = 38;

const int _SC_BC_STRING_MAX_21 = 39;

const int _SC_COLL_WEIGHTS_MAX_21 = 40;

const int _SC_EQUIV_CLASS_MAX_21 = 41;

const int _SC_EXPR_NEST_MAX_21 = 42;

const int _SC_LINE_MAX_21 = 43;

const int _SC_RE_DUP_MAX_21 = 44;

const int _SC_CHARCLASS_NAME_MAX_21 = 45;

const int _SC_2_VERSION_21 = 46;

const int _SC_2_C_BIND_21 = 47;

const int _SC_2_C_DEV_21 = 48;

const int _SC_2_FORT_DEV_21 = 49;

const int _SC_2_FORT_RUN_21 = 50;

const int _SC_2_SW_DEV_21 = 51;

const int _SC_2_LOCALEDEF_21 = 52;

const int _SC_PII_21 = 53;

const int _SC_PII_XTI_21 = 54;

const int _SC_PII_SOCKET_21 = 55;

const int _SC_PII_INTERNET_21 = 56;

const int _SC_PII_OSI_21 = 57;

const int _SC_POLL_21 = 58;

const int _SC_SELECT_21 = 59;

const int _SC_UIO_MAXIOV_21 = 60;

const int _SC_IOV_MAX_21 = 60;

const int _SC_PII_INTERNET_STREAM_21 = 61;

const int _SC_PII_INTERNET_DGRAM_21 = 62;

const int _SC_PII_OSI_COTS_21 = 63;

const int _SC_PII_OSI_CLTS_21 = 64;

const int _SC_PII_OSI_M_21 = 65;

const int _SC_T_IOV_MAX_21 = 66;

const int _SC_THREADS_21 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_21 = 68;

const int _SC_GETGR_R_SIZE_MAX_21 = 69;

const int _SC_GETPW_R_SIZE_MAX_21 = 70;

const int _SC_LOGIN_NAME_MAX_21 = 71;

const int _SC_TTY_NAME_MAX_21 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_21 = 73;

const int _SC_THREAD_KEYS_MAX_21 = 74;

const int _SC_THREAD_STACK_MIN_21 = 75;

const int _SC_THREAD_THREADS_MAX_21 = 76;

const int _SC_THREAD_ATTR_STACKADDR_21 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_21 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_21 = 79;

const int _SC_THREAD_PRIO_INHERIT_21 = 80;

const int _SC_THREAD_PRIO_PROTECT_21 = 81;

const int _SC_THREAD_PROCESS_SHARED_21 = 82;

const int _SC_NPROCESSORS_CONF_21 = 83;

const int _SC_NPROCESSORS_ONLN_21 = 84;

const int _SC_PHYS_PAGES_21 = 85;

const int _SC_AVPHYS_PAGES_21 = 86;

const int _SC_ATEXIT_MAX_21 = 87;

const int _SC_PASS_MAX_21 = 88;

const int _SC_XOPEN_VERSION_21 = 89;

const int _SC_XOPEN_XCU_VERSION_21 = 90;

const int _SC_XOPEN_UNIX_21 = 91;

const int _SC_XOPEN_CRYPT_21 = 92;

const int _SC_XOPEN_ENH_I18N_21 = 93;

const int _SC_XOPEN_SHM_21 = 94;

const int _SC_2_CHAR_TERM_21 = 95;

const int _SC_2_C_VERSION_21 = 96;

const int _SC_2_UPE_21 = 97;

const int _SC_XOPEN_XPG2_21 = 98;

const int _SC_XOPEN_XPG3_21 = 99;

const int _SC_XOPEN_XPG4_21 = 100;

const int _SC_CHAR_BIT_21 = 101;

const int _SC_CHAR_MAX_21 = 102;

const int _SC_CHAR_MIN_21 = 103;

const int _SC_INT_MAX_21 = 104;

const int _SC_INT_MIN_21 = 105;

const int _SC_LONG_BIT_21 = 106;

const int _SC_WORD_BIT_21 = 107;

const int _SC_MB_LEN_MAX_21 = 108;

const int _SC_NZERO_21 = 109;

const int _SC_SSIZE_MAX_21 = 110;

const int _SC_SCHAR_MAX_21 = 111;

const int _SC_SCHAR_MIN_21 = 112;

const int _SC_SHRT_MAX_21 = 113;

const int _SC_SHRT_MIN_21 = 114;

const int _SC_UCHAR_MAX_21 = 115;

const int _SC_UINT_MAX_21 = 116;

const int _SC_ULONG_MAX_21 = 117;

const int _SC_USHRT_MAX_21 = 118;

const int _SC_NL_ARGMAX_21 = 119;

const int _SC_NL_LANGMAX_21 = 120;

const int _SC_NL_MSGMAX_21 = 121;

const int _SC_NL_NMAX_21 = 122;

const int _SC_NL_SETMAX_21 = 123;

const int _SC_NL_TEXTMAX_21 = 124;

const int _SC_XBS5_ILP32_OFF32_21 = 125;

const int _SC_XBS5_ILP32_OFFBIG_21 = 126;

const int _SC_XBS5_LP64_OFF64_21 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_21 = 128;

const int _SC_XOPEN_LEGACY_21 = 129;

const int _SC_XOPEN_REALTIME_21 = 130;

const int _SC_XOPEN_REALTIME_THREADS_21 = 131;

const int _SC_ADVISORY_INFO_21 = 132;

const int _SC_BARRIERS_21 = 133;

const int _SC_BASE_21 = 134;

const int _SC_C_LANG_SUPPORT_21 = 135;

const int _SC_C_LANG_SUPPORT_R_21 = 136;

const int _SC_CLOCK_SELECTION_21 = 137;

const int _SC_CPUTIME_21 = 138;

const int _SC_THREAD_CPUTIME_21 = 139;

const int _SC_DEVICE_IO_21 = 140;

const int _SC_DEVICE_SPECIFIC_21 = 141;

const int _SC_DEVICE_SPECIFIC_R_21 = 142;

const int _SC_FD_MGMT_21 = 143;

const int _SC_FIFO_21 = 144;

const int _SC_PIPE_21 = 145;

const int _SC_FILE_ATTRIBUTES_21 = 146;

const int _SC_FILE_LOCKING_21 = 147;

const int _SC_FILE_SYSTEM_21 = 148;

const int _SC_MONOTONIC_CLOCK_21 = 149;

const int _SC_MULTI_PROCESS_21 = 150;

const int _SC_SINGLE_PROCESS_21 = 151;

const int _SC_NETWORKING_21 = 152;

const int _SC_READER_WRITER_LOCKS_21 = 153;

const int _SC_SPIN_LOCKS_21 = 154;

const int _SC_REGEXP_21 = 155;

const int _SC_REGEX_VERSION_21 = 156;

const int _SC_SHELL_21 = 157;

const int _SC_SIGNALS_21 = 158;

const int _SC_SPAWN_21 = 159;

const int _SC_SPORADIC_SERVER_21 = 160;

const int _SC_THREAD_SPORADIC_SERVER_21 = 161;

const int _SC_SYSTEM_DATABASE_21 = 162;

const int _SC_SYSTEM_DATABASE_R_21 = 163;

const int _SC_TIMEOUTS_21 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_21 = 165;

const int _SC_USER_GROUPS_21 = 166;

const int _SC_USER_GROUPS_R_21 = 167;

const int _SC_2_PBS_21 = 168;

const int _SC_2_PBS_ACCOUNTING_21 = 169;

const int _SC_2_PBS_LOCATE_21 = 170;

const int _SC_2_PBS_MESSAGE_21 = 171;

const int _SC_2_PBS_TRACK_21 = 172;

const int _SC_SYMLOOP_MAX_21 = 173;

const int _SC_STREAMS_21 = 174;

const int _SC_2_PBS_CHECKPOINT_21 = 175;

const int _SC_V6_ILP32_OFF32_21 = 176;

const int _SC_V6_ILP32_OFFBIG_21 = 177;

const int _SC_V6_LP64_OFF64_21 = 178;

const int _SC_V6_LPBIG_OFFBIG_21 = 179;

const int _SC_HOST_NAME_MAX_21 = 180;

const int _SC_TRACE_21 = 181;

const int _SC_TRACE_EVENT_FILTER_21 = 182;

const int _SC_TRACE_INHERIT_21 = 183;

const int _SC_TRACE_LOG_21 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_21 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_21 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_21 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_21 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_21 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_21 = 190;

const int _SC_LEVEL2_CACHE_SIZE_21 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_21 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_21 = 193;

const int _SC_LEVEL3_CACHE_SIZE_21 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_21 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_21 = 196;

const int _SC_LEVEL4_CACHE_SIZE_21 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_21 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_21 = 199;

const int _SC_IPV6_21 = 235;

const int _SC_RAW_SOCKETS_21 = 236;

const int _SC_V7_ILP32_OFF32_21 = 237;

const int _SC_V7_ILP32_OFFBIG_21 = 238;

const int _SC_V7_LP64_OFF64_21 = 239;

const int _SC_V7_LPBIG_OFFBIG_21 = 240;

const int _SC_SS_REPL_MAX_21 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_21 = 242;

const int _SC_TRACE_NAME_MAX_21 = 243;

const int _SC_TRACE_SYS_MAX_21 = 244;

const int _SC_TRACE_USER_EVENT_MAX_21 = 245;

const int _SC_XOPEN_STREAMS_21 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_21 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_21 = 248;

const int _CS_PATH_21 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_21 = 1;

const int _CS_GNU_LIBC_VERSION_21 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_21 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_21 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_21 = 5;

const int _CS_LFS_CFLAGS_21 = 1000;

const int _CS_LFS_LDFLAGS_21 = 1001;

const int _CS_LFS_LIBS_21 = 1002;

const int _CS_LFS_LINTFLAGS_21 = 1003;

const int _CS_LFS64_CFLAGS_21 = 1004;

const int _CS_LFS64_LDFLAGS_21 = 1005;

const int _CS_LFS64_LIBS_21 = 1006;

const int _CS_LFS64_LINTFLAGS_21 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_21 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_21 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_21 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_21 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_21 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_21 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_21 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_21 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_21 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_21 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_21 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_21 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_21 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_21 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_21 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_21 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_21 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_21 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_21 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_21 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_21 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_21 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_21 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_21 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_21 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_21 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_21 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_21 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_21 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_21 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_21 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_21 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_21 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_21 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_21 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_21 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_21 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_21 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_21 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_21 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_21 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_21 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_21 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_21 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_21 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_21 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_21 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_21 = 1147;

const int _CS_V6_ENV_21 = 1148;

const int _CS_V7_ENV_21 = 1149;

const int PTHREAD_CREATE_JOINABLE_5 = 0;

const int PTHREAD_CREATE_DETACHED_5 = 1;

const int PTHREAD_MUTEX_TIMED_NP_5 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_5 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_5 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_5 = 3;

const int PTHREAD_MUTEX_NORMAL_5 = 0;

const int PTHREAD_MUTEX_RECURSIVE_5 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_5 = 2;

const int PTHREAD_MUTEX_DEFAULT_5 = 0;

const int PTHREAD_MUTEX_STALLED_5 = 0;

const int PTHREAD_MUTEX_STALLED_NP_5 = 0;

const int PTHREAD_MUTEX_ROBUST_5 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_5 = 1;

const int PTHREAD_PRIO_NONE_5 = 0;

const int PTHREAD_PRIO_INHERIT_5 = 1;

const int PTHREAD_PRIO_PROTECT_5 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_5 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_5 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_5 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_5 = 0;

const int PTHREAD_INHERIT_SCHED_5 = 0;

const int PTHREAD_EXPLICIT_SCHED_5 = 1;

const int PTHREAD_SCOPE_SYSTEM_5 = 0;

const int PTHREAD_SCOPE_PROCESS_5 = 1;

const int PTHREAD_PROCESS_PRIVATE_5 = 0;

const int PTHREAD_PROCESS_SHARED_5 = 1;

const int PTHREAD_CANCEL_ENABLE_5 = 0;

const int PTHREAD_CANCEL_DISABLE_5 = 1;

const int PTHREAD_CANCEL_DEFERRED_5 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_5 = 1;

const int _PC_LINK_MAX_22 = 0;

const int _PC_MAX_CANON_22 = 1;

const int _PC_MAX_INPUT_22 = 2;

const int _PC_NAME_MAX_22 = 3;

const int _PC_PATH_MAX_22 = 4;

const int _PC_PIPE_BUF_22 = 5;

const int _PC_CHOWN_RESTRICTED_22 = 6;

const int _PC_NO_TRUNC_22 = 7;

const int _PC_VDISABLE_22 = 8;

const int _PC_SYNC_IO_22 = 9;

const int _PC_ASYNC_IO_22 = 10;

const int _PC_PRIO_IO_22 = 11;

const int _PC_SOCK_MAXBUF_22 = 12;

const int _PC_FILESIZEBITS_22 = 13;

const int _PC_REC_INCR_XFER_SIZE_22 = 14;

const int _PC_REC_MAX_XFER_SIZE_22 = 15;

const int _PC_REC_MIN_XFER_SIZE_22 = 16;

const int _PC_REC_XFER_ALIGN_22 = 17;

const int _PC_ALLOC_SIZE_MIN_22 = 18;

const int _PC_SYMLINK_MAX_22 = 19;

const int _PC_2_SYMLINKS_22 = 20;

const int _SC_ARG_MAX_22 = 0;

const int _SC_CHILD_MAX_22 = 1;

const int _SC_CLK_TCK_22 = 2;

const int _SC_NGROUPS_MAX_22 = 3;

const int _SC_OPEN_MAX_22 = 4;

const int _SC_STREAM_MAX_22 = 5;

const int _SC_TZNAME_MAX_22 = 6;

const int _SC_JOB_CONTROL_22 = 7;

const int _SC_SAVED_IDS_22 = 8;

const int _SC_REALTIME_SIGNALS_22 = 9;

const int _SC_PRIORITY_SCHEDULING_22 = 10;

const int _SC_TIMERS_22 = 11;

const int _SC_ASYNCHRONOUS_IO_22 = 12;

const int _SC_PRIORITIZED_IO_22 = 13;

const int _SC_SYNCHRONIZED_IO_22 = 14;

const int _SC_FSYNC_22 = 15;

const int _SC_MAPPED_FILES_22 = 16;

const int _SC_MEMLOCK_22 = 17;

const int _SC_MEMLOCK_RANGE_22 = 18;

const int _SC_MEMORY_PROTECTION_22 = 19;

const int _SC_MESSAGE_PASSING_22 = 20;

const int _SC_SEMAPHORES_22 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_22 = 22;

const int _SC_AIO_LISTIO_MAX_22 = 23;

const int _SC_AIO_MAX_22 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_22 = 25;

const int _SC_DELAYTIMER_MAX_22 = 26;

const int _SC_MQ_OPEN_MAX_22 = 27;

const int _SC_MQ_PRIO_MAX_22 = 28;

const int _SC_VERSION_22 = 29;

const int _SC_PAGESIZE_22 = 30;

const int _SC_RTSIG_MAX_22 = 31;

const int _SC_SEM_NSEMS_MAX_22 = 32;

const int _SC_SEM_VALUE_MAX_22 = 33;

const int _SC_SIGQUEUE_MAX_22 = 34;

const int _SC_TIMER_MAX_22 = 35;

const int _SC_BC_BASE_MAX_22 = 36;

const int _SC_BC_DIM_MAX_22 = 37;

const int _SC_BC_SCALE_MAX_22 = 38;

const int _SC_BC_STRING_MAX_22 = 39;

const int _SC_COLL_WEIGHTS_MAX_22 = 40;

const int _SC_EQUIV_CLASS_MAX_22 = 41;

const int _SC_EXPR_NEST_MAX_22 = 42;

const int _SC_LINE_MAX_22 = 43;

const int _SC_RE_DUP_MAX_22 = 44;

const int _SC_CHARCLASS_NAME_MAX_22 = 45;

const int _SC_2_VERSION_22 = 46;

const int _SC_2_C_BIND_22 = 47;

const int _SC_2_C_DEV_22 = 48;

const int _SC_2_FORT_DEV_22 = 49;

const int _SC_2_FORT_RUN_22 = 50;

const int _SC_2_SW_DEV_22 = 51;

const int _SC_2_LOCALEDEF_22 = 52;

const int _SC_PII_22 = 53;

const int _SC_PII_XTI_22 = 54;

const int _SC_PII_SOCKET_22 = 55;

const int _SC_PII_INTERNET_22 = 56;

const int _SC_PII_OSI_22 = 57;

const int _SC_POLL_22 = 58;

const int _SC_SELECT_22 = 59;

const int _SC_UIO_MAXIOV_22 = 60;

const int _SC_IOV_MAX_22 = 60;

const int _SC_PII_INTERNET_STREAM_22 = 61;

const int _SC_PII_INTERNET_DGRAM_22 = 62;

const int _SC_PII_OSI_COTS_22 = 63;

const int _SC_PII_OSI_CLTS_22 = 64;

const int _SC_PII_OSI_M_22 = 65;

const int _SC_T_IOV_MAX_22 = 66;

const int _SC_THREADS_22 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_22 = 68;

const int _SC_GETGR_R_SIZE_MAX_22 = 69;

const int _SC_GETPW_R_SIZE_MAX_22 = 70;

const int _SC_LOGIN_NAME_MAX_22 = 71;

const int _SC_TTY_NAME_MAX_22 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_22 = 73;

const int _SC_THREAD_KEYS_MAX_22 = 74;

const int _SC_THREAD_STACK_MIN_22 = 75;

const int _SC_THREAD_THREADS_MAX_22 = 76;

const int _SC_THREAD_ATTR_STACKADDR_22 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_22 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_22 = 79;

const int _SC_THREAD_PRIO_INHERIT_22 = 80;

const int _SC_THREAD_PRIO_PROTECT_22 = 81;

const int _SC_THREAD_PROCESS_SHARED_22 = 82;

const int _SC_NPROCESSORS_CONF_22 = 83;

const int _SC_NPROCESSORS_ONLN_22 = 84;

const int _SC_PHYS_PAGES_22 = 85;

const int _SC_AVPHYS_PAGES_22 = 86;

const int _SC_ATEXIT_MAX_22 = 87;

const int _SC_PASS_MAX_22 = 88;

const int _SC_XOPEN_VERSION_22 = 89;

const int _SC_XOPEN_XCU_VERSION_22 = 90;

const int _SC_XOPEN_UNIX_22 = 91;

const int _SC_XOPEN_CRYPT_22 = 92;

const int _SC_XOPEN_ENH_I18N_22 = 93;

const int _SC_XOPEN_SHM_22 = 94;

const int _SC_2_CHAR_TERM_22 = 95;

const int _SC_2_C_VERSION_22 = 96;

const int _SC_2_UPE_22 = 97;

const int _SC_XOPEN_XPG2_22 = 98;

const int _SC_XOPEN_XPG3_22 = 99;

const int _SC_XOPEN_XPG4_22 = 100;

const int _SC_CHAR_BIT_22 = 101;

const int _SC_CHAR_MAX_22 = 102;

const int _SC_CHAR_MIN_22 = 103;

const int _SC_INT_MAX_22 = 104;

const int _SC_INT_MIN_22 = 105;

const int _SC_LONG_BIT_22 = 106;

const int _SC_WORD_BIT_22 = 107;

const int _SC_MB_LEN_MAX_22 = 108;

const int _SC_NZERO_22 = 109;

const int _SC_SSIZE_MAX_22 = 110;

const int _SC_SCHAR_MAX_22 = 111;

const int _SC_SCHAR_MIN_22 = 112;

const int _SC_SHRT_MAX_22 = 113;

const int _SC_SHRT_MIN_22 = 114;

const int _SC_UCHAR_MAX_22 = 115;

const int _SC_UINT_MAX_22 = 116;

const int _SC_ULONG_MAX_22 = 117;

const int _SC_USHRT_MAX_22 = 118;

const int _SC_NL_ARGMAX_22 = 119;

const int _SC_NL_LANGMAX_22 = 120;

const int _SC_NL_MSGMAX_22 = 121;

const int _SC_NL_NMAX_22 = 122;

const int _SC_NL_SETMAX_22 = 123;

const int _SC_NL_TEXTMAX_22 = 124;

const int _SC_XBS5_ILP32_OFF32_22 = 125;

const int _SC_XBS5_ILP32_OFFBIG_22 = 126;

const int _SC_XBS5_LP64_OFF64_22 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_22 = 128;

const int _SC_XOPEN_LEGACY_22 = 129;

const int _SC_XOPEN_REALTIME_22 = 130;

const int _SC_XOPEN_REALTIME_THREADS_22 = 131;

const int _SC_ADVISORY_INFO_22 = 132;

const int _SC_BARRIERS_22 = 133;

const int _SC_BASE_22 = 134;

const int _SC_C_LANG_SUPPORT_22 = 135;

const int _SC_C_LANG_SUPPORT_R_22 = 136;

const int _SC_CLOCK_SELECTION_22 = 137;

const int _SC_CPUTIME_22 = 138;

const int _SC_THREAD_CPUTIME_22 = 139;

const int _SC_DEVICE_IO_22 = 140;

const int _SC_DEVICE_SPECIFIC_22 = 141;

const int _SC_DEVICE_SPECIFIC_R_22 = 142;

const int _SC_FD_MGMT_22 = 143;

const int _SC_FIFO_22 = 144;

const int _SC_PIPE_22 = 145;

const int _SC_FILE_ATTRIBUTES_22 = 146;

const int _SC_FILE_LOCKING_22 = 147;

const int _SC_FILE_SYSTEM_22 = 148;

const int _SC_MONOTONIC_CLOCK_22 = 149;

const int _SC_MULTI_PROCESS_22 = 150;

const int _SC_SINGLE_PROCESS_22 = 151;

const int _SC_NETWORKING_22 = 152;

const int _SC_READER_WRITER_LOCKS_22 = 153;

const int _SC_SPIN_LOCKS_22 = 154;

const int _SC_REGEXP_22 = 155;

const int _SC_REGEX_VERSION_22 = 156;

const int _SC_SHELL_22 = 157;

const int _SC_SIGNALS_22 = 158;

const int _SC_SPAWN_22 = 159;

const int _SC_SPORADIC_SERVER_22 = 160;

const int _SC_THREAD_SPORADIC_SERVER_22 = 161;

const int _SC_SYSTEM_DATABASE_22 = 162;

const int _SC_SYSTEM_DATABASE_R_22 = 163;

const int _SC_TIMEOUTS_22 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_22 = 165;

const int _SC_USER_GROUPS_22 = 166;

const int _SC_USER_GROUPS_R_22 = 167;

const int _SC_2_PBS_22 = 168;

const int _SC_2_PBS_ACCOUNTING_22 = 169;

const int _SC_2_PBS_LOCATE_22 = 170;

const int _SC_2_PBS_MESSAGE_22 = 171;

const int _SC_2_PBS_TRACK_22 = 172;

const int _SC_SYMLOOP_MAX_22 = 173;

const int _SC_STREAMS_22 = 174;

const int _SC_2_PBS_CHECKPOINT_22 = 175;

const int _SC_V6_ILP32_OFF32_22 = 176;

const int _SC_V6_ILP32_OFFBIG_22 = 177;

const int _SC_V6_LP64_OFF64_22 = 178;

const int _SC_V6_LPBIG_OFFBIG_22 = 179;

const int _SC_HOST_NAME_MAX_22 = 180;

const int _SC_TRACE_22 = 181;

const int _SC_TRACE_EVENT_FILTER_22 = 182;

const int _SC_TRACE_INHERIT_22 = 183;

const int _SC_TRACE_LOG_22 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_22 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_22 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_22 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_22 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_22 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_22 = 190;

const int _SC_LEVEL2_CACHE_SIZE_22 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_22 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_22 = 193;

const int _SC_LEVEL3_CACHE_SIZE_22 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_22 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_22 = 196;

const int _SC_LEVEL4_CACHE_SIZE_22 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_22 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_22 = 199;

const int _SC_IPV6_22 = 235;

const int _SC_RAW_SOCKETS_22 = 236;

const int _SC_V7_ILP32_OFF32_22 = 237;

const int _SC_V7_ILP32_OFFBIG_22 = 238;

const int _SC_V7_LP64_OFF64_22 = 239;

const int _SC_V7_LPBIG_OFFBIG_22 = 240;

const int _SC_SS_REPL_MAX_22 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_22 = 242;

const int _SC_TRACE_NAME_MAX_22 = 243;

const int _SC_TRACE_SYS_MAX_22 = 244;

const int _SC_TRACE_USER_EVENT_MAX_22 = 245;

const int _SC_XOPEN_STREAMS_22 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_22 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_22 = 248;

const int _CS_PATH_22 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_22 = 1;

const int _CS_GNU_LIBC_VERSION_22 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_22 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_22 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_22 = 5;

const int _CS_LFS_CFLAGS_22 = 1000;

const int _CS_LFS_LDFLAGS_22 = 1001;

const int _CS_LFS_LIBS_22 = 1002;

const int _CS_LFS_LINTFLAGS_22 = 1003;

const int _CS_LFS64_CFLAGS_22 = 1004;

const int _CS_LFS64_LDFLAGS_22 = 1005;

const int _CS_LFS64_LIBS_22 = 1006;

const int _CS_LFS64_LINTFLAGS_22 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_22 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_22 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_22 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_22 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_22 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_22 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_22 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_22 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_22 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_22 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_22 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_22 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_22 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_22 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_22 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_22 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_22 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_22 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_22 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_22 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_22 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_22 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_22 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_22 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_22 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_22 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_22 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_22 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_22 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_22 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_22 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_22 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_22 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_22 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_22 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_22 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_22 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_22 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_22 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_22 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_22 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_22 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_22 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_22 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_22 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_22 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_22 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_22 = 1147;

const int _CS_V6_ENV_22 = 1148;

const int _CS_V7_ENV_22 = 1149;

const int _PC_LINK_MAX_23 = 0;

const int _PC_MAX_CANON_23 = 1;

const int _PC_MAX_INPUT_23 = 2;

const int _PC_NAME_MAX_23 = 3;

const int _PC_PATH_MAX_23 = 4;

const int _PC_PIPE_BUF_23 = 5;

const int _PC_CHOWN_RESTRICTED_23 = 6;

const int _PC_NO_TRUNC_23 = 7;

const int _PC_VDISABLE_23 = 8;

const int _PC_SYNC_IO_23 = 9;

const int _PC_ASYNC_IO_23 = 10;

const int _PC_PRIO_IO_23 = 11;

const int _PC_SOCK_MAXBUF_23 = 12;

const int _PC_FILESIZEBITS_23 = 13;

const int _PC_REC_INCR_XFER_SIZE_23 = 14;

const int _PC_REC_MAX_XFER_SIZE_23 = 15;

const int _PC_REC_MIN_XFER_SIZE_23 = 16;

const int _PC_REC_XFER_ALIGN_23 = 17;

const int _PC_ALLOC_SIZE_MIN_23 = 18;

const int _PC_SYMLINK_MAX_23 = 19;

const int _PC_2_SYMLINKS_23 = 20;

const int _SC_ARG_MAX_23 = 0;

const int _SC_CHILD_MAX_23 = 1;

const int _SC_CLK_TCK_23 = 2;

const int _SC_NGROUPS_MAX_23 = 3;

const int _SC_OPEN_MAX_23 = 4;

const int _SC_STREAM_MAX_23 = 5;

const int _SC_TZNAME_MAX_23 = 6;

const int _SC_JOB_CONTROL_23 = 7;

const int _SC_SAVED_IDS_23 = 8;

const int _SC_REALTIME_SIGNALS_23 = 9;

const int _SC_PRIORITY_SCHEDULING_23 = 10;

const int _SC_TIMERS_23 = 11;

const int _SC_ASYNCHRONOUS_IO_23 = 12;

const int _SC_PRIORITIZED_IO_23 = 13;

const int _SC_SYNCHRONIZED_IO_23 = 14;

const int _SC_FSYNC_23 = 15;

const int _SC_MAPPED_FILES_23 = 16;

const int _SC_MEMLOCK_23 = 17;

const int _SC_MEMLOCK_RANGE_23 = 18;

const int _SC_MEMORY_PROTECTION_23 = 19;

const int _SC_MESSAGE_PASSING_23 = 20;

const int _SC_SEMAPHORES_23 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_23 = 22;

const int _SC_AIO_LISTIO_MAX_23 = 23;

const int _SC_AIO_MAX_23 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_23 = 25;

const int _SC_DELAYTIMER_MAX_23 = 26;

const int _SC_MQ_OPEN_MAX_23 = 27;

const int _SC_MQ_PRIO_MAX_23 = 28;

const int _SC_VERSION_23 = 29;

const int _SC_PAGESIZE_23 = 30;

const int _SC_RTSIG_MAX_23 = 31;

const int _SC_SEM_NSEMS_MAX_23 = 32;

const int _SC_SEM_VALUE_MAX_23 = 33;

const int _SC_SIGQUEUE_MAX_23 = 34;

const int _SC_TIMER_MAX_23 = 35;

const int _SC_BC_BASE_MAX_23 = 36;

const int _SC_BC_DIM_MAX_23 = 37;

const int _SC_BC_SCALE_MAX_23 = 38;

const int _SC_BC_STRING_MAX_23 = 39;

const int _SC_COLL_WEIGHTS_MAX_23 = 40;

const int _SC_EQUIV_CLASS_MAX_23 = 41;

const int _SC_EXPR_NEST_MAX_23 = 42;

const int _SC_LINE_MAX_23 = 43;

const int _SC_RE_DUP_MAX_23 = 44;

const int _SC_CHARCLASS_NAME_MAX_23 = 45;

const int _SC_2_VERSION_23 = 46;

const int _SC_2_C_BIND_23 = 47;

const int _SC_2_C_DEV_23 = 48;

const int _SC_2_FORT_DEV_23 = 49;

const int _SC_2_FORT_RUN_23 = 50;

const int _SC_2_SW_DEV_23 = 51;

const int _SC_2_LOCALEDEF_23 = 52;

const int _SC_PII_23 = 53;

const int _SC_PII_XTI_23 = 54;

const int _SC_PII_SOCKET_23 = 55;

const int _SC_PII_INTERNET_23 = 56;

const int _SC_PII_OSI_23 = 57;

const int _SC_POLL_23 = 58;

const int _SC_SELECT_23 = 59;

const int _SC_UIO_MAXIOV_23 = 60;

const int _SC_IOV_MAX_23 = 60;

const int _SC_PII_INTERNET_STREAM_23 = 61;

const int _SC_PII_INTERNET_DGRAM_23 = 62;

const int _SC_PII_OSI_COTS_23 = 63;

const int _SC_PII_OSI_CLTS_23 = 64;

const int _SC_PII_OSI_M_23 = 65;

const int _SC_T_IOV_MAX_23 = 66;

const int _SC_THREADS_23 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_23 = 68;

const int _SC_GETGR_R_SIZE_MAX_23 = 69;

const int _SC_GETPW_R_SIZE_MAX_23 = 70;

const int _SC_LOGIN_NAME_MAX_23 = 71;

const int _SC_TTY_NAME_MAX_23 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_23 = 73;

const int _SC_THREAD_KEYS_MAX_23 = 74;

const int _SC_THREAD_STACK_MIN_23 = 75;

const int _SC_THREAD_THREADS_MAX_23 = 76;

const int _SC_THREAD_ATTR_STACKADDR_23 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_23 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_23 = 79;

const int _SC_THREAD_PRIO_INHERIT_23 = 80;

const int _SC_THREAD_PRIO_PROTECT_23 = 81;

const int _SC_THREAD_PROCESS_SHARED_23 = 82;

const int _SC_NPROCESSORS_CONF_23 = 83;

const int _SC_NPROCESSORS_ONLN_23 = 84;

const int _SC_PHYS_PAGES_23 = 85;

const int _SC_AVPHYS_PAGES_23 = 86;

const int _SC_ATEXIT_MAX_23 = 87;

const int _SC_PASS_MAX_23 = 88;

const int _SC_XOPEN_VERSION_23 = 89;

const int _SC_XOPEN_XCU_VERSION_23 = 90;

const int _SC_XOPEN_UNIX_23 = 91;

const int _SC_XOPEN_CRYPT_23 = 92;

const int _SC_XOPEN_ENH_I18N_23 = 93;

const int _SC_XOPEN_SHM_23 = 94;

const int _SC_2_CHAR_TERM_23 = 95;

const int _SC_2_C_VERSION_23 = 96;

const int _SC_2_UPE_23 = 97;

const int _SC_XOPEN_XPG2_23 = 98;

const int _SC_XOPEN_XPG3_23 = 99;

const int _SC_XOPEN_XPG4_23 = 100;

const int _SC_CHAR_BIT_23 = 101;

const int _SC_CHAR_MAX_23 = 102;

const int _SC_CHAR_MIN_23 = 103;

const int _SC_INT_MAX_23 = 104;

const int _SC_INT_MIN_23 = 105;

const int _SC_LONG_BIT_23 = 106;

const int _SC_WORD_BIT_23 = 107;

const int _SC_MB_LEN_MAX_23 = 108;

const int _SC_NZERO_23 = 109;

const int _SC_SSIZE_MAX_23 = 110;

const int _SC_SCHAR_MAX_23 = 111;

const int _SC_SCHAR_MIN_23 = 112;

const int _SC_SHRT_MAX_23 = 113;

const int _SC_SHRT_MIN_23 = 114;

const int _SC_UCHAR_MAX_23 = 115;

const int _SC_UINT_MAX_23 = 116;

const int _SC_ULONG_MAX_23 = 117;

const int _SC_USHRT_MAX_23 = 118;

const int _SC_NL_ARGMAX_23 = 119;

const int _SC_NL_LANGMAX_23 = 120;

const int _SC_NL_MSGMAX_23 = 121;

const int _SC_NL_NMAX_23 = 122;

const int _SC_NL_SETMAX_23 = 123;

const int _SC_NL_TEXTMAX_23 = 124;

const int _SC_XBS5_ILP32_OFF32_23 = 125;

const int _SC_XBS5_ILP32_OFFBIG_23 = 126;

const int _SC_XBS5_LP64_OFF64_23 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_23 = 128;

const int _SC_XOPEN_LEGACY_23 = 129;

const int _SC_XOPEN_REALTIME_23 = 130;

const int _SC_XOPEN_REALTIME_THREADS_23 = 131;

const int _SC_ADVISORY_INFO_23 = 132;

const int _SC_BARRIERS_23 = 133;

const int _SC_BASE_23 = 134;

const int _SC_C_LANG_SUPPORT_23 = 135;

const int _SC_C_LANG_SUPPORT_R_23 = 136;

const int _SC_CLOCK_SELECTION_23 = 137;

const int _SC_CPUTIME_23 = 138;

const int _SC_THREAD_CPUTIME_23 = 139;

const int _SC_DEVICE_IO_23 = 140;

const int _SC_DEVICE_SPECIFIC_23 = 141;

const int _SC_DEVICE_SPECIFIC_R_23 = 142;

const int _SC_FD_MGMT_23 = 143;

const int _SC_FIFO_23 = 144;

const int _SC_PIPE_23 = 145;

const int _SC_FILE_ATTRIBUTES_23 = 146;

const int _SC_FILE_LOCKING_23 = 147;

const int _SC_FILE_SYSTEM_23 = 148;

const int _SC_MONOTONIC_CLOCK_23 = 149;

const int _SC_MULTI_PROCESS_23 = 150;

const int _SC_SINGLE_PROCESS_23 = 151;

const int _SC_NETWORKING_23 = 152;

const int _SC_READER_WRITER_LOCKS_23 = 153;

const int _SC_SPIN_LOCKS_23 = 154;

const int _SC_REGEXP_23 = 155;

const int _SC_REGEX_VERSION_23 = 156;

const int _SC_SHELL_23 = 157;

const int _SC_SIGNALS_23 = 158;

const int _SC_SPAWN_23 = 159;

const int _SC_SPORADIC_SERVER_23 = 160;

const int _SC_THREAD_SPORADIC_SERVER_23 = 161;

const int _SC_SYSTEM_DATABASE_23 = 162;

const int _SC_SYSTEM_DATABASE_R_23 = 163;

const int _SC_TIMEOUTS_23 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_23 = 165;

const int _SC_USER_GROUPS_23 = 166;

const int _SC_USER_GROUPS_R_23 = 167;

const int _SC_2_PBS_23 = 168;

const int _SC_2_PBS_ACCOUNTING_23 = 169;

const int _SC_2_PBS_LOCATE_23 = 170;

const int _SC_2_PBS_MESSAGE_23 = 171;

const int _SC_2_PBS_TRACK_23 = 172;

const int _SC_SYMLOOP_MAX_23 = 173;

const int _SC_STREAMS_23 = 174;

const int _SC_2_PBS_CHECKPOINT_23 = 175;

const int _SC_V6_ILP32_OFF32_23 = 176;

const int _SC_V6_ILP32_OFFBIG_23 = 177;

const int _SC_V6_LP64_OFF64_23 = 178;

const int _SC_V6_LPBIG_OFFBIG_23 = 179;

const int _SC_HOST_NAME_MAX_23 = 180;

const int _SC_TRACE_23 = 181;

const int _SC_TRACE_EVENT_FILTER_23 = 182;

const int _SC_TRACE_INHERIT_23 = 183;

const int _SC_TRACE_LOG_23 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_23 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_23 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_23 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_23 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_23 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_23 = 190;

const int _SC_LEVEL2_CACHE_SIZE_23 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_23 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_23 = 193;

const int _SC_LEVEL3_CACHE_SIZE_23 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_23 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_23 = 196;

const int _SC_LEVEL4_CACHE_SIZE_23 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_23 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_23 = 199;

const int _SC_IPV6_23 = 235;

const int _SC_RAW_SOCKETS_23 = 236;

const int _SC_V7_ILP32_OFF32_23 = 237;

const int _SC_V7_ILP32_OFFBIG_23 = 238;

const int _SC_V7_LP64_OFF64_23 = 239;

const int _SC_V7_LPBIG_OFFBIG_23 = 240;

const int _SC_SS_REPL_MAX_23 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_23 = 242;

const int _SC_TRACE_NAME_MAX_23 = 243;

const int _SC_TRACE_SYS_MAX_23 = 244;

const int _SC_TRACE_USER_EVENT_MAX_23 = 245;

const int _SC_XOPEN_STREAMS_23 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_23 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_23 = 248;

const int _CS_PATH_23 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_23 = 1;

const int _CS_GNU_LIBC_VERSION_23 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_23 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_23 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_23 = 5;

const int _CS_LFS_CFLAGS_23 = 1000;

const int _CS_LFS_LDFLAGS_23 = 1001;

const int _CS_LFS_LIBS_23 = 1002;

const int _CS_LFS_LINTFLAGS_23 = 1003;

const int _CS_LFS64_CFLAGS_23 = 1004;

const int _CS_LFS64_LDFLAGS_23 = 1005;

const int _CS_LFS64_LIBS_23 = 1006;

const int _CS_LFS64_LINTFLAGS_23 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_23 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_23 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_23 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_23 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_23 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_23 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_23 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_23 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_23 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_23 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_23 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_23 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_23 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_23 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_23 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_23 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_23 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_23 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_23 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_23 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_23 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_23 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_23 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_23 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_23 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_23 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_23 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_23 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_23 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_23 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_23 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_23 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_23 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_23 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_23 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_23 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_23 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_23 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_23 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_23 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_23 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_23 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_23 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_23 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_23 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_23 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_23 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_23 = 1147;

const int _CS_V6_ENV_23 = 1148;

const int _CS_V7_ENV_23 = 1149;

const int _PC_LINK_MAX_24 = 0;

const int _PC_MAX_CANON_24 = 1;

const int _PC_MAX_INPUT_24 = 2;

const int _PC_NAME_MAX_24 = 3;

const int _PC_PATH_MAX_24 = 4;

const int _PC_PIPE_BUF_24 = 5;

const int _PC_CHOWN_RESTRICTED_24 = 6;

const int _PC_NO_TRUNC_24 = 7;

const int _PC_VDISABLE_24 = 8;

const int _PC_SYNC_IO_24 = 9;

const int _PC_ASYNC_IO_24 = 10;

const int _PC_PRIO_IO_24 = 11;

const int _PC_SOCK_MAXBUF_24 = 12;

const int _PC_FILESIZEBITS_24 = 13;

const int _PC_REC_INCR_XFER_SIZE_24 = 14;

const int _PC_REC_MAX_XFER_SIZE_24 = 15;

const int _PC_REC_MIN_XFER_SIZE_24 = 16;

const int _PC_REC_XFER_ALIGN_24 = 17;

const int _PC_ALLOC_SIZE_MIN_24 = 18;

const int _PC_SYMLINK_MAX_24 = 19;

const int _PC_2_SYMLINKS_24 = 20;

const int _SC_ARG_MAX_24 = 0;

const int _SC_CHILD_MAX_24 = 1;

const int _SC_CLK_TCK_24 = 2;

const int _SC_NGROUPS_MAX_24 = 3;

const int _SC_OPEN_MAX_24 = 4;

const int _SC_STREAM_MAX_24 = 5;

const int _SC_TZNAME_MAX_24 = 6;

const int _SC_JOB_CONTROL_24 = 7;

const int _SC_SAVED_IDS_24 = 8;

const int _SC_REALTIME_SIGNALS_24 = 9;

const int _SC_PRIORITY_SCHEDULING_24 = 10;

const int _SC_TIMERS_24 = 11;

const int _SC_ASYNCHRONOUS_IO_24 = 12;

const int _SC_PRIORITIZED_IO_24 = 13;

const int _SC_SYNCHRONIZED_IO_24 = 14;

const int _SC_FSYNC_24 = 15;

const int _SC_MAPPED_FILES_24 = 16;

const int _SC_MEMLOCK_24 = 17;

const int _SC_MEMLOCK_RANGE_24 = 18;

const int _SC_MEMORY_PROTECTION_24 = 19;

const int _SC_MESSAGE_PASSING_24 = 20;

const int _SC_SEMAPHORES_24 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_24 = 22;

const int _SC_AIO_LISTIO_MAX_24 = 23;

const int _SC_AIO_MAX_24 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_24 = 25;

const int _SC_DELAYTIMER_MAX_24 = 26;

const int _SC_MQ_OPEN_MAX_24 = 27;

const int _SC_MQ_PRIO_MAX_24 = 28;

const int _SC_VERSION_24 = 29;

const int _SC_PAGESIZE_24 = 30;

const int _SC_RTSIG_MAX_24 = 31;

const int _SC_SEM_NSEMS_MAX_24 = 32;

const int _SC_SEM_VALUE_MAX_24 = 33;

const int _SC_SIGQUEUE_MAX_24 = 34;

const int _SC_TIMER_MAX_24 = 35;

const int _SC_BC_BASE_MAX_24 = 36;

const int _SC_BC_DIM_MAX_24 = 37;

const int _SC_BC_SCALE_MAX_24 = 38;

const int _SC_BC_STRING_MAX_24 = 39;

const int _SC_COLL_WEIGHTS_MAX_24 = 40;

const int _SC_EQUIV_CLASS_MAX_24 = 41;

const int _SC_EXPR_NEST_MAX_24 = 42;

const int _SC_LINE_MAX_24 = 43;

const int _SC_RE_DUP_MAX_24 = 44;

const int _SC_CHARCLASS_NAME_MAX_24 = 45;

const int _SC_2_VERSION_24 = 46;

const int _SC_2_C_BIND_24 = 47;

const int _SC_2_C_DEV_24 = 48;

const int _SC_2_FORT_DEV_24 = 49;

const int _SC_2_FORT_RUN_24 = 50;

const int _SC_2_SW_DEV_24 = 51;

const int _SC_2_LOCALEDEF_24 = 52;

const int _SC_PII_24 = 53;

const int _SC_PII_XTI_24 = 54;

const int _SC_PII_SOCKET_24 = 55;

const int _SC_PII_INTERNET_24 = 56;

const int _SC_PII_OSI_24 = 57;

const int _SC_POLL_24 = 58;

const int _SC_SELECT_24 = 59;

const int _SC_UIO_MAXIOV_24 = 60;

const int _SC_IOV_MAX_24 = 60;

const int _SC_PII_INTERNET_STREAM_24 = 61;

const int _SC_PII_INTERNET_DGRAM_24 = 62;

const int _SC_PII_OSI_COTS_24 = 63;

const int _SC_PII_OSI_CLTS_24 = 64;

const int _SC_PII_OSI_M_24 = 65;

const int _SC_T_IOV_MAX_24 = 66;

const int _SC_THREADS_24 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_24 = 68;

const int _SC_GETGR_R_SIZE_MAX_24 = 69;

const int _SC_GETPW_R_SIZE_MAX_24 = 70;

const int _SC_LOGIN_NAME_MAX_24 = 71;

const int _SC_TTY_NAME_MAX_24 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_24 = 73;

const int _SC_THREAD_KEYS_MAX_24 = 74;

const int _SC_THREAD_STACK_MIN_24 = 75;

const int _SC_THREAD_THREADS_MAX_24 = 76;

const int _SC_THREAD_ATTR_STACKADDR_24 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_24 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_24 = 79;

const int _SC_THREAD_PRIO_INHERIT_24 = 80;

const int _SC_THREAD_PRIO_PROTECT_24 = 81;

const int _SC_THREAD_PROCESS_SHARED_24 = 82;

const int _SC_NPROCESSORS_CONF_24 = 83;

const int _SC_NPROCESSORS_ONLN_24 = 84;

const int _SC_PHYS_PAGES_24 = 85;

const int _SC_AVPHYS_PAGES_24 = 86;

const int _SC_ATEXIT_MAX_24 = 87;

const int _SC_PASS_MAX_24 = 88;

const int _SC_XOPEN_VERSION_24 = 89;

const int _SC_XOPEN_XCU_VERSION_24 = 90;

const int _SC_XOPEN_UNIX_24 = 91;

const int _SC_XOPEN_CRYPT_24 = 92;

const int _SC_XOPEN_ENH_I18N_24 = 93;

const int _SC_XOPEN_SHM_24 = 94;

const int _SC_2_CHAR_TERM_24 = 95;

const int _SC_2_C_VERSION_24 = 96;

const int _SC_2_UPE_24 = 97;

const int _SC_XOPEN_XPG2_24 = 98;

const int _SC_XOPEN_XPG3_24 = 99;

const int _SC_XOPEN_XPG4_24 = 100;

const int _SC_CHAR_BIT_24 = 101;

const int _SC_CHAR_MAX_24 = 102;

const int _SC_CHAR_MIN_24 = 103;

const int _SC_INT_MAX_24 = 104;

const int _SC_INT_MIN_24 = 105;

const int _SC_LONG_BIT_24 = 106;

const int _SC_WORD_BIT_24 = 107;

const int _SC_MB_LEN_MAX_24 = 108;

const int _SC_NZERO_24 = 109;

const int _SC_SSIZE_MAX_24 = 110;

const int _SC_SCHAR_MAX_24 = 111;

const int _SC_SCHAR_MIN_24 = 112;

const int _SC_SHRT_MAX_24 = 113;

const int _SC_SHRT_MIN_24 = 114;

const int _SC_UCHAR_MAX_24 = 115;

const int _SC_UINT_MAX_24 = 116;

const int _SC_ULONG_MAX_24 = 117;

const int _SC_USHRT_MAX_24 = 118;

const int _SC_NL_ARGMAX_24 = 119;

const int _SC_NL_LANGMAX_24 = 120;

const int _SC_NL_MSGMAX_24 = 121;

const int _SC_NL_NMAX_24 = 122;

const int _SC_NL_SETMAX_24 = 123;

const int _SC_NL_TEXTMAX_24 = 124;

const int _SC_XBS5_ILP32_OFF32_24 = 125;

const int _SC_XBS5_ILP32_OFFBIG_24 = 126;

const int _SC_XBS5_LP64_OFF64_24 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_24 = 128;

const int _SC_XOPEN_LEGACY_24 = 129;

const int _SC_XOPEN_REALTIME_24 = 130;

const int _SC_XOPEN_REALTIME_THREADS_24 = 131;

const int _SC_ADVISORY_INFO_24 = 132;

const int _SC_BARRIERS_24 = 133;

const int _SC_BASE_24 = 134;

const int _SC_C_LANG_SUPPORT_24 = 135;

const int _SC_C_LANG_SUPPORT_R_24 = 136;

const int _SC_CLOCK_SELECTION_24 = 137;

const int _SC_CPUTIME_24 = 138;

const int _SC_THREAD_CPUTIME_24 = 139;

const int _SC_DEVICE_IO_24 = 140;

const int _SC_DEVICE_SPECIFIC_24 = 141;

const int _SC_DEVICE_SPECIFIC_R_24 = 142;

const int _SC_FD_MGMT_24 = 143;

const int _SC_FIFO_24 = 144;

const int _SC_PIPE_24 = 145;

const int _SC_FILE_ATTRIBUTES_24 = 146;

const int _SC_FILE_LOCKING_24 = 147;

const int _SC_FILE_SYSTEM_24 = 148;

const int _SC_MONOTONIC_CLOCK_24 = 149;

const int _SC_MULTI_PROCESS_24 = 150;

const int _SC_SINGLE_PROCESS_24 = 151;

const int _SC_NETWORKING_24 = 152;

const int _SC_READER_WRITER_LOCKS_24 = 153;

const int _SC_SPIN_LOCKS_24 = 154;

const int _SC_REGEXP_24 = 155;

const int _SC_REGEX_VERSION_24 = 156;

const int _SC_SHELL_24 = 157;

const int _SC_SIGNALS_24 = 158;

const int _SC_SPAWN_24 = 159;

const int _SC_SPORADIC_SERVER_24 = 160;

const int _SC_THREAD_SPORADIC_SERVER_24 = 161;

const int _SC_SYSTEM_DATABASE_24 = 162;

const int _SC_SYSTEM_DATABASE_R_24 = 163;

const int _SC_TIMEOUTS_24 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_24 = 165;

const int _SC_USER_GROUPS_24 = 166;

const int _SC_USER_GROUPS_R_24 = 167;

const int _SC_2_PBS_24 = 168;

const int _SC_2_PBS_ACCOUNTING_24 = 169;

const int _SC_2_PBS_LOCATE_24 = 170;

const int _SC_2_PBS_MESSAGE_24 = 171;

const int _SC_2_PBS_TRACK_24 = 172;

const int _SC_SYMLOOP_MAX_24 = 173;

const int _SC_STREAMS_24 = 174;

const int _SC_2_PBS_CHECKPOINT_24 = 175;

const int _SC_V6_ILP32_OFF32_24 = 176;

const int _SC_V6_ILP32_OFFBIG_24 = 177;

const int _SC_V6_LP64_OFF64_24 = 178;

const int _SC_V6_LPBIG_OFFBIG_24 = 179;

const int _SC_HOST_NAME_MAX_24 = 180;

const int _SC_TRACE_24 = 181;

const int _SC_TRACE_EVENT_FILTER_24 = 182;

const int _SC_TRACE_INHERIT_24 = 183;

const int _SC_TRACE_LOG_24 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_24 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_24 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_24 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_24 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_24 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_24 = 190;

const int _SC_LEVEL2_CACHE_SIZE_24 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_24 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_24 = 193;

const int _SC_LEVEL3_CACHE_SIZE_24 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_24 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_24 = 196;

const int _SC_LEVEL4_CACHE_SIZE_24 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_24 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_24 = 199;

const int _SC_IPV6_24 = 235;

const int _SC_RAW_SOCKETS_24 = 236;

const int _SC_V7_ILP32_OFF32_24 = 237;

const int _SC_V7_ILP32_OFFBIG_24 = 238;

const int _SC_V7_LP64_OFF64_24 = 239;

const int _SC_V7_LPBIG_OFFBIG_24 = 240;

const int _SC_SS_REPL_MAX_24 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_24 = 242;

const int _SC_TRACE_NAME_MAX_24 = 243;

const int _SC_TRACE_SYS_MAX_24 = 244;

const int _SC_TRACE_USER_EVENT_MAX_24 = 245;

const int _SC_XOPEN_STREAMS_24 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_24 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_24 = 248;

const int _CS_PATH_24 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_24 = 1;

const int _CS_GNU_LIBC_VERSION_24 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_24 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_24 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_24 = 5;

const int _CS_LFS_CFLAGS_24 = 1000;

const int _CS_LFS_LDFLAGS_24 = 1001;

const int _CS_LFS_LIBS_24 = 1002;

const int _CS_LFS_LINTFLAGS_24 = 1003;

const int _CS_LFS64_CFLAGS_24 = 1004;

const int _CS_LFS64_LDFLAGS_24 = 1005;

const int _CS_LFS64_LIBS_24 = 1006;

const int _CS_LFS64_LINTFLAGS_24 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_24 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_24 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_24 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_24 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_24 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_24 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_24 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_24 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_24 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_24 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_24 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_24 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_24 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_24 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_24 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_24 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_24 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_24 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_24 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_24 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_24 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_24 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_24 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_24 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_24 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_24 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_24 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_24 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_24 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_24 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_24 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_24 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_24 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_24 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_24 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_24 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_24 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_24 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_24 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_24 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_24 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_24 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_24 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_24 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_24 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_24 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_24 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_24 = 1147;

const int _CS_V6_ENV_24 = 1148;

const int _CS_V7_ENV_24 = 1149;

const int PTHREAD_CREATE_JOINABLE_6 = 0;

const int PTHREAD_CREATE_DETACHED_6 = 1;

const int PTHREAD_MUTEX_TIMED_NP_6 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_6 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_6 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_6 = 3;

const int PTHREAD_MUTEX_NORMAL_6 = 0;

const int PTHREAD_MUTEX_RECURSIVE_6 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_6 = 2;

const int PTHREAD_MUTEX_DEFAULT_6 = 0;

const int PTHREAD_MUTEX_STALLED_6 = 0;

const int PTHREAD_MUTEX_STALLED_NP_6 = 0;

const int PTHREAD_MUTEX_ROBUST_6 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_6 = 1;

const int PTHREAD_PRIO_NONE_6 = 0;

const int PTHREAD_PRIO_INHERIT_6 = 1;

const int PTHREAD_PRIO_PROTECT_6 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_6 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_6 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_6 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_6 = 0;

const int PTHREAD_INHERIT_SCHED_6 = 0;

const int PTHREAD_EXPLICIT_SCHED_6 = 1;

const int PTHREAD_SCOPE_SYSTEM_6 = 0;

const int PTHREAD_SCOPE_PROCESS_6 = 1;

const int PTHREAD_PROCESS_PRIVATE_6 = 0;

const int PTHREAD_PROCESS_SHARED_6 = 1;

const int PTHREAD_CANCEL_ENABLE_6 = 0;

const int PTHREAD_CANCEL_DISABLE_6 = 1;

const int PTHREAD_CANCEL_DEFERRED_6 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_6 = 1;

const int PTHREAD_CREATE_JOINABLE_7 = 0;

const int PTHREAD_CREATE_DETACHED_7 = 1;

const int PTHREAD_MUTEX_TIMED_NP_7 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_7 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_7 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_7 = 3;

const int PTHREAD_MUTEX_NORMAL_7 = 0;

const int PTHREAD_MUTEX_RECURSIVE_7 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_7 = 2;

const int PTHREAD_MUTEX_DEFAULT_7 = 0;

const int PTHREAD_MUTEX_STALLED_7 = 0;

const int PTHREAD_MUTEX_STALLED_NP_7 = 0;

const int PTHREAD_MUTEX_ROBUST_7 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_7 = 1;

const int PTHREAD_PRIO_NONE_7 = 0;

const int PTHREAD_PRIO_INHERIT_7 = 1;

const int PTHREAD_PRIO_PROTECT_7 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_7 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_7 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_7 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_7 = 0;

const int PTHREAD_INHERIT_SCHED_7 = 0;

const int PTHREAD_EXPLICIT_SCHED_7 = 1;

const int PTHREAD_SCOPE_SYSTEM_7 = 0;

const int PTHREAD_SCOPE_PROCESS_7 = 1;

const int PTHREAD_PROCESS_PRIVATE_7 = 0;

const int PTHREAD_PROCESS_SHARED_7 = 1;

const int PTHREAD_CANCEL_ENABLE_7 = 0;

const int PTHREAD_CANCEL_DISABLE_7 = 1;

const int PTHREAD_CANCEL_DEFERRED_7 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_7 = 1;

const int PTHREAD_CREATE_JOINABLE_8 = 0;

const int PTHREAD_CREATE_DETACHED_8 = 1;

const int PTHREAD_MUTEX_TIMED_NP_8 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_8 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_8 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_8 = 3;

const int PTHREAD_MUTEX_NORMAL_8 = 0;

const int PTHREAD_MUTEX_RECURSIVE_8 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_8 = 2;

const int PTHREAD_MUTEX_DEFAULT_8 = 0;

const int PTHREAD_MUTEX_STALLED_8 = 0;

const int PTHREAD_MUTEX_STALLED_NP_8 = 0;

const int PTHREAD_MUTEX_ROBUST_8 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_8 = 1;

const int PTHREAD_PRIO_NONE_8 = 0;

const int PTHREAD_PRIO_INHERIT_8 = 1;

const int PTHREAD_PRIO_PROTECT_8 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_8 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_8 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_8 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_8 = 0;

const int PTHREAD_INHERIT_SCHED_8 = 0;

const int PTHREAD_EXPLICIT_SCHED_8 = 1;

const int PTHREAD_SCOPE_SYSTEM_8 = 0;

const int PTHREAD_SCOPE_PROCESS_8 = 1;

const int PTHREAD_PROCESS_PRIVATE_8 = 0;

const int PTHREAD_PROCESS_SHARED_8 = 1;

const int PTHREAD_CANCEL_ENABLE_8 = 0;

const int PTHREAD_CANCEL_DISABLE_8 = 1;

const int PTHREAD_CANCEL_DEFERRED_8 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_8 = 1;

const int _PC_LINK_MAX_25 = 0;

const int _PC_MAX_CANON_25 = 1;

const int _PC_MAX_INPUT_25 = 2;

const int _PC_NAME_MAX_25 = 3;

const int _PC_PATH_MAX_25 = 4;

const int _PC_PIPE_BUF_25 = 5;

const int _PC_CHOWN_RESTRICTED_25 = 6;

const int _PC_NO_TRUNC_25 = 7;

const int _PC_VDISABLE_25 = 8;

const int _PC_SYNC_IO_25 = 9;

const int _PC_ASYNC_IO_25 = 10;

const int _PC_PRIO_IO_25 = 11;

const int _PC_SOCK_MAXBUF_25 = 12;

const int _PC_FILESIZEBITS_25 = 13;

const int _PC_REC_INCR_XFER_SIZE_25 = 14;

const int _PC_REC_MAX_XFER_SIZE_25 = 15;

const int _PC_REC_MIN_XFER_SIZE_25 = 16;

const int _PC_REC_XFER_ALIGN_25 = 17;

const int _PC_ALLOC_SIZE_MIN_25 = 18;

const int _PC_SYMLINK_MAX_25 = 19;

const int _PC_2_SYMLINKS_25 = 20;

const int _SC_ARG_MAX_25 = 0;

const int _SC_CHILD_MAX_25 = 1;

const int _SC_CLK_TCK_25 = 2;

const int _SC_NGROUPS_MAX_25 = 3;

const int _SC_OPEN_MAX_25 = 4;

const int _SC_STREAM_MAX_25 = 5;

const int _SC_TZNAME_MAX_25 = 6;

const int _SC_JOB_CONTROL_25 = 7;

const int _SC_SAVED_IDS_25 = 8;

const int _SC_REALTIME_SIGNALS_25 = 9;

const int _SC_PRIORITY_SCHEDULING_25 = 10;

const int _SC_TIMERS_25 = 11;

const int _SC_ASYNCHRONOUS_IO_25 = 12;

const int _SC_PRIORITIZED_IO_25 = 13;

const int _SC_SYNCHRONIZED_IO_25 = 14;

const int _SC_FSYNC_25 = 15;

const int _SC_MAPPED_FILES_25 = 16;

const int _SC_MEMLOCK_25 = 17;

const int _SC_MEMLOCK_RANGE_25 = 18;

const int _SC_MEMORY_PROTECTION_25 = 19;

const int _SC_MESSAGE_PASSING_25 = 20;

const int _SC_SEMAPHORES_25 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_25 = 22;

const int _SC_AIO_LISTIO_MAX_25 = 23;

const int _SC_AIO_MAX_25 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_25 = 25;

const int _SC_DELAYTIMER_MAX_25 = 26;

const int _SC_MQ_OPEN_MAX_25 = 27;

const int _SC_MQ_PRIO_MAX_25 = 28;

const int _SC_VERSION_25 = 29;

const int _SC_PAGESIZE_25 = 30;

const int _SC_RTSIG_MAX_25 = 31;

const int _SC_SEM_NSEMS_MAX_25 = 32;

const int _SC_SEM_VALUE_MAX_25 = 33;

const int _SC_SIGQUEUE_MAX_25 = 34;

const int _SC_TIMER_MAX_25 = 35;

const int _SC_BC_BASE_MAX_25 = 36;

const int _SC_BC_DIM_MAX_25 = 37;

const int _SC_BC_SCALE_MAX_25 = 38;

const int _SC_BC_STRING_MAX_25 = 39;

const int _SC_COLL_WEIGHTS_MAX_25 = 40;

const int _SC_EQUIV_CLASS_MAX_25 = 41;

const int _SC_EXPR_NEST_MAX_25 = 42;

const int _SC_LINE_MAX_25 = 43;

const int _SC_RE_DUP_MAX_25 = 44;

const int _SC_CHARCLASS_NAME_MAX_25 = 45;

const int _SC_2_VERSION_25 = 46;

const int _SC_2_C_BIND_25 = 47;

const int _SC_2_C_DEV_25 = 48;

const int _SC_2_FORT_DEV_25 = 49;

const int _SC_2_FORT_RUN_25 = 50;

const int _SC_2_SW_DEV_25 = 51;

const int _SC_2_LOCALEDEF_25 = 52;

const int _SC_PII_25 = 53;

const int _SC_PII_XTI_25 = 54;

const int _SC_PII_SOCKET_25 = 55;

const int _SC_PII_INTERNET_25 = 56;

const int _SC_PII_OSI_25 = 57;

const int _SC_POLL_25 = 58;

const int _SC_SELECT_25 = 59;

const int _SC_UIO_MAXIOV_25 = 60;

const int _SC_IOV_MAX_25 = 60;

const int _SC_PII_INTERNET_STREAM_25 = 61;

const int _SC_PII_INTERNET_DGRAM_25 = 62;

const int _SC_PII_OSI_COTS_25 = 63;

const int _SC_PII_OSI_CLTS_25 = 64;

const int _SC_PII_OSI_M_25 = 65;

const int _SC_T_IOV_MAX_25 = 66;

const int _SC_THREADS_25 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_25 = 68;

const int _SC_GETGR_R_SIZE_MAX_25 = 69;

const int _SC_GETPW_R_SIZE_MAX_25 = 70;

const int _SC_LOGIN_NAME_MAX_25 = 71;

const int _SC_TTY_NAME_MAX_25 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_25 = 73;

const int _SC_THREAD_KEYS_MAX_25 = 74;

const int _SC_THREAD_STACK_MIN_25 = 75;

const int _SC_THREAD_THREADS_MAX_25 = 76;

const int _SC_THREAD_ATTR_STACKADDR_25 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_25 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_25 = 79;

const int _SC_THREAD_PRIO_INHERIT_25 = 80;

const int _SC_THREAD_PRIO_PROTECT_25 = 81;

const int _SC_THREAD_PROCESS_SHARED_25 = 82;

const int _SC_NPROCESSORS_CONF_25 = 83;

const int _SC_NPROCESSORS_ONLN_25 = 84;

const int _SC_PHYS_PAGES_25 = 85;

const int _SC_AVPHYS_PAGES_25 = 86;

const int _SC_ATEXIT_MAX_25 = 87;

const int _SC_PASS_MAX_25 = 88;

const int _SC_XOPEN_VERSION_25 = 89;

const int _SC_XOPEN_XCU_VERSION_25 = 90;

const int _SC_XOPEN_UNIX_25 = 91;

const int _SC_XOPEN_CRYPT_25 = 92;

const int _SC_XOPEN_ENH_I18N_25 = 93;

const int _SC_XOPEN_SHM_25 = 94;

const int _SC_2_CHAR_TERM_25 = 95;

const int _SC_2_C_VERSION_25 = 96;

const int _SC_2_UPE_25 = 97;

const int _SC_XOPEN_XPG2_25 = 98;

const int _SC_XOPEN_XPG3_25 = 99;

const int _SC_XOPEN_XPG4_25 = 100;

const int _SC_CHAR_BIT_25 = 101;

const int _SC_CHAR_MAX_25 = 102;

const int _SC_CHAR_MIN_25 = 103;

const int _SC_INT_MAX_25 = 104;

const int _SC_INT_MIN_25 = 105;

const int _SC_LONG_BIT_25 = 106;

const int _SC_WORD_BIT_25 = 107;

const int _SC_MB_LEN_MAX_25 = 108;

const int _SC_NZERO_25 = 109;

const int _SC_SSIZE_MAX_25 = 110;

const int _SC_SCHAR_MAX_25 = 111;

const int _SC_SCHAR_MIN_25 = 112;

const int _SC_SHRT_MAX_25 = 113;

const int _SC_SHRT_MIN_25 = 114;

const int _SC_UCHAR_MAX_25 = 115;

const int _SC_UINT_MAX_25 = 116;

const int _SC_ULONG_MAX_25 = 117;

const int _SC_USHRT_MAX_25 = 118;

const int _SC_NL_ARGMAX_25 = 119;

const int _SC_NL_LANGMAX_25 = 120;

const int _SC_NL_MSGMAX_25 = 121;

const int _SC_NL_NMAX_25 = 122;

const int _SC_NL_SETMAX_25 = 123;

const int _SC_NL_TEXTMAX_25 = 124;

const int _SC_XBS5_ILP32_OFF32_25 = 125;

const int _SC_XBS5_ILP32_OFFBIG_25 = 126;

const int _SC_XBS5_LP64_OFF64_25 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_25 = 128;

const int _SC_XOPEN_LEGACY_25 = 129;

const int _SC_XOPEN_REALTIME_25 = 130;

const int _SC_XOPEN_REALTIME_THREADS_25 = 131;

const int _SC_ADVISORY_INFO_25 = 132;

const int _SC_BARRIERS_25 = 133;

const int _SC_BASE_25 = 134;

const int _SC_C_LANG_SUPPORT_25 = 135;

const int _SC_C_LANG_SUPPORT_R_25 = 136;

const int _SC_CLOCK_SELECTION_25 = 137;

const int _SC_CPUTIME_25 = 138;

const int _SC_THREAD_CPUTIME_25 = 139;

const int _SC_DEVICE_IO_25 = 140;

const int _SC_DEVICE_SPECIFIC_25 = 141;

const int _SC_DEVICE_SPECIFIC_R_25 = 142;

const int _SC_FD_MGMT_25 = 143;

const int _SC_FIFO_25 = 144;

const int _SC_PIPE_25 = 145;

const int _SC_FILE_ATTRIBUTES_25 = 146;

const int _SC_FILE_LOCKING_25 = 147;

const int _SC_FILE_SYSTEM_25 = 148;

const int _SC_MONOTONIC_CLOCK_25 = 149;

const int _SC_MULTI_PROCESS_25 = 150;

const int _SC_SINGLE_PROCESS_25 = 151;

const int _SC_NETWORKING_25 = 152;

const int _SC_READER_WRITER_LOCKS_25 = 153;

const int _SC_SPIN_LOCKS_25 = 154;

const int _SC_REGEXP_25 = 155;

const int _SC_REGEX_VERSION_25 = 156;

const int _SC_SHELL_25 = 157;

const int _SC_SIGNALS_25 = 158;

const int _SC_SPAWN_25 = 159;

const int _SC_SPORADIC_SERVER_25 = 160;

const int _SC_THREAD_SPORADIC_SERVER_25 = 161;

const int _SC_SYSTEM_DATABASE_25 = 162;

const int _SC_SYSTEM_DATABASE_R_25 = 163;

const int _SC_TIMEOUTS_25 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_25 = 165;

const int _SC_USER_GROUPS_25 = 166;

const int _SC_USER_GROUPS_R_25 = 167;

const int _SC_2_PBS_25 = 168;

const int _SC_2_PBS_ACCOUNTING_25 = 169;

const int _SC_2_PBS_LOCATE_25 = 170;

const int _SC_2_PBS_MESSAGE_25 = 171;

const int _SC_2_PBS_TRACK_25 = 172;

const int _SC_SYMLOOP_MAX_25 = 173;

const int _SC_STREAMS_25 = 174;

const int _SC_2_PBS_CHECKPOINT_25 = 175;

const int _SC_V6_ILP32_OFF32_25 = 176;

const int _SC_V6_ILP32_OFFBIG_25 = 177;

const int _SC_V6_LP64_OFF64_25 = 178;

const int _SC_V6_LPBIG_OFFBIG_25 = 179;

const int _SC_HOST_NAME_MAX_25 = 180;

const int _SC_TRACE_25 = 181;

const int _SC_TRACE_EVENT_FILTER_25 = 182;

const int _SC_TRACE_INHERIT_25 = 183;

const int _SC_TRACE_LOG_25 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_25 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_25 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_25 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_25 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_25 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_25 = 190;

const int _SC_LEVEL2_CACHE_SIZE_25 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_25 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_25 = 193;

const int _SC_LEVEL3_CACHE_SIZE_25 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_25 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_25 = 196;

const int _SC_LEVEL4_CACHE_SIZE_25 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_25 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_25 = 199;

const int _SC_IPV6_25 = 235;

const int _SC_RAW_SOCKETS_25 = 236;

const int _SC_V7_ILP32_OFF32_25 = 237;

const int _SC_V7_ILP32_OFFBIG_25 = 238;

const int _SC_V7_LP64_OFF64_25 = 239;

const int _SC_V7_LPBIG_OFFBIG_25 = 240;

const int _SC_SS_REPL_MAX_25 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_25 = 242;

const int _SC_TRACE_NAME_MAX_25 = 243;

const int _SC_TRACE_SYS_MAX_25 = 244;

const int _SC_TRACE_USER_EVENT_MAX_25 = 245;

const int _SC_XOPEN_STREAMS_25 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_25 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_25 = 248;

const int _CS_PATH_25 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_25 = 1;

const int _CS_GNU_LIBC_VERSION_25 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_25 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_25 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_25 = 5;

const int _CS_LFS_CFLAGS_25 = 1000;

const int _CS_LFS_LDFLAGS_25 = 1001;

const int _CS_LFS_LIBS_25 = 1002;

const int _CS_LFS_LINTFLAGS_25 = 1003;

const int _CS_LFS64_CFLAGS_25 = 1004;

const int _CS_LFS64_LDFLAGS_25 = 1005;

const int _CS_LFS64_LIBS_25 = 1006;

const int _CS_LFS64_LINTFLAGS_25 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_25 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_25 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_25 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_25 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_25 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_25 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_25 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_25 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_25 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_25 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_25 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_25 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_25 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_25 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_25 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_25 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_25 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_25 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_25 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_25 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_25 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_25 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_25 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_25 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_25 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_25 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_25 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_25 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_25 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_25 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_25 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_25 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_25 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_25 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_25 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_25 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_25 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_25 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_25 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_25 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_25 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_25 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_25 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_25 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_25 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_25 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_25 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_25 = 1147;

const int _CS_V6_ENV_25 = 1148;

const int _CS_V7_ENV_25 = 1149;

const int _ISupper_5 = 256;

const int _ISlower_5 = 512;

const int _ISalpha_5 = 1024;

const int _ISdigit_5 = 2048;

const int _ISxdigit_5 = 4096;

const int _ISspace_5 = 8192;

const int _ISprint_5 = 16384;

const int _ISgraph_5 = 32768;

const int _ISblank_5 = 1;

const int _IScntrl_5 = 2;

const int _ISpunct_5 = 4;

const int _ISalnum_5 = 8;

const int _PC_LINK_MAX_26 = 0;

const int _PC_MAX_CANON_26 = 1;

const int _PC_MAX_INPUT_26 = 2;

const int _PC_NAME_MAX_26 = 3;

const int _PC_PATH_MAX_26 = 4;

const int _PC_PIPE_BUF_26 = 5;

const int _PC_CHOWN_RESTRICTED_26 = 6;

const int _PC_NO_TRUNC_26 = 7;

const int _PC_VDISABLE_26 = 8;

const int _PC_SYNC_IO_26 = 9;

const int _PC_ASYNC_IO_26 = 10;

const int _PC_PRIO_IO_26 = 11;

const int _PC_SOCK_MAXBUF_26 = 12;

const int _PC_FILESIZEBITS_26 = 13;

const int _PC_REC_INCR_XFER_SIZE_26 = 14;

const int _PC_REC_MAX_XFER_SIZE_26 = 15;

const int _PC_REC_MIN_XFER_SIZE_26 = 16;

const int _PC_REC_XFER_ALIGN_26 = 17;

const int _PC_ALLOC_SIZE_MIN_26 = 18;

const int _PC_SYMLINK_MAX_26 = 19;

const int _PC_2_SYMLINKS_26 = 20;

const int _SC_ARG_MAX_26 = 0;

const int _SC_CHILD_MAX_26 = 1;

const int _SC_CLK_TCK_26 = 2;

const int _SC_NGROUPS_MAX_26 = 3;

const int _SC_OPEN_MAX_26 = 4;

const int _SC_STREAM_MAX_26 = 5;

const int _SC_TZNAME_MAX_26 = 6;

const int _SC_JOB_CONTROL_26 = 7;

const int _SC_SAVED_IDS_26 = 8;

const int _SC_REALTIME_SIGNALS_26 = 9;

const int _SC_PRIORITY_SCHEDULING_26 = 10;

const int _SC_TIMERS_26 = 11;

const int _SC_ASYNCHRONOUS_IO_26 = 12;

const int _SC_PRIORITIZED_IO_26 = 13;

const int _SC_SYNCHRONIZED_IO_26 = 14;

const int _SC_FSYNC_26 = 15;

const int _SC_MAPPED_FILES_26 = 16;

const int _SC_MEMLOCK_26 = 17;

const int _SC_MEMLOCK_RANGE_26 = 18;

const int _SC_MEMORY_PROTECTION_26 = 19;

const int _SC_MESSAGE_PASSING_26 = 20;

const int _SC_SEMAPHORES_26 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_26 = 22;

const int _SC_AIO_LISTIO_MAX_26 = 23;

const int _SC_AIO_MAX_26 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_26 = 25;

const int _SC_DELAYTIMER_MAX_26 = 26;

const int _SC_MQ_OPEN_MAX_26 = 27;

const int _SC_MQ_PRIO_MAX_26 = 28;

const int _SC_VERSION_26 = 29;

const int _SC_PAGESIZE_26 = 30;

const int _SC_RTSIG_MAX_26 = 31;

const int _SC_SEM_NSEMS_MAX_26 = 32;

const int _SC_SEM_VALUE_MAX_26 = 33;

const int _SC_SIGQUEUE_MAX_26 = 34;

const int _SC_TIMER_MAX_26 = 35;

const int _SC_BC_BASE_MAX_26 = 36;

const int _SC_BC_DIM_MAX_26 = 37;

const int _SC_BC_SCALE_MAX_26 = 38;

const int _SC_BC_STRING_MAX_26 = 39;

const int _SC_COLL_WEIGHTS_MAX_26 = 40;

const int _SC_EQUIV_CLASS_MAX_26 = 41;

const int _SC_EXPR_NEST_MAX_26 = 42;

const int _SC_LINE_MAX_26 = 43;

const int _SC_RE_DUP_MAX_26 = 44;

const int _SC_CHARCLASS_NAME_MAX_26 = 45;

const int _SC_2_VERSION_26 = 46;

const int _SC_2_C_BIND_26 = 47;

const int _SC_2_C_DEV_26 = 48;

const int _SC_2_FORT_DEV_26 = 49;

const int _SC_2_FORT_RUN_26 = 50;

const int _SC_2_SW_DEV_26 = 51;

const int _SC_2_LOCALEDEF_26 = 52;

const int _SC_PII_26 = 53;

const int _SC_PII_XTI_26 = 54;

const int _SC_PII_SOCKET_26 = 55;

const int _SC_PII_INTERNET_26 = 56;

const int _SC_PII_OSI_26 = 57;

const int _SC_POLL_26 = 58;

const int _SC_SELECT_26 = 59;

const int _SC_UIO_MAXIOV_26 = 60;

const int _SC_IOV_MAX_26 = 60;

const int _SC_PII_INTERNET_STREAM_26 = 61;

const int _SC_PII_INTERNET_DGRAM_26 = 62;

const int _SC_PII_OSI_COTS_26 = 63;

const int _SC_PII_OSI_CLTS_26 = 64;

const int _SC_PII_OSI_M_26 = 65;

const int _SC_T_IOV_MAX_26 = 66;

const int _SC_THREADS_26 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_26 = 68;

const int _SC_GETGR_R_SIZE_MAX_26 = 69;

const int _SC_GETPW_R_SIZE_MAX_26 = 70;

const int _SC_LOGIN_NAME_MAX_26 = 71;

const int _SC_TTY_NAME_MAX_26 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_26 = 73;

const int _SC_THREAD_KEYS_MAX_26 = 74;

const int _SC_THREAD_STACK_MIN_26 = 75;

const int _SC_THREAD_THREADS_MAX_26 = 76;

const int _SC_THREAD_ATTR_STACKADDR_26 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_26 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_26 = 79;

const int _SC_THREAD_PRIO_INHERIT_26 = 80;

const int _SC_THREAD_PRIO_PROTECT_26 = 81;

const int _SC_THREAD_PROCESS_SHARED_26 = 82;

const int _SC_NPROCESSORS_CONF_26 = 83;

const int _SC_NPROCESSORS_ONLN_26 = 84;

const int _SC_PHYS_PAGES_26 = 85;

const int _SC_AVPHYS_PAGES_26 = 86;

const int _SC_ATEXIT_MAX_26 = 87;

const int _SC_PASS_MAX_26 = 88;

const int _SC_XOPEN_VERSION_26 = 89;

const int _SC_XOPEN_XCU_VERSION_26 = 90;

const int _SC_XOPEN_UNIX_26 = 91;

const int _SC_XOPEN_CRYPT_26 = 92;

const int _SC_XOPEN_ENH_I18N_26 = 93;

const int _SC_XOPEN_SHM_26 = 94;

const int _SC_2_CHAR_TERM_26 = 95;

const int _SC_2_C_VERSION_26 = 96;

const int _SC_2_UPE_26 = 97;

const int _SC_XOPEN_XPG2_26 = 98;

const int _SC_XOPEN_XPG3_26 = 99;

const int _SC_XOPEN_XPG4_26 = 100;

const int _SC_CHAR_BIT_26 = 101;

const int _SC_CHAR_MAX_26 = 102;

const int _SC_CHAR_MIN_26 = 103;

const int _SC_INT_MAX_26 = 104;

const int _SC_INT_MIN_26 = 105;

const int _SC_LONG_BIT_26 = 106;

const int _SC_WORD_BIT_26 = 107;

const int _SC_MB_LEN_MAX_26 = 108;

const int _SC_NZERO_26 = 109;

const int _SC_SSIZE_MAX_26 = 110;

const int _SC_SCHAR_MAX_26 = 111;

const int _SC_SCHAR_MIN_26 = 112;

const int _SC_SHRT_MAX_26 = 113;

const int _SC_SHRT_MIN_26 = 114;

const int _SC_UCHAR_MAX_26 = 115;

const int _SC_UINT_MAX_26 = 116;

const int _SC_ULONG_MAX_26 = 117;

const int _SC_USHRT_MAX_26 = 118;

const int _SC_NL_ARGMAX_26 = 119;

const int _SC_NL_LANGMAX_26 = 120;

const int _SC_NL_MSGMAX_26 = 121;

const int _SC_NL_NMAX_26 = 122;

const int _SC_NL_SETMAX_26 = 123;

const int _SC_NL_TEXTMAX_26 = 124;

const int _SC_XBS5_ILP32_OFF32_26 = 125;

const int _SC_XBS5_ILP32_OFFBIG_26 = 126;

const int _SC_XBS5_LP64_OFF64_26 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_26 = 128;

const int _SC_XOPEN_LEGACY_26 = 129;

const int _SC_XOPEN_REALTIME_26 = 130;

const int _SC_XOPEN_REALTIME_THREADS_26 = 131;

const int _SC_ADVISORY_INFO_26 = 132;

const int _SC_BARRIERS_26 = 133;

const int _SC_BASE_26 = 134;

const int _SC_C_LANG_SUPPORT_26 = 135;

const int _SC_C_LANG_SUPPORT_R_26 = 136;

const int _SC_CLOCK_SELECTION_26 = 137;

const int _SC_CPUTIME_26 = 138;

const int _SC_THREAD_CPUTIME_26 = 139;

const int _SC_DEVICE_IO_26 = 140;

const int _SC_DEVICE_SPECIFIC_26 = 141;

const int _SC_DEVICE_SPECIFIC_R_26 = 142;

const int _SC_FD_MGMT_26 = 143;

const int _SC_FIFO_26 = 144;

const int _SC_PIPE_26 = 145;

const int _SC_FILE_ATTRIBUTES_26 = 146;

const int _SC_FILE_LOCKING_26 = 147;

const int _SC_FILE_SYSTEM_26 = 148;

const int _SC_MONOTONIC_CLOCK_26 = 149;

const int _SC_MULTI_PROCESS_26 = 150;

const int _SC_SINGLE_PROCESS_26 = 151;

const int _SC_NETWORKING_26 = 152;

const int _SC_READER_WRITER_LOCKS_26 = 153;

const int _SC_SPIN_LOCKS_26 = 154;

const int _SC_REGEXP_26 = 155;

const int _SC_REGEX_VERSION_26 = 156;

const int _SC_SHELL_26 = 157;

const int _SC_SIGNALS_26 = 158;

const int _SC_SPAWN_26 = 159;

const int _SC_SPORADIC_SERVER_26 = 160;

const int _SC_THREAD_SPORADIC_SERVER_26 = 161;

const int _SC_SYSTEM_DATABASE_26 = 162;

const int _SC_SYSTEM_DATABASE_R_26 = 163;

const int _SC_TIMEOUTS_26 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_26 = 165;

const int _SC_USER_GROUPS_26 = 166;

const int _SC_USER_GROUPS_R_26 = 167;

const int _SC_2_PBS_26 = 168;

const int _SC_2_PBS_ACCOUNTING_26 = 169;

const int _SC_2_PBS_LOCATE_26 = 170;

const int _SC_2_PBS_MESSAGE_26 = 171;

const int _SC_2_PBS_TRACK_26 = 172;

const int _SC_SYMLOOP_MAX_26 = 173;

const int _SC_STREAMS_26 = 174;

const int _SC_2_PBS_CHECKPOINT_26 = 175;

const int _SC_V6_ILP32_OFF32_26 = 176;

const int _SC_V6_ILP32_OFFBIG_26 = 177;

const int _SC_V6_LP64_OFF64_26 = 178;

const int _SC_V6_LPBIG_OFFBIG_26 = 179;

const int _SC_HOST_NAME_MAX_26 = 180;

const int _SC_TRACE_26 = 181;

const int _SC_TRACE_EVENT_FILTER_26 = 182;

const int _SC_TRACE_INHERIT_26 = 183;

const int _SC_TRACE_LOG_26 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_26 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_26 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_26 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_26 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_26 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_26 = 190;

const int _SC_LEVEL2_CACHE_SIZE_26 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_26 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_26 = 193;

const int _SC_LEVEL3_CACHE_SIZE_26 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_26 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_26 = 196;

const int _SC_LEVEL4_CACHE_SIZE_26 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_26 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_26 = 199;

const int _SC_IPV6_26 = 235;

const int _SC_RAW_SOCKETS_26 = 236;

const int _SC_V7_ILP32_OFF32_26 = 237;

const int _SC_V7_ILP32_OFFBIG_26 = 238;

const int _SC_V7_LP64_OFF64_26 = 239;

const int _SC_V7_LPBIG_OFFBIG_26 = 240;

const int _SC_SS_REPL_MAX_26 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_26 = 242;

const int _SC_TRACE_NAME_MAX_26 = 243;

const int _SC_TRACE_SYS_MAX_26 = 244;

const int _SC_TRACE_USER_EVENT_MAX_26 = 245;

const int _SC_XOPEN_STREAMS_26 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_26 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_26 = 248;

const int _CS_PATH_26 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_26 = 1;

const int _CS_GNU_LIBC_VERSION_26 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_26 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_26 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_26 = 5;

const int _CS_LFS_CFLAGS_26 = 1000;

const int _CS_LFS_LDFLAGS_26 = 1001;

const int _CS_LFS_LIBS_26 = 1002;

const int _CS_LFS_LINTFLAGS_26 = 1003;

const int _CS_LFS64_CFLAGS_26 = 1004;

const int _CS_LFS64_LDFLAGS_26 = 1005;

const int _CS_LFS64_LIBS_26 = 1006;

const int _CS_LFS64_LINTFLAGS_26 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_26 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_26 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_26 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_26 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_26 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_26 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_26 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_26 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_26 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_26 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_26 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_26 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_26 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_26 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_26 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_26 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_26 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_26 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_26 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_26 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_26 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_26 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_26 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_26 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_26 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_26 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_26 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_26 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_26 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_26 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_26 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_26 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_26 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_26 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_26 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_26 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_26 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_26 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_26 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_26 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_26 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_26 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_26 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_26 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_26 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_26 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_26 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_26 = 1147;

const int _CS_V6_ENV_26 = 1148;

const int _CS_V7_ENV_26 = 1149;

const int FP_NAN = 0;

const int FP_INFINITE = 1;

const int FP_ZERO = 2;

const int FP_SUBNORMAL = 3;

const int FP_NORMAL = 4;

const int FP_NAN_1 = 0;

const int FP_INFINITE_1 = 1;

const int FP_ZERO_1 = 2;

const int FP_SUBNORMAL_1 = 3;

const int FP_NORMAL_1 = 4;

const int FP_NAN_2 = 0;

const int FP_INFINITE_2 = 1;

const int FP_ZERO_2 = 2;

const int FP_SUBNORMAL_2 = 3;

const int FP_NORMAL_2 = 4;

const int FP_NAN_3 = 0;

const int FP_INFINITE_3 = 1;

const int FP_ZERO_3 = 2;

const int FP_SUBNORMAL_3 = 3;

const int FP_NORMAL_3 = 4;

const int _PC_LINK_MAX_27 = 0;

const int _PC_MAX_CANON_27 = 1;

const int _PC_MAX_INPUT_27 = 2;

const int _PC_NAME_MAX_27 = 3;

const int _PC_PATH_MAX_27 = 4;

const int _PC_PIPE_BUF_27 = 5;

const int _PC_CHOWN_RESTRICTED_27 = 6;

const int _PC_NO_TRUNC_27 = 7;

const int _PC_VDISABLE_27 = 8;

const int _PC_SYNC_IO_27 = 9;

const int _PC_ASYNC_IO_27 = 10;

const int _PC_PRIO_IO_27 = 11;

const int _PC_SOCK_MAXBUF_27 = 12;

const int _PC_FILESIZEBITS_27 = 13;

const int _PC_REC_INCR_XFER_SIZE_27 = 14;

const int _PC_REC_MAX_XFER_SIZE_27 = 15;

const int _PC_REC_MIN_XFER_SIZE_27 = 16;

const int _PC_REC_XFER_ALIGN_27 = 17;

const int _PC_ALLOC_SIZE_MIN_27 = 18;

const int _PC_SYMLINK_MAX_27 = 19;

const int _PC_2_SYMLINKS_27 = 20;

const int _SC_ARG_MAX_27 = 0;

const int _SC_CHILD_MAX_27 = 1;

const int _SC_CLK_TCK_27 = 2;

const int _SC_NGROUPS_MAX_27 = 3;

const int _SC_OPEN_MAX_27 = 4;

const int _SC_STREAM_MAX_27 = 5;

const int _SC_TZNAME_MAX_27 = 6;

const int _SC_JOB_CONTROL_27 = 7;

const int _SC_SAVED_IDS_27 = 8;

const int _SC_REALTIME_SIGNALS_27 = 9;

const int _SC_PRIORITY_SCHEDULING_27 = 10;

const int _SC_TIMERS_27 = 11;

const int _SC_ASYNCHRONOUS_IO_27 = 12;

const int _SC_PRIORITIZED_IO_27 = 13;

const int _SC_SYNCHRONIZED_IO_27 = 14;

const int _SC_FSYNC_27 = 15;

const int _SC_MAPPED_FILES_27 = 16;

const int _SC_MEMLOCK_27 = 17;

const int _SC_MEMLOCK_RANGE_27 = 18;

const int _SC_MEMORY_PROTECTION_27 = 19;

const int _SC_MESSAGE_PASSING_27 = 20;

const int _SC_SEMAPHORES_27 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_27 = 22;

const int _SC_AIO_LISTIO_MAX_27 = 23;

const int _SC_AIO_MAX_27 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_27 = 25;

const int _SC_DELAYTIMER_MAX_27 = 26;

const int _SC_MQ_OPEN_MAX_27 = 27;

const int _SC_MQ_PRIO_MAX_27 = 28;

const int _SC_VERSION_27 = 29;

const int _SC_PAGESIZE_27 = 30;

const int _SC_RTSIG_MAX_27 = 31;

const int _SC_SEM_NSEMS_MAX_27 = 32;

const int _SC_SEM_VALUE_MAX_27 = 33;

const int _SC_SIGQUEUE_MAX_27 = 34;

const int _SC_TIMER_MAX_27 = 35;

const int _SC_BC_BASE_MAX_27 = 36;

const int _SC_BC_DIM_MAX_27 = 37;

const int _SC_BC_SCALE_MAX_27 = 38;

const int _SC_BC_STRING_MAX_27 = 39;

const int _SC_COLL_WEIGHTS_MAX_27 = 40;

const int _SC_EQUIV_CLASS_MAX_27 = 41;

const int _SC_EXPR_NEST_MAX_27 = 42;

const int _SC_LINE_MAX_27 = 43;

const int _SC_RE_DUP_MAX_27 = 44;

const int _SC_CHARCLASS_NAME_MAX_27 = 45;

const int _SC_2_VERSION_27 = 46;

const int _SC_2_C_BIND_27 = 47;

const int _SC_2_C_DEV_27 = 48;

const int _SC_2_FORT_DEV_27 = 49;

const int _SC_2_FORT_RUN_27 = 50;

const int _SC_2_SW_DEV_27 = 51;

const int _SC_2_LOCALEDEF_27 = 52;

const int _SC_PII_27 = 53;

const int _SC_PII_XTI_27 = 54;

const int _SC_PII_SOCKET_27 = 55;

const int _SC_PII_INTERNET_27 = 56;

const int _SC_PII_OSI_27 = 57;

const int _SC_POLL_27 = 58;

const int _SC_SELECT_27 = 59;

const int _SC_UIO_MAXIOV_27 = 60;

const int _SC_IOV_MAX_27 = 60;

const int _SC_PII_INTERNET_STREAM_27 = 61;

const int _SC_PII_INTERNET_DGRAM_27 = 62;

const int _SC_PII_OSI_COTS_27 = 63;

const int _SC_PII_OSI_CLTS_27 = 64;

const int _SC_PII_OSI_M_27 = 65;

const int _SC_T_IOV_MAX_27 = 66;

const int _SC_THREADS_27 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_27 = 68;

const int _SC_GETGR_R_SIZE_MAX_27 = 69;

const int _SC_GETPW_R_SIZE_MAX_27 = 70;

const int _SC_LOGIN_NAME_MAX_27 = 71;

const int _SC_TTY_NAME_MAX_27 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_27 = 73;

const int _SC_THREAD_KEYS_MAX_27 = 74;

const int _SC_THREAD_STACK_MIN_27 = 75;

const int _SC_THREAD_THREADS_MAX_27 = 76;

const int _SC_THREAD_ATTR_STACKADDR_27 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_27 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_27 = 79;

const int _SC_THREAD_PRIO_INHERIT_27 = 80;

const int _SC_THREAD_PRIO_PROTECT_27 = 81;

const int _SC_THREAD_PROCESS_SHARED_27 = 82;

const int _SC_NPROCESSORS_CONF_27 = 83;

const int _SC_NPROCESSORS_ONLN_27 = 84;

const int _SC_PHYS_PAGES_27 = 85;

const int _SC_AVPHYS_PAGES_27 = 86;

const int _SC_ATEXIT_MAX_27 = 87;

const int _SC_PASS_MAX_27 = 88;

const int _SC_XOPEN_VERSION_27 = 89;

const int _SC_XOPEN_XCU_VERSION_27 = 90;

const int _SC_XOPEN_UNIX_27 = 91;

const int _SC_XOPEN_CRYPT_27 = 92;

const int _SC_XOPEN_ENH_I18N_27 = 93;

const int _SC_XOPEN_SHM_27 = 94;

const int _SC_2_CHAR_TERM_27 = 95;

const int _SC_2_C_VERSION_27 = 96;

const int _SC_2_UPE_27 = 97;

const int _SC_XOPEN_XPG2_27 = 98;

const int _SC_XOPEN_XPG3_27 = 99;

const int _SC_XOPEN_XPG4_27 = 100;

const int _SC_CHAR_BIT_27 = 101;

const int _SC_CHAR_MAX_27 = 102;

const int _SC_CHAR_MIN_27 = 103;

const int _SC_INT_MAX_27 = 104;

const int _SC_INT_MIN_27 = 105;

const int _SC_LONG_BIT_27 = 106;

const int _SC_WORD_BIT_27 = 107;

const int _SC_MB_LEN_MAX_27 = 108;

const int _SC_NZERO_27 = 109;

const int _SC_SSIZE_MAX_27 = 110;

const int _SC_SCHAR_MAX_27 = 111;

const int _SC_SCHAR_MIN_27 = 112;

const int _SC_SHRT_MAX_27 = 113;

const int _SC_SHRT_MIN_27 = 114;

const int _SC_UCHAR_MAX_27 = 115;

const int _SC_UINT_MAX_27 = 116;

const int _SC_ULONG_MAX_27 = 117;

const int _SC_USHRT_MAX_27 = 118;

const int _SC_NL_ARGMAX_27 = 119;

const int _SC_NL_LANGMAX_27 = 120;

const int _SC_NL_MSGMAX_27 = 121;

const int _SC_NL_NMAX_27 = 122;

const int _SC_NL_SETMAX_27 = 123;

const int _SC_NL_TEXTMAX_27 = 124;

const int _SC_XBS5_ILP32_OFF32_27 = 125;

const int _SC_XBS5_ILP32_OFFBIG_27 = 126;

const int _SC_XBS5_LP64_OFF64_27 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_27 = 128;

const int _SC_XOPEN_LEGACY_27 = 129;

const int _SC_XOPEN_REALTIME_27 = 130;

const int _SC_XOPEN_REALTIME_THREADS_27 = 131;

const int _SC_ADVISORY_INFO_27 = 132;

const int _SC_BARRIERS_27 = 133;

const int _SC_BASE_27 = 134;

const int _SC_C_LANG_SUPPORT_27 = 135;

const int _SC_C_LANG_SUPPORT_R_27 = 136;

const int _SC_CLOCK_SELECTION_27 = 137;

const int _SC_CPUTIME_27 = 138;

const int _SC_THREAD_CPUTIME_27 = 139;

const int _SC_DEVICE_IO_27 = 140;

const int _SC_DEVICE_SPECIFIC_27 = 141;

const int _SC_DEVICE_SPECIFIC_R_27 = 142;

const int _SC_FD_MGMT_27 = 143;

const int _SC_FIFO_27 = 144;

const int _SC_PIPE_27 = 145;

const int _SC_FILE_ATTRIBUTES_27 = 146;

const int _SC_FILE_LOCKING_27 = 147;

const int _SC_FILE_SYSTEM_27 = 148;

const int _SC_MONOTONIC_CLOCK_27 = 149;

const int _SC_MULTI_PROCESS_27 = 150;

const int _SC_SINGLE_PROCESS_27 = 151;

const int _SC_NETWORKING_27 = 152;

const int _SC_READER_WRITER_LOCKS_27 = 153;

const int _SC_SPIN_LOCKS_27 = 154;

const int _SC_REGEXP_27 = 155;

const int _SC_REGEX_VERSION_27 = 156;

const int _SC_SHELL_27 = 157;

const int _SC_SIGNALS_27 = 158;

const int _SC_SPAWN_27 = 159;

const int _SC_SPORADIC_SERVER_27 = 160;

const int _SC_THREAD_SPORADIC_SERVER_27 = 161;

const int _SC_SYSTEM_DATABASE_27 = 162;

const int _SC_SYSTEM_DATABASE_R_27 = 163;

const int _SC_TIMEOUTS_27 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_27 = 165;

const int _SC_USER_GROUPS_27 = 166;

const int _SC_USER_GROUPS_R_27 = 167;

const int _SC_2_PBS_27 = 168;

const int _SC_2_PBS_ACCOUNTING_27 = 169;

const int _SC_2_PBS_LOCATE_27 = 170;

const int _SC_2_PBS_MESSAGE_27 = 171;

const int _SC_2_PBS_TRACK_27 = 172;

const int _SC_SYMLOOP_MAX_27 = 173;

const int _SC_STREAMS_27 = 174;

const int _SC_2_PBS_CHECKPOINT_27 = 175;

const int _SC_V6_ILP32_OFF32_27 = 176;

const int _SC_V6_ILP32_OFFBIG_27 = 177;

const int _SC_V6_LP64_OFF64_27 = 178;

const int _SC_V6_LPBIG_OFFBIG_27 = 179;

const int _SC_HOST_NAME_MAX_27 = 180;

const int _SC_TRACE_27 = 181;

const int _SC_TRACE_EVENT_FILTER_27 = 182;

const int _SC_TRACE_INHERIT_27 = 183;

const int _SC_TRACE_LOG_27 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_27 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_27 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_27 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_27 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_27 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_27 = 190;

const int _SC_LEVEL2_CACHE_SIZE_27 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_27 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_27 = 193;

const int _SC_LEVEL3_CACHE_SIZE_27 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_27 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_27 = 196;

const int _SC_LEVEL4_CACHE_SIZE_27 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_27 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_27 = 199;

const int _SC_IPV6_27 = 235;

const int _SC_RAW_SOCKETS_27 = 236;

const int _SC_V7_ILP32_OFF32_27 = 237;

const int _SC_V7_ILP32_OFFBIG_27 = 238;

const int _SC_V7_LP64_OFF64_27 = 239;

const int _SC_V7_LPBIG_OFFBIG_27 = 240;

const int _SC_SS_REPL_MAX_27 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_27 = 242;

const int _SC_TRACE_NAME_MAX_27 = 243;

const int _SC_TRACE_SYS_MAX_27 = 244;

const int _SC_TRACE_USER_EVENT_MAX_27 = 245;

const int _SC_XOPEN_STREAMS_27 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_27 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_27 = 248;

const int _CS_PATH_27 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_27 = 1;

const int _CS_GNU_LIBC_VERSION_27 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_27 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_27 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_27 = 5;

const int _CS_LFS_CFLAGS_27 = 1000;

const int _CS_LFS_LDFLAGS_27 = 1001;

const int _CS_LFS_LIBS_27 = 1002;

const int _CS_LFS_LINTFLAGS_27 = 1003;

const int _CS_LFS64_CFLAGS_27 = 1004;

const int _CS_LFS64_LDFLAGS_27 = 1005;

const int _CS_LFS64_LIBS_27 = 1006;

const int _CS_LFS64_LINTFLAGS_27 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_27 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_27 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_27 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_27 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_27 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_27 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_27 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_27 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_27 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_27 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_27 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_27 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_27 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_27 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_27 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_27 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_27 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_27 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_27 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_27 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_27 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_27 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_27 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_27 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_27 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_27 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_27 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_27 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_27 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_27 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_27 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_27 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_27 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_27 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_27 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_27 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_27 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_27 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_27 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_27 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_27 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_27 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_27 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_27 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_27 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_27 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_27 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_27 = 1147;

const int _CS_V6_ENV_27 = 1148;

const int _CS_V7_ENV_27 = 1149;

const int FP_NAN_4 = 0;

const int FP_INFINITE_4 = 1;

const int FP_ZERO_4 = 2;

const int FP_SUBNORMAL_4 = 3;

const int FP_NORMAL_4 = 4;

const int FP_NAN_5 = 0;

const int FP_INFINITE_5 = 1;

const int FP_ZERO_5 = 2;

const int FP_SUBNORMAL_5 = 3;

const int FP_NORMAL_5 = 4;

const int FP_NAN_6 = 0;

const int FP_INFINITE_6 = 1;

const int FP_ZERO_6 = 2;

const int FP_SUBNORMAL_6 = 3;

const int FP_NORMAL_6 = 4;

const int FP_NAN_7 = 0;

const int FP_INFINITE_7 = 1;

const int FP_ZERO_7 = 2;

const int FP_SUBNORMAL_7 = 3;

const int FP_NORMAL_7 = 4;

const int _PC_LINK_MAX_28 = 0;

const int _PC_MAX_CANON_28 = 1;

const int _PC_MAX_INPUT_28 = 2;

const int _PC_NAME_MAX_28 = 3;

const int _PC_PATH_MAX_28 = 4;

const int _PC_PIPE_BUF_28 = 5;

const int _PC_CHOWN_RESTRICTED_28 = 6;

const int _PC_NO_TRUNC_28 = 7;

const int _PC_VDISABLE_28 = 8;

const int _PC_SYNC_IO_28 = 9;

const int _PC_ASYNC_IO_28 = 10;

const int _PC_PRIO_IO_28 = 11;

const int _PC_SOCK_MAXBUF_28 = 12;

const int _PC_FILESIZEBITS_28 = 13;

const int _PC_REC_INCR_XFER_SIZE_28 = 14;

const int _PC_REC_MAX_XFER_SIZE_28 = 15;

const int _PC_REC_MIN_XFER_SIZE_28 = 16;

const int _PC_REC_XFER_ALIGN_28 = 17;

const int _PC_ALLOC_SIZE_MIN_28 = 18;

const int _PC_SYMLINK_MAX_28 = 19;

const int _PC_2_SYMLINKS_28 = 20;

const int _SC_ARG_MAX_28 = 0;

const int _SC_CHILD_MAX_28 = 1;

const int _SC_CLK_TCK_28 = 2;

const int _SC_NGROUPS_MAX_28 = 3;

const int _SC_OPEN_MAX_28 = 4;

const int _SC_STREAM_MAX_28 = 5;

const int _SC_TZNAME_MAX_28 = 6;

const int _SC_JOB_CONTROL_28 = 7;

const int _SC_SAVED_IDS_28 = 8;

const int _SC_REALTIME_SIGNALS_28 = 9;

const int _SC_PRIORITY_SCHEDULING_28 = 10;

const int _SC_TIMERS_28 = 11;

const int _SC_ASYNCHRONOUS_IO_28 = 12;

const int _SC_PRIORITIZED_IO_28 = 13;

const int _SC_SYNCHRONIZED_IO_28 = 14;

const int _SC_FSYNC_28 = 15;

const int _SC_MAPPED_FILES_28 = 16;

const int _SC_MEMLOCK_28 = 17;

const int _SC_MEMLOCK_RANGE_28 = 18;

const int _SC_MEMORY_PROTECTION_28 = 19;

const int _SC_MESSAGE_PASSING_28 = 20;

const int _SC_SEMAPHORES_28 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_28 = 22;

const int _SC_AIO_LISTIO_MAX_28 = 23;

const int _SC_AIO_MAX_28 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_28 = 25;

const int _SC_DELAYTIMER_MAX_28 = 26;

const int _SC_MQ_OPEN_MAX_28 = 27;

const int _SC_MQ_PRIO_MAX_28 = 28;

const int _SC_VERSION_28 = 29;

const int _SC_PAGESIZE_28 = 30;

const int _SC_RTSIG_MAX_28 = 31;

const int _SC_SEM_NSEMS_MAX_28 = 32;

const int _SC_SEM_VALUE_MAX_28 = 33;

const int _SC_SIGQUEUE_MAX_28 = 34;

const int _SC_TIMER_MAX_28 = 35;

const int _SC_BC_BASE_MAX_28 = 36;

const int _SC_BC_DIM_MAX_28 = 37;

const int _SC_BC_SCALE_MAX_28 = 38;

const int _SC_BC_STRING_MAX_28 = 39;

const int _SC_COLL_WEIGHTS_MAX_28 = 40;

const int _SC_EQUIV_CLASS_MAX_28 = 41;

const int _SC_EXPR_NEST_MAX_28 = 42;

const int _SC_LINE_MAX_28 = 43;

const int _SC_RE_DUP_MAX_28 = 44;

const int _SC_CHARCLASS_NAME_MAX_28 = 45;

const int _SC_2_VERSION_28 = 46;

const int _SC_2_C_BIND_28 = 47;

const int _SC_2_C_DEV_28 = 48;

const int _SC_2_FORT_DEV_28 = 49;

const int _SC_2_FORT_RUN_28 = 50;

const int _SC_2_SW_DEV_28 = 51;

const int _SC_2_LOCALEDEF_28 = 52;

const int _SC_PII_28 = 53;

const int _SC_PII_XTI_28 = 54;

const int _SC_PII_SOCKET_28 = 55;

const int _SC_PII_INTERNET_28 = 56;

const int _SC_PII_OSI_28 = 57;

const int _SC_POLL_28 = 58;

const int _SC_SELECT_28 = 59;

const int _SC_UIO_MAXIOV_28 = 60;

const int _SC_IOV_MAX_28 = 60;

const int _SC_PII_INTERNET_STREAM_28 = 61;

const int _SC_PII_INTERNET_DGRAM_28 = 62;

const int _SC_PII_OSI_COTS_28 = 63;

const int _SC_PII_OSI_CLTS_28 = 64;

const int _SC_PII_OSI_M_28 = 65;

const int _SC_T_IOV_MAX_28 = 66;

const int _SC_THREADS_28 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_28 = 68;

const int _SC_GETGR_R_SIZE_MAX_28 = 69;

const int _SC_GETPW_R_SIZE_MAX_28 = 70;

const int _SC_LOGIN_NAME_MAX_28 = 71;

const int _SC_TTY_NAME_MAX_28 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_28 = 73;

const int _SC_THREAD_KEYS_MAX_28 = 74;

const int _SC_THREAD_STACK_MIN_28 = 75;

const int _SC_THREAD_THREADS_MAX_28 = 76;

const int _SC_THREAD_ATTR_STACKADDR_28 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_28 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_28 = 79;

const int _SC_THREAD_PRIO_INHERIT_28 = 80;

const int _SC_THREAD_PRIO_PROTECT_28 = 81;

const int _SC_THREAD_PROCESS_SHARED_28 = 82;

const int _SC_NPROCESSORS_CONF_28 = 83;

const int _SC_NPROCESSORS_ONLN_28 = 84;

const int _SC_PHYS_PAGES_28 = 85;

const int _SC_AVPHYS_PAGES_28 = 86;

const int _SC_ATEXIT_MAX_28 = 87;

const int _SC_PASS_MAX_28 = 88;

const int _SC_XOPEN_VERSION_28 = 89;

const int _SC_XOPEN_XCU_VERSION_28 = 90;

const int _SC_XOPEN_UNIX_28 = 91;

const int _SC_XOPEN_CRYPT_28 = 92;

const int _SC_XOPEN_ENH_I18N_28 = 93;

const int _SC_XOPEN_SHM_28 = 94;

const int _SC_2_CHAR_TERM_28 = 95;

const int _SC_2_C_VERSION_28 = 96;

const int _SC_2_UPE_28 = 97;

const int _SC_XOPEN_XPG2_28 = 98;

const int _SC_XOPEN_XPG3_28 = 99;

const int _SC_XOPEN_XPG4_28 = 100;

const int _SC_CHAR_BIT_28 = 101;

const int _SC_CHAR_MAX_28 = 102;

const int _SC_CHAR_MIN_28 = 103;

const int _SC_INT_MAX_28 = 104;

const int _SC_INT_MIN_28 = 105;

const int _SC_LONG_BIT_28 = 106;

const int _SC_WORD_BIT_28 = 107;

const int _SC_MB_LEN_MAX_28 = 108;

const int _SC_NZERO_28 = 109;

const int _SC_SSIZE_MAX_28 = 110;

const int _SC_SCHAR_MAX_28 = 111;

const int _SC_SCHAR_MIN_28 = 112;

const int _SC_SHRT_MAX_28 = 113;

const int _SC_SHRT_MIN_28 = 114;

const int _SC_UCHAR_MAX_28 = 115;

const int _SC_UINT_MAX_28 = 116;

const int _SC_ULONG_MAX_28 = 117;

const int _SC_USHRT_MAX_28 = 118;

const int _SC_NL_ARGMAX_28 = 119;

const int _SC_NL_LANGMAX_28 = 120;

const int _SC_NL_MSGMAX_28 = 121;

const int _SC_NL_NMAX_28 = 122;

const int _SC_NL_SETMAX_28 = 123;

const int _SC_NL_TEXTMAX_28 = 124;

const int _SC_XBS5_ILP32_OFF32_28 = 125;

const int _SC_XBS5_ILP32_OFFBIG_28 = 126;

const int _SC_XBS5_LP64_OFF64_28 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_28 = 128;

const int _SC_XOPEN_LEGACY_28 = 129;

const int _SC_XOPEN_REALTIME_28 = 130;

const int _SC_XOPEN_REALTIME_THREADS_28 = 131;

const int _SC_ADVISORY_INFO_28 = 132;

const int _SC_BARRIERS_28 = 133;

const int _SC_BASE_28 = 134;

const int _SC_C_LANG_SUPPORT_28 = 135;

const int _SC_C_LANG_SUPPORT_R_28 = 136;

const int _SC_CLOCK_SELECTION_28 = 137;

const int _SC_CPUTIME_28 = 138;

const int _SC_THREAD_CPUTIME_28 = 139;

const int _SC_DEVICE_IO_28 = 140;

const int _SC_DEVICE_SPECIFIC_28 = 141;

const int _SC_DEVICE_SPECIFIC_R_28 = 142;

const int _SC_FD_MGMT_28 = 143;

const int _SC_FIFO_28 = 144;

const int _SC_PIPE_28 = 145;

const int _SC_FILE_ATTRIBUTES_28 = 146;

const int _SC_FILE_LOCKING_28 = 147;

const int _SC_FILE_SYSTEM_28 = 148;

const int _SC_MONOTONIC_CLOCK_28 = 149;

const int _SC_MULTI_PROCESS_28 = 150;

const int _SC_SINGLE_PROCESS_28 = 151;

const int _SC_NETWORKING_28 = 152;

const int _SC_READER_WRITER_LOCKS_28 = 153;

const int _SC_SPIN_LOCKS_28 = 154;

const int _SC_REGEXP_28 = 155;

const int _SC_REGEX_VERSION_28 = 156;

const int _SC_SHELL_28 = 157;

const int _SC_SIGNALS_28 = 158;

const int _SC_SPAWN_28 = 159;

const int _SC_SPORADIC_SERVER_28 = 160;

const int _SC_THREAD_SPORADIC_SERVER_28 = 161;

const int _SC_SYSTEM_DATABASE_28 = 162;

const int _SC_SYSTEM_DATABASE_R_28 = 163;

const int _SC_TIMEOUTS_28 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_28 = 165;

const int _SC_USER_GROUPS_28 = 166;

const int _SC_USER_GROUPS_R_28 = 167;

const int _SC_2_PBS_28 = 168;

const int _SC_2_PBS_ACCOUNTING_28 = 169;

const int _SC_2_PBS_LOCATE_28 = 170;

const int _SC_2_PBS_MESSAGE_28 = 171;

const int _SC_2_PBS_TRACK_28 = 172;

const int _SC_SYMLOOP_MAX_28 = 173;

const int _SC_STREAMS_28 = 174;

const int _SC_2_PBS_CHECKPOINT_28 = 175;

const int _SC_V6_ILP32_OFF32_28 = 176;

const int _SC_V6_ILP32_OFFBIG_28 = 177;

const int _SC_V6_LP64_OFF64_28 = 178;

const int _SC_V6_LPBIG_OFFBIG_28 = 179;

const int _SC_HOST_NAME_MAX_28 = 180;

const int _SC_TRACE_28 = 181;

const int _SC_TRACE_EVENT_FILTER_28 = 182;

const int _SC_TRACE_INHERIT_28 = 183;

const int _SC_TRACE_LOG_28 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_28 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_28 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_28 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_28 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_28 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_28 = 190;

const int _SC_LEVEL2_CACHE_SIZE_28 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_28 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_28 = 193;

const int _SC_LEVEL3_CACHE_SIZE_28 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_28 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_28 = 196;

const int _SC_LEVEL4_CACHE_SIZE_28 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_28 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_28 = 199;

const int _SC_IPV6_28 = 235;

const int _SC_RAW_SOCKETS_28 = 236;

const int _SC_V7_ILP32_OFF32_28 = 237;

const int _SC_V7_ILP32_OFFBIG_28 = 238;

const int _SC_V7_LP64_OFF64_28 = 239;

const int _SC_V7_LPBIG_OFFBIG_28 = 240;

const int _SC_SS_REPL_MAX_28 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_28 = 242;

const int _SC_TRACE_NAME_MAX_28 = 243;

const int _SC_TRACE_SYS_MAX_28 = 244;

const int _SC_TRACE_USER_EVENT_MAX_28 = 245;

const int _SC_XOPEN_STREAMS_28 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_28 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_28 = 248;

const int _CS_PATH_28 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_28 = 1;

const int _CS_GNU_LIBC_VERSION_28 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_28 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_28 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_28 = 5;

const int _CS_LFS_CFLAGS_28 = 1000;

const int _CS_LFS_LDFLAGS_28 = 1001;

const int _CS_LFS_LIBS_28 = 1002;

const int _CS_LFS_LINTFLAGS_28 = 1003;

const int _CS_LFS64_CFLAGS_28 = 1004;

const int _CS_LFS64_LDFLAGS_28 = 1005;

const int _CS_LFS64_LIBS_28 = 1006;

const int _CS_LFS64_LINTFLAGS_28 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_28 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_28 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_28 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_28 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_28 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_28 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_28 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_28 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_28 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_28 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_28 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_28 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_28 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_28 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_28 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_28 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_28 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_28 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_28 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_28 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_28 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_28 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_28 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_28 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_28 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_28 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_28 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_28 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_28 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_28 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_28 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_28 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_28 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_28 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_28 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_28 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_28 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_28 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_28 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_28 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_28 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_28 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_28 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_28 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_28 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_28 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_28 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_28 = 1147;

const int _CS_V6_ENV_28 = 1148;

const int _CS_V7_ENV_28 = 1149;

const int _PC_LINK_MAX_29 = 0;

const int _PC_MAX_CANON_29 = 1;

const int _PC_MAX_INPUT_29 = 2;

const int _PC_NAME_MAX_29 = 3;

const int _PC_PATH_MAX_29 = 4;

const int _PC_PIPE_BUF_29 = 5;

const int _PC_CHOWN_RESTRICTED_29 = 6;

const int _PC_NO_TRUNC_29 = 7;

const int _PC_VDISABLE_29 = 8;

const int _PC_SYNC_IO_29 = 9;

const int _PC_ASYNC_IO_29 = 10;

const int _PC_PRIO_IO_29 = 11;

const int _PC_SOCK_MAXBUF_29 = 12;

const int _PC_FILESIZEBITS_29 = 13;

const int _PC_REC_INCR_XFER_SIZE_29 = 14;

const int _PC_REC_MAX_XFER_SIZE_29 = 15;

const int _PC_REC_MIN_XFER_SIZE_29 = 16;

const int _PC_REC_XFER_ALIGN_29 = 17;

const int _PC_ALLOC_SIZE_MIN_29 = 18;

const int _PC_SYMLINK_MAX_29 = 19;

const int _PC_2_SYMLINKS_29 = 20;

const int _SC_ARG_MAX_29 = 0;

const int _SC_CHILD_MAX_29 = 1;

const int _SC_CLK_TCK_29 = 2;

const int _SC_NGROUPS_MAX_29 = 3;

const int _SC_OPEN_MAX_29 = 4;

const int _SC_STREAM_MAX_29 = 5;

const int _SC_TZNAME_MAX_29 = 6;

const int _SC_JOB_CONTROL_29 = 7;

const int _SC_SAVED_IDS_29 = 8;

const int _SC_REALTIME_SIGNALS_29 = 9;

const int _SC_PRIORITY_SCHEDULING_29 = 10;

const int _SC_TIMERS_29 = 11;

const int _SC_ASYNCHRONOUS_IO_29 = 12;

const int _SC_PRIORITIZED_IO_29 = 13;

const int _SC_SYNCHRONIZED_IO_29 = 14;

const int _SC_FSYNC_29 = 15;

const int _SC_MAPPED_FILES_29 = 16;

const int _SC_MEMLOCK_29 = 17;

const int _SC_MEMLOCK_RANGE_29 = 18;

const int _SC_MEMORY_PROTECTION_29 = 19;

const int _SC_MESSAGE_PASSING_29 = 20;

const int _SC_SEMAPHORES_29 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_29 = 22;

const int _SC_AIO_LISTIO_MAX_29 = 23;

const int _SC_AIO_MAX_29 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_29 = 25;

const int _SC_DELAYTIMER_MAX_29 = 26;

const int _SC_MQ_OPEN_MAX_29 = 27;

const int _SC_MQ_PRIO_MAX_29 = 28;

const int _SC_VERSION_29 = 29;

const int _SC_PAGESIZE_29 = 30;

const int _SC_RTSIG_MAX_29 = 31;

const int _SC_SEM_NSEMS_MAX_29 = 32;

const int _SC_SEM_VALUE_MAX_29 = 33;

const int _SC_SIGQUEUE_MAX_29 = 34;

const int _SC_TIMER_MAX_29 = 35;

const int _SC_BC_BASE_MAX_29 = 36;

const int _SC_BC_DIM_MAX_29 = 37;

const int _SC_BC_SCALE_MAX_29 = 38;

const int _SC_BC_STRING_MAX_29 = 39;

const int _SC_COLL_WEIGHTS_MAX_29 = 40;

const int _SC_EQUIV_CLASS_MAX_29 = 41;

const int _SC_EXPR_NEST_MAX_29 = 42;

const int _SC_LINE_MAX_29 = 43;

const int _SC_RE_DUP_MAX_29 = 44;

const int _SC_CHARCLASS_NAME_MAX_29 = 45;

const int _SC_2_VERSION_29 = 46;

const int _SC_2_C_BIND_29 = 47;

const int _SC_2_C_DEV_29 = 48;

const int _SC_2_FORT_DEV_29 = 49;

const int _SC_2_FORT_RUN_29 = 50;

const int _SC_2_SW_DEV_29 = 51;

const int _SC_2_LOCALEDEF_29 = 52;

const int _SC_PII_29 = 53;

const int _SC_PII_XTI_29 = 54;

const int _SC_PII_SOCKET_29 = 55;

const int _SC_PII_INTERNET_29 = 56;

const int _SC_PII_OSI_29 = 57;

const int _SC_POLL_29 = 58;

const int _SC_SELECT_29 = 59;

const int _SC_UIO_MAXIOV_29 = 60;

const int _SC_IOV_MAX_29 = 60;

const int _SC_PII_INTERNET_STREAM_29 = 61;

const int _SC_PII_INTERNET_DGRAM_29 = 62;

const int _SC_PII_OSI_COTS_29 = 63;

const int _SC_PII_OSI_CLTS_29 = 64;

const int _SC_PII_OSI_M_29 = 65;

const int _SC_T_IOV_MAX_29 = 66;

const int _SC_THREADS_29 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_29 = 68;

const int _SC_GETGR_R_SIZE_MAX_29 = 69;

const int _SC_GETPW_R_SIZE_MAX_29 = 70;

const int _SC_LOGIN_NAME_MAX_29 = 71;

const int _SC_TTY_NAME_MAX_29 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_29 = 73;

const int _SC_THREAD_KEYS_MAX_29 = 74;

const int _SC_THREAD_STACK_MIN_29 = 75;

const int _SC_THREAD_THREADS_MAX_29 = 76;

const int _SC_THREAD_ATTR_STACKADDR_29 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_29 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_29 = 79;

const int _SC_THREAD_PRIO_INHERIT_29 = 80;

const int _SC_THREAD_PRIO_PROTECT_29 = 81;

const int _SC_THREAD_PROCESS_SHARED_29 = 82;

const int _SC_NPROCESSORS_CONF_29 = 83;

const int _SC_NPROCESSORS_ONLN_29 = 84;

const int _SC_PHYS_PAGES_29 = 85;

const int _SC_AVPHYS_PAGES_29 = 86;

const int _SC_ATEXIT_MAX_29 = 87;

const int _SC_PASS_MAX_29 = 88;

const int _SC_XOPEN_VERSION_29 = 89;

const int _SC_XOPEN_XCU_VERSION_29 = 90;

const int _SC_XOPEN_UNIX_29 = 91;

const int _SC_XOPEN_CRYPT_29 = 92;

const int _SC_XOPEN_ENH_I18N_29 = 93;

const int _SC_XOPEN_SHM_29 = 94;

const int _SC_2_CHAR_TERM_29 = 95;

const int _SC_2_C_VERSION_29 = 96;

const int _SC_2_UPE_29 = 97;

const int _SC_XOPEN_XPG2_29 = 98;

const int _SC_XOPEN_XPG3_29 = 99;

const int _SC_XOPEN_XPG4_29 = 100;

const int _SC_CHAR_BIT_29 = 101;

const int _SC_CHAR_MAX_29 = 102;

const int _SC_CHAR_MIN_29 = 103;

const int _SC_INT_MAX_29 = 104;

const int _SC_INT_MIN_29 = 105;

const int _SC_LONG_BIT_29 = 106;

const int _SC_WORD_BIT_29 = 107;

const int _SC_MB_LEN_MAX_29 = 108;

const int _SC_NZERO_29 = 109;

const int _SC_SSIZE_MAX_29 = 110;

const int _SC_SCHAR_MAX_29 = 111;

const int _SC_SCHAR_MIN_29 = 112;

const int _SC_SHRT_MAX_29 = 113;

const int _SC_SHRT_MIN_29 = 114;

const int _SC_UCHAR_MAX_29 = 115;

const int _SC_UINT_MAX_29 = 116;

const int _SC_ULONG_MAX_29 = 117;

const int _SC_USHRT_MAX_29 = 118;

const int _SC_NL_ARGMAX_29 = 119;

const int _SC_NL_LANGMAX_29 = 120;

const int _SC_NL_MSGMAX_29 = 121;

const int _SC_NL_NMAX_29 = 122;

const int _SC_NL_SETMAX_29 = 123;

const int _SC_NL_TEXTMAX_29 = 124;

const int _SC_XBS5_ILP32_OFF32_29 = 125;

const int _SC_XBS5_ILP32_OFFBIG_29 = 126;

const int _SC_XBS5_LP64_OFF64_29 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_29 = 128;

const int _SC_XOPEN_LEGACY_29 = 129;

const int _SC_XOPEN_REALTIME_29 = 130;

const int _SC_XOPEN_REALTIME_THREADS_29 = 131;

const int _SC_ADVISORY_INFO_29 = 132;

const int _SC_BARRIERS_29 = 133;

const int _SC_BASE_29 = 134;

const int _SC_C_LANG_SUPPORT_29 = 135;

const int _SC_C_LANG_SUPPORT_R_29 = 136;

const int _SC_CLOCK_SELECTION_29 = 137;

const int _SC_CPUTIME_29 = 138;

const int _SC_THREAD_CPUTIME_29 = 139;

const int _SC_DEVICE_IO_29 = 140;

const int _SC_DEVICE_SPECIFIC_29 = 141;

const int _SC_DEVICE_SPECIFIC_R_29 = 142;

const int _SC_FD_MGMT_29 = 143;

const int _SC_FIFO_29 = 144;

const int _SC_PIPE_29 = 145;

const int _SC_FILE_ATTRIBUTES_29 = 146;

const int _SC_FILE_LOCKING_29 = 147;

const int _SC_FILE_SYSTEM_29 = 148;

const int _SC_MONOTONIC_CLOCK_29 = 149;

const int _SC_MULTI_PROCESS_29 = 150;

const int _SC_SINGLE_PROCESS_29 = 151;

const int _SC_NETWORKING_29 = 152;

const int _SC_READER_WRITER_LOCKS_29 = 153;

const int _SC_SPIN_LOCKS_29 = 154;

const int _SC_REGEXP_29 = 155;

const int _SC_REGEX_VERSION_29 = 156;

const int _SC_SHELL_29 = 157;

const int _SC_SIGNALS_29 = 158;

const int _SC_SPAWN_29 = 159;

const int _SC_SPORADIC_SERVER_29 = 160;

const int _SC_THREAD_SPORADIC_SERVER_29 = 161;

const int _SC_SYSTEM_DATABASE_29 = 162;

const int _SC_SYSTEM_DATABASE_R_29 = 163;

const int _SC_TIMEOUTS_29 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_29 = 165;

const int _SC_USER_GROUPS_29 = 166;

const int _SC_USER_GROUPS_R_29 = 167;

const int _SC_2_PBS_29 = 168;

const int _SC_2_PBS_ACCOUNTING_29 = 169;

const int _SC_2_PBS_LOCATE_29 = 170;

const int _SC_2_PBS_MESSAGE_29 = 171;

const int _SC_2_PBS_TRACK_29 = 172;

const int _SC_SYMLOOP_MAX_29 = 173;

const int _SC_STREAMS_29 = 174;

const int _SC_2_PBS_CHECKPOINT_29 = 175;

const int _SC_V6_ILP32_OFF32_29 = 176;

const int _SC_V6_ILP32_OFFBIG_29 = 177;

const int _SC_V6_LP64_OFF64_29 = 178;

const int _SC_V6_LPBIG_OFFBIG_29 = 179;

const int _SC_HOST_NAME_MAX_29 = 180;

const int _SC_TRACE_29 = 181;

const int _SC_TRACE_EVENT_FILTER_29 = 182;

const int _SC_TRACE_INHERIT_29 = 183;

const int _SC_TRACE_LOG_29 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_29 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_29 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_29 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_29 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_29 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_29 = 190;

const int _SC_LEVEL2_CACHE_SIZE_29 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_29 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_29 = 193;

const int _SC_LEVEL3_CACHE_SIZE_29 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_29 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_29 = 196;

const int _SC_LEVEL4_CACHE_SIZE_29 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_29 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_29 = 199;

const int _SC_IPV6_29 = 235;

const int _SC_RAW_SOCKETS_29 = 236;

const int _SC_V7_ILP32_OFF32_29 = 237;

const int _SC_V7_ILP32_OFFBIG_29 = 238;

const int _SC_V7_LP64_OFF64_29 = 239;

const int _SC_V7_LPBIG_OFFBIG_29 = 240;

const int _SC_SS_REPL_MAX_29 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_29 = 242;

const int _SC_TRACE_NAME_MAX_29 = 243;

const int _SC_TRACE_SYS_MAX_29 = 244;

const int _SC_TRACE_USER_EVENT_MAX_29 = 245;

const int _SC_XOPEN_STREAMS_29 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_29 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_29 = 248;

const int _CS_PATH_29 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_29 = 1;

const int _CS_GNU_LIBC_VERSION_29 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_29 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_29 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_29 = 5;

const int _CS_LFS_CFLAGS_29 = 1000;

const int _CS_LFS_LDFLAGS_29 = 1001;

const int _CS_LFS_LIBS_29 = 1002;

const int _CS_LFS_LINTFLAGS_29 = 1003;

const int _CS_LFS64_CFLAGS_29 = 1004;

const int _CS_LFS64_LDFLAGS_29 = 1005;

const int _CS_LFS64_LIBS_29 = 1006;

const int _CS_LFS64_LINTFLAGS_29 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_29 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_29 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_29 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_29 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_29 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_29 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_29 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_29 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_29 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_29 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_29 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_29 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_29 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_29 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_29 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_29 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_29 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_29 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_29 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_29 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_29 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_29 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_29 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_29 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_29 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_29 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_29 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_29 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_29 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_29 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_29 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_29 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_29 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_29 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_29 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_29 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_29 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_29 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_29 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_29 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_29 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_29 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_29 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_29 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_29 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_29 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_29 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_29 = 1147;

const int _CS_V6_ENV_29 = 1148;

const int _CS_V7_ENV_29 = 1149;

const int FP_NAN_8 = 0;

const int FP_INFINITE_8 = 1;

const int FP_ZERO_8 = 2;

const int FP_SUBNORMAL_8 = 3;

const int FP_NORMAL_8 = 4;

const int FP_NAN_9 = 0;

const int FP_INFINITE_9 = 1;

const int FP_ZERO_9 = 2;

const int FP_SUBNORMAL_9 = 3;

const int FP_NORMAL_9 = 4;

const int FP_NAN_10 = 0;

const int FP_INFINITE_10 = 1;

const int FP_ZERO_10 = 2;

const int FP_SUBNORMAL_10 = 3;

const int FP_NORMAL_10 = 4;

const int FP_NAN_11 = 0;

const int FP_INFINITE_11 = 1;

const int FP_ZERO_11 = 2;

const int FP_SUBNORMAL_11 = 3;

const int FP_NORMAL_11 = 4;

const int _PC_LINK_MAX_30 = 0;

const int _PC_MAX_CANON_30 = 1;

const int _PC_MAX_INPUT_30 = 2;

const int _PC_NAME_MAX_30 = 3;

const int _PC_PATH_MAX_30 = 4;

const int _PC_PIPE_BUF_30 = 5;

const int _PC_CHOWN_RESTRICTED_30 = 6;

const int _PC_NO_TRUNC_30 = 7;

const int _PC_VDISABLE_30 = 8;

const int _PC_SYNC_IO_30 = 9;

const int _PC_ASYNC_IO_30 = 10;

const int _PC_PRIO_IO_30 = 11;

const int _PC_SOCK_MAXBUF_30 = 12;

const int _PC_FILESIZEBITS_30 = 13;

const int _PC_REC_INCR_XFER_SIZE_30 = 14;

const int _PC_REC_MAX_XFER_SIZE_30 = 15;

const int _PC_REC_MIN_XFER_SIZE_30 = 16;

const int _PC_REC_XFER_ALIGN_30 = 17;

const int _PC_ALLOC_SIZE_MIN_30 = 18;

const int _PC_SYMLINK_MAX_30 = 19;

const int _PC_2_SYMLINKS_30 = 20;

const int _SC_ARG_MAX_30 = 0;

const int _SC_CHILD_MAX_30 = 1;

const int _SC_CLK_TCK_30 = 2;

const int _SC_NGROUPS_MAX_30 = 3;

const int _SC_OPEN_MAX_30 = 4;

const int _SC_STREAM_MAX_30 = 5;

const int _SC_TZNAME_MAX_30 = 6;

const int _SC_JOB_CONTROL_30 = 7;

const int _SC_SAVED_IDS_30 = 8;

const int _SC_REALTIME_SIGNALS_30 = 9;

const int _SC_PRIORITY_SCHEDULING_30 = 10;

const int _SC_TIMERS_30 = 11;

const int _SC_ASYNCHRONOUS_IO_30 = 12;

const int _SC_PRIORITIZED_IO_30 = 13;

const int _SC_SYNCHRONIZED_IO_30 = 14;

const int _SC_FSYNC_30 = 15;

const int _SC_MAPPED_FILES_30 = 16;

const int _SC_MEMLOCK_30 = 17;

const int _SC_MEMLOCK_RANGE_30 = 18;

const int _SC_MEMORY_PROTECTION_30 = 19;

const int _SC_MESSAGE_PASSING_30 = 20;

const int _SC_SEMAPHORES_30 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_30 = 22;

const int _SC_AIO_LISTIO_MAX_30 = 23;

const int _SC_AIO_MAX_30 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_30 = 25;

const int _SC_DELAYTIMER_MAX_30 = 26;

const int _SC_MQ_OPEN_MAX_30 = 27;

const int _SC_MQ_PRIO_MAX_30 = 28;

const int _SC_VERSION_30 = 29;

const int _SC_PAGESIZE_30 = 30;

const int _SC_RTSIG_MAX_30 = 31;

const int _SC_SEM_NSEMS_MAX_30 = 32;

const int _SC_SEM_VALUE_MAX_30 = 33;

const int _SC_SIGQUEUE_MAX_30 = 34;

const int _SC_TIMER_MAX_30 = 35;

const int _SC_BC_BASE_MAX_30 = 36;

const int _SC_BC_DIM_MAX_30 = 37;

const int _SC_BC_SCALE_MAX_30 = 38;

const int _SC_BC_STRING_MAX_30 = 39;

const int _SC_COLL_WEIGHTS_MAX_30 = 40;

const int _SC_EQUIV_CLASS_MAX_30 = 41;

const int _SC_EXPR_NEST_MAX_30 = 42;

const int _SC_LINE_MAX_30 = 43;

const int _SC_RE_DUP_MAX_30 = 44;

const int _SC_CHARCLASS_NAME_MAX_30 = 45;

const int _SC_2_VERSION_30 = 46;

const int _SC_2_C_BIND_30 = 47;

const int _SC_2_C_DEV_30 = 48;

const int _SC_2_FORT_DEV_30 = 49;

const int _SC_2_FORT_RUN_30 = 50;

const int _SC_2_SW_DEV_30 = 51;

const int _SC_2_LOCALEDEF_30 = 52;

const int _SC_PII_30 = 53;

const int _SC_PII_XTI_30 = 54;

const int _SC_PII_SOCKET_30 = 55;

const int _SC_PII_INTERNET_30 = 56;

const int _SC_PII_OSI_30 = 57;

const int _SC_POLL_30 = 58;

const int _SC_SELECT_30 = 59;

const int _SC_UIO_MAXIOV_30 = 60;

const int _SC_IOV_MAX_30 = 60;

const int _SC_PII_INTERNET_STREAM_30 = 61;

const int _SC_PII_INTERNET_DGRAM_30 = 62;

const int _SC_PII_OSI_COTS_30 = 63;

const int _SC_PII_OSI_CLTS_30 = 64;

const int _SC_PII_OSI_M_30 = 65;

const int _SC_T_IOV_MAX_30 = 66;

const int _SC_THREADS_30 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_30 = 68;

const int _SC_GETGR_R_SIZE_MAX_30 = 69;

const int _SC_GETPW_R_SIZE_MAX_30 = 70;

const int _SC_LOGIN_NAME_MAX_30 = 71;

const int _SC_TTY_NAME_MAX_30 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_30 = 73;

const int _SC_THREAD_KEYS_MAX_30 = 74;

const int _SC_THREAD_STACK_MIN_30 = 75;

const int _SC_THREAD_THREADS_MAX_30 = 76;

const int _SC_THREAD_ATTR_STACKADDR_30 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_30 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_30 = 79;

const int _SC_THREAD_PRIO_INHERIT_30 = 80;

const int _SC_THREAD_PRIO_PROTECT_30 = 81;

const int _SC_THREAD_PROCESS_SHARED_30 = 82;

const int _SC_NPROCESSORS_CONF_30 = 83;

const int _SC_NPROCESSORS_ONLN_30 = 84;

const int _SC_PHYS_PAGES_30 = 85;

const int _SC_AVPHYS_PAGES_30 = 86;

const int _SC_ATEXIT_MAX_30 = 87;

const int _SC_PASS_MAX_30 = 88;

const int _SC_XOPEN_VERSION_30 = 89;

const int _SC_XOPEN_XCU_VERSION_30 = 90;

const int _SC_XOPEN_UNIX_30 = 91;

const int _SC_XOPEN_CRYPT_30 = 92;

const int _SC_XOPEN_ENH_I18N_30 = 93;

const int _SC_XOPEN_SHM_30 = 94;

const int _SC_2_CHAR_TERM_30 = 95;

const int _SC_2_C_VERSION_30 = 96;

const int _SC_2_UPE_30 = 97;

const int _SC_XOPEN_XPG2_30 = 98;

const int _SC_XOPEN_XPG3_30 = 99;

const int _SC_XOPEN_XPG4_30 = 100;

const int _SC_CHAR_BIT_30 = 101;

const int _SC_CHAR_MAX_30 = 102;

const int _SC_CHAR_MIN_30 = 103;

const int _SC_INT_MAX_30 = 104;

const int _SC_INT_MIN_30 = 105;

const int _SC_LONG_BIT_30 = 106;

const int _SC_WORD_BIT_30 = 107;

const int _SC_MB_LEN_MAX_30 = 108;

const int _SC_NZERO_30 = 109;

const int _SC_SSIZE_MAX_30 = 110;

const int _SC_SCHAR_MAX_30 = 111;

const int _SC_SCHAR_MIN_30 = 112;

const int _SC_SHRT_MAX_30 = 113;

const int _SC_SHRT_MIN_30 = 114;

const int _SC_UCHAR_MAX_30 = 115;

const int _SC_UINT_MAX_30 = 116;

const int _SC_ULONG_MAX_30 = 117;

const int _SC_USHRT_MAX_30 = 118;

const int _SC_NL_ARGMAX_30 = 119;

const int _SC_NL_LANGMAX_30 = 120;

const int _SC_NL_MSGMAX_30 = 121;

const int _SC_NL_NMAX_30 = 122;

const int _SC_NL_SETMAX_30 = 123;

const int _SC_NL_TEXTMAX_30 = 124;

const int _SC_XBS5_ILP32_OFF32_30 = 125;

const int _SC_XBS5_ILP32_OFFBIG_30 = 126;

const int _SC_XBS5_LP64_OFF64_30 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_30 = 128;

const int _SC_XOPEN_LEGACY_30 = 129;

const int _SC_XOPEN_REALTIME_30 = 130;

const int _SC_XOPEN_REALTIME_THREADS_30 = 131;

const int _SC_ADVISORY_INFO_30 = 132;

const int _SC_BARRIERS_30 = 133;

const int _SC_BASE_30 = 134;

const int _SC_C_LANG_SUPPORT_30 = 135;

const int _SC_C_LANG_SUPPORT_R_30 = 136;

const int _SC_CLOCK_SELECTION_30 = 137;

const int _SC_CPUTIME_30 = 138;

const int _SC_THREAD_CPUTIME_30 = 139;

const int _SC_DEVICE_IO_30 = 140;

const int _SC_DEVICE_SPECIFIC_30 = 141;

const int _SC_DEVICE_SPECIFIC_R_30 = 142;

const int _SC_FD_MGMT_30 = 143;

const int _SC_FIFO_30 = 144;

const int _SC_PIPE_30 = 145;

const int _SC_FILE_ATTRIBUTES_30 = 146;

const int _SC_FILE_LOCKING_30 = 147;

const int _SC_FILE_SYSTEM_30 = 148;

const int _SC_MONOTONIC_CLOCK_30 = 149;

const int _SC_MULTI_PROCESS_30 = 150;

const int _SC_SINGLE_PROCESS_30 = 151;

const int _SC_NETWORKING_30 = 152;

const int _SC_READER_WRITER_LOCKS_30 = 153;

const int _SC_SPIN_LOCKS_30 = 154;

const int _SC_REGEXP_30 = 155;

const int _SC_REGEX_VERSION_30 = 156;

const int _SC_SHELL_30 = 157;

const int _SC_SIGNALS_30 = 158;

const int _SC_SPAWN_30 = 159;

const int _SC_SPORADIC_SERVER_30 = 160;

const int _SC_THREAD_SPORADIC_SERVER_30 = 161;

const int _SC_SYSTEM_DATABASE_30 = 162;

const int _SC_SYSTEM_DATABASE_R_30 = 163;

const int _SC_TIMEOUTS_30 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_30 = 165;

const int _SC_USER_GROUPS_30 = 166;

const int _SC_USER_GROUPS_R_30 = 167;

const int _SC_2_PBS_30 = 168;

const int _SC_2_PBS_ACCOUNTING_30 = 169;

const int _SC_2_PBS_LOCATE_30 = 170;

const int _SC_2_PBS_MESSAGE_30 = 171;

const int _SC_2_PBS_TRACK_30 = 172;

const int _SC_SYMLOOP_MAX_30 = 173;

const int _SC_STREAMS_30 = 174;

const int _SC_2_PBS_CHECKPOINT_30 = 175;

const int _SC_V6_ILP32_OFF32_30 = 176;

const int _SC_V6_ILP32_OFFBIG_30 = 177;

const int _SC_V6_LP64_OFF64_30 = 178;

const int _SC_V6_LPBIG_OFFBIG_30 = 179;

const int _SC_HOST_NAME_MAX_30 = 180;

const int _SC_TRACE_30 = 181;

const int _SC_TRACE_EVENT_FILTER_30 = 182;

const int _SC_TRACE_INHERIT_30 = 183;

const int _SC_TRACE_LOG_30 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_30 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_30 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_30 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_30 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_30 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_30 = 190;

const int _SC_LEVEL2_CACHE_SIZE_30 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_30 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_30 = 193;

const int _SC_LEVEL3_CACHE_SIZE_30 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_30 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_30 = 196;

const int _SC_LEVEL4_CACHE_SIZE_30 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_30 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_30 = 199;

const int _SC_IPV6_30 = 235;

const int _SC_RAW_SOCKETS_30 = 236;

const int _SC_V7_ILP32_OFF32_30 = 237;

const int _SC_V7_ILP32_OFFBIG_30 = 238;

const int _SC_V7_LP64_OFF64_30 = 239;

const int _SC_V7_LPBIG_OFFBIG_30 = 240;

const int _SC_SS_REPL_MAX_30 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_30 = 242;

const int _SC_TRACE_NAME_MAX_30 = 243;

const int _SC_TRACE_SYS_MAX_30 = 244;

const int _SC_TRACE_USER_EVENT_MAX_30 = 245;

const int _SC_XOPEN_STREAMS_30 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_30 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_30 = 248;

const int _CS_PATH_30 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_30 = 1;

const int _CS_GNU_LIBC_VERSION_30 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_30 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_30 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_30 = 5;

const int _CS_LFS_CFLAGS_30 = 1000;

const int _CS_LFS_LDFLAGS_30 = 1001;

const int _CS_LFS_LIBS_30 = 1002;

const int _CS_LFS_LINTFLAGS_30 = 1003;

const int _CS_LFS64_CFLAGS_30 = 1004;

const int _CS_LFS64_LDFLAGS_30 = 1005;

const int _CS_LFS64_LIBS_30 = 1006;

const int _CS_LFS64_LINTFLAGS_30 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_30 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_30 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_30 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_30 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_30 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_30 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_30 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_30 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_30 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_30 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_30 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_30 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_30 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_30 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_30 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_30 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_30 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_30 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_30 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_30 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_30 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_30 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_30 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_30 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_30 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_30 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_30 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_30 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_30 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_30 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_30 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_30 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_30 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_30 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_30 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_30 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_30 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_30 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_30 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_30 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_30 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_30 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_30 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_30 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_30 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_30 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_30 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_30 = 1147;

const int _CS_V6_ENV_30 = 1148;

const int _CS_V7_ENV_30 = 1149;

const int _PC_LINK_MAX_31 = 0;

const int _PC_MAX_CANON_31 = 1;

const int _PC_MAX_INPUT_31 = 2;

const int _PC_NAME_MAX_31 = 3;

const int _PC_PATH_MAX_31 = 4;

const int _PC_PIPE_BUF_31 = 5;

const int _PC_CHOWN_RESTRICTED_31 = 6;

const int _PC_NO_TRUNC_31 = 7;

const int _PC_VDISABLE_31 = 8;

const int _PC_SYNC_IO_31 = 9;

const int _PC_ASYNC_IO_31 = 10;

const int _PC_PRIO_IO_31 = 11;

const int _PC_SOCK_MAXBUF_31 = 12;

const int _PC_FILESIZEBITS_31 = 13;

const int _PC_REC_INCR_XFER_SIZE_31 = 14;

const int _PC_REC_MAX_XFER_SIZE_31 = 15;

const int _PC_REC_MIN_XFER_SIZE_31 = 16;

const int _PC_REC_XFER_ALIGN_31 = 17;

const int _PC_ALLOC_SIZE_MIN_31 = 18;

const int _PC_SYMLINK_MAX_31 = 19;

const int _PC_2_SYMLINKS_31 = 20;

const int _SC_ARG_MAX_31 = 0;

const int _SC_CHILD_MAX_31 = 1;

const int _SC_CLK_TCK_31 = 2;

const int _SC_NGROUPS_MAX_31 = 3;

const int _SC_OPEN_MAX_31 = 4;

const int _SC_STREAM_MAX_31 = 5;

const int _SC_TZNAME_MAX_31 = 6;

const int _SC_JOB_CONTROL_31 = 7;

const int _SC_SAVED_IDS_31 = 8;

const int _SC_REALTIME_SIGNALS_31 = 9;

const int _SC_PRIORITY_SCHEDULING_31 = 10;

const int _SC_TIMERS_31 = 11;

const int _SC_ASYNCHRONOUS_IO_31 = 12;

const int _SC_PRIORITIZED_IO_31 = 13;

const int _SC_SYNCHRONIZED_IO_31 = 14;

const int _SC_FSYNC_31 = 15;

const int _SC_MAPPED_FILES_31 = 16;

const int _SC_MEMLOCK_31 = 17;

const int _SC_MEMLOCK_RANGE_31 = 18;

const int _SC_MEMORY_PROTECTION_31 = 19;

const int _SC_MESSAGE_PASSING_31 = 20;

const int _SC_SEMAPHORES_31 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_31 = 22;

const int _SC_AIO_LISTIO_MAX_31 = 23;

const int _SC_AIO_MAX_31 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_31 = 25;

const int _SC_DELAYTIMER_MAX_31 = 26;

const int _SC_MQ_OPEN_MAX_31 = 27;

const int _SC_MQ_PRIO_MAX_31 = 28;

const int _SC_VERSION_31 = 29;

const int _SC_PAGESIZE_31 = 30;

const int _SC_RTSIG_MAX_31 = 31;

const int _SC_SEM_NSEMS_MAX_31 = 32;

const int _SC_SEM_VALUE_MAX_31 = 33;

const int _SC_SIGQUEUE_MAX_31 = 34;

const int _SC_TIMER_MAX_31 = 35;

const int _SC_BC_BASE_MAX_31 = 36;

const int _SC_BC_DIM_MAX_31 = 37;

const int _SC_BC_SCALE_MAX_31 = 38;

const int _SC_BC_STRING_MAX_31 = 39;

const int _SC_COLL_WEIGHTS_MAX_31 = 40;

const int _SC_EQUIV_CLASS_MAX_31 = 41;

const int _SC_EXPR_NEST_MAX_31 = 42;

const int _SC_LINE_MAX_31 = 43;

const int _SC_RE_DUP_MAX_31 = 44;

const int _SC_CHARCLASS_NAME_MAX_31 = 45;

const int _SC_2_VERSION_31 = 46;

const int _SC_2_C_BIND_31 = 47;

const int _SC_2_C_DEV_31 = 48;

const int _SC_2_FORT_DEV_31 = 49;

const int _SC_2_FORT_RUN_31 = 50;

const int _SC_2_SW_DEV_31 = 51;

const int _SC_2_LOCALEDEF_31 = 52;

const int _SC_PII_31 = 53;

const int _SC_PII_XTI_31 = 54;

const int _SC_PII_SOCKET_31 = 55;

const int _SC_PII_INTERNET_31 = 56;

const int _SC_PII_OSI_31 = 57;

const int _SC_POLL_31 = 58;

const int _SC_SELECT_31 = 59;

const int _SC_UIO_MAXIOV_31 = 60;

const int _SC_IOV_MAX_31 = 60;

const int _SC_PII_INTERNET_STREAM_31 = 61;

const int _SC_PII_INTERNET_DGRAM_31 = 62;

const int _SC_PII_OSI_COTS_31 = 63;

const int _SC_PII_OSI_CLTS_31 = 64;

const int _SC_PII_OSI_M_31 = 65;

const int _SC_T_IOV_MAX_31 = 66;

const int _SC_THREADS_31 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_31 = 68;

const int _SC_GETGR_R_SIZE_MAX_31 = 69;

const int _SC_GETPW_R_SIZE_MAX_31 = 70;

const int _SC_LOGIN_NAME_MAX_31 = 71;

const int _SC_TTY_NAME_MAX_31 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_31 = 73;

const int _SC_THREAD_KEYS_MAX_31 = 74;

const int _SC_THREAD_STACK_MIN_31 = 75;

const int _SC_THREAD_THREADS_MAX_31 = 76;

const int _SC_THREAD_ATTR_STACKADDR_31 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_31 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_31 = 79;

const int _SC_THREAD_PRIO_INHERIT_31 = 80;

const int _SC_THREAD_PRIO_PROTECT_31 = 81;

const int _SC_THREAD_PROCESS_SHARED_31 = 82;

const int _SC_NPROCESSORS_CONF_31 = 83;

const int _SC_NPROCESSORS_ONLN_31 = 84;

const int _SC_PHYS_PAGES_31 = 85;

const int _SC_AVPHYS_PAGES_31 = 86;

const int _SC_ATEXIT_MAX_31 = 87;

const int _SC_PASS_MAX_31 = 88;

const int _SC_XOPEN_VERSION_31 = 89;

const int _SC_XOPEN_XCU_VERSION_31 = 90;

const int _SC_XOPEN_UNIX_31 = 91;

const int _SC_XOPEN_CRYPT_31 = 92;

const int _SC_XOPEN_ENH_I18N_31 = 93;

const int _SC_XOPEN_SHM_31 = 94;

const int _SC_2_CHAR_TERM_31 = 95;

const int _SC_2_C_VERSION_31 = 96;

const int _SC_2_UPE_31 = 97;

const int _SC_XOPEN_XPG2_31 = 98;

const int _SC_XOPEN_XPG3_31 = 99;

const int _SC_XOPEN_XPG4_31 = 100;

const int _SC_CHAR_BIT_31 = 101;

const int _SC_CHAR_MAX_31 = 102;

const int _SC_CHAR_MIN_31 = 103;

const int _SC_INT_MAX_31 = 104;

const int _SC_INT_MIN_31 = 105;

const int _SC_LONG_BIT_31 = 106;

const int _SC_WORD_BIT_31 = 107;

const int _SC_MB_LEN_MAX_31 = 108;

const int _SC_NZERO_31 = 109;

const int _SC_SSIZE_MAX_31 = 110;

const int _SC_SCHAR_MAX_31 = 111;

const int _SC_SCHAR_MIN_31 = 112;

const int _SC_SHRT_MAX_31 = 113;

const int _SC_SHRT_MIN_31 = 114;

const int _SC_UCHAR_MAX_31 = 115;

const int _SC_UINT_MAX_31 = 116;

const int _SC_ULONG_MAX_31 = 117;

const int _SC_USHRT_MAX_31 = 118;

const int _SC_NL_ARGMAX_31 = 119;

const int _SC_NL_LANGMAX_31 = 120;

const int _SC_NL_MSGMAX_31 = 121;

const int _SC_NL_NMAX_31 = 122;

const int _SC_NL_SETMAX_31 = 123;

const int _SC_NL_TEXTMAX_31 = 124;

const int _SC_XBS5_ILP32_OFF32_31 = 125;

const int _SC_XBS5_ILP32_OFFBIG_31 = 126;

const int _SC_XBS5_LP64_OFF64_31 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_31 = 128;

const int _SC_XOPEN_LEGACY_31 = 129;

const int _SC_XOPEN_REALTIME_31 = 130;

const int _SC_XOPEN_REALTIME_THREADS_31 = 131;

const int _SC_ADVISORY_INFO_31 = 132;

const int _SC_BARRIERS_31 = 133;

const int _SC_BASE_31 = 134;

const int _SC_C_LANG_SUPPORT_31 = 135;

const int _SC_C_LANG_SUPPORT_R_31 = 136;

const int _SC_CLOCK_SELECTION_31 = 137;

const int _SC_CPUTIME_31 = 138;

const int _SC_THREAD_CPUTIME_31 = 139;

const int _SC_DEVICE_IO_31 = 140;

const int _SC_DEVICE_SPECIFIC_31 = 141;

const int _SC_DEVICE_SPECIFIC_R_31 = 142;

const int _SC_FD_MGMT_31 = 143;

const int _SC_FIFO_31 = 144;

const int _SC_PIPE_31 = 145;

const int _SC_FILE_ATTRIBUTES_31 = 146;

const int _SC_FILE_LOCKING_31 = 147;

const int _SC_FILE_SYSTEM_31 = 148;

const int _SC_MONOTONIC_CLOCK_31 = 149;

const int _SC_MULTI_PROCESS_31 = 150;

const int _SC_SINGLE_PROCESS_31 = 151;

const int _SC_NETWORKING_31 = 152;

const int _SC_READER_WRITER_LOCKS_31 = 153;

const int _SC_SPIN_LOCKS_31 = 154;

const int _SC_REGEXP_31 = 155;

const int _SC_REGEX_VERSION_31 = 156;

const int _SC_SHELL_31 = 157;

const int _SC_SIGNALS_31 = 158;

const int _SC_SPAWN_31 = 159;

const int _SC_SPORADIC_SERVER_31 = 160;

const int _SC_THREAD_SPORADIC_SERVER_31 = 161;

const int _SC_SYSTEM_DATABASE_31 = 162;

const int _SC_SYSTEM_DATABASE_R_31 = 163;

const int _SC_TIMEOUTS_31 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_31 = 165;

const int _SC_USER_GROUPS_31 = 166;

const int _SC_USER_GROUPS_R_31 = 167;

const int _SC_2_PBS_31 = 168;

const int _SC_2_PBS_ACCOUNTING_31 = 169;

const int _SC_2_PBS_LOCATE_31 = 170;

const int _SC_2_PBS_MESSAGE_31 = 171;

const int _SC_2_PBS_TRACK_31 = 172;

const int _SC_SYMLOOP_MAX_31 = 173;

const int _SC_STREAMS_31 = 174;

const int _SC_2_PBS_CHECKPOINT_31 = 175;

const int _SC_V6_ILP32_OFF32_31 = 176;

const int _SC_V6_ILP32_OFFBIG_31 = 177;

const int _SC_V6_LP64_OFF64_31 = 178;

const int _SC_V6_LPBIG_OFFBIG_31 = 179;

const int _SC_HOST_NAME_MAX_31 = 180;

const int _SC_TRACE_31 = 181;

const int _SC_TRACE_EVENT_FILTER_31 = 182;

const int _SC_TRACE_INHERIT_31 = 183;

const int _SC_TRACE_LOG_31 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_31 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_31 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_31 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_31 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_31 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_31 = 190;

const int _SC_LEVEL2_CACHE_SIZE_31 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_31 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_31 = 193;

const int _SC_LEVEL3_CACHE_SIZE_31 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_31 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_31 = 196;

const int _SC_LEVEL4_CACHE_SIZE_31 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_31 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_31 = 199;

const int _SC_IPV6_31 = 235;

const int _SC_RAW_SOCKETS_31 = 236;

const int _SC_V7_ILP32_OFF32_31 = 237;

const int _SC_V7_ILP32_OFFBIG_31 = 238;

const int _SC_V7_LP64_OFF64_31 = 239;

const int _SC_V7_LPBIG_OFFBIG_31 = 240;

const int _SC_SS_REPL_MAX_31 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_31 = 242;

const int _SC_TRACE_NAME_MAX_31 = 243;

const int _SC_TRACE_SYS_MAX_31 = 244;

const int _SC_TRACE_USER_EVENT_MAX_31 = 245;

const int _SC_XOPEN_STREAMS_31 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_31 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_31 = 248;

const int _CS_PATH_31 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_31 = 1;

const int _CS_GNU_LIBC_VERSION_31 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_31 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_31 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_31 = 5;

const int _CS_LFS_CFLAGS_31 = 1000;

const int _CS_LFS_LDFLAGS_31 = 1001;

const int _CS_LFS_LIBS_31 = 1002;

const int _CS_LFS_LINTFLAGS_31 = 1003;

const int _CS_LFS64_CFLAGS_31 = 1004;

const int _CS_LFS64_LDFLAGS_31 = 1005;

const int _CS_LFS64_LIBS_31 = 1006;

const int _CS_LFS64_LINTFLAGS_31 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_31 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_31 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_31 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_31 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_31 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_31 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_31 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_31 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_31 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_31 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_31 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_31 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_31 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_31 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_31 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_31 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_31 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_31 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_31 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_31 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_31 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_31 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_31 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_31 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_31 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_31 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_31 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_31 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_31 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_31 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_31 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_31 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_31 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_31 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_31 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_31 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_31 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_31 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_31 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_31 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_31 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_31 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_31 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_31 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_31 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_31 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_31 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_31 = 1147;

const int _CS_V6_ENV_31 = 1148;

const int _CS_V7_ENV_31 = 1149;

const int _PC_LINK_MAX_32 = 0;

const int _PC_MAX_CANON_32 = 1;

const int _PC_MAX_INPUT_32 = 2;

const int _PC_NAME_MAX_32 = 3;

const int _PC_PATH_MAX_32 = 4;

const int _PC_PIPE_BUF_32 = 5;

const int _PC_CHOWN_RESTRICTED_32 = 6;

const int _PC_NO_TRUNC_32 = 7;

const int _PC_VDISABLE_32 = 8;

const int _PC_SYNC_IO_32 = 9;

const int _PC_ASYNC_IO_32 = 10;

const int _PC_PRIO_IO_32 = 11;

const int _PC_SOCK_MAXBUF_32 = 12;

const int _PC_FILESIZEBITS_32 = 13;

const int _PC_REC_INCR_XFER_SIZE_32 = 14;

const int _PC_REC_MAX_XFER_SIZE_32 = 15;

const int _PC_REC_MIN_XFER_SIZE_32 = 16;

const int _PC_REC_XFER_ALIGN_32 = 17;

const int _PC_ALLOC_SIZE_MIN_32 = 18;

const int _PC_SYMLINK_MAX_32 = 19;

const int _PC_2_SYMLINKS_32 = 20;

const int _SC_ARG_MAX_32 = 0;

const int _SC_CHILD_MAX_32 = 1;

const int _SC_CLK_TCK_32 = 2;

const int _SC_NGROUPS_MAX_32 = 3;

const int _SC_OPEN_MAX_32 = 4;

const int _SC_STREAM_MAX_32 = 5;

const int _SC_TZNAME_MAX_32 = 6;

const int _SC_JOB_CONTROL_32 = 7;

const int _SC_SAVED_IDS_32 = 8;

const int _SC_REALTIME_SIGNALS_32 = 9;

const int _SC_PRIORITY_SCHEDULING_32 = 10;

const int _SC_TIMERS_32 = 11;

const int _SC_ASYNCHRONOUS_IO_32 = 12;

const int _SC_PRIORITIZED_IO_32 = 13;

const int _SC_SYNCHRONIZED_IO_32 = 14;

const int _SC_FSYNC_32 = 15;

const int _SC_MAPPED_FILES_32 = 16;

const int _SC_MEMLOCK_32 = 17;

const int _SC_MEMLOCK_RANGE_32 = 18;

const int _SC_MEMORY_PROTECTION_32 = 19;

const int _SC_MESSAGE_PASSING_32 = 20;

const int _SC_SEMAPHORES_32 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_32 = 22;

const int _SC_AIO_LISTIO_MAX_32 = 23;

const int _SC_AIO_MAX_32 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_32 = 25;

const int _SC_DELAYTIMER_MAX_32 = 26;

const int _SC_MQ_OPEN_MAX_32 = 27;

const int _SC_MQ_PRIO_MAX_32 = 28;

const int _SC_VERSION_32 = 29;

const int _SC_PAGESIZE_32 = 30;

const int _SC_RTSIG_MAX_32 = 31;

const int _SC_SEM_NSEMS_MAX_32 = 32;

const int _SC_SEM_VALUE_MAX_32 = 33;

const int _SC_SIGQUEUE_MAX_32 = 34;

const int _SC_TIMER_MAX_32 = 35;

const int _SC_BC_BASE_MAX_32 = 36;

const int _SC_BC_DIM_MAX_32 = 37;

const int _SC_BC_SCALE_MAX_32 = 38;

const int _SC_BC_STRING_MAX_32 = 39;

const int _SC_COLL_WEIGHTS_MAX_32 = 40;

const int _SC_EQUIV_CLASS_MAX_32 = 41;

const int _SC_EXPR_NEST_MAX_32 = 42;

const int _SC_LINE_MAX_32 = 43;

const int _SC_RE_DUP_MAX_32 = 44;

const int _SC_CHARCLASS_NAME_MAX_32 = 45;

const int _SC_2_VERSION_32 = 46;

const int _SC_2_C_BIND_32 = 47;

const int _SC_2_C_DEV_32 = 48;

const int _SC_2_FORT_DEV_32 = 49;

const int _SC_2_FORT_RUN_32 = 50;

const int _SC_2_SW_DEV_32 = 51;

const int _SC_2_LOCALEDEF_32 = 52;

const int _SC_PII_32 = 53;

const int _SC_PII_XTI_32 = 54;

const int _SC_PII_SOCKET_32 = 55;

const int _SC_PII_INTERNET_32 = 56;

const int _SC_PII_OSI_32 = 57;

const int _SC_POLL_32 = 58;

const int _SC_SELECT_32 = 59;

const int _SC_UIO_MAXIOV_32 = 60;

const int _SC_IOV_MAX_32 = 60;

const int _SC_PII_INTERNET_STREAM_32 = 61;

const int _SC_PII_INTERNET_DGRAM_32 = 62;

const int _SC_PII_OSI_COTS_32 = 63;

const int _SC_PII_OSI_CLTS_32 = 64;

const int _SC_PII_OSI_M_32 = 65;

const int _SC_T_IOV_MAX_32 = 66;

const int _SC_THREADS_32 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_32 = 68;

const int _SC_GETGR_R_SIZE_MAX_32 = 69;

const int _SC_GETPW_R_SIZE_MAX_32 = 70;

const int _SC_LOGIN_NAME_MAX_32 = 71;

const int _SC_TTY_NAME_MAX_32 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_32 = 73;

const int _SC_THREAD_KEYS_MAX_32 = 74;

const int _SC_THREAD_STACK_MIN_32 = 75;

const int _SC_THREAD_THREADS_MAX_32 = 76;

const int _SC_THREAD_ATTR_STACKADDR_32 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_32 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_32 = 79;

const int _SC_THREAD_PRIO_INHERIT_32 = 80;

const int _SC_THREAD_PRIO_PROTECT_32 = 81;

const int _SC_THREAD_PROCESS_SHARED_32 = 82;

const int _SC_NPROCESSORS_CONF_32 = 83;

const int _SC_NPROCESSORS_ONLN_32 = 84;

const int _SC_PHYS_PAGES_32 = 85;

const int _SC_AVPHYS_PAGES_32 = 86;

const int _SC_ATEXIT_MAX_32 = 87;

const int _SC_PASS_MAX_32 = 88;

const int _SC_XOPEN_VERSION_32 = 89;

const int _SC_XOPEN_XCU_VERSION_32 = 90;

const int _SC_XOPEN_UNIX_32 = 91;

const int _SC_XOPEN_CRYPT_32 = 92;

const int _SC_XOPEN_ENH_I18N_32 = 93;

const int _SC_XOPEN_SHM_32 = 94;

const int _SC_2_CHAR_TERM_32 = 95;

const int _SC_2_C_VERSION_32 = 96;

const int _SC_2_UPE_32 = 97;

const int _SC_XOPEN_XPG2_32 = 98;

const int _SC_XOPEN_XPG3_32 = 99;

const int _SC_XOPEN_XPG4_32 = 100;

const int _SC_CHAR_BIT_32 = 101;

const int _SC_CHAR_MAX_32 = 102;

const int _SC_CHAR_MIN_32 = 103;

const int _SC_INT_MAX_32 = 104;

const int _SC_INT_MIN_32 = 105;

const int _SC_LONG_BIT_32 = 106;

const int _SC_WORD_BIT_32 = 107;

const int _SC_MB_LEN_MAX_32 = 108;

const int _SC_NZERO_32 = 109;

const int _SC_SSIZE_MAX_32 = 110;

const int _SC_SCHAR_MAX_32 = 111;

const int _SC_SCHAR_MIN_32 = 112;

const int _SC_SHRT_MAX_32 = 113;

const int _SC_SHRT_MIN_32 = 114;

const int _SC_UCHAR_MAX_32 = 115;

const int _SC_UINT_MAX_32 = 116;

const int _SC_ULONG_MAX_32 = 117;

const int _SC_USHRT_MAX_32 = 118;

const int _SC_NL_ARGMAX_32 = 119;

const int _SC_NL_LANGMAX_32 = 120;

const int _SC_NL_MSGMAX_32 = 121;

const int _SC_NL_NMAX_32 = 122;

const int _SC_NL_SETMAX_32 = 123;

const int _SC_NL_TEXTMAX_32 = 124;

const int _SC_XBS5_ILP32_OFF32_32 = 125;

const int _SC_XBS5_ILP32_OFFBIG_32 = 126;

const int _SC_XBS5_LP64_OFF64_32 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_32 = 128;

const int _SC_XOPEN_LEGACY_32 = 129;

const int _SC_XOPEN_REALTIME_32 = 130;

const int _SC_XOPEN_REALTIME_THREADS_32 = 131;

const int _SC_ADVISORY_INFO_32 = 132;

const int _SC_BARRIERS_32 = 133;

const int _SC_BASE_32 = 134;

const int _SC_C_LANG_SUPPORT_32 = 135;

const int _SC_C_LANG_SUPPORT_R_32 = 136;

const int _SC_CLOCK_SELECTION_32 = 137;

const int _SC_CPUTIME_32 = 138;

const int _SC_THREAD_CPUTIME_32 = 139;

const int _SC_DEVICE_IO_32 = 140;

const int _SC_DEVICE_SPECIFIC_32 = 141;

const int _SC_DEVICE_SPECIFIC_R_32 = 142;

const int _SC_FD_MGMT_32 = 143;

const int _SC_FIFO_32 = 144;

const int _SC_PIPE_32 = 145;

const int _SC_FILE_ATTRIBUTES_32 = 146;

const int _SC_FILE_LOCKING_32 = 147;

const int _SC_FILE_SYSTEM_32 = 148;

const int _SC_MONOTONIC_CLOCK_32 = 149;

const int _SC_MULTI_PROCESS_32 = 150;

const int _SC_SINGLE_PROCESS_32 = 151;

const int _SC_NETWORKING_32 = 152;

const int _SC_READER_WRITER_LOCKS_32 = 153;

const int _SC_SPIN_LOCKS_32 = 154;

const int _SC_REGEXP_32 = 155;

const int _SC_REGEX_VERSION_32 = 156;

const int _SC_SHELL_32 = 157;

const int _SC_SIGNALS_32 = 158;

const int _SC_SPAWN_32 = 159;

const int _SC_SPORADIC_SERVER_32 = 160;

const int _SC_THREAD_SPORADIC_SERVER_32 = 161;

const int _SC_SYSTEM_DATABASE_32 = 162;

const int _SC_SYSTEM_DATABASE_R_32 = 163;

const int _SC_TIMEOUTS_32 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_32 = 165;

const int _SC_USER_GROUPS_32 = 166;

const int _SC_USER_GROUPS_R_32 = 167;

const int _SC_2_PBS_32 = 168;

const int _SC_2_PBS_ACCOUNTING_32 = 169;

const int _SC_2_PBS_LOCATE_32 = 170;

const int _SC_2_PBS_MESSAGE_32 = 171;

const int _SC_2_PBS_TRACK_32 = 172;

const int _SC_SYMLOOP_MAX_32 = 173;

const int _SC_STREAMS_32 = 174;

const int _SC_2_PBS_CHECKPOINT_32 = 175;

const int _SC_V6_ILP32_OFF32_32 = 176;

const int _SC_V6_ILP32_OFFBIG_32 = 177;

const int _SC_V6_LP64_OFF64_32 = 178;

const int _SC_V6_LPBIG_OFFBIG_32 = 179;

const int _SC_HOST_NAME_MAX_32 = 180;

const int _SC_TRACE_32 = 181;

const int _SC_TRACE_EVENT_FILTER_32 = 182;

const int _SC_TRACE_INHERIT_32 = 183;

const int _SC_TRACE_LOG_32 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_32 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_32 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_32 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_32 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_32 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_32 = 190;

const int _SC_LEVEL2_CACHE_SIZE_32 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_32 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_32 = 193;

const int _SC_LEVEL3_CACHE_SIZE_32 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_32 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_32 = 196;

const int _SC_LEVEL4_CACHE_SIZE_32 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_32 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_32 = 199;

const int _SC_IPV6_32 = 235;

const int _SC_RAW_SOCKETS_32 = 236;

const int _SC_V7_ILP32_OFF32_32 = 237;

const int _SC_V7_ILP32_OFFBIG_32 = 238;

const int _SC_V7_LP64_OFF64_32 = 239;

const int _SC_V7_LPBIG_OFFBIG_32 = 240;

const int _SC_SS_REPL_MAX_32 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_32 = 242;

const int _SC_TRACE_NAME_MAX_32 = 243;

const int _SC_TRACE_SYS_MAX_32 = 244;

const int _SC_TRACE_USER_EVENT_MAX_32 = 245;

const int _SC_XOPEN_STREAMS_32 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_32 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_32 = 248;

const int _CS_PATH_32 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_32 = 1;

const int _CS_GNU_LIBC_VERSION_32 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_32 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_32 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_32 = 5;

const int _CS_LFS_CFLAGS_32 = 1000;

const int _CS_LFS_LDFLAGS_32 = 1001;

const int _CS_LFS_LIBS_32 = 1002;

const int _CS_LFS_LINTFLAGS_32 = 1003;

const int _CS_LFS64_CFLAGS_32 = 1004;

const int _CS_LFS64_LDFLAGS_32 = 1005;

const int _CS_LFS64_LIBS_32 = 1006;

const int _CS_LFS64_LINTFLAGS_32 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_32 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_32 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_32 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_32 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_32 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_32 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_32 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_32 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_32 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_32 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_32 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_32 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_32 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_32 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_32 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_32 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_32 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_32 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_32 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_32 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_32 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_32 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_32 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_32 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_32 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_32 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_32 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_32 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_32 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_32 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_32 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_32 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_32 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_32 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_32 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_32 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_32 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_32 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_32 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_32 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_32 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_32 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_32 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_32 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_32 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_32 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_32 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_32 = 1147;

const int _CS_V6_ENV_32 = 1148;

const int _CS_V7_ENV_32 = 1149;

const int _ISupper_6 = 256;

const int _ISlower_6 = 512;

const int _ISalpha_6 = 1024;

const int _ISdigit_6 = 2048;

const int _ISxdigit_6 = 4096;

const int _ISspace_6 = 8192;

const int _ISprint_6 = 16384;

const int _ISgraph_6 = 32768;

const int _ISblank_6 = 1;

const int _IScntrl_6 = 2;

const int _ISpunct_6 = 4;

const int _ISalnum_6 = 8;

const int _ISupper_7 = 256;

const int _ISlower_7 = 512;

const int _ISalpha_7 = 1024;

const int _ISdigit_7 = 2048;

const int _ISxdigit_7 = 4096;

const int _ISspace_7 = 8192;

const int _ISprint_7 = 16384;

const int _ISgraph_7 = 32768;

const int _ISblank_7 = 1;

const int _IScntrl_7 = 2;

const int _ISpunct_7 = 4;

const int _ISalnum_7 = 8;

const int _PC_LINK_MAX_33 = 0;

const int _PC_MAX_CANON_33 = 1;

const int _PC_MAX_INPUT_33 = 2;

const int _PC_NAME_MAX_33 = 3;

const int _PC_PATH_MAX_33 = 4;

const int _PC_PIPE_BUF_33 = 5;

const int _PC_CHOWN_RESTRICTED_33 = 6;

const int _PC_NO_TRUNC_33 = 7;

const int _PC_VDISABLE_33 = 8;

const int _PC_SYNC_IO_33 = 9;

const int _PC_ASYNC_IO_33 = 10;

const int _PC_PRIO_IO_33 = 11;

const int _PC_SOCK_MAXBUF_33 = 12;

const int _PC_FILESIZEBITS_33 = 13;

const int _PC_REC_INCR_XFER_SIZE_33 = 14;

const int _PC_REC_MAX_XFER_SIZE_33 = 15;

const int _PC_REC_MIN_XFER_SIZE_33 = 16;

const int _PC_REC_XFER_ALIGN_33 = 17;

const int _PC_ALLOC_SIZE_MIN_33 = 18;

const int _PC_SYMLINK_MAX_33 = 19;

const int _PC_2_SYMLINKS_33 = 20;

const int _SC_ARG_MAX_33 = 0;

const int _SC_CHILD_MAX_33 = 1;

const int _SC_CLK_TCK_33 = 2;

const int _SC_NGROUPS_MAX_33 = 3;

const int _SC_OPEN_MAX_33 = 4;

const int _SC_STREAM_MAX_33 = 5;

const int _SC_TZNAME_MAX_33 = 6;

const int _SC_JOB_CONTROL_33 = 7;

const int _SC_SAVED_IDS_33 = 8;

const int _SC_REALTIME_SIGNALS_33 = 9;

const int _SC_PRIORITY_SCHEDULING_33 = 10;

const int _SC_TIMERS_33 = 11;

const int _SC_ASYNCHRONOUS_IO_33 = 12;

const int _SC_PRIORITIZED_IO_33 = 13;

const int _SC_SYNCHRONIZED_IO_33 = 14;

const int _SC_FSYNC_33 = 15;

const int _SC_MAPPED_FILES_33 = 16;

const int _SC_MEMLOCK_33 = 17;

const int _SC_MEMLOCK_RANGE_33 = 18;

const int _SC_MEMORY_PROTECTION_33 = 19;

const int _SC_MESSAGE_PASSING_33 = 20;

const int _SC_SEMAPHORES_33 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_33 = 22;

const int _SC_AIO_LISTIO_MAX_33 = 23;

const int _SC_AIO_MAX_33 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_33 = 25;

const int _SC_DELAYTIMER_MAX_33 = 26;

const int _SC_MQ_OPEN_MAX_33 = 27;

const int _SC_MQ_PRIO_MAX_33 = 28;

const int _SC_VERSION_33 = 29;

const int _SC_PAGESIZE_33 = 30;

const int _SC_RTSIG_MAX_33 = 31;

const int _SC_SEM_NSEMS_MAX_33 = 32;

const int _SC_SEM_VALUE_MAX_33 = 33;

const int _SC_SIGQUEUE_MAX_33 = 34;

const int _SC_TIMER_MAX_33 = 35;

const int _SC_BC_BASE_MAX_33 = 36;

const int _SC_BC_DIM_MAX_33 = 37;

const int _SC_BC_SCALE_MAX_33 = 38;

const int _SC_BC_STRING_MAX_33 = 39;

const int _SC_COLL_WEIGHTS_MAX_33 = 40;

const int _SC_EQUIV_CLASS_MAX_33 = 41;

const int _SC_EXPR_NEST_MAX_33 = 42;

const int _SC_LINE_MAX_33 = 43;

const int _SC_RE_DUP_MAX_33 = 44;

const int _SC_CHARCLASS_NAME_MAX_33 = 45;

const int _SC_2_VERSION_33 = 46;

const int _SC_2_C_BIND_33 = 47;

const int _SC_2_C_DEV_33 = 48;

const int _SC_2_FORT_DEV_33 = 49;

const int _SC_2_FORT_RUN_33 = 50;

const int _SC_2_SW_DEV_33 = 51;

const int _SC_2_LOCALEDEF_33 = 52;

const int _SC_PII_33 = 53;

const int _SC_PII_XTI_33 = 54;

const int _SC_PII_SOCKET_33 = 55;

const int _SC_PII_INTERNET_33 = 56;

const int _SC_PII_OSI_33 = 57;

const int _SC_POLL_33 = 58;

const int _SC_SELECT_33 = 59;

const int _SC_UIO_MAXIOV_33 = 60;

const int _SC_IOV_MAX_33 = 60;

const int _SC_PII_INTERNET_STREAM_33 = 61;

const int _SC_PII_INTERNET_DGRAM_33 = 62;

const int _SC_PII_OSI_COTS_33 = 63;

const int _SC_PII_OSI_CLTS_33 = 64;

const int _SC_PII_OSI_M_33 = 65;

const int _SC_T_IOV_MAX_33 = 66;

const int _SC_THREADS_33 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_33 = 68;

const int _SC_GETGR_R_SIZE_MAX_33 = 69;

const int _SC_GETPW_R_SIZE_MAX_33 = 70;

const int _SC_LOGIN_NAME_MAX_33 = 71;

const int _SC_TTY_NAME_MAX_33 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_33 = 73;

const int _SC_THREAD_KEYS_MAX_33 = 74;

const int _SC_THREAD_STACK_MIN_33 = 75;

const int _SC_THREAD_THREADS_MAX_33 = 76;

const int _SC_THREAD_ATTR_STACKADDR_33 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_33 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_33 = 79;

const int _SC_THREAD_PRIO_INHERIT_33 = 80;

const int _SC_THREAD_PRIO_PROTECT_33 = 81;

const int _SC_THREAD_PROCESS_SHARED_33 = 82;

const int _SC_NPROCESSORS_CONF_33 = 83;

const int _SC_NPROCESSORS_ONLN_33 = 84;

const int _SC_PHYS_PAGES_33 = 85;

const int _SC_AVPHYS_PAGES_33 = 86;

const int _SC_ATEXIT_MAX_33 = 87;

const int _SC_PASS_MAX_33 = 88;

const int _SC_XOPEN_VERSION_33 = 89;

const int _SC_XOPEN_XCU_VERSION_33 = 90;

const int _SC_XOPEN_UNIX_33 = 91;

const int _SC_XOPEN_CRYPT_33 = 92;

const int _SC_XOPEN_ENH_I18N_33 = 93;

const int _SC_XOPEN_SHM_33 = 94;

const int _SC_2_CHAR_TERM_33 = 95;

const int _SC_2_C_VERSION_33 = 96;

const int _SC_2_UPE_33 = 97;

const int _SC_XOPEN_XPG2_33 = 98;

const int _SC_XOPEN_XPG3_33 = 99;

const int _SC_XOPEN_XPG4_33 = 100;

const int _SC_CHAR_BIT_33 = 101;

const int _SC_CHAR_MAX_33 = 102;

const int _SC_CHAR_MIN_33 = 103;

const int _SC_INT_MAX_33 = 104;

const int _SC_INT_MIN_33 = 105;

const int _SC_LONG_BIT_33 = 106;

const int _SC_WORD_BIT_33 = 107;

const int _SC_MB_LEN_MAX_33 = 108;

const int _SC_NZERO_33 = 109;

const int _SC_SSIZE_MAX_33 = 110;

const int _SC_SCHAR_MAX_33 = 111;

const int _SC_SCHAR_MIN_33 = 112;

const int _SC_SHRT_MAX_33 = 113;

const int _SC_SHRT_MIN_33 = 114;

const int _SC_UCHAR_MAX_33 = 115;

const int _SC_UINT_MAX_33 = 116;

const int _SC_ULONG_MAX_33 = 117;

const int _SC_USHRT_MAX_33 = 118;

const int _SC_NL_ARGMAX_33 = 119;

const int _SC_NL_LANGMAX_33 = 120;

const int _SC_NL_MSGMAX_33 = 121;

const int _SC_NL_NMAX_33 = 122;

const int _SC_NL_SETMAX_33 = 123;

const int _SC_NL_TEXTMAX_33 = 124;

const int _SC_XBS5_ILP32_OFF32_33 = 125;

const int _SC_XBS5_ILP32_OFFBIG_33 = 126;

const int _SC_XBS5_LP64_OFF64_33 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_33 = 128;

const int _SC_XOPEN_LEGACY_33 = 129;

const int _SC_XOPEN_REALTIME_33 = 130;

const int _SC_XOPEN_REALTIME_THREADS_33 = 131;

const int _SC_ADVISORY_INFO_33 = 132;

const int _SC_BARRIERS_33 = 133;

const int _SC_BASE_33 = 134;

const int _SC_C_LANG_SUPPORT_33 = 135;

const int _SC_C_LANG_SUPPORT_R_33 = 136;

const int _SC_CLOCK_SELECTION_33 = 137;

const int _SC_CPUTIME_33 = 138;

const int _SC_THREAD_CPUTIME_33 = 139;

const int _SC_DEVICE_IO_33 = 140;

const int _SC_DEVICE_SPECIFIC_33 = 141;

const int _SC_DEVICE_SPECIFIC_R_33 = 142;

const int _SC_FD_MGMT_33 = 143;

const int _SC_FIFO_33 = 144;

const int _SC_PIPE_33 = 145;

const int _SC_FILE_ATTRIBUTES_33 = 146;

const int _SC_FILE_LOCKING_33 = 147;

const int _SC_FILE_SYSTEM_33 = 148;

const int _SC_MONOTONIC_CLOCK_33 = 149;

const int _SC_MULTI_PROCESS_33 = 150;

const int _SC_SINGLE_PROCESS_33 = 151;

const int _SC_NETWORKING_33 = 152;

const int _SC_READER_WRITER_LOCKS_33 = 153;

const int _SC_SPIN_LOCKS_33 = 154;

const int _SC_REGEXP_33 = 155;

const int _SC_REGEX_VERSION_33 = 156;

const int _SC_SHELL_33 = 157;

const int _SC_SIGNALS_33 = 158;

const int _SC_SPAWN_33 = 159;

const int _SC_SPORADIC_SERVER_33 = 160;

const int _SC_THREAD_SPORADIC_SERVER_33 = 161;

const int _SC_SYSTEM_DATABASE_33 = 162;

const int _SC_SYSTEM_DATABASE_R_33 = 163;

const int _SC_TIMEOUTS_33 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_33 = 165;

const int _SC_USER_GROUPS_33 = 166;

const int _SC_USER_GROUPS_R_33 = 167;

const int _SC_2_PBS_33 = 168;

const int _SC_2_PBS_ACCOUNTING_33 = 169;

const int _SC_2_PBS_LOCATE_33 = 170;

const int _SC_2_PBS_MESSAGE_33 = 171;

const int _SC_2_PBS_TRACK_33 = 172;

const int _SC_SYMLOOP_MAX_33 = 173;

const int _SC_STREAMS_33 = 174;

const int _SC_2_PBS_CHECKPOINT_33 = 175;

const int _SC_V6_ILP32_OFF32_33 = 176;

const int _SC_V6_ILP32_OFFBIG_33 = 177;

const int _SC_V6_LP64_OFF64_33 = 178;

const int _SC_V6_LPBIG_OFFBIG_33 = 179;

const int _SC_HOST_NAME_MAX_33 = 180;

const int _SC_TRACE_33 = 181;

const int _SC_TRACE_EVENT_FILTER_33 = 182;

const int _SC_TRACE_INHERIT_33 = 183;

const int _SC_TRACE_LOG_33 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_33 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_33 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_33 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_33 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_33 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_33 = 190;

const int _SC_LEVEL2_CACHE_SIZE_33 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_33 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_33 = 193;

const int _SC_LEVEL3_CACHE_SIZE_33 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_33 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_33 = 196;

const int _SC_LEVEL4_CACHE_SIZE_33 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_33 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_33 = 199;

const int _SC_IPV6_33 = 235;

const int _SC_RAW_SOCKETS_33 = 236;

const int _SC_V7_ILP32_OFF32_33 = 237;

const int _SC_V7_ILP32_OFFBIG_33 = 238;

const int _SC_V7_LP64_OFF64_33 = 239;

const int _SC_V7_LPBIG_OFFBIG_33 = 240;

const int _SC_SS_REPL_MAX_33 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_33 = 242;

const int _SC_TRACE_NAME_MAX_33 = 243;

const int _SC_TRACE_SYS_MAX_33 = 244;

const int _SC_TRACE_USER_EVENT_MAX_33 = 245;

const int _SC_XOPEN_STREAMS_33 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_33 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_33 = 248;

const int _CS_PATH_33 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_33 = 1;

const int _CS_GNU_LIBC_VERSION_33 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_33 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_33 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_33 = 5;

const int _CS_LFS_CFLAGS_33 = 1000;

const int _CS_LFS_LDFLAGS_33 = 1001;

const int _CS_LFS_LIBS_33 = 1002;

const int _CS_LFS_LINTFLAGS_33 = 1003;

const int _CS_LFS64_CFLAGS_33 = 1004;

const int _CS_LFS64_LDFLAGS_33 = 1005;

const int _CS_LFS64_LIBS_33 = 1006;

const int _CS_LFS64_LINTFLAGS_33 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_33 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_33 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_33 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_33 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_33 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_33 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_33 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_33 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_33 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_33 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_33 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_33 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_33 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_33 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_33 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_33 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_33 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_33 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_33 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_33 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_33 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_33 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_33 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_33 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_33 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_33 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_33 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_33 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_33 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_33 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_33 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_33 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_33 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_33 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_33 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_33 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_33 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_33 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_33 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_33 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_33 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_33 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_33 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_33 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_33 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_33 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_33 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_33 = 1147;

const int _CS_V6_ENV_33 = 1148;

const int _CS_V7_ENV_33 = 1149;

const int _ISupper_8 = 256;

const int _ISlower_8 = 512;

const int _ISalpha_8 = 1024;

const int _ISdigit_8 = 2048;

const int _ISxdigit_8 = 4096;

const int _ISspace_8 = 8192;

const int _ISprint_8 = 16384;

const int _ISgraph_8 = 32768;

const int _ISblank_8 = 1;

const int _IScntrl_8 = 2;

const int _ISpunct_8 = 4;

const int _ISalnum_8 = 8;

const int _PC_LINK_MAX_34 = 0;

const int _PC_MAX_CANON_34 = 1;

const int _PC_MAX_INPUT_34 = 2;

const int _PC_NAME_MAX_34 = 3;

const int _PC_PATH_MAX_34 = 4;

const int _PC_PIPE_BUF_34 = 5;

const int _PC_CHOWN_RESTRICTED_34 = 6;

const int _PC_NO_TRUNC_34 = 7;

const int _PC_VDISABLE_34 = 8;

const int _PC_SYNC_IO_34 = 9;

const int _PC_ASYNC_IO_34 = 10;

const int _PC_PRIO_IO_34 = 11;

const int _PC_SOCK_MAXBUF_34 = 12;

const int _PC_FILESIZEBITS_34 = 13;

const int _PC_REC_INCR_XFER_SIZE_34 = 14;

const int _PC_REC_MAX_XFER_SIZE_34 = 15;

const int _PC_REC_MIN_XFER_SIZE_34 = 16;

const int _PC_REC_XFER_ALIGN_34 = 17;

const int _PC_ALLOC_SIZE_MIN_34 = 18;

const int _PC_SYMLINK_MAX_34 = 19;

const int _PC_2_SYMLINKS_34 = 20;

const int _SC_ARG_MAX_34 = 0;

const int _SC_CHILD_MAX_34 = 1;

const int _SC_CLK_TCK_34 = 2;

const int _SC_NGROUPS_MAX_34 = 3;

const int _SC_OPEN_MAX_34 = 4;

const int _SC_STREAM_MAX_34 = 5;

const int _SC_TZNAME_MAX_34 = 6;

const int _SC_JOB_CONTROL_34 = 7;

const int _SC_SAVED_IDS_34 = 8;

const int _SC_REALTIME_SIGNALS_34 = 9;

const int _SC_PRIORITY_SCHEDULING_34 = 10;

const int _SC_TIMERS_34 = 11;

const int _SC_ASYNCHRONOUS_IO_34 = 12;

const int _SC_PRIORITIZED_IO_34 = 13;

const int _SC_SYNCHRONIZED_IO_34 = 14;

const int _SC_FSYNC_34 = 15;

const int _SC_MAPPED_FILES_34 = 16;

const int _SC_MEMLOCK_34 = 17;

const int _SC_MEMLOCK_RANGE_34 = 18;

const int _SC_MEMORY_PROTECTION_34 = 19;

const int _SC_MESSAGE_PASSING_34 = 20;

const int _SC_SEMAPHORES_34 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_34 = 22;

const int _SC_AIO_LISTIO_MAX_34 = 23;

const int _SC_AIO_MAX_34 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_34 = 25;

const int _SC_DELAYTIMER_MAX_34 = 26;

const int _SC_MQ_OPEN_MAX_34 = 27;

const int _SC_MQ_PRIO_MAX_34 = 28;

const int _SC_VERSION_34 = 29;

const int _SC_PAGESIZE_34 = 30;

const int _SC_RTSIG_MAX_34 = 31;

const int _SC_SEM_NSEMS_MAX_34 = 32;

const int _SC_SEM_VALUE_MAX_34 = 33;

const int _SC_SIGQUEUE_MAX_34 = 34;

const int _SC_TIMER_MAX_34 = 35;

const int _SC_BC_BASE_MAX_34 = 36;

const int _SC_BC_DIM_MAX_34 = 37;

const int _SC_BC_SCALE_MAX_34 = 38;

const int _SC_BC_STRING_MAX_34 = 39;

const int _SC_COLL_WEIGHTS_MAX_34 = 40;

const int _SC_EQUIV_CLASS_MAX_34 = 41;

const int _SC_EXPR_NEST_MAX_34 = 42;

const int _SC_LINE_MAX_34 = 43;

const int _SC_RE_DUP_MAX_34 = 44;

const int _SC_CHARCLASS_NAME_MAX_34 = 45;

const int _SC_2_VERSION_34 = 46;

const int _SC_2_C_BIND_34 = 47;

const int _SC_2_C_DEV_34 = 48;

const int _SC_2_FORT_DEV_34 = 49;

const int _SC_2_FORT_RUN_34 = 50;

const int _SC_2_SW_DEV_34 = 51;

const int _SC_2_LOCALEDEF_34 = 52;

const int _SC_PII_34 = 53;

const int _SC_PII_XTI_34 = 54;

const int _SC_PII_SOCKET_34 = 55;

const int _SC_PII_INTERNET_34 = 56;

const int _SC_PII_OSI_34 = 57;

const int _SC_POLL_34 = 58;

const int _SC_SELECT_34 = 59;

const int _SC_UIO_MAXIOV_34 = 60;

const int _SC_IOV_MAX_34 = 60;

const int _SC_PII_INTERNET_STREAM_34 = 61;

const int _SC_PII_INTERNET_DGRAM_34 = 62;

const int _SC_PII_OSI_COTS_34 = 63;

const int _SC_PII_OSI_CLTS_34 = 64;

const int _SC_PII_OSI_M_34 = 65;

const int _SC_T_IOV_MAX_34 = 66;

const int _SC_THREADS_34 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_34 = 68;

const int _SC_GETGR_R_SIZE_MAX_34 = 69;

const int _SC_GETPW_R_SIZE_MAX_34 = 70;

const int _SC_LOGIN_NAME_MAX_34 = 71;

const int _SC_TTY_NAME_MAX_34 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_34 = 73;

const int _SC_THREAD_KEYS_MAX_34 = 74;

const int _SC_THREAD_STACK_MIN_34 = 75;

const int _SC_THREAD_THREADS_MAX_34 = 76;

const int _SC_THREAD_ATTR_STACKADDR_34 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_34 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_34 = 79;

const int _SC_THREAD_PRIO_INHERIT_34 = 80;

const int _SC_THREAD_PRIO_PROTECT_34 = 81;

const int _SC_THREAD_PROCESS_SHARED_34 = 82;

const int _SC_NPROCESSORS_CONF_34 = 83;

const int _SC_NPROCESSORS_ONLN_34 = 84;

const int _SC_PHYS_PAGES_34 = 85;

const int _SC_AVPHYS_PAGES_34 = 86;

const int _SC_ATEXIT_MAX_34 = 87;

const int _SC_PASS_MAX_34 = 88;

const int _SC_XOPEN_VERSION_34 = 89;

const int _SC_XOPEN_XCU_VERSION_34 = 90;

const int _SC_XOPEN_UNIX_34 = 91;

const int _SC_XOPEN_CRYPT_34 = 92;

const int _SC_XOPEN_ENH_I18N_34 = 93;

const int _SC_XOPEN_SHM_34 = 94;

const int _SC_2_CHAR_TERM_34 = 95;

const int _SC_2_C_VERSION_34 = 96;

const int _SC_2_UPE_34 = 97;

const int _SC_XOPEN_XPG2_34 = 98;

const int _SC_XOPEN_XPG3_34 = 99;

const int _SC_XOPEN_XPG4_34 = 100;

const int _SC_CHAR_BIT_34 = 101;

const int _SC_CHAR_MAX_34 = 102;

const int _SC_CHAR_MIN_34 = 103;

const int _SC_INT_MAX_34 = 104;

const int _SC_INT_MIN_34 = 105;

const int _SC_LONG_BIT_34 = 106;

const int _SC_WORD_BIT_34 = 107;

const int _SC_MB_LEN_MAX_34 = 108;

const int _SC_NZERO_34 = 109;

const int _SC_SSIZE_MAX_34 = 110;

const int _SC_SCHAR_MAX_34 = 111;

const int _SC_SCHAR_MIN_34 = 112;

const int _SC_SHRT_MAX_34 = 113;

const int _SC_SHRT_MIN_34 = 114;

const int _SC_UCHAR_MAX_34 = 115;

const int _SC_UINT_MAX_34 = 116;

const int _SC_ULONG_MAX_34 = 117;

const int _SC_USHRT_MAX_34 = 118;

const int _SC_NL_ARGMAX_34 = 119;

const int _SC_NL_LANGMAX_34 = 120;

const int _SC_NL_MSGMAX_34 = 121;

const int _SC_NL_NMAX_34 = 122;

const int _SC_NL_SETMAX_34 = 123;

const int _SC_NL_TEXTMAX_34 = 124;

const int _SC_XBS5_ILP32_OFF32_34 = 125;

const int _SC_XBS5_ILP32_OFFBIG_34 = 126;

const int _SC_XBS5_LP64_OFF64_34 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_34 = 128;

const int _SC_XOPEN_LEGACY_34 = 129;

const int _SC_XOPEN_REALTIME_34 = 130;

const int _SC_XOPEN_REALTIME_THREADS_34 = 131;

const int _SC_ADVISORY_INFO_34 = 132;

const int _SC_BARRIERS_34 = 133;

const int _SC_BASE_34 = 134;

const int _SC_C_LANG_SUPPORT_34 = 135;

const int _SC_C_LANG_SUPPORT_R_34 = 136;

const int _SC_CLOCK_SELECTION_34 = 137;

const int _SC_CPUTIME_34 = 138;

const int _SC_THREAD_CPUTIME_34 = 139;

const int _SC_DEVICE_IO_34 = 140;

const int _SC_DEVICE_SPECIFIC_34 = 141;

const int _SC_DEVICE_SPECIFIC_R_34 = 142;

const int _SC_FD_MGMT_34 = 143;

const int _SC_FIFO_34 = 144;

const int _SC_PIPE_34 = 145;

const int _SC_FILE_ATTRIBUTES_34 = 146;

const int _SC_FILE_LOCKING_34 = 147;

const int _SC_FILE_SYSTEM_34 = 148;

const int _SC_MONOTONIC_CLOCK_34 = 149;

const int _SC_MULTI_PROCESS_34 = 150;

const int _SC_SINGLE_PROCESS_34 = 151;

const int _SC_NETWORKING_34 = 152;

const int _SC_READER_WRITER_LOCKS_34 = 153;

const int _SC_SPIN_LOCKS_34 = 154;

const int _SC_REGEXP_34 = 155;

const int _SC_REGEX_VERSION_34 = 156;

const int _SC_SHELL_34 = 157;

const int _SC_SIGNALS_34 = 158;

const int _SC_SPAWN_34 = 159;

const int _SC_SPORADIC_SERVER_34 = 160;

const int _SC_THREAD_SPORADIC_SERVER_34 = 161;

const int _SC_SYSTEM_DATABASE_34 = 162;

const int _SC_SYSTEM_DATABASE_R_34 = 163;

const int _SC_TIMEOUTS_34 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_34 = 165;

const int _SC_USER_GROUPS_34 = 166;

const int _SC_USER_GROUPS_R_34 = 167;

const int _SC_2_PBS_34 = 168;

const int _SC_2_PBS_ACCOUNTING_34 = 169;

const int _SC_2_PBS_LOCATE_34 = 170;

const int _SC_2_PBS_MESSAGE_34 = 171;

const int _SC_2_PBS_TRACK_34 = 172;

const int _SC_SYMLOOP_MAX_34 = 173;

const int _SC_STREAMS_34 = 174;

const int _SC_2_PBS_CHECKPOINT_34 = 175;

const int _SC_V6_ILP32_OFF32_34 = 176;

const int _SC_V6_ILP32_OFFBIG_34 = 177;

const int _SC_V6_LP64_OFF64_34 = 178;

const int _SC_V6_LPBIG_OFFBIG_34 = 179;

const int _SC_HOST_NAME_MAX_34 = 180;

const int _SC_TRACE_34 = 181;

const int _SC_TRACE_EVENT_FILTER_34 = 182;

const int _SC_TRACE_INHERIT_34 = 183;

const int _SC_TRACE_LOG_34 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_34 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_34 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_34 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_34 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_34 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_34 = 190;

const int _SC_LEVEL2_CACHE_SIZE_34 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_34 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_34 = 193;

const int _SC_LEVEL3_CACHE_SIZE_34 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_34 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_34 = 196;

const int _SC_LEVEL4_CACHE_SIZE_34 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_34 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_34 = 199;

const int _SC_IPV6_34 = 235;

const int _SC_RAW_SOCKETS_34 = 236;

const int _SC_V7_ILP32_OFF32_34 = 237;

const int _SC_V7_ILP32_OFFBIG_34 = 238;

const int _SC_V7_LP64_OFF64_34 = 239;

const int _SC_V7_LPBIG_OFFBIG_34 = 240;

const int _SC_SS_REPL_MAX_34 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_34 = 242;

const int _SC_TRACE_NAME_MAX_34 = 243;

const int _SC_TRACE_SYS_MAX_34 = 244;

const int _SC_TRACE_USER_EVENT_MAX_34 = 245;

const int _SC_XOPEN_STREAMS_34 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_34 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_34 = 248;

const int _CS_PATH_34 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_34 = 1;

const int _CS_GNU_LIBC_VERSION_34 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_34 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_34 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_34 = 5;

const int _CS_LFS_CFLAGS_34 = 1000;

const int _CS_LFS_LDFLAGS_34 = 1001;

const int _CS_LFS_LIBS_34 = 1002;

const int _CS_LFS_LINTFLAGS_34 = 1003;

const int _CS_LFS64_CFLAGS_34 = 1004;

const int _CS_LFS64_LDFLAGS_34 = 1005;

const int _CS_LFS64_LIBS_34 = 1006;

const int _CS_LFS64_LINTFLAGS_34 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_34 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_34 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_34 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_34 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_34 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_34 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_34 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_34 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_34 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_34 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_34 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_34 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_34 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_34 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_34 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_34 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_34 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_34 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_34 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_34 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_34 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_34 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_34 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_34 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_34 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_34 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_34 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_34 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_34 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_34 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_34 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_34 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_34 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_34 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_34 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_34 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_34 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_34 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_34 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_34 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_34 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_34 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_34 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_34 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_34 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_34 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_34 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_34 = 1147;

const int _CS_V6_ENV_34 = 1148;

const int _CS_V7_ENV_34 = 1149;

const int _PC_LINK_MAX_35 = 0;

const int _PC_MAX_CANON_35 = 1;

const int _PC_MAX_INPUT_35 = 2;

const int _PC_NAME_MAX_35 = 3;

const int _PC_PATH_MAX_35 = 4;

const int _PC_PIPE_BUF_35 = 5;

const int _PC_CHOWN_RESTRICTED_35 = 6;

const int _PC_NO_TRUNC_35 = 7;

const int _PC_VDISABLE_35 = 8;

const int _PC_SYNC_IO_35 = 9;

const int _PC_ASYNC_IO_35 = 10;

const int _PC_PRIO_IO_35 = 11;

const int _PC_SOCK_MAXBUF_35 = 12;

const int _PC_FILESIZEBITS_35 = 13;

const int _PC_REC_INCR_XFER_SIZE_35 = 14;

const int _PC_REC_MAX_XFER_SIZE_35 = 15;

const int _PC_REC_MIN_XFER_SIZE_35 = 16;

const int _PC_REC_XFER_ALIGN_35 = 17;

const int _PC_ALLOC_SIZE_MIN_35 = 18;

const int _PC_SYMLINK_MAX_35 = 19;

const int _PC_2_SYMLINKS_35 = 20;

const int _SC_ARG_MAX_35 = 0;

const int _SC_CHILD_MAX_35 = 1;

const int _SC_CLK_TCK_35 = 2;

const int _SC_NGROUPS_MAX_35 = 3;

const int _SC_OPEN_MAX_35 = 4;

const int _SC_STREAM_MAX_35 = 5;

const int _SC_TZNAME_MAX_35 = 6;

const int _SC_JOB_CONTROL_35 = 7;

const int _SC_SAVED_IDS_35 = 8;

const int _SC_REALTIME_SIGNALS_35 = 9;

const int _SC_PRIORITY_SCHEDULING_35 = 10;

const int _SC_TIMERS_35 = 11;

const int _SC_ASYNCHRONOUS_IO_35 = 12;

const int _SC_PRIORITIZED_IO_35 = 13;

const int _SC_SYNCHRONIZED_IO_35 = 14;

const int _SC_FSYNC_35 = 15;

const int _SC_MAPPED_FILES_35 = 16;

const int _SC_MEMLOCK_35 = 17;

const int _SC_MEMLOCK_RANGE_35 = 18;

const int _SC_MEMORY_PROTECTION_35 = 19;

const int _SC_MESSAGE_PASSING_35 = 20;

const int _SC_SEMAPHORES_35 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_35 = 22;

const int _SC_AIO_LISTIO_MAX_35 = 23;

const int _SC_AIO_MAX_35 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_35 = 25;

const int _SC_DELAYTIMER_MAX_35 = 26;

const int _SC_MQ_OPEN_MAX_35 = 27;

const int _SC_MQ_PRIO_MAX_35 = 28;

const int _SC_VERSION_35 = 29;

const int _SC_PAGESIZE_35 = 30;

const int _SC_RTSIG_MAX_35 = 31;

const int _SC_SEM_NSEMS_MAX_35 = 32;

const int _SC_SEM_VALUE_MAX_35 = 33;

const int _SC_SIGQUEUE_MAX_35 = 34;

const int _SC_TIMER_MAX_35 = 35;

const int _SC_BC_BASE_MAX_35 = 36;

const int _SC_BC_DIM_MAX_35 = 37;

const int _SC_BC_SCALE_MAX_35 = 38;

const int _SC_BC_STRING_MAX_35 = 39;

const int _SC_COLL_WEIGHTS_MAX_35 = 40;

const int _SC_EQUIV_CLASS_MAX_35 = 41;

const int _SC_EXPR_NEST_MAX_35 = 42;

const int _SC_LINE_MAX_35 = 43;

const int _SC_RE_DUP_MAX_35 = 44;

const int _SC_CHARCLASS_NAME_MAX_35 = 45;

const int _SC_2_VERSION_35 = 46;

const int _SC_2_C_BIND_35 = 47;

const int _SC_2_C_DEV_35 = 48;

const int _SC_2_FORT_DEV_35 = 49;

const int _SC_2_FORT_RUN_35 = 50;

const int _SC_2_SW_DEV_35 = 51;

const int _SC_2_LOCALEDEF_35 = 52;

const int _SC_PII_35 = 53;

const int _SC_PII_XTI_35 = 54;

const int _SC_PII_SOCKET_35 = 55;

const int _SC_PII_INTERNET_35 = 56;

const int _SC_PII_OSI_35 = 57;

const int _SC_POLL_35 = 58;

const int _SC_SELECT_35 = 59;

const int _SC_UIO_MAXIOV_35 = 60;

const int _SC_IOV_MAX_35 = 60;

const int _SC_PII_INTERNET_STREAM_35 = 61;

const int _SC_PII_INTERNET_DGRAM_35 = 62;

const int _SC_PII_OSI_COTS_35 = 63;

const int _SC_PII_OSI_CLTS_35 = 64;

const int _SC_PII_OSI_M_35 = 65;

const int _SC_T_IOV_MAX_35 = 66;

const int _SC_THREADS_35 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_35 = 68;

const int _SC_GETGR_R_SIZE_MAX_35 = 69;

const int _SC_GETPW_R_SIZE_MAX_35 = 70;

const int _SC_LOGIN_NAME_MAX_35 = 71;

const int _SC_TTY_NAME_MAX_35 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_35 = 73;

const int _SC_THREAD_KEYS_MAX_35 = 74;

const int _SC_THREAD_STACK_MIN_35 = 75;

const int _SC_THREAD_THREADS_MAX_35 = 76;

const int _SC_THREAD_ATTR_STACKADDR_35 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_35 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_35 = 79;

const int _SC_THREAD_PRIO_INHERIT_35 = 80;

const int _SC_THREAD_PRIO_PROTECT_35 = 81;

const int _SC_THREAD_PROCESS_SHARED_35 = 82;

const int _SC_NPROCESSORS_CONF_35 = 83;

const int _SC_NPROCESSORS_ONLN_35 = 84;

const int _SC_PHYS_PAGES_35 = 85;

const int _SC_AVPHYS_PAGES_35 = 86;

const int _SC_ATEXIT_MAX_35 = 87;

const int _SC_PASS_MAX_35 = 88;

const int _SC_XOPEN_VERSION_35 = 89;

const int _SC_XOPEN_XCU_VERSION_35 = 90;

const int _SC_XOPEN_UNIX_35 = 91;

const int _SC_XOPEN_CRYPT_35 = 92;

const int _SC_XOPEN_ENH_I18N_35 = 93;

const int _SC_XOPEN_SHM_35 = 94;

const int _SC_2_CHAR_TERM_35 = 95;

const int _SC_2_C_VERSION_35 = 96;

const int _SC_2_UPE_35 = 97;

const int _SC_XOPEN_XPG2_35 = 98;

const int _SC_XOPEN_XPG3_35 = 99;

const int _SC_XOPEN_XPG4_35 = 100;

const int _SC_CHAR_BIT_35 = 101;

const int _SC_CHAR_MAX_35 = 102;

const int _SC_CHAR_MIN_35 = 103;

const int _SC_INT_MAX_35 = 104;

const int _SC_INT_MIN_35 = 105;

const int _SC_LONG_BIT_35 = 106;

const int _SC_WORD_BIT_35 = 107;

const int _SC_MB_LEN_MAX_35 = 108;

const int _SC_NZERO_35 = 109;

const int _SC_SSIZE_MAX_35 = 110;

const int _SC_SCHAR_MAX_35 = 111;

const int _SC_SCHAR_MIN_35 = 112;

const int _SC_SHRT_MAX_35 = 113;

const int _SC_SHRT_MIN_35 = 114;

const int _SC_UCHAR_MAX_35 = 115;

const int _SC_UINT_MAX_35 = 116;

const int _SC_ULONG_MAX_35 = 117;

const int _SC_USHRT_MAX_35 = 118;

const int _SC_NL_ARGMAX_35 = 119;

const int _SC_NL_LANGMAX_35 = 120;

const int _SC_NL_MSGMAX_35 = 121;

const int _SC_NL_NMAX_35 = 122;

const int _SC_NL_SETMAX_35 = 123;

const int _SC_NL_TEXTMAX_35 = 124;

const int _SC_XBS5_ILP32_OFF32_35 = 125;

const int _SC_XBS5_ILP32_OFFBIG_35 = 126;

const int _SC_XBS5_LP64_OFF64_35 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_35 = 128;

const int _SC_XOPEN_LEGACY_35 = 129;

const int _SC_XOPEN_REALTIME_35 = 130;

const int _SC_XOPEN_REALTIME_THREADS_35 = 131;

const int _SC_ADVISORY_INFO_35 = 132;

const int _SC_BARRIERS_35 = 133;

const int _SC_BASE_35 = 134;

const int _SC_C_LANG_SUPPORT_35 = 135;

const int _SC_C_LANG_SUPPORT_R_35 = 136;

const int _SC_CLOCK_SELECTION_35 = 137;

const int _SC_CPUTIME_35 = 138;

const int _SC_THREAD_CPUTIME_35 = 139;

const int _SC_DEVICE_IO_35 = 140;

const int _SC_DEVICE_SPECIFIC_35 = 141;

const int _SC_DEVICE_SPECIFIC_R_35 = 142;

const int _SC_FD_MGMT_35 = 143;

const int _SC_FIFO_35 = 144;

const int _SC_PIPE_35 = 145;

const int _SC_FILE_ATTRIBUTES_35 = 146;

const int _SC_FILE_LOCKING_35 = 147;

const int _SC_FILE_SYSTEM_35 = 148;

const int _SC_MONOTONIC_CLOCK_35 = 149;

const int _SC_MULTI_PROCESS_35 = 150;

const int _SC_SINGLE_PROCESS_35 = 151;

const int _SC_NETWORKING_35 = 152;

const int _SC_READER_WRITER_LOCKS_35 = 153;

const int _SC_SPIN_LOCKS_35 = 154;

const int _SC_REGEXP_35 = 155;

const int _SC_REGEX_VERSION_35 = 156;

const int _SC_SHELL_35 = 157;

const int _SC_SIGNALS_35 = 158;

const int _SC_SPAWN_35 = 159;

const int _SC_SPORADIC_SERVER_35 = 160;

const int _SC_THREAD_SPORADIC_SERVER_35 = 161;

const int _SC_SYSTEM_DATABASE_35 = 162;

const int _SC_SYSTEM_DATABASE_R_35 = 163;

const int _SC_TIMEOUTS_35 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_35 = 165;

const int _SC_USER_GROUPS_35 = 166;

const int _SC_USER_GROUPS_R_35 = 167;

const int _SC_2_PBS_35 = 168;

const int _SC_2_PBS_ACCOUNTING_35 = 169;

const int _SC_2_PBS_LOCATE_35 = 170;

const int _SC_2_PBS_MESSAGE_35 = 171;

const int _SC_2_PBS_TRACK_35 = 172;

const int _SC_SYMLOOP_MAX_35 = 173;

const int _SC_STREAMS_35 = 174;

const int _SC_2_PBS_CHECKPOINT_35 = 175;

const int _SC_V6_ILP32_OFF32_35 = 176;

const int _SC_V6_ILP32_OFFBIG_35 = 177;

const int _SC_V6_LP64_OFF64_35 = 178;

const int _SC_V6_LPBIG_OFFBIG_35 = 179;

const int _SC_HOST_NAME_MAX_35 = 180;

const int _SC_TRACE_35 = 181;

const int _SC_TRACE_EVENT_FILTER_35 = 182;

const int _SC_TRACE_INHERIT_35 = 183;

const int _SC_TRACE_LOG_35 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_35 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_35 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_35 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_35 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_35 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_35 = 190;

const int _SC_LEVEL2_CACHE_SIZE_35 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_35 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_35 = 193;

const int _SC_LEVEL3_CACHE_SIZE_35 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_35 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_35 = 196;

const int _SC_LEVEL4_CACHE_SIZE_35 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_35 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_35 = 199;

const int _SC_IPV6_35 = 235;

const int _SC_RAW_SOCKETS_35 = 236;

const int _SC_V7_ILP32_OFF32_35 = 237;

const int _SC_V7_ILP32_OFFBIG_35 = 238;

const int _SC_V7_LP64_OFF64_35 = 239;

const int _SC_V7_LPBIG_OFFBIG_35 = 240;

const int _SC_SS_REPL_MAX_35 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_35 = 242;

const int _SC_TRACE_NAME_MAX_35 = 243;

const int _SC_TRACE_SYS_MAX_35 = 244;

const int _SC_TRACE_USER_EVENT_MAX_35 = 245;

const int _SC_XOPEN_STREAMS_35 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_35 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_35 = 248;

const int _CS_PATH_35 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_35 = 1;

const int _CS_GNU_LIBC_VERSION_35 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_35 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_35 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_35 = 5;

const int _CS_LFS_CFLAGS_35 = 1000;

const int _CS_LFS_LDFLAGS_35 = 1001;

const int _CS_LFS_LIBS_35 = 1002;

const int _CS_LFS_LINTFLAGS_35 = 1003;

const int _CS_LFS64_CFLAGS_35 = 1004;

const int _CS_LFS64_LDFLAGS_35 = 1005;

const int _CS_LFS64_LIBS_35 = 1006;

const int _CS_LFS64_LINTFLAGS_35 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_35 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_35 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_35 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_35 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_35 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_35 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_35 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_35 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_35 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_35 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_35 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_35 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_35 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_35 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_35 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_35 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_35 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_35 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_35 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_35 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_35 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_35 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_35 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_35 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_35 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_35 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_35 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_35 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_35 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_35 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_35 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_35 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_35 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_35 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_35 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_35 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_35 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_35 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_35 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_35 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_35 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_35 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_35 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_35 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_35 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_35 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_35 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_35 = 1147;

const int _CS_V6_ENV_35 = 1148;

const int _CS_V7_ENV_35 = 1149;

const int _ISupper_9 = 256;

const int _ISlower_9 = 512;

const int _ISalpha_9 = 1024;

const int _ISdigit_9 = 2048;

const int _ISxdigit_9 = 4096;

const int _ISspace_9 = 8192;

const int _ISprint_9 = 16384;

const int _ISgraph_9 = 32768;

const int _ISblank_9 = 1;

const int _IScntrl_9 = 2;

const int _ISpunct_9 = 4;

const int _ISalnum_9 = 8;

const int _PC_LINK_MAX_36 = 0;

const int _PC_MAX_CANON_36 = 1;

const int _PC_MAX_INPUT_36 = 2;

const int _PC_NAME_MAX_36 = 3;

const int _PC_PATH_MAX_36 = 4;

const int _PC_PIPE_BUF_36 = 5;

const int _PC_CHOWN_RESTRICTED_36 = 6;

const int _PC_NO_TRUNC_36 = 7;

const int _PC_VDISABLE_36 = 8;

const int _PC_SYNC_IO_36 = 9;

const int _PC_ASYNC_IO_36 = 10;

const int _PC_PRIO_IO_36 = 11;

const int _PC_SOCK_MAXBUF_36 = 12;

const int _PC_FILESIZEBITS_36 = 13;

const int _PC_REC_INCR_XFER_SIZE_36 = 14;

const int _PC_REC_MAX_XFER_SIZE_36 = 15;

const int _PC_REC_MIN_XFER_SIZE_36 = 16;

const int _PC_REC_XFER_ALIGN_36 = 17;

const int _PC_ALLOC_SIZE_MIN_36 = 18;

const int _PC_SYMLINK_MAX_36 = 19;

const int _PC_2_SYMLINKS_36 = 20;

const int _SC_ARG_MAX_36 = 0;

const int _SC_CHILD_MAX_36 = 1;

const int _SC_CLK_TCK_36 = 2;

const int _SC_NGROUPS_MAX_36 = 3;

const int _SC_OPEN_MAX_36 = 4;

const int _SC_STREAM_MAX_36 = 5;

const int _SC_TZNAME_MAX_36 = 6;

const int _SC_JOB_CONTROL_36 = 7;

const int _SC_SAVED_IDS_36 = 8;

const int _SC_REALTIME_SIGNALS_36 = 9;

const int _SC_PRIORITY_SCHEDULING_36 = 10;

const int _SC_TIMERS_36 = 11;

const int _SC_ASYNCHRONOUS_IO_36 = 12;

const int _SC_PRIORITIZED_IO_36 = 13;

const int _SC_SYNCHRONIZED_IO_36 = 14;

const int _SC_FSYNC_36 = 15;

const int _SC_MAPPED_FILES_36 = 16;

const int _SC_MEMLOCK_36 = 17;

const int _SC_MEMLOCK_RANGE_36 = 18;

const int _SC_MEMORY_PROTECTION_36 = 19;

const int _SC_MESSAGE_PASSING_36 = 20;

const int _SC_SEMAPHORES_36 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_36 = 22;

const int _SC_AIO_LISTIO_MAX_36 = 23;

const int _SC_AIO_MAX_36 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_36 = 25;

const int _SC_DELAYTIMER_MAX_36 = 26;

const int _SC_MQ_OPEN_MAX_36 = 27;

const int _SC_MQ_PRIO_MAX_36 = 28;

const int _SC_VERSION_36 = 29;

const int _SC_PAGESIZE_36 = 30;

const int _SC_RTSIG_MAX_36 = 31;

const int _SC_SEM_NSEMS_MAX_36 = 32;

const int _SC_SEM_VALUE_MAX_36 = 33;

const int _SC_SIGQUEUE_MAX_36 = 34;

const int _SC_TIMER_MAX_36 = 35;

const int _SC_BC_BASE_MAX_36 = 36;

const int _SC_BC_DIM_MAX_36 = 37;

const int _SC_BC_SCALE_MAX_36 = 38;

const int _SC_BC_STRING_MAX_36 = 39;

const int _SC_COLL_WEIGHTS_MAX_36 = 40;

const int _SC_EQUIV_CLASS_MAX_36 = 41;

const int _SC_EXPR_NEST_MAX_36 = 42;

const int _SC_LINE_MAX_36 = 43;

const int _SC_RE_DUP_MAX_36 = 44;

const int _SC_CHARCLASS_NAME_MAX_36 = 45;

const int _SC_2_VERSION_36 = 46;

const int _SC_2_C_BIND_36 = 47;

const int _SC_2_C_DEV_36 = 48;

const int _SC_2_FORT_DEV_36 = 49;

const int _SC_2_FORT_RUN_36 = 50;

const int _SC_2_SW_DEV_36 = 51;

const int _SC_2_LOCALEDEF_36 = 52;

const int _SC_PII_36 = 53;

const int _SC_PII_XTI_36 = 54;

const int _SC_PII_SOCKET_36 = 55;

const int _SC_PII_INTERNET_36 = 56;

const int _SC_PII_OSI_36 = 57;

const int _SC_POLL_36 = 58;

const int _SC_SELECT_36 = 59;

const int _SC_UIO_MAXIOV_36 = 60;

const int _SC_IOV_MAX_36 = 60;

const int _SC_PII_INTERNET_STREAM_36 = 61;

const int _SC_PII_INTERNET_DGRAM_36 = 62;

const int _SC_PII_OSI_COTS_36 = 63;

const int _SC_PII_OSI_CLTS_36 = 64;

const int _SC_PII_OSI_M_36 = 65;

const int _SC_T_IOV_MAX_36 = 66;

const int _SC_THREADS_36 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_36 = 68;

const int _SC_GETGR_R_SIZE_MAX_36 = 69;

const int _SC_GETPW_R_SIZE_MAX_36 = 70;

const int _SC_LOGIN_NAME_MAX_36 = 71;

const int _SC_TTY_NAME_MAX_36 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_36 = 73;

const int _SC_THREAD_KEYS_MAX_36 = 74;

const int _SC_THREAD_STACK_MIN_36 = 75;

const int _SC_THREAD_THREADS_MAX_36 = 76;

const int _SC_THREAD_ATTR_STACKADDR_36 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_36 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_36 = 79;

const int _SC_THREAD_PRIO_INHERIT_36 = 80;

const int _SC_THREAD_PRIO_PROTECT_36 = 81;

const int _SC_THREAD_PROCESS_SHARED_36 = 82;

const int _SC_NPROCESSORS_CONF_36 = 83;

const int _SC_NPROCESSORS_ONLN_36 = 84;

const int _SC_PHYS_PAGES_36 = 85;

const int _SC_AVPHYS_PAGES_36 = 86;

const int _SC_ATEXIT_MAX_36 = 87;

const int _SC_PASS_MAX_36 = 88;

const int _SC_XOPEN_VERSION_36 = 89;

const int _SC_XOPEN_XCU_VERSION_36 = 90;

const int _SC_XOPEN_UNIX_36 = 91;

const int _SC_XOPEN_CRYPT_36 = 92;

const int _SC_XOPEN_ENH_I18N_36 = 93;

const int _SC_XOPEN_SHM_36 = 94;

const int _SC_2_CHAR_TERM_36 = 95;

const int _SC_2_C_VERSION_36 = 96;

const int _SC_2_UPE_36 = 97;

const int _SC_XOPEN_XPG2_36 = 98;

const int _SC_XOPEN_XPG3_36 = 99;

const int _SC_XOPEN_XPG4_36 = 100;

const int _SC_CHAR_BIT_36 = 101;

const int _SC_CHAR_MAX_36 = 102;

const int _SC_CHAR_MIN_36 = 103;

const int _SC_INT_MAX_36 = 104;

const int _SC_INT_MIN_36 = 105;

const int _SC_LONG_BIT_36 = 106;

const int _SC_WORD_BIT_36 = 107;

const int _SC_MB_LEN_MAX_36 = 108;

const int _SC_NZERO_36 = 109;

const int _SC_SSIZE_MAX_36 = 110;

const int _SC_SCHAR_MAX_36 = 111;

const int _SC_SCHAR_MIN_36 = 112;

const int _SC_SHRT_MAX_36 = 113;

const int _SC_SHRT_MIN_36 = 114;

const int _SC_UCHAR_MAX_36 = 115;

const int _SC_UINT_MAX_36 = 116;

const int _SC_ULONG_MAX_36 = 117;

const int _SC_USHRT_MAX_36 = 118;

const int _SC_NL_ARGMAX_36 = 119;

const int _SC_NL_LANGMAX_36 = 120;

const int _SC_NL_MSGMAX_36 = 121;

const int _SC_NL_NMAX_36 = 122;

const int _SC_NL_SETMAX_36 = 123;

const int _SC_NL_TEXTMAX_36 = 124;

const int _SC_XBS5_ILP32_OFF32_36 = 125;

const int _SC_XBS5_ILP32_OFFBIG_36 = 126;

const int _SC_XBS5_LP64_OFF64_36 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_36 = 128;

const int _SC_XOPEN_LEGACY_36 = 129;

const int _SC_XOPEN_REALTIME_36 = 130;

const int _SC_XOPEN_REALTIME_THREADS_36 = 131;

const int _SC_ADVISORY_INFO_36 = 132;

const int _SC_BARRIERS_36 = 133;

const int _SC_BASE_36 = 134;

const int _SC_C_LANG_SUPPORT_36 = 135;

const int _SC_C_LANG_SUPPORT_R_36 = 136;

const int _SC_CLOCK_SELECTION_36 = 137;

const int _SC_CPUTIME_36 = 138;

const int _SC_THREAD_CPUTIME_36 = 139;

const int _SC_DEVICE_IO_36 = 140;

const int _SC_DEVICE_SPECIFIC_36 = 141;

const int _SC_DEVICE_SPECIFIC_R_36 = 142;

const int _SC_FD_MGMT_36 = 143;

const int _SC_FIFO_36 = 144;

const int _SC_PIPE_36 = 145;

const int _SC_FILE_ATTRIBUTES_36 = 146;

const int _SC_FILE_LOCKING_36 = 147;

const int _SC_FILE_SYSTEM_36 = 148;

const int _SC_MONOTONIC_CLOCK_36 = 149;

const int _SC_MULTI_PROCESS_36 = 150;

const int _SC_SINGLE_PROCESS_36 = 151;

const int _SC_NETWORKING_36 = 152;

const int _SC_READER_WRITER_LOCKS_36 = 153;

const int _SC_SPIN_LOCKS_36 = 154;

const int _SC_REGEXP_36 = 155;

const int _SC_REGEX_VERSION_36 = 156;

const int _SC_SHELL_36 = 157;

const int _SC_SIGNALS_36 = 158;

const int _SC_SPAWN_36 = 159;

const int _SC_SPORADIC_SERVER_36 = 160;

const int _SC_THREAD_SPORADIC_SERVER_36 = 161;

const int _SC_SYSTEM_DATABASE_36 = 162;

const int _SC_SYSTEM_DATABASE_R_36 = 163;

const int _SC_TIMEOUTS_36 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_36 = 165;

const int _SC_USER_GROUPS_36 = 166;

const int _SC_USER_GROUPS_R_36 = 167;

const int _SC_2_PBS_36 = 168;

const int _SC_2_PBS_ACCOUNTING_36 = 169;

const int _SC_2_PBS_LOCATE_36 = 170;

const int _SC_2_PBS_MESSAGE_36 = 171;

const int _SC_2_PBS_TRACK_36 = 172;

const int _SC_SYMLOOP_MAX_36 = 173;

const int _SC_STREAMS_36 = 174;

const int _SC_2_PBS_CHECKPOINT_36 = 175;

const int _SC_V6_ILP32_OFF32_36 = 176;

const int _SC_V6_ILP32_OFFBIG_36 = 177;

const int _SC_V6_LP64_OFF64_36 = 178;

const int _SC_V6_LPBIG_OFFBIG_36 = 179;

const int _SC_HOST_NAME_MAX_36 = 180;

const int _SC_TRACE_36 = 181;

const int _SC_TRACE_EVENT_FILTER_36 = 182;

const int _SC_TRACE_INHERIT_36 = 183;

const int _SC_TRACE_LOG_36 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_36 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_36 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_36 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_36 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_36 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_36 = 190;

const int _SC_LEVEL2_CACHE_SIZE_36 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_36 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_36 = 193;

const int _SC_LEVEL3_CACHE_SIZE_36 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_36 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_36 = 196;

const int _SC_LEVEL4_CACHE_SIZE_36 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_36 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_36 = 199;

const int _SC_IPV6_36 = 235;

const int _SC_RAW_SOCKETS_36 = 236;

const int _SC_V7_ILP32_OFF32_36 = 237;

const int _SC_V7_ILP32_OFFBIG_36 = 238;

const int _SC_V7_LP64_OFF64_36 = 239;

const int _SC_V7_LPBIG_OFFBIG_36 = 240;

const int _SC_SS_REPL_MAX_36 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_36 = 242;

const int _SC_TRACE_NAME_MAX_36 = 243;

const int _SC_TRACE_SYS_MAX_36 = 244;

const int _SC_TRACE_USER_EVENT_MAX_36 = 245;

const int _SC_XOPEN_STREAMS_36 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_36 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_36 = 248;

const int _CS_PATH_36 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_36 = 1;

const int _CS_GNU_LIBC_VERSION_36 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_36 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_36 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_36 = 5;

const int _CS_LFS_CFLAGS_36 = 1000;

const int _CS_LFS_LDFLAGS_36 = 1001;

const int _CS_LFS_LIBS_36 = 1002;

const int _CS_LFS_LINTFLAGS_36 = 1003;

const int _CS_LFS64_CFLAGS_36 = 1004;

const int _CS_LFS64_LDFLAGS_36 = 1005;

const int _CS_LFS64_LIBS_36 = 1006;

const int _CS_LFS64_LINTFLAGS_36 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_36 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_36 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_36 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_36 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_36 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_36 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_36 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_36 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_36 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_36 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_36 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_36 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_36 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_36 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_36 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_36 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_36 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_36 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_36 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_36 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_36 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_36 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_36 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_36 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_36 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_36 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_36 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_36 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_36 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_36 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_36 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_36 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_36 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_36 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_36 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_36 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_36 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_36 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_36 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_36 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_36 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_36 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_36 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_36 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_36 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_36 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_36 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_36 = 1147;

const int _CS_V6_ENV_36 = 1148;

const int _CS_V7_ENV_36 = 1149;

const int _PC_LINK_MAX_37 = 0;

const int _PC_MAX_CANON_37 = 1;

const int _PC_MAX_INPUT_37 = 2;

const int _PC_NAME_MAX_37 = 3;

const int _PC_PATH_MAX_37 = 4;

const int _PC_PIPE_BUF_37 = 5;

const int _PC_CHOWN_RESTRICTED_37 = 6;

const int _PC_NO_TRUNC_37 = 7;

const int _PC_VDISABLE_37 = 8;

const int _PC_SYNC_IO_37 = 9;

const int _PC_ASYNC_IO_37 = 10;

const int _PC_PRIO_IO_37 = 11;

const int _PC_SOCK_MAXBUF_37 = 12;

const int _PC_FILESIZEBITS_37 = 13;

const int _PC_REC_INCR_XFER_SIZE_37 = 14;

const int _PC_REC_MAX_XFER_SIZE_37 = 15;

const int _PC_REC_MIN_XFER_SIZE_37 = 16;

const int _PC_REC_XFER_ALIGN_37 = 17;

const int _PC_ALLOC_SIZE_MIN_37 = 18;

const int _PC_SYMLINK_MAX_37 = 19;

const int _PC_2_SYMLINKS_37 = 20;

const int _SC_ARG_MAX_37 = 0;

const int _SC_CHILD_MAX_37 = 1;

const int _SC_CLK_TCK_37 = 2;

const int _SC_NGROUPS_MAX_37 = 3;

const int _SC_OPEN_MAX_37 = 4;

const int _SC_STREAM_MAX_37 = 5;

const int _SC_TZNAME_MAX_37 = 6;

const int _SC_JOB_CONTROL_37 = 7;

const int _SC_SAVED_IDS_37 = 8;

const int _SC_REALTIME_SIGNALS_37 = 9;

const int _SC_PRIORITY_SCHEDULING_37 = 10;

const int _SC_TIMERS_37 = 11;

const int _SC_ASYNCHRONOUS_IO_37 = 12;

const int _SC_PRIORITIZED_IO_37 = 13;

const int _SC_SYNCHRONIZED_IO_37 = 14;

const int _SC_FSYNC_37 = 15;

const int _SC_MAPPED_FILES_37 = 16;

const int _SC_MEMLOCK_37 = 17;

const int _SC_MEMLOCK_RANGE_37 = 18;

const int _SC_MEMORY_PROTECTION_37 = 19;

const int _SC_MESSAGE_PASSING_37 = 20;

const int _SC_SEMAPHORES_37 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_37 = 22;

const int _SC_AIO_LISTIO_MAX_37 = 23;

const int _SC_AIO_MAX_37 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_37 = 25;

const int _SC_DELAYTIMER_MAX_37 = 26;

const int _SC_MQ_OPEN_MAX_37 = 27;

const int _SC_MQ_PRIO_MAX_37 = 28;

const int _SC_VERSION_37 = 29;

const int _SC_PAGESIZE_37 = 30;

const int _SC_RTSIG_MAX_37 = 31;

const int _SC_SEM_NSEMS_MAX_37 = 32;

const int _SC_SEM_VALUE_MAX_37 = 33;

const int _SC_SIGQUEUE_MAX_37 = 34;

const int _SC_TIMER_MAX_37 = 35;

const int _SC_BC_BASE_MAX_37 = 36;

const int _SC_BC_DIM_MAX_37 = 37;

const int _SC_BC_SCALE_MAX_37 = 38;

const int _SC_BC_STRING_MAX_37 = 39;

const int _SC_COLL_WEIGHTS_MAX_37 = 40;

const int _SC_EQUIV_CLASS_MAX_37 = 41;

const int _SC_EXPR_NEST_MAX_37 = 42;

const int _SC_LINE_MAX_37 = 43;

const int _SC_RE_DUP_MAX_37 = 44;

const int _SC_CHARCLASS_NAME_MAX_37 = 45;

const int _SC_2_VERSION_37 = 46;

const int _SC_2_C_BIND_37 = 47;

const int _SC_2_C_DEV_37 = 48;

const int _SC_2_FORT_DEV_37 = 49;

const int _SC_2_FORT_RUN_37 = 50;

const int _SC_2_SW_DEV_37 = 51;

const int _SC_2_LOCALEDEF_37 = 52;

const int _SC_PII_37 = 53;

const int _SC_PII_XTI_37 = 54;

const int _SC_PII_SOCKET_37 = 55;

const int _SC_PII_INTERNET_37 = 56;

const int _SC_PII_OSI_37 = 57;

const int _SC_POLL_37 = 58;

const int _SC_SELECT_37 = 59;

const int _SC_UIO_MAXIOV_37 = 60;

const int _SC_IOV_MAX_37 = 60;

const int _SC_PII_INTERNET_STREAM_37 = 61;

const int _SC_PII_INTERNET_DGRAM_37 = 62;

const int _SC_PII_OSI_COTS_37 = 63;

const int _SC_PII_OSI_CLTS_37 = 64;

const int _SC_PII_OSI_M_37 = 65;

const int _SC_T_IOV_MAX_37 = 66;

const int _SC_THREADS_37 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_37 = 68;

const int _SC_GETGR_R_SIZE_MAX_37 = 69;

const int _SC_GETPW_R_SIZE_MAX_37 = 70;

const int _SC_LOGIN_NAME_MAX_37 = 71;

const int _SC_TTY_NAME_MAX_37 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_37 = 73;

const int _SC_THREAD_KEYS_MAX_37 = 74;

const int _SC_THREAD_STACK_MIN_37 = 75;

const int _SC_THREAD_THREADS_MAX_37 = 76;

const int _SC_THREAD_ATTR_STACKADDR_37 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_37 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_37 = 79;

const int _SC_THREAD_PRIO_INHERIT_37 = 80;

const int _SC_THREAD_PRIO_PROTECT_37 = 81;

const int _SC_THREAD_PROCESS_SHARED_37 = 82;

const int _SC_NPROCESSORS_CONF_37 = 83;

const int _SC_NPROCESSORS_ONLN_37 = 84;

const int _SC_PHYS_PAGES_37 = 85;

const int _SC_AVPHYS_PAGES_37 = 86;

const int _SC_ATEXIT_MAX_37 = 87;

const int _SC_PASS_MAX_37 = 88;

const int _SC_XOPEN_VERSION_37 = 89;

const int _SC_XOPEN_XCU_VERSION_37 = 90;

const int _SC_XOPEN_UNIX_37 = 91;

const int _SC_XOPEN_CRYPT_37 = 92;

const int _SC_XOPEN_ENH_I18N_37 = 93;

const int _SC_XOPEN_SHM_37 = 94;

const int _SC_2_CHAR_TERM_37 = 95;

const int _SC_2_C_VERSION_37 = 96;

const int _SC_2_UPE_37 = 97;

const int _SC_XOPEN_XPG2_37 = 98;

const int _SC_XOPEN_XPG3_37 = 99;

const int _SC_XOPEN_XPG4_37 = 100;

const int _SC_CHAR_BIT_37 = 101;

const int _SC_CHAR_MAX_37 = 102;

const int _SC_CHAR_MIN_37 = 103;

const int _SC_INT_MAX_37 = 104;

const int _SC_INT_MIN_37 = 105;

const int _SC_LONG_BIT_37 = 106;

const int _SC_WORD_BIT_37 = 107;

const int _SC_MB_LEN_MAX_37 = 108;

const int _SC_NZERO_37 = 109;

const int _SC_SSIZE_MAX_37 = 110;

const int _SC_SCHAR_MAX_37 = 111;

const int _SC_SCHAR_MIN_37 = 112;

const int _SC_SHRT_MAX_37 = 113;

const int _SC_SHRT_MIN_37 = 114;

const int _SC_UCHAR_MAX_37 = 115;

const int _SC_UINT_MAX_37 = 116;

const int _SC_ULONG_MAX_37 = 117;

const int _SC_USHRT_MAX_37 = 118;

const int _SC_NL_ARGMAX_37 = 119;

const int _SC_NL_LANGMAX_37 = 120;

const int _SC_NL_MSGMAX_37 = 121;

const int _SC_NL_NMAX_37 = 122;

const int _SC_NL_SETMAX_37 = 123;

const int _SC_NL_TEXTMAX_37 = 124;

const int _SC_XBS5_ILP32_OFF32_37 = 125;

const int _SC_XBS5_ILP32_OFFBIG_37 = 126;

const int _SC_XBS5_LP64_OFF64_37 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_37 = 128;

const int _SC_XOPEN_LEGACY_37 = 129;

const int _SC_XOPEN_REALTIME_37 = 130;

const int _SC_XOPEN_REALTIME_THREADS_37 = 131;

const int _SC_ADVISORY_INFO_37 = 132;

const int _SC_BARRIERS_37 = 133;

const int _SC_BASE_37 = 134;

const int _SC_C_LANG_SUPPORT_37 = 135;

const int _SC_C_LANG_SUPPORT_R_37 = 136;

const int _SC_CLOCK_SELECTION_37 = 137;

const int _SC_CPUTIME_37 = 138;

const int _SC_THREAD_CPUTIME_37 = 139;

const int _SC_DEVICE_IO_37 = 140;

const int _SC_DEVICE_SPECIFIC_37 = 141;

const int _SC_DEVICE_SPECIFIC_R_37 = 142;

const int _SC_FD_MGMT_37 = 143;

const int _SC_FIFO_37 = 144;

const int _SC_PIPE_37 = 145;

const int _SC_FILE_ATTRIBUTES_37 = 146;

const int _SC_FILE_LOCKING_37 = 147;

const int _SC_FILE_SYSTEM_37 = 148;

const int _SC_MONOTONIC_CLOCK_37 = 149;

const int _SC_MULTI_PROCESS_37 = 150;

const int _SC_SINGLE_PROCESS_37 = 151;

const int _SC_NETWORKING_37 = 152;

const int _SC_READER_WRITER_LOCKS_37 = 153;

const int _SC_SPIN_LOCKS_37 = 154;

const int _SC_REGEXP_37 = 155;

const int _SC_REGEX_VERSION_37 = 156;

const int _SC_SHELL_37 = 157;

const int _SC_SIGNALS_37 = 158;

const int _SC_SPAWN_37 = 159;

const int _SC_SPORADIC_SERVER_37 = 160;

const int _SC_THREAD_SPORADIC_SERVER_37 = 161;

const int _SC_SYSTEM_DATABASE_37 = 162;

const int _SC_SYSTEM_DATABASE_R_37 = 163;

const int _SC_TIMEOUTS_37 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_37 = 165;

const int _SC_USER_GROUPS_37 = 166;

const int _SC_USER_GROUPS_R_37 = 167;

const int _SC_2_PBS_37 = 168;

const int _SC_2_PBS_ACCOUNTING_37 = 169;

const int _SC_2_PBS_LOCATE_37 = 170;

const int _SC_2_PBS_MESSAGE_37 = 171;

const int _SC_2_PBS_TRACK_37 = 172;

const int _SC_SYMLOOP_MAX_37 = 173;

const int _SC_STREAMS_37 = 174;

const int _SC_2_PBS_CHECKPOINT_37 = 175;

const int _SC_V6_ILP32_OFF32_37 = 176;

const int _SC_V6_ILP32_OFFBIG_37 = 177;

const int _SC_V6_LP64_OFF64_37 = 178;

const int _SC_V6_LPBIG_OFFBIG_37 = 179;

const int _SC_HOST_NAME_MAX_37 = 180;

const int _SC_TRACE_37 = 181;

const int _SC_TRACE_EVENT_FILTER_37 = 182;

const int _SC_TRACE_INHERIT_37 = 183;

const int _SC_TRACE_LOG_37 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_37 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_37 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_37 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_37 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_37 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_37 = 190;

const int _SC_LEVEL2_CACHE_SIZE_37 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_37 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_37 = 193;

const int _SC_LEVEL3_CACHE_SIZE_37 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_37 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_37 = 196;

const int _SC_LEVEL4_CACHE_SIZE_37 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_37 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_37 = 199;

const int _SC_IPV6_37 = 235;

const int _SC_RAW_SOCKETS_37 = 236;

const int _SC_V7_ILP32_OFF32_37 = 237;

const int _SC_V7_ILP32_OFFBIG_37 = 238;

const int _SC_V7_LP64_OFF64_37 = 239;

const int _SC_V7_LPBIG_OFFBIG_37 = 240;

const int _SC_SS_REPL_MAX_37 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_37 = 242;

const int _SC_TRACE_NAME_MAX_37 = 243;

const int _SC_TRACE_SYS_MAX_37 = 244;

const int _SC_TRACE_USER_EVENT_MAX_37 = 245;

const int _SC_XOPEN_STREAMS_37 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_37 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_37 = 248;

const int _CS_PATH_37 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_37 = 1;

const int _CS_GNU_LIBC_VERSION_37 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_37 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_37 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_37 = 5;

const int _CS_LFS_CFLAGS_37 = 1000;

const int _CS_LFS_LDFLAGS_37 = 1001;

const int _CS_LFS_LIBS_37 = 1002;

const int _CS_LFS_LINTFLAGS_37 = 1003;

const int _CS_LFS64_CFLAGS_37 = 1004;

const int _CS_LFS64_LDFLAGS_37 = 1005;

const int _CS_LFS64_LIBS_37 = 1006;

const int _CS_LFS64_LINTFLAGS_37 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_37 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_37 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_37 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_37 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_37 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_37 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_37 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_37 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_37 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_37 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_37 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_37 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_37 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_37 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_37 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_37 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_37 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_37 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_37 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_37 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_37 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_37 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_37 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_37 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_37 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_37 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_37 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_37 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_37 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_37 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_37 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_37 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_37 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_37 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_37 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_37 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_37 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_37 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_37 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_37 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_37 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_37 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_37 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_37 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_37 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_37 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_37 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_37 = 1147;

const int _CS_V6_ENV_37 = 1148;

const int _CS_V7_ENV_37 = 1149;

const int _PC_LINK_MAX_38 = 0;

const int _PC_MAX_CANON_38 = 1;

const int _PC_MAX_INPUT_38 = 2;

const int _PC_NAME_MAX_38 = 3;

const int _PC_PATH_MAX_38 = 4;

const int _PC_PIPE_BUF_38 = 5;

const int _PC_CHOWN_RESTRICTED_38 = 6;

const int _PC_NO_TRUNC_38 = 7;

const int _PC_VDISABLE_38 = 8;

const int _PC_SYNC_IO_38 = 9;

const int _PC_ASYNC_IO_38 = 10;

const int _PC_PRIO_IO_38 = 11;

const int _PC_SOCK_MAXBUF_38 = 12;

const int _PC_FILESIZEBITS_38 = 13;

const int _PC_REC_INCR_XFER_SIZE_38 = 14;

const int _PC_REC_MAX_XFER_SIZE_38 = 15;

const int _PC_REC_MIN_XFER_SIZE_38 = 16;

const int _PC_REC_XFER_ALIGN_38 = 17;

const int _PC_ALLOC_SIZE_MIN_38 = 18;

const int _PC_SYMLINK_MAX_38 = 19;

const int _PC_2_SYMLINKS_38 = 20;

const int _SC_ARG_MAX_38 = 0;

const int _SC_CHILD_MAX_38 = 1;

const int _SC_CLK_TCK_38 = 2;

const int _SC_NGROUPS_MAX_38 = 3;

const int _SC_OPEN_MAX_38 = 4;

const int _SC_STREAM_MAX_38 = 5;

const int _SC_TZNAME_MAX_38 = 6;

const int _SC_JOB_CONTROL_38 = 7;

const int _SC_SAVED_IDS_38 = 8;

const int _SC_REALTIME_SIGNALS_38 = 9;

const int _SC_PRIORITY_SCHEDULING_38 = 10;

const int _SC_TIMERS_38 = 11;

const int _SC_ASYNCHRONOUS_IO_38 = 12;

const int _SC_PRIORITIZED_IO_38 = 13;

const int _SC_SYNCHRONIZED_IO_38 = 14;

const int _SC_FSYNC_38 = 15;

const int _SC_MAPPED_FILES_38 = 16;

const int _SC_MEMLOCK_38 = 17;

const int _SC_MEMLOCK_RANGE_38 = 18;

const int _SC_MEMORY_PROTECTION_38 = 19;

const int _SC_MESSAGE_PASSING_38 = 20;

const int _SC_SEMAPHORES_38 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_38 = 22;

const int _SC_AIO_LISTIO_MAX_38 = 23;

const int _SC_AIO_MAX_38 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_38 = 25;

const int _SC_DELAYTIMER_MAX_38 = 26;

const int _SC_MQ_OPEN_MAX_38 = 27;

const int _SC_MQ_PRIO_MAX_38 = 28;

const int _SC_VERSION_38 = 29;

const int _SC_PAGESIZE_38 = 30;

const int _SC_RTSIG_MAX_38 = 31;

const int _SC_SEM_NSEMS_MAX_38 = 32;

const int _SC_SEM_VALUE_MAX_38 = 33;

const int _SC_SIGQUEUE_MAX_38 = 34;

const int _SC_TIMER_MAX_38 = 35;

const int _SC_BC_BASE_MAX_38 = 36;

const int _SC_BC_DIM_MAX_38 = 37;

const int _SC_BC_SCALE_MAX_38 = 38;

const int _SC_BC_STRING_MAX_38 = 39;

const int _SC_COLL_WEIGHTS_MAX_38 = 40;

const int _SC_EQUIV_CLASS_MAX_38 = 41;

const int _SC_EXPR_NEST_MAX_38 = 42;

const int _SC_LINE_MAX_38 = 43;

const int _SC_RE_DUP_MAX_38 = 44;

const int _SC_CHARCLASS_NAME_MAX_38 = 45;

const int _SC_2_VERSION_38 = 46;

const int _SC_2_C_BIND_38 = 47;

const int _SC_2_C_DEV_38 = 48;

const int _SC_2_FORT_DEV_38 = 49;

const int _SC_2_FORT_RUN_38 = 50;

const int _SC_2_SW_DEV_38 = 51;

const int _SC_2_LOCALEDEF_38 = 52;

const int _SC_PII_38 = 53;

const int _SC_PII_XTI_38 = 54;

const int _SC_PII_SOCKET_38 = 55;

const int _SC_PII_INTERNET_38 = 56;

const int _SC_PII_OSI_38 = 57;

const int _SC_POLL_38 = 58;

const int _SC_SELECT_38 = 59;

const int _SC_UIO_MAXIOV_38 = 60;

const int _SC_IOV_MAX_38 = 60;

const int _SC_PII_INTERNET_STREAM_38 = 61;

const int _SC_PII_INTERNET_DGRAM_38 = 62;

const int _SC_PII_OSI_COTS_38 = 63;

const int _SC_PII_OSI_CLTS_38 = 64;

const int _SC_PII_OSI_M_38 = 65;

const int _SC_T_IOV_MAX_38 = 66;

const int _SC_THREADS_38 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_38 = 68;

const int _SC_GETGR_R_SIZE_MAX_38 = 69;

const int _SC_GETPW_R_SIZE_MAX_38 = 70;

const int _SC_LOGIN_NAME_MAX_38 = 71;

const int _SC_TTY_NAME_MAX_38 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_38 = 73;

const int _SC_THREAD_KEYS_MAX_38 = 74;

const int _SC_THREAD_STACK_MIN_38 = 75;

const int _SC_THREAD_THREADS_MAX_38 = 76;

const int _SC_THREAD_ATTR_STACKADDR_38 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_38 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_38 = 79;

const int _SC_THREAD_PRIO_INHERIT_38 = 80;

const int _SC_THREAD_PRIO_PROTECT_38 = 81;

const int _SC_THREAD_PROCESS_SHARED_38 = 82;

const int _SC_NPROCESSORS_CONF_38 = 83;

const int _SC_NPROCESSORS_ONLN_38 = 84;

const int _SC_PHYS_PAGES_38 = 85;

const int _SC_AVPHYS_PAGES_38 = 86;

const int _SC_ATEXIT_MAX_38 = 87;

const int _SC_PASS_MAX_38 = 88;

const int _SC_XOPEN_VERSION_38 = 89;

const int _SC_XOPEN_XCU_VERSION_38 = 90;

const int _SC_XOPEN_UNIX_38 = 91;

const int _SC_XOPEN_CRYPT_38 = 92;

const int _SC_XOPEN_ENH_I18N_38 = 93;

const int _SC_XOPEN_SHM_38 = 94;

const int _SC_2_CHAR_TERM_38 = 95;

const int _SC_2_C_VERSION_38 = 96;

const int _SC_2_UPE_38 = 97;

const int _SC_XOPEN_XPG2_38 = 98;

const int _SC_XOPEN_XPG3_38 = 99;

const int _SC_XOPEN_XPG4_38 = 100;

const int _SC_CHAR_BIT_38 = 101;

const int _SC_CHAR_MAX_38 = 102;

const int _SC_CHAR_MIN_38 = 103;

const int _SC_INT_MAX_38 = 104;

const int _SC_INT_MIN_38 = 105;

const int _SC_LONG_BIT_38 = 106;

const int _SC_WORD_BIT_38 = 107;

const int _SC_MB_LEN_MAX_38 = 108;

const int _SC_NZERO_38 = 109;

const int _SC_SSIZE_MAX_38 = 110;

const int _SC_SCHAR_MAX_38 = 111;

const int _SC_SCHAR_MIN_38 = 112;

const int _SC_SHRT_MAX_38 = 113;

const int _SC_SHRT_MIN_38 = 114;

const int _SC_UCHAR_MAX_38 = 115;

const int _SC_UINT_MAX_38 = 116;

const int _SC_ULONG_MAX_38 = 117;

const int _SC_USHRT_MAX_38 = 118;

const int _SC_NL_ARGMAX_38 = 119;

const int _SC_NL_LANGMAX_38 = 120;

const int _SC_NL_MSGMAX_38 = 121;

const int _SC_NL_NMAX_38 = 122;

const int _SC_NL_SETMAX_38 = 123;

const int _SC_NL_TEXTMAX_38 = 124;

const int _SC_XBS5_ILP32_OFF32_38 = 125;

const int _SC_XBS5_ILP32_OFFBIG_38 = 126;

const int _SC_XBS5_LP64_OFF64_38 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_38 = 128;

const int _SC_XOPEN_LEGACY_38 = 129;

const int _SC_XOPEN_REALTIME_38 = 130;

const int _SC_XOPEN_REALTIME_THREADS_38 = 131;

const int _SC_ADVISORY_INFO_38 = 132;

const int _SC_BARRIERS_38 = 133;

const int _SC_BASE_38 = 134;

const int _SC_C_LANG_SUPPORT_38 = 135;

const int _SC_C_LANG_SUPPORT_R_38 = 136;

const int _SC_CLOCK_SELECTION_38 = 137;

const int _SC_CPUTIME_38 = 138;

const int _SC_THREAD_CPUTIME_38 = 139;

const int _SC_DEVICE_IO_38 = 140;

const int _SC_DEVICE_SPECIFIC_38 = 141;

const int _SC_DEVICE_SPECIFIC_R_38 = 142;

const int _SC_FD_MGMT_38 = 143;

const int _SC_FIFO_38 = 144;

const int _SC_PIPE_38 = 145;

const int _SC_FILE_ATTRIBUTES_38 = 146;

const int _SC_FILE_LOCKING_38 = 147;

const int _SC_FILE_SYSTEM_38 = 148;

const int _SC_MONOTONIC_CLOCK_38 = 149;

const int _SC_MULTI_PROCESS_38 = 150;

const int _SC_SINGLE_PROCESS_38 = 151;

const int _SC_NETWORKING_38 = 152;

const int _SC_READER_WRITER_LOCKS_38 = 153;

const int _SC_SPIN_LOCKS_38 = 154;

const int _SC_REGEXP_38 = 155;

const int _SC_REGEX_VERSION_38 = 156;

const int _SC_SHELL_38 = 157;

const int _SC_SIGNALS_38 = 158;

const int _SC_SPAWN_38 = 159;

const int _SC_SPORADIC_SERVER_38 = 160;

const int _SC_THREAD_SPORADIC_SERVER_38 = 161;

const int _SC_SYSTEM_DATABASE_38 = 162;

const int _SC_SYSTEM_DATABASE_R_38 = 163;

const int _SC_TIMEOUTS_38 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_38 = 165;

const int _SC_USER_GROUPS_38 = 166;

const int _SC_USER_GROUPS_R_38 = 167;

const int _SC_2_PBS_38 = 168;

const int _SC_2_PBS_ACCOUNTING_38 = 169;

const int _SC_2_PBS_LOCATE_38 = 170;

const int _SC_2_PBS_MESSAGE_38 = 171;

const int _SC_2_PBS_TRACK_38 = 172;

const int _SC_SYMLOOP_MAX_38 = 173;

const int _SC_STREAMS_38 = 174;

const int _SC_2_PBS_CHECKPOINT_38 = 175;

const int _SC_V6_ILP32_OFF32_38 = 176;

const int _SC_V6_ILP32_OFFBIG_38 = 177;

const int _SC_V6_LP64_OFF64_38 = 178;

const int _SC_V6_LPBIG_OFFBIG_38 = 179;

const int _SC_HOST_NAME_MAX_38 = 180;

const int _SC_TRACE_38 = 181;

const int _SC_TRACE_EVENT_FILTER_38 = 182;

const int _SC_TRACE_INHERIT_38 = 183;

const int _SC_TRACE_LOG_38 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_38 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_38 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_38 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_38 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_38 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_38 = 190;

const int _SC_LEVEL2_CACHE_SIZE_38 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_38 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_38 = 193;

const int _SC_LEVEL3_CACHE_SIZE_38 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_38 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_38 = 196;

const int _SC_LEVEL4_CACHE_SIZE_38 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_38 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_38 = 199;

const int _SC_IPV6_38 = 235;

const int _SC_RAW_SOCKETS_38 = 236;

const int _SC_V7_ILP32_OFF32_38 = 237;

const int _SC_V7_ILP32_OFFBIG_38 = 238;

const int _SC_V7_LP64_OFF64_38 = 239;

const int _SC_V7_LPBIG_OFFBIG_38 = 240;

const int _SC_SS_REPL_MAX_38 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_38 = 242;

const int _SC_TRACE_NAME_MAX_38 = 243;

const int _SC_TRACE_SYS_MAX_38 = 244;

const int _SC_TRACE_USER_EVENT_MAX_38 = 245;

const int _SC_XOPEN_STREAMS_38 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_38 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_38 = 248;

const int _CS_PATH_38 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_38 = 1;

const int _CS_GNU_LIBC_VERSION_38 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_38 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_38 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_38 = 5;

const int _CS_LFS_CFLAGS_38 = 1000;

const int _CS_LFS_LDFLAGS_38 = 1001;

const int _CS_LFS_LIBS_38 = 1002;

const int _CS_LFS_LINTFLAGS_38 = 1003;

const int _CS_LFS64_CFLAGS_38 = 1004;

const int _CS_LFS64_LDFLAGS_38 = 1005;

const int _CS_LFS64_LIBS_38 = 1006;

const int _CS_LFS64_LINTFLAGS_38 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_38 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_38 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_38 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_38 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_38 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_38 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_38 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_38 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_38 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_38 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_38 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_38 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_38 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_38 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_38 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_38 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_38 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_38 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_38 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_38 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_38 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_38 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_38 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_38 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_38 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_38 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_38 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_38 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_38 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_38 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_38 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_38 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_38 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_38 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_38 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_38 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_38 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_38 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_38 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_38 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_38 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_38 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_38 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_38 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_38 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_38 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_38 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_38 = 1147;

const int _CS_V6_ENV_38 = 1148;

const int _CS_V7_ENV_38 = 1149;

const int _PC_LINK_MAX_39 = 0;

const int _PC_MAX_CANON_39 = 1;

const int _PC_MAX_INPUT_39 = 2;

const int _PC_NAME_MAX_39 = 3;

const int _PC_PATH_MAX_39 = 4;

const int _PC_PIPE_BUF_39 = 5;

const int _PC_CHOWN_RESTRICTED_39 = 6;

const int _PC_NO_TRUNC_39 = 7;

const int _PC_VDISABLE_39 = 8;

const int _PC_SYNC_IO_39 = 9;

const int _PC_ASYNC_IO_39 = 10;

const int _PC_PRIO_IO_39 = 11;

const int _PC_SOCK_MAXBUF_39 = 12;

const int _PC_FILESIZEBITS_39 = 13;

const int _PC_REC_INCR_XFER_SIZE_39 = 14;

const int _PC_REC_MAX_XFER_SIZE_39 = 15;

const int _PC_REC_MIN_XFER_SIZE_39 = 16;

const int _PC_REC_XFER_ALIGN_39 = 17;

const int _PC_ALLOC_SIZE_MIN_39 = 18;

const int _PC_SYMLINK_MAX_39 = 19;

const int _PC_2_SYMLINKS_39 = 20;

const int _SC_ARG_MAX_39 = 0;

const int _SC_CHILD_MAX_39 = 1;

const int _SC_CLK_TCK_39 = 2;

const int _SC_NGROUPS_MAX_39 = 3;

const int _SC_OPEN_MAX_39 = 4;

const int _SC_STREAM_MAX_39 = 5;

const int _SC_TZNAME_MAX_39 = 6;

const int _SC_JOB_CONTROL_39 = 7;

const int _SC_SAVED_IDS_39 = 8;

const int _SC_REALTIME_SIGNALS_39 = 9;

const int _SC_PRIORITY_SCHEDULING_39 = 10;

const int _SC_TIMERS_39 = 11;

const int _SC_ASYNCHRONOUS_IO_39 = 12;

const int _SC_PRIORITIZED_IO_39 = 13;

const int _SC_SYNCHRONIZED_IO_39 = 14;

const int _SC_FSYNC_39 = 15;

const int _SC_MAPPED_FILES_39 = 16;

const int _SC_MEMLOCK_39 = 17;

const int _SC_MEMLOCK_RANGE_39 = 18;

const int _SC_MEMORY_PROTECTION_39 = 19;

const int _SC_MESSAGE_PASSING_39 = 20;

const int _SC_SEMAPHORES_39 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_39 = 22;

const int _SC_AIO_LISTIO_MAX_39 = 23;

const int _SC_AIO_MAX_39 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_39 = 25;

const int _SC_DELAYTIMER_MAX_39 = 26;

const int _SC_MQ_OPEN_MAX_39 = 27;

const int _SC_MQ_PRIO_MAX_39 = 28;

const int _SC_VERSION_39 = 29;

const int _SC_PAGESIZE_39 = 30;

const int _SC_RTSIG_MAX_39 = 31;

const int _SC_SEM_NSEMS_MAX_39 = 32;

const int _SC_SEM_VALUE_MAX_39 = 33;

const int _SC_SIGQUEUE_MAX_39 = 34;

const int _SC_TIMER_MAX_39 = 35;

const int _SC_BC_BASE_MAX_39 = 36;

const int _SC_BC_DIM_MAX_39 = 37;

const int _SC_BC_SCALE_MAX_39 = 38;

const int _SC_BC_STRING_MAX_39 = 39;

const int _SC_COLL_WEIGHTS_MAX_39 = 40;

const int _SC_EQUIV_CLASS_MAX_39 = 41;

const int _SC_EXPR_NEST_MAX_39 = 42;

const int _SC_LINE_MAX_39 = 43;

const int _SC_RE_DUP_MAX_39 = 44;

const int _SC_CHARCLASS_NAME_MAX_39 = 45;

const int _SC_2_VERSION_39 = 46;

const int _SC_2_C_BIND_39 = 47;

const int _SC_2_C_DEV_39 = 48;

const int _SC_2_FORT_DEV_39 = 49;

const int _SC_2_FORT_RUN_39 = 50;

const int _SC_2_SW_DEV_39 = 51;

const int _SC_2_LOCALEDEF_39 = 52;

const int _SC_PII_39 = 53;

const int _SC_PII_XTI_39 = 54;

const int _SC_PII_SOCKET_39 = 55;

const int _SC_PII_INTERNET_39 = 56;

const int _SC_PII_OSI_39 = 57;

const int _SC_POLL_39 = 58;

const int _SC_SELECT_39 = 59;

const int _SC_UIO_MAXIOV_39 = 60;

const int _SC_IOV_MAX_39 = 60;

const int _SC_PII_INTERNET_STREAM_39 = 61;

const int _SC_PII_INTERNET_DGRAM_39 = 62;

const int _SC_PII_OSI_COTS_39 = 63;

const int _SC_PII_OSI_CLTS_39 = 64;

const int _SC_PII_OSI_M_39 = 65;

const int _SC_T_IOV_MAX_39 = 66;

const int _SC_THREADS_39 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_39 = 68;

const int _SC_GETGR_R_SIZE_MAX_39 = 69;

const int _SC_GETPW_R_SIZE_MAX_39 = 70;

const int _SC_LOGIN_NAME_MAX_39 = 71;

const int _SC_TTY_NAME_MAX_39 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_39 = 73;

const int _SC_THREAD_KEYS_MAX_39 = 74;

const int _SC_THREAD_STACK_MIN_39 = 75;

const int _SC_THREAD_THREADS_MAX_39 = 76;

const int _SC_THREAD_ATTR_STACKADDR_39 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_39 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_39 = 79;

const int _SC_THREAD_PRIO_INHERIT_39 = 80;

const int _SC_THREAD_PRIO_PROTECT_39 = 81;

const int _SC_THREAD_PROCESS_SHARED_39 = 82;

const int _SC_NPROCESSORS_CONF_39 = 83;

const int _SC_NPROCESSORS_ONLN_39 = 84;

const int _SC_PHYS_PAGES_39 = 85;

const int _SC_AVPHYS_PAGES_39 = 86;

const int _SC_ATEXIT_MAX_39 = 87;

const int _SC_PASS_MAX_39 = 88;

const int _SC_XOPEN_VERSION_39 = 89;

const int _SC_XOPEN_XCU_VERSION_39 = 90;

const int _SC_XOPEN_UNIX_39 = 91;

const int _SC_XOPEN_CRYPT_39 = 92;

const int _SC_XOPEN_ENH_I18N_39 = 93;

const int _SC_XOPEN_SHM_39 = 94;

const int _SC_2_CHAR_TERM_39 = 95;

const int _SC_2_C_VERSION_39 = 96;

const int _SC_2_UPE_39 = 97;

const int _SC_XOPEN_XPG2_39 = 98;

const int _SC_XOPEN_XPG3_39 = 99;

const int _SC_XOPEN_XPG4_39 = 100;

const int _SC_CHAR_BIT_39 = 101;

const int _SC_CHAR_MAX_39 = 102;

const int _SC_CHAR_MIN_39 = 103;

const int _SC_INT_MAX_39 = 104;

const int _SC_INT_MIN_39 = 105;

const int _SC_LONG_BIT_39 = 106;

const int _SC_WORD_BIT_39 = 107;

const int _SC_MB_LEN_MAX_39 = 108;

const int _SC_NZERO_39 = 109;

const int _SC_SSIZE_MAX_39 = 110;

const int _SC_SCHAR_MAX_39 = 111;

const int _SC_SCHAR_MIN_39 = 112;

const int _SC_SHRT_MAX_39 = 113;

const int _SC_SHRT_MIN_39 = 114;

const int _SC_UCHAR_MAX_39 = 115;

const int _SC_UINT_MAX_39 = 116;

const int _SC_ULONG_MAX_39 = 117;

const int _SC_USHRT_MAX_39 = 118;

const int _SC_NL_ARGMAX_39 = 119;

const int _SC_NL_LANGMAX_39 = 120;

const int _SC_NL_MSGMAX_39 = 121;

const int _SC_NL_NMAX_39 = 122;

const int _SC_NL_SETMAX_39 = 123;

const int _SC_NL_TEXTMAX_39 = 124;

const int _SC_XBS5_ILP32_OFF32_39 = 125;

const int _SC_XBS5_ILP32_OFFBIG_39 = 126;

const int _SC_XBS5_LP64_OFF64_39 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_39 = 128;

const int _SC_XOPEN_LEGACY_39 = 129;

const int _SC_XOPEN_REALTIME_39 = 130;

const int _SC_XOPEN_REALTIME_THREADS_39 = 131;

const int _SC_ADVISORY_INFO_39 = 132;

const int _SC_BARRIERS_39 = 133;

const int _SC_BASE_39 = 134;

const int _SC_C_LANG_SUPPORT_39 = 135;

const int _SC_C_LANG_SUPPORT_R_39 = 136;

const int _SC_CLOCK_SELECTION_39 = 137;

const int _SC_CPUTIME_39 = 138;

const int _SC_THREAD_CPUTIME_39 = 139;

const int _SC_DEVICE_IO_39 = 140;

const int _SC_DEVICE_SPECIFIC_39 = 141;

const int _SC_DEVICE_SPECIFIC_R_39 = 142;

const int _SC_FD_MGMT_39 = 143;

const int _SC_FIFO_39 = 144;

const int _SC_PIPE_39 = 145;

const int _SC_FILE_ATTRIBUTES_39 = 146;

const int _SC_FILE_LOCKING_39 = 147;

const int _SC_FILE_SYSTEM_39 = 148;

const int _SC_MONOTONIC_CLOCK_39 = 149;

const int _SC_MULTI_PROCESS_39 = 150;

const int _SC_SINGLE_PROCESS_39 = 151;

const int _SC_NETWORKING_39 = 152;

const int _SC_READER_WRITER_LOCKS_39 = 153;

const int _SC_SPIN_LOCKS_39 = 154;

const int _SC_REGEXP_39 = 155;

const int _SC_REGEX_VERSION_39 = 156;

const int _SC_SHELL_39 = 157;

const int _SC_SIGNALS_39 = 158;

const int _SC_SPAWN_39 = 159;

const int _SC_SPORADIC_SERVER_39 = 160;

const int _SC_THREAD_SPORADIC_SERVER_39 = 161;

const int _SC_SYSTEM_DATABASE_39 = 162;

const int _SC_SYSTEM_DATABASE_R_39 = 163;

const int _SC_TIMEOUTS_39 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_39 = 165;

const int _SC_USER_GROUPS_39 = 166;

const int _SC_USER_GROUPS_R_39 = 167;

const int _SC_2_PBS_39 = 168;

const int _SC_2_PBS_ACCOUNTING_39 = 169;

const int _SC_2_PBS_LOCATE_39 = 170;

const int _SC_2_PBS_MESSAGE_39 = 171;

const int _SC_2_PBS_TRACK_39 = 172;

const int _SC_SYMLOOP_MAX_39 = 173;

const int _SC_STREAMS_39 = 174;

const int _SC_2_PBS_CHECKPOINT_39 = 175;

const int _SC_V6_ILP32_OFF32_39 = 176;

const int _SC_V6_ILP32_OFFBIG_39 = 177;

const int _SC_V6_LP64_OFF64_39 = 178;

const int _SC_V6_LPBIG_OFFBIG_39 = 179;

const int _SC_HOST_NAME_MAX_39 = 180;

const int _SC_TRACE_39 = 181;

const int _SC_TRACE_EVENT_FILTER_39 = 182;

const int _SC_TRACE_INHERIT_39 = 183;

const int _SC_TRACE_LOG_39 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_39 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_39 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_39 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_39 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_39 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_39 = 190;

const int _SC_LEVEL2_CACHE_SIZE_39 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_39 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_39 = 193;

const int _SC_LEVEL3_CACHE_SIZE_39 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_39 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_39 = 196;

const int _SC_LEVEL4_CACHE_SIZE_39 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_39 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_39 = 199;

const int _SC_IPV6_39 = 235;

const int _SC_RAW_SOCKETS_39 = 236;

const int _SC_V7_ILP32_OFF32_39 = 237;

const int _SC_V7_ILP32_OFFBIG_39 = 238;

const int _SC_V7_LP64_OFF64_39 = 239;

const int _SC_V7_LPBIG_OFFBIG_39 = 240;

const int _SC_SS_REPL_MAX_39 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_39 = 242;

const int _SC_TRACE_NAME_MAX_39 = 243;

const int _SC_TRACE_SYS_MAX_39 = 244;

const int _SC_TRACE_USER_EVENT_MAX_39 = 245;

const int _SC_XOPEN_STREAMS_39 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_39 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_39 = 248;

const int _CS_PATH_39 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_39 = 1;

const int _CS_GNU_LIBC_VERSION_39 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_39 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_39 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_39 = 5;

const int _CS_LFS_CFLAGS_39 = 1000;

const int _CS_LFS_LDFLAGS_39 = 1001;

const int _CS_LFS_LIBS_39 = 1002;

const int _CS_LFS_LINTFLAGS_39 = 1003;

const int _CS_LFS64_CFLAGS_39 = 1004;

const int _CS_LFS64_LDFLAGS_39 = 1005;

const int _CS_LFS64_LIBS_39 = 1006;

const int _CS_LFS64_LINTFLAGS_39 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_39 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_39 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_39 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_39 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_39 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_39 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_39 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_39 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_39 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_39 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_39 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_39 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_39 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_39 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_39 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_39 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_39 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_39 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_39 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_39 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_39 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_39 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_39 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_39 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_39 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_39 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_39 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_39 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_39 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_39 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_39 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_39 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_39 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_39 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_39 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_39 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_39 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_39 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_39 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_39 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_39 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_39 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_39 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_39 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_39 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_39 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_39 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_39 = 1147;

const int _CS_V6_ENV_39 = 1148;

const int _CS_V7_ENV_39 = 1149;

const int MSG_OOB_1 = 1;

const int MSG_PEEK_1 = 2;

const int MSG_DONTROUTE_1 = 4;

const int MSG_CTRUNC_1 = 8;

const int MSG_PROXY_1 = 16;

const int MSG_TRUNC_1 = 32;

const int MSG_DONTWAIT_1 = 64;

const int MSG_EOR_1 = 128;

const int MSG_WAITALL_1 = 256;

const int MSG_FIN_1 = 512;

const int MSG_SYN_1 = 1024;

const int MSG_CONFIRM_1 = 2048;

const int MSG_RST_1 = 4096;

const int MSG_ERRQUEUE_1 = 8192;

const int MSG_NOSIGNAL_1 = 16384;

const int MSG_MORE_1 = 32768;

const int MSG_WAITFORONE_1 = 65536;

const int MSG_BATCH_1 = 262144;

const int MSG_ZEROCOPY_1 = 67108864;

const int MSG_FASTOPEN_1 = 536870912;

const int MSG_CMSG_CLOEXEC_1 = 1073741824;

const int SCM_RIGHTS_1 = 1;

const int SHUT_RD_1 = 0;

const int SHUT_WR_1 = 1;

const int SHUT_RDWR_1 = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_IGMP = 2;

const int IPPROTO_IPIP = 4;

const int IPPROTO_TCP = 6;

const int IPPROTO_EGP = 8;

const int IPPROTO_PUP = 12;

const int IPPROTO_UDP = 17;

const int IPPROTO_IDP = 22;

const int IPPROTO_TP = 29;

const int IPPROTO_DCCP = 33;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_RSVP = 46;

const int IPPROTO_GRE = 47;

const int IPPROTO_ESP = 50;

const int IPPROTO_AH = 51;

const int IPPROTO_MTP = 92;

const int IPPROTO_BEETPH = 94;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_PIM = 103;

const int IPPROTO_COMP = 108;

const int IPPROTO_SCTP = 132;

const int IPPROTO_UDPLITE = 136;

const int IPPROTO_MPLS = 137;

const int IPPROTO_RAW = 255;

const int IPPROTO_MAX = 256;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_NONE = 59;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_MH = 135;

const int IPPORT_ECHO = 7;

const int IPPORT_DISCARD = 9;

const int IPPORT_SYSTAT = 11;

const int IPPORT_DAYTIME = 13;

const int IPPORT_NETSTAT = 15;

const int IPPORT_FTP = 21;

const int IPPORT_TELNET = 23;

const int IPPORT_SMTP = 25;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_WHOIS = 43;

const int IPPORT_MTP = 57;

const int IPPORT_TFTP = 69;

const int IPPORT_RJE = 77;

const int IPPORT_FINGER = 79;

const int IPPORT_TTYLINK = 87;

const int IPPORT_SUPDUP = 95;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_WHOSERVER = 513;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_RESERVED = 1024;

const int IPPORT_USERRESERVED = 5000;

const int _ISupper_10 = 256;

const int _ISlower_10 = 512;

const int _ISalpha_10 = 1024;

const int _ISdigit_10 = 2048;

const int _ISxdigit_10 = 4096;

const int _ISspace_10 = 8192;

const int _ISprint_10 = 16384;

const int _ISgraph_10 = 32768;

const int _ISblank_10 = 1;

const int _IScntrl_10 = 2;

const int _ISpunct_10 = 4;

const int _ISalnum_10 = 8;

const int _ISupper_11 = 256;

const int _ISlower_11 = 512;

const int _ISalpha_11 = 1024;

const int _ISdigit_11 = 2048;

const int _ISxdigit_11 = 4096;

const int _ISspace_11 = 8192;

const int _ISprint_11 = 16384;

const int _ISgraph_11 = 32768;

const int _ISblank_11 = 1;

const int _IScntrl_11 = 2;

const int _ISpunct_11 = 4;

const int _ISalnum_11 = 8;

const int _PC_LINK_MAX_40 = 0;

const int _PC_MAX_CANON_40 = 1;

const int _PC_MAX_INPUT_40 = 2;

const int _PC_NAME_MAX_40 = 3;

const int _PC_PATH_MAX_40 = 4;

const int _PC_PIPE_BUF_40 = 5;

const int _PC_CHOWN_RESTRICTED_40 = 6;

const int _PC_NO_TRUNC_40 = 7;

const int _PC_VDISABLE_40 = 8;

const int _PC_SYNC_IO_40 = 9;

const int _PC_ASYNC_IO_40 = 10;

const int _PC_PRIO_IO_40 = 11;

const int _PC_SOCK_MAXBUF_40 = 12;

const int _PC_FILESIZEBITS_40 = 13;

const int _PC_REC_INCR_XFER_SIZE_40 = 14;

const int _PC_REC_MAX_XFER_SIZE_40 = 15;

const int _PC_REC_MIN_XFER_SIZE_40 = 16;

const int _PC_REC_XFER_ALIGN_40 = 17;

const int _PC_ALLOC_SIZE_MIN_40 = 18;

const int _PC_SYMLINK_MAX_40 = 19;

const int _PC_2_SYMLINKS_40 = 20;

const int _SC_ARG_MAX_40 = 0;

const int _SC_CHILD_MAX_40 = 1;

const int _SC_CLK_TCK_40 = 2;

const int _SC_NGROUPS_MAX_40 = 3;

const int _SC_OPEN_MAX_40 = 4;

const int _SC_STREAM_MAX_40 = 5;

const int _SC_TZNAME_MAX_40 = 6;

const int _SC_JOB_CONTROL_40 = 7;

const int _SC_SAVED_IDS_40 = 8;

const int _SC_REALTIME_SIGNALS_40 = 9;

const int _SC_PRIORITY_SCHEDULING_40 = 10;

const int _SC_TIMERS_40 = 11;

const int _SC_ASYNCHRONOUS_IO_40 = 12;

const int _SC_PRIORITIZED_IO_40 = 13;

const int _SC_SYNCHRONIZED_IO_40 = 14;

const int _SC_FSYNC_40 = 15;

const int _SC_MAPPED_FILES_40 = 16;

const int _SC_MEMLOCK_40 = 17;

const int _SC_MEMLOCK_RANGE_40 = 18;

const int _SC_MEMORY_PROTECTION_40 = 19;

const int _SC_MESSAGE_PASSING_40 = 20;

const int _SC_SEMAPHORES_40 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_40 = 22;

const int _SC_AIO_LISTIO_MAX_40 = 23;

const int _SC_AIO_MAX_40 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_40 = 25;

const int _SC_DELAYTIMER_MAX_40 = 26;

const int _SC_MQ_OPEN_MAX_40 = 27;

const int _SC_MQ_PRIO_MAX_40 = 28;

const int _SC_VERSION_40 = 29;

const int _SC_PAGESIZE_40 = 30;

const int _SC_RTSIG_MAX_40 = 31;

const int _SC_SEM_NSEMS_MAX_40 = 32;

const int _SC_SEM_VALUE_MAX_40 = 33;

const int _SC_SIGQUEUE_MAX_40 = 34;

const int _SC_TIMER_MAX_40 = 35;

const int _SC_BC_BASE_MAX_40 = 36;

const int _SC_BC_DIM_MAX_40 = 37;

const int _SC_BC_SCALE_MAX_40 = 38;

const int _SC_BC_STRING_MAX_40 = 39;

const int _SC_COLL_WEIGHTS_MAX_40 = 40;

const int _SC_EQUIV_CLASS_MAX_40 = 41;

const int _SC_EXPR_NEST_MAX_40 = 42;

const int _SC_LINE_MAX_40 = 43;

const int _SC_RE_DUP_MAX_40 = 44;

const int _SC_CHARCLASS_NAME_MAX_40 = 45;

const int _SC_2_VERSION_40 = 46;

const int _SC_2_C_BIND_40 = 47;

const int _SC_2_C_DEV_40 = 48;

const int _SC_2_FORT_DEV_40 = 49;

const int _SC_2_FORT_RUN_40 = 50;

const int _SC_2_SW_DEV_40 = 51;

const int _SC_2_LOCALEDEF_40 = 52;

const int _SC_PII_40 = 53;

const int _SC_PII_XTI_40 = 54;

const int _SC_PII_SOCKET_40 = 55;

const int _SC_PII_INTERNET_40 = 56;

const int _SC_PII_OSI_40 = 57;

const int _SC_POLL_40 = 58;

const int _SC_SELECT_40 = 59;

const int _SC_UIO_MAXIOV_40 = 60;

const int _SC_IOV_MAX_40 = 60;

const int _SC_PII_INTERNET_STREAM_40 = 61;

const int _SC_PII_INTERNET_DGRAM_40 = 62;

const int _SC_PII_OSI_COTS_40 = 63;

const int _SC_PII_OSI_CLTS_40 = 64;

const int _SC_PII_OSI_M_40 = 65;

const int _SC_T_IOV_MAX_40 = 66;

const int _SC_THREADS_40 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_40 = 68;

const int _SC_GETGR_R_SIZE_MAX_40 = 69;

const int _SC_GETPW_R_SIZE_MAX_40 = 70;

const int _SC_LOGIN_NAME_MAX_40 = 71;

const int _SC_TTY_NAME_MAX_40 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_40 = 73;

const int _SC_THREAD_KEYS_MAX_40 = 74;

const int _SC_THREAD_STACK_MIN_40 = 75;

const int _SC_THREAD_THREADS_MAX_40 = 76;

const int _SC_THREAD_ATTR_STACKADDR_40 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_40 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_40 = 79;

const int _SC_THREAD_PRIO_INHERIT_40 = 80;

const int _SC_THREAD_PRIO_PROTECT_40 = 81;

const int _SC_THREAD_PROCESS_SHARED_40 = 82;

const int _SC_NPROCESSORS_CONF_40 = 83;

const int _SC_NPROCESSORS_ONLN_40 = 84;

const int _SC_PHYS_PAGES_40 = 85;

const int _SC_AVPHYS_PAGES_40 = 86;

const int _SC_ATEXIT_MAX_40 = 87;

const int _SC_PASS_MAX_40 = 88;

const int _SC_XOPEN_VERSION_40 = 89;

const int _SC_XOPEN_XCU_VERSION_40 = 90;

const int _SC_XOPEN_UNIX_40 = 91;

const int _SC_XOPEN_CRYPT_40 = 92;

const int _SC_XOPEN_ENH_I18N_40 = 93;

const int _SC_XOPEN_SHM_40 = 94;

const int _SC_2_CHAR_TERM_40 = 95;

const int _SC_2_C_VERSION_40 = 96;

const int _SC_2_UPE_40 = 97;

const int _SC_XOPEN_XPG2_40 = 98;

const int _SC_XOPEN_XPG3_40 = 99;

const int _SC_XOPEN_XPG4_40 = 100;

const int _SC_CHAR_BIT_40 = 101;

const int _SC_CHAR_MAX_40 = 102;

const int _SC_CHAR_MIN_40 = 103;

const int _SC_INT_MAX_40 = 104;

const int _SC_INT_MIN_40 = 105;

const int _SC_LONG_BIT_40 = 106;

const int _SC_WORD_BIT_40 = 107;

const int _SC_MB_LEN_MAX_40 = 108;

const int _SC_NZERO_40 = 109;

const int _SC_SSIZE_MAX_40 = 110;

const int _SC_SCHAR_MAX_40 = 111;

const int _SC_SCHAR_MIN_40 = 112;

const int _SC_SHRT_MAX_40 = 113;

const int _SC_SHRT_MIN_40 = 114;

const int _SC_UCHAR_MAX_40 = 115;

const int _SC_UINT_MAX_40 = 116;

const int _SC_ULONG_MAX_40 = 117;

const int _SC_USHRT_MAX_40 = 118;

const int _SC_NL_ARGMAX_40 = 119;

const int _SC_NL_LANGMAX_40 = 120;

const int _SC_NL_MSGMAX_40 = 121;

const int _SC_NL_NMAX_40 = 122;

const int _SC_NL_SETMAX_40 = 123;

const int _SC_NL_TEXTMAX_40 = 124;

const int _SC_XBS5_ILP32_OFF32_40 = 125;

const int _SC_XBS5_ILP32_OFFBIG_40 = 126;

const int _SC_XBS5_LP64_OFF64_40 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_40 = 128;

const int _SC_XOPEN_LEGACY_40 = 129;

const int _SC_XOPEN_REALTIME_40 = 130;

const int _SC_XOPEN_REALTIME_THREADS_40 = 131;

const int _SC_ADVISORY_INFO_40 = 132;

const int _SC_BARRIERS_40 = 133;

const int _SC_BASE_40 = 134;

const int _SC_C_LANG_SUPPORT_40 = 135;

const int _SC_C_LANG_SUPPORT_R_40 = 136;

const int _SC_CLOCK_SELECTION_40 = 137;

const int _SC_CPUTIME_40 = 138;

const int _SC_THREAD_CPUTIME_40 = 139;

const int _SC_DEVICE_IO_40 = 140;

const int _SC_DEVICE_SPECIFIC_40 = 141;

const int _SC_DEVICE_SPECIFIC_R_40 = 142;

const int _SC_FD_MGMT_40 = 143;

const int _SC_FIFO_40 = 144;

const int _SC_PIPE_40 = 145;

const int _SC_FILE_ATTRIBUTES_40 = 146;

const int _SC_FILE_LOCKING_40 = 147;

const int _SC_FILE_SYSTEM_40 = 148;

const int _SC_MONOTONIC_CLOCK_40 = 149;

const int _SC_MULTI_PROCESS_40 = 150;

const int _SC_SINGLE_PROCESS_40 = 151;

const int _SC_NETWORKING_40 = 152;

const int _SC_READER_WRITER_LOCKS_40 = 153;

const int _SC_SPIN_LOCKS_40 = 154;

const int _SC_REGEXP_40 = 155;

const int _SC_REGEX_VERSION_40 = 156;

const int _SC_SHELL_40 = 157;

const int _SC_SIGNALS_40 = 158;

const int _SC_SPAWN_40 = 159;

const int _SC_SPORADIC_SERVER_40 = 160;

const int _SC_THREAD_SPORADIC_SERVER_40 = 161;

const int _SC_SYSTEM_DATABASE_40 = 162;

const int _SC_SYSTEM_DATABASE_R_40 = 163;

const int _SC_TIMEOUTS_40 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_40 = 165;

const int _SC_USER_GROUPS_40 = 166;

const int _SC_USER_GROUPS_R_40 = 167;

const int _SC_2_PBS_40 = 168;

const int _SC_2_PBS_ACCOUNTING_40 = 169;

const int _SC_2_PBS_LOCATE_40 = 170;

const int _SC_2_PBS_MESSAGE_40 = 171;

const int _SC_2_PBS_TRACK_40 = 172;

const int _SC_SYMLOOP_MAX_40 = 173;

const int _SC_STREAMS_40 = 174;

const int _SC_2_PBS_CHECKPOINT_40 = 175;

const int _SC_V6_ILP32_OFF32_40 = 176;

const int _SC_V6_ILP32_OFFBIG_40 = 177;

const int _SC_V6_LP64_OFF64_40 = 178;

const int _SC_V6_LPBIG_OFFBIG_40 = 179;

const int _SC_HOST_NAME_MAX_40 = 180;

const int _SC_TRACE_40 = 181;

const int _SC_TRACE_EVENT_FILTER_40 = 182;

const int _SC_TRACE_INHERIT_40 = 183;

const int _SC_TRACE_LOG_40 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_40 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_40 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_40 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_40 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_40 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_40 = 190;

const int _SC_LEVEL2_CACHE_SIZE_40 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_40 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_40 = 193;

const int _SC_LEVEL3_CACHE_SIZE_40 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_40 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_40 = 196;

const int _SC_LEVEL4_CACHE_SIZE_40 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_40 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_40 = 199;

const int _SC_IPV6_40 = 235;

const int _SC_RAW_SOCKETS_40 = 236;

const int _SC_V7_ILP32_OFF32_40 = 237;

const int _SC_V7_ILP32_OFFBIG_40 = 238;

const int _SC_V7_LP64_OFF64_40 = 239;

const int _SC_V7_LPBIG_OFFBIG_40 = 240;

const int _SC_SS_REPL_MAX_40 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_40 = 242;

const int _SC_TRACE_NAME_MAX_40 = 243;

const int _SC_TRACE_SYS_MAX_40 = 244;

const int _SC_TRACE_USER_EVENT_MAX_40 = 245;

const int _SC_XOPEN_STREAMS_40 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_40 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_40 = 248;

const int _CS_PATH_40 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_40 = 1;

const int _CS_GNU_LIBC_VERSION_40 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_40 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_40 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_40 = 5;

const int _CS_LFS_CFLAGS_40 = 1000;

const int _CS_LFS_LDFLAGS_40 = 1001;

const int _CS_LFS_LIBS_40 = 1002;

const int _CS_LFS_LINTFLAGS_40 = 1003;

const int _CS_LFS64_CFLAGS_40 = 1004;

const int _CS_LFS64_LDFLAGS_40 = 1005;

const int _CS_LFS64_LIBS_40 = 1006;

const int _CS_LFS64_LINTFLAGS_40 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_40 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_40 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_40 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_40 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_40 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_40 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_40 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_40 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_40 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_40 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_40 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_40 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_40 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_40 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_40 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_40 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_40 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_40 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_40 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_40 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_40 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_40 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_40 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_40 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_40 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_40 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_40 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_40 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_40 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_40 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_40 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_40 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_40 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_40 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_40 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_40 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_40 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_40 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_40 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_40 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_40 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_40 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_40 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_40 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_40 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_40 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_40 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_40 = 1147;

const int _CS_V6_ENV_40 = 1148;

const int _CS_V7_ENV_40 = 1149;

const int _ISupper_12 = 256;

const int _ISlower_12 = 512;

const int _ISalpha_12 = 1024;

const int _ISdigit_12 = 2048;

const int _ISxdigit_12 = 4096;

const int _ISspace_12 = 8192;

const int _ISprint_12 = 16384;

const int _ISgraph_12 = 32768;

const int _ISblank_12 = 1;

const int _IScntrl_12 = 2;

const int _ISpunct_12 = 4;

const int _ISalnum_12 = 8;

const int _PC_LINK_MAX_41 = 0;

const int _PC_MAX_CANON_41 = 1;

const int _PC_MAX_INPUT_41 = 2;

const int _PC_NAME_MAX_41 = 3;

const int _PC_PATH_MAX_41 = 4;

const int _PC_PIPE_BUF_41 = 5;

const int _PC_CHOWN_RESTRICTED_41 = 6;

const int _PC_NO_TRUNC_41 = 7;

const int _PC_VDISABLE_41 = 8;

const int _PC_SYNC_IO_41 = 9;

const int _PC_ASYNC_IO_41 = 10;

const int _PC_PRIO_IO_41 = 11;

const int _PC_SOCK_MAXBUF_41 = 12;

const int _PC_FILESIZEBITS_41 = 13;

const int _PC_REC_INCR_XFER_SIZE_41 = 14;

const int _PC_REC_MAX_XFER_SIZE_41 = 15;

const int _PC_REC_MIN_XFER_SIZE_41 = 16;

const int _PC_REC_XFER_ALIGN_41 = 17;

const int _PC_ALLOC_SIZE_MIN_41 = 18;

const int _PC_SYMLINK_MAX_41 = 19;

const int _PC_2_SYMLINKS_41 = 20;

const int _SC_ARG_MAX_41 = 0;

const int _SC_CHILD_MAX_41 = 1;

const int _SC_CLK_TCK_41 = 2;

const int _SC_NGROUPS_MAX_41 = 3;

const int _SC_OPEN_MAX_41 = 4;

const int _SC_STREAM_MAX_41 = 5;

const int _SC_TZNAME_MAX_41 = 6;

const int _SC_JOB_CONTROL_41 = 7;

const int _SC_SAVED_IDS_41 = 8;

const int _SC_REALTIME_SIGNALS_41 = 9;

const int _SC_PRIORITY_SCHEDULING_41 = 10;

const int _SC_TIMERS_41 = 11;

const int _SC_ASYNCHRONOUS_IO_41 = 12;

const int _SC_PRIORITIZED_IO_41 = 13;

const int _SC_SYNCHRONIZED_IO_41 = 14;

const int _SC_FSYNC_41 = 15;

const int _SC_MAPPED_FILES_41 = 16;

const int _SC_MEMLOCK_41 = 17;

const int _SC_MEMLOCK_RANGE_41 = 18;

const int _SC_MEMORY_PROTECTION_41 = 19;

const int _SC_MESSAGE_PASSING_41 = 20;

const int _SC_SEMAPHORES_41 = 21;

const int _SC_SHARED_MEMORY_OBJECTS_41 = 22;

const int _SC_AIO_LISTIO_MAX_41 = 23;

const int _SC_AIO_MAX_41 = 24;

const int _SC_AIO_PRIO_DELTA_MAX_41 = 25;

const int _SC_DELAYTIMER_MAX_41 = 26;

const int _SC_MQ_OPEN_MAX_41 = 27;

const int _SC_MQ_PRIO_MAX_41 = 28;

const int _SC_VERSION_41 = 29;

const int _SC_PAGESIZE_41 = 30;

const int _SC_RTSIG_MAX_41 = 31;

const int _SC_SEM_NSEMS_MAX_41 = 32;

const int _SC_SEM_VALUE_MAX_41 = 33;

const int _SC_SIGQUEUE_MAX_41 = 34;

const int _SC_TIMER_MAX_41 = 35;

const int _SC_BC_BASE_MAX_41 = 36;

const int _SC_BC_DIM_MAX_41 = 37;

const int _SC_BC_SCALE_MAX_41 = 38;

const int _SC_BC_STRING_MAX_41 = 39;

const int _SC_COLL_WEIGHTS_MAX_41 = 40;

const int _SC_EQUIV_CLASS_MAX_41 = 41;

const int _SC_EXPR_NEST_MAX_41 = 42;

const int _SC_LINE_MAX_41 = 43;

const int _SC_RE_DUP_MAX_41 = 44;

const int _SC_CHARCLASS_NAME_MAX_41 = 45;

const int _SC_2_VERSION_41 = 46;

const int _SC_2_C_BIND_41 = 47;

const int _SC_2_C_DEV_41 = 48;

const int _SC_2_FORT_DEV_41 = 49;

const int _SC_2_FORT_RUN_41 = 50;

const int _SC_2_SW_DEV_41 = 51;

const int _SC_2_LOCALEDEF_41 = 52;

const int _SC_PII_41 = 53;

const int _SC_PII_XTI_41 = 54;

const int _SC_PII_SOCKET_41 = 55;

const int _SC_PII_INTERNET_41 = 56;

const int _SC_PII_OSI_41 = 57;

const int _SC_POLL_41 = 58;

const int _SC_SELECT_41 = 59;

const int _SC_UIO_MAXIOV_41 = 60;

const int _SC_IOV_MAX_41 = 60;

const int _SC_PII_INTERNET_STREAM_41 = 61;

const int _SC_PII_INTERNET_DGRAM_41 = 62;

const int _SC_PII_OSI_COTS_41 = 63;

const int _SC_PII_OSI_CLTS_41 = 64;

const int _SC_PII_OSI_M_41 = 65;

const int _SC_T_IOV_MAX_41 = 66;

const int _SC_THREADS_41 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS_41 = 68;

const int _SC_GETGR_R_SIZE_MAX_41 = 69;

const int _SC_GETPW_R_SIZE_MAX_41 = 70;

const int _SC_LOGIN_NAME_MAX_41 = 71;

const int _SC_TTY_NAME_MAX_41 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS_41 = 73;

const int _SC_THREAD_KEYS_MAX_41 = 74;

const int _SC_THREAD_STACK_MIN_41 = 75;

const int _SC_THREAD_THREADS_MAX_41 = 76;

const int _SC_THREAD_ATTR_STACKADDR_41 = 77;

const int _SC_THREAD_ATTR_STACKSIZE_41 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING_41 = 79;

const int _SC_THREAD_PRIO_INHERIT_41 = 80;

const int _SC_THREAD_PRIO_PROTECT_41 = 81;

const int _SC_THREAD_PROCESS_SHARED_41 = 82;

const int _SC_NPROCESSORS_CONF_41 = 83;

const int _SC_NPROCESSORS_ONLN_41 = 84;

const int _SC_PHYS_PAGES_41 = 85;

const int _SC_AVPHYS_PAGES_41 = 86;

const int _SC_ATEXIT_MAX_41 = 87;

const int _SC_PASS_MAX_41 = 88;

const int _SC_XOPEN_VERSION_41 = 89;

const int _SC_XOPEN_XCU_VERSION_41 = 90;

const int _SC_XOPEN_UNIX_41 = 91;

const int _SC_XOPEN_CRYPT_41 = 92;

const int _SC_XOPEN_ENH_I18N_41 = 93;

const int _SC_XOPEN_SHM_41 = 94;

const int _SC_2_CHAR_TERM_41 = 95;

const int _SC_2_C_VERSION_41 = 96;

const int _SC_2_UPE_41 = 97;

const int _SC_XOPEN_XPG2_41 = 98;

const int _SC_XOPEN_XPG3_41 = 99;

const int _SC_XOPEN_XPG4_41 = 100;

const int _SC_CHAR_BIT_41 = 101;

const int _SC_CHAR_MAX_41 = 102;

const int _SC_CHAR_MIN_41 = 103;

const int _SC_INT_MAX_41 = 104;

const int _SC_INT_MIN_41 = 105;

const int _SC_LONG_BIT_41 = 106;

const int _SC_WORD_BIT_41 = 107;

const int _SC_MB_LEN_MAX_41 = 108;

const int _SC_NZERO_41 = 109;

const int _SC_SSIZE_MAX_41 = 110;

const int _SC_SCHAR_MAX_41 = 111;

const int _SC_SCHAR_MIN_41 = 112;

const int _SC_SHRT_MAX_41 = 113;

const int _SC_SHRT_MIN_41 = 114;

const int _SC_UCHAR_MAX_41 = 115;

const int _SC_UINT_MAX_41 = 116;

const int _SC_ULONG_MAX_41 = 117;

const int _SC_USHRT_MAX_41 = 118;

const int _SC_NL_ARGMAX_41 = 119;

const int _SC_NL_LANGMAX_41 = 120;

const int _SC_NL_MSGMAX_41 = 121;

const int _SC_NL_NMAX_41 = 122;

const int _SC_NL_SETMAX_41 = 123;

const int _SC_NL_TEXTMAX_41 = 124;

const int _SC_XBS5_ILP32_OFF32_41 = 125;

const int _SC_XBS5_ILP32_OFFBIG_41 = 126;

const int _SC_XBS5_LP64_OFF64_41 = 127;

const int _SC_XBS5_LPBIG_OFFBIG_41 = 128;

const int _SC_XOPEN_LEGACY_41 = 129;

const int _SC_XOPEN_REALTIME_41 = 130;

const int _SC_XOPEN_REALTIME_THREADS_41 = 131;

const int _SC_ADVISORY_INFO_41 = 132;

const int _SC_BARRIERS_41 = 133;

const int _SC_BASE_41 = 134;

const int _SC_C_LANG_SUPPORT_41 = 135;

const int _SC_C_LANG_SUPPORT_R_41 = 136;

const int _SC_CLOCK_SELECTION_41 = 137;

const int _SC_CPUTIME_41 = 138;

const int _SC_THREAD_CPUTIME_41 = 139;

const int _SC_DEVICE_IO_41 = 140;

const int _SC_DEVICE_SPECIFIC_41 = 141;

const int _SC_DEVICE_SPECIFIC_R_41 = 142;

const int _SC_FD_MGMT_41 = 143;

const int _SC_FIFO_41 = 144;

const int _SC_PIPE_41 = 145;

const int _SC_FILE_ATTRIBUTES_41 = 146;

const int _SC_FILE_LOCKING_41 = 147;

const int _SC_FILE_SYSTEM_41 = 148;

const int _SC_MONOTONIC_CLOCK_41 = 149;

const int _SC_MULTI_PROCESS_41 = 150;

const int _SC_SINGLE_PROCESS_41 = 151;

const int _SC_NETWORKING_41 = 152;

const int _SC_READER_WRITER_LOCKS_41 = 153;

const int _SC_SPIN_LOCKS_41 = 154;

const int _SC_REGEXP_41 = 155;

const int _SC_REGEX_VERSION_41 = 156;

const int _SC_SHELL_41 = 157;

const int _SC_SIGNALS_41 = 158;

const int _SC_SPAWN_41 = 159;

const int _SC_SPORADIC_SERVER_41 = 160;

const int _SC_THREAD_SPORADIC_SERVER_41 = 161;

const int _SC_SYSTEM_DATABASE_41 = 162;

const int _SC_SYSTEM_DATABASE_R_41 = 163;

const int _SC_TIMEOUTS_41 = 164;

const int _SC_TYPED_MEMORY_OBJECTS_41 = 165;

const int _SC_USER_GROUPS_41 = 166;

const int _SC_USER_GROUPS_R_41 = 167;

const int _SC_2_PBS_41 = 168;

const int _SC_2_PBS_ACCOUNTING_41 = 169;

const int _SC_2_PBS_LOCATE_41 = 170;

const int _SC_2_PBS_MESSAGE_41 = 171;

const int _SC_2_PBS_TRACK_41 = 172;

const int _SC_SYMLOOP_MAX_41 = 173;

const int _SC_STREAMS_41 = 174;

const int _SC_2_PBS_CHECKPOINT_41 = 175;

const int _SC_V6_ILP32_OFF32_41 = 176;

const int _SC_V6_ILP32_OFFBIG_41 = 177;

const int _SC_V6_LP64_OFF64_41 = 178;

const int _SC_V6_LPBIG_OFFBIG_41 = 179;

const int _SC_HOST_NAME_MAX_41 = 180;

const int _SC_TRACE_41 = 181;

const int _SC_TRACE_EVENT_FILTER_41 = 182;

const int _SC_TRACE_INHERIT_41 = 183;

const int _SC_TRACE_LOG_41 = 184;

const int _SC_LEVEL1_ICACHE_SIZE_41 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC_41 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE_41 = 187;

const int _SC_LEVEL1_DCACHE_SIZE_41 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC_41 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE_41 = 190;

const int _SC_LEVEL2_CACHE_SIZE_41 = 191;

const int _SC_LEVEL2_CACHE_ASSOC_41 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE_41 = 193;

const int _SC_LEVEL3_CACHE_SIZE_41 = 194;

const int _SC_LEVEL3_CACHE_ASSOC_41 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE_41 = 196;

const int _SC_LEVEL4_CACHE_SIZE_41 = 197;

const int _SC_LEVEL4_CACHE_ASSOC_41 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE_41 = 199;

const int _SC_IPV6_41 = 235;

const int _SC_RAW_SOCKETS_41 = 236;

const int _SC_V7_ILP32_OFF32_41 = 237;

const int _SC_V7_ILP32_OFFBIG_41 = 238;

const int _SC_V7_LP64_OFF64_41 = 239;

const int _SC_V7_LPBIG_OFFBIG_41 = 240;

const int _SC_SS_REPL_MAX_41 = 241;

const int _SC_TRACE_EVENT_NAME_MAX_41 = 242;

const int _SC_TRACE_NAME_MAX_41 = 243;

const int _SC_TRACE_SYS_MAX_41 = 244;

const int _SC_TRACE_USER_EVENT_MAX_41 = 245;

const int _SC_XOPEN_STREAMS_41 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT_41 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT_41 = 248;

const int _CS_PATH_41 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS_41 = 1;

const int _CS_GNU_LIBC_VERSION_41 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION_41 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS_41 = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS_41 = 5;

const int _CS_LFS_CFLAGS_41 = 1000;

const int _CS_LFS_LDFLAGS_41 = 1001;

const int _CS_LFS_LIBS_41 = 1002;

const int _CS_LFS_LINTFLAGS_41 = 1003;

const int _CS_LFS64_CFLAGS_41 = 1004;

const int _CS_LFS64_LDFLAGS_41 = 1005;

const int _CS_LFS64_LIBS_41 = 1006;

const int _CS_LFS64_LINTFLAGS_41 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS_41 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS_41 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS_41 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS_41 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS_41 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS_41 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS_41 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS_41 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS_41 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS_41 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS_41 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS_41 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS_41 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS_41 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS_41 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS_41 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS_41 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS_41 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS_41 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS_41 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS_41 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS_41 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS_41 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS_41 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS_41 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS_41 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS_41 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS_41 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS_41 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS_41 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS_41 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS_41 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS_41 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS_41 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS_41 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS_41 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS_41 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS_41 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS_41 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS_41 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS_41 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS_41 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS_41 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS_41 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS_41 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS_41 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS_41 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS_41 = 1147;

const int _CS_V6_ENV_41 = 1148;

const int _CS_V7_ENV_41 = 1149;

const int PTHREAD_CREATE_JOINABLE_9 = 0;

const int PTHREAD_CREATE_DETACHED_9 = 1;

const int PTHREAD_MUTEX_TIMED_NP_9 = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP_9 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP_9 = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP_9 = 3;

const int PTHREAD_MUTEX_NORMAL_9 = 0;

const int PTHREAD_MUTEX_RECURSIVE_9 = 1;

const int PTHREAD_MUTEX_ERRORCHECK_9 = 2;

const int PTHREAD_MUTEX_DEFAULT_9 = 0;

const int PTHREAD_MUTEX_STALLED_9 = 0;

const int PTHREAD_MUTEX_STALLED_NP_9 = 0;

const int PTHREAD_MUTEX_ROBUST_9 = 1;

const int PTHREAD_MUTEX_ROBUST_NP_9 = 1;

const int PTHREAD_PRIO_NONE_9 = 0;

const int PTHREAD_PRIO_INHERIT_9 = 1;

const int PTHREAD_PRIO_PROTECT_9 = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP_9 = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP_9 = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP_9 = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP_9 = 0;

const int PTHREAD_INHERIT_SCHED_9 = 0;

const int PTHREAD_EXPLICIT_SCHED_9 = 1;

const int PTHREAD_SCOPE_SYSTEM_9 = 0;

const int PTHREAD_SCOPE_PROCESS_9 = 1;

const int PTHREAD_PROCESS_PRIVATE_9 = 0;

const int PTHREAD_PROCESS_SHARED_9 = 1;

const int PTHREAD_CANCEL_ENABLE_9 = 0;

const int PTHREAD_CANCEL_DISABLE_9 = 1;

const int PTHREAD_CANCEL_DEFERRED_9 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS_9 = 1;

typedef _c_XkbAddGeomKeyAlias = ffi.Pointer<XkbKeyAliasPtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XkbAddGeomKeyAlias = ffi.Pointer<XkbKeyAliasPtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XkbAddGeomColor = ffi.Pointer<XkbColorPtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbAddGeomColor = ffi.Pointer<XkbColorPtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XkbAddGeomOutline = ffi.Pointer<XkbOutlinePtr> Function(
  ffi.Pointer<XkbShapePtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAddGeomOutline = ffi.Pointer<XkbOutlinePtr> Function(
  ffi.Pointer<XkbShapePtr> arg0,
  int arg1,
);

typedef _c_XkbAddGeomShape = ffi.Pointer<XkbShapePtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 Atom,
  ffi.Int32 arg2,
);

typedef _dart_XkbAddGeomShape = ffi.Pointer<XkbShapePtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int Atom,
  int arg2,
);

typedef _c_XkbAddGeomKey = ffi.Pointer<XkbKeyPtr> Function(
  ffi.Pointer<XkbRowPtr> arg0,
);

typedef _dart_XkbAddGeomKey = ffi.Pointer<XkbKeyPtr> Function(
  ffi.Pointer<XkbRowPtr> arg0,
);

typedef _c_XkbAddGeomRow = ffi.Pointer<XkbRowPtr> Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAddGeomRow = ffi.Pointer<XkbRowPtr> Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  int arg1,
);

typedef _c_XkbAddGeomSection = ffi.Pointer<XkbSectionPtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 Atom,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XkbAddGeomSection = ffi.Pointer<XkbSectionPtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int Atom,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbAddGeomOverlay = ffi.Pointer<XkbOverlayPtr> Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  ffi.Int32 Atom,
  ffi.Int32 arg2,
);

typedef _dart_XkbAddGeomOverlay = ffi.Pointer<XkbOverlayPtr> Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  int Atom,
  int arg2,
);

typedef _c_XkbAddGeomOverlayRow = ffi.Pointer<XkbOverlayRowPtr> Function(
  ffi.Pointer<XkbOverlayPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbAddGeomOverlayRow = ffi.Pointer<XkbOverlayRowPtr> Function(
  ffi.Pointer<XkbOverlayPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbAddGeomOverlayKey = ffi.Pointer<XkbOverlayKeyPtr> Function(
  ffi.Pointer<XkbOverlayPtr> arg0,
  ffi.Pointer<XkbOverlayRowPtr> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_XkbAddGeomOverlayKey = ffi.Pointer<XkbOverlayKeyPtr> Function(
  ffi.Pointer<XkbOverlayPtr> arg0,
  ffi.Pointer<XkbOverlayRowPtr> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_XkbFreeGeomKeyAliases = ffi.Void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomKeyAliases = void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomColors = ffi.Void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomColors = void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomProperties = ffi.Void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomProperties = void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomOverlayKeys = ffi.Void Function(
  ffi.Pointer<XkbOverlayRowPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomOverlayKeys = void Function(
  ffi.Pointer<XkbOverlayRowPtr> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomOverlayRows = ffi.Void Function(
  ffi.Pointer<XkbOverlayPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomOverlayRows = void Function(
  ffi.Pointer<XkbOverlayPtr> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomOverlays = ffi.Void Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomOverlays = void Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomKeys = ffi.Void Function(
  ffi.Pointer<XkbRowPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomKeys = void Function(
  ffi.Pointer<XkbRowPtr> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomRows = ffi.Void Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomRows = void Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomSections = ffi.Void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomSections = void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomPoints = ffi.Void Function(
  ffi.Pointer<XkbOutlinePtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomPoints = void Function(
  ffi.Pointer<XkbOutlinePtr> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomOutlines = ffi.Void Function(
  ffi.Pointer<XkbShapePtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomOutlines = void Function(
  ffi.Pointer<XkbShapePtr> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeomShapes = ffi.Void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeomShapes = void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
  int arg2,
  int Bool,
);

typedef _c_XkbFreeGeometry = ffi.Void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 Bool,
);

typedef _dart_XkbFreeGeometry = void Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
  int Bool,
);

typedef _c_XkbAllocGeomProps = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomProps = int Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomKeyAliases = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomKeyAliases = int Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomColors = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomColors = int Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomShapes = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomShapes = int Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomSections = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomSections = int Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomOverlays = ffi.Int32 Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomOverlays = int Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomOverlayRows = ffi.Int32 Function(
  ffi.Pointer<XkbOverlayPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomOverlayRows = int Function(
  ffi.Pointer<XkbOverlayPtr> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomOverlayKeys = ffi.Int32 Function(
  ffi.Pointer<XkbOverlayRowPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomOverlayKeys = int Function(
  ffi.Pointer<XkbOverlayRowPtr> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomDoodads = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomDoodads = int Function(
  ffi.Pointer<_XkbGeometry> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomSectionDoodads = ffi.Int32 Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomSectionDoodads = int Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomOutlines = ffi.Int32 Function(
  ffi.Pointer<XkbShapePtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomOutlines = int Function(
  ffi.Pointer<XkbShapePtr> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomRows = ffi.Int32 Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomRows = int Function(
  ffi.Pointer<XkbSectionPtr> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomPoints = ffi.Int32 Function(
  ffi.Pointer<XkbOutlinePtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomPoints = int Function(
  ffi.Pointer<XkbOutlinePtr> arg0,
  int arg1,
);

typedef _c_XkbAllocGeomKeys = ffi.Int32 Function(
  ffi.Pointer<XkbRowPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbAllocGeomKeys = int Function(
  ffi.Pointer<XkbRowPtr> arg0,
  int arg1,
);

typedef _c_XkbAllocGeometry = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Pointer<XkbGeometrySizesPtr> arg1,
);

typedef _dart_XkbAllocGeometry = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Pointer<XkbGeometrySizesPtr> arg1,
);

typedef _c_XkbSetGeometry = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<_XkbGeometry> arg2,
);

typedef _dart_XkbSetGeometry = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
  ffi.Pointer<_XkbGeometry> arg2,
);

typedef _c_XkbComputeShapeTop = ffi.Int32 Function(
  ffi.Pointer<XkbShapePtr> arg0,
  ffi.Pointer<XkbBoundsPtr> arg1,
);

typedef _dart_XkbComputeShapeTop = int Function(
  ffi.Pointer<XkbShapePtr> arg0,
  ffi.Pointer<XkbBoundsPtr> arg1,
);

typedef _c_XkbComputeShapeBounds = ffi.Int32 Function(
  ffi.Pointer<XkbShapePtr> arg0,
);

typedef _dart_XkbComputeShapeBounds = int Function(
  ffi.Pointer<XkbShapePtr> arg0,
);

typedef _c_XkbComputeRowBounds = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<XkbSectionPtr> arg1,
  ffi.Pointer<XkbRowPtr> arg2,
);

typedef _dart_XkbComputeRowBounds = int Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<XkbSectionPtr> arg1,
  ffi.Pointer<XkbRowPtr> arg2,
);

typedef _c_XkbComputeSectionBounds = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<XkbSectionPtr> arg1,
);

typedef _dart_XkbComputeSectionBounds = int Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<XkbSectionPtr> arg1,
);

typedef _c_XkbFindOverlayForKey = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<XkbSectionPtr> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XkbFindOverlayForKey = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<XkbSectionPtr> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XkbGetGeometry = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
);

typedef _dart_XkbGetGeometry = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
);

typedef _c_XkbGetNamedGeometry = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
  ffi.Int32 Atom,
);

typedef _dart_XkbGetNamedGeometry = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
  int Atom,
);

typedef _c__XGetScanlinePad = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 depth,
);

typedef _dart__XGetScanlinePad = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int depth,
);

typedef _c__XGetBitsPerPixel = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 depth,
);

typedef _dart__XGetBitsPerPixel = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int depth,
);

typedef _c__XSetImage = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> srcimg,
  ffi.Pointer<ffi.Int32> dstimg,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart__XSetImage = int Function(
  ffi.Pointer<ffi.Int32> srcimg,
  ffi.Pointer<ffi.Int32> dstimg,
  int x,
  int y,
);

typedef _c__XReverse_Bytes = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> bpt,
  ffi.Int32 nb,
);

typedef _dart__XReverse_Bytes = int Function(
  ffi.Pointer<ffi.Uint8> bpt,
  int nb,
);

typedef _c__XInitImageFuncPtrs = ffi.Void Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _dart__XInitImageFuncPtrs = void Function(
  ffi.Pointer<ffi.Int32> image,
);

typedef _c___bswap_16 = ffi.Uint16 Function(
  ffi.Uint16 __bsx,
);

typedef _dart___bswap_16 = int Function(
  int __bsx,
);

typedef _c___bswap_32 = ffi.Uint32 Function(
  ffi.Uint32 __bsx,
);

typedef _dart___bswap_32 = int Function(
  int __bsx,
);

typedef _c___bswap_64 = ffi.Uint64 Function(
  ffi.Uint64 __bsx,
);

typedef _dart___bswap_64 = int Function(
  int __bsx,
);

typedef _c___uint16_identity = ffi.Uint16 Function(
  ffi.Uint16 __x,
);

typedef _dart___uint16_identity = int Function(
  int __x,
);

typedef _c___uint32_identity = ffi.Uint32 Function(
  ffi.Uint32 __x,
);

typedef _dart___uint32_identity = int Function(
  int __x,
);

typedef _c___uint64_identity = ffi.Uint64 Function(
  ffi.Uint64 __x,
);

typedef _dart___uint64_identity = int Function(
  int __x,
);

typedef _c_select = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _dart_select = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timeval> __timeout,
);

typedef _c_pselect = ffi.Int32 Function(
  ffi.Int32 __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

typedef _dart_pselect = int Function(
  int __nfds,
  ffi.Pointer<fd_set> __readfds,
  ffi.Pointer<fd_set> __writefds,
  ffi.Pointer<fd_set> __exceptfds,
  ffi.Pointer<timespec> __timeout,
  ffi.Pointer<__sigset_t> __sigmask,
);

typedef _c__Xmblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 len,
);

typedef _dart__Xmblen = int Function(
  ffi.Pointer<ffi.Int8> str,
  int len,
);

typedef _c_XLoadQueryFont = ffi.Pointer<XFontStruct> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XLoadQueryFont = ffi.Pointer<XFontStruct> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XQueryFont = ffi.Pointer<XFontStruct> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XQueryFont = ffi.Pointer<XFontStruct> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XGetMotionEvents = ffi.Pointer<XTimeCoord> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XGetMotionEvents = ffi.Pointer<XTimeCoord> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XDeleteModifiermapEntry = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<XModifierKeymap> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XDeleteModifiermapEntry = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<XModifierKeymap> arg0,
  int arg1,
  int arg2,
);

typedef _c_XGetModifierMapping = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XGetModifierMapping = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XInsertModifiermapEntry = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<XModifierKeymap> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XInsertModifiermapEntry = ffi.Pointer<XModifierKeymap> Function(
  ffi.Pointer<XModifierKeymap> arg0,
  int arg1,
  int arg2,
);

typedef _c_XNewModifiermap = ffi.Pointer<XModifierKeymap> Function(
  ffi.Int32 arg0,
);

typedef _dart_XNewModifiermap = ffi.Pointer<XModifierKeymap> Function(
  int arg0,
);

typedef _c_XCreateImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<Visual> arg1,
  ffi.Uint32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Uint32 arg6,
  ffi.Uint32 arg7,
  ffi.Int32 arg8,
  ffi.Int32 arg9,
);

typedef _dart_XCreateImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<Visual> arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int8> arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
);

typedef _c_XInitImage = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
);

typedef _dart_XInitImage = int Function(
  ffi.Pointer<XImage> arg0,
);

typedef _c_XGetImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint64 arg6,
  ffi.Int32 arg7,
);

typedef _dart_XGetImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
);

typedef _c_XGetSubImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint64 arg6,
  ffi.Int32 arg7,
  ffi.Pointer<XImage> arg8,
  ffi.Int32 arg9,
  ffi.Int32 arg10,
);

typedef _dart_XGetSubImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  ffi.Pointer<XImage> arg8,
  int arg9,
  int arg10,
);

typedef _c_XOpenDisplay = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XOpenDisplay = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XrmInitialize = ffi.Void Function();

typedef _dart_XrmInitialize = void Function();

typedef _c_XFetchBytes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XFetchBytes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XFetchBuffer = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XFetchBuffer = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_XGetAtomName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XGetAtomName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XGetAtomNames = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _dart_XGetAtomNames = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _c_XGetDefault = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XGetDefault = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XDisplayName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XDisplayName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XKeysymToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 arg0,
);

typedef _dart_XKeysymToString = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _c_XSynchronize = ffi.Pointer<ffi.NativeFunction<_typedefC_10>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XSynchronize = ffi.Pointer<ffi.NativeFunction<_typedefC_10>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _c_XSetAfterFunction = ffi.Pointer<ffi.NativeFunction<_typedefC_11>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> arg1,
);

typedef _dart_XSetAfterFunction = ffi.Pointer<ffi.NativeFunction<_typedefC_11>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> arg1,
);

typedef _c_XInternAtom = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XInternAtom = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XInternAtoms = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _dart_XInternAtoms = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _c_XCopyColormapAndFree = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XCopyColormapAndFree = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XCreateColormap = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<Visual> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XCreateColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<Visual> arg2,
  int arg3,
);

typedef _c_XCreatePixmapCursor = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
);

typedef _dart_XCreatePixmapCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
  int arg5,
  int arg6,
);

typedef _c_XCreateGlyphCursor = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<XColor> arg5,
  ffi.Pointer<XColor> arg6,
);

typedef _dart_XCreateGlyphCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XColor> arg5,
  ffi.Pointer<XColor> arg6,
);

typedef _c_XCreateFontCursor = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
);

typedef _dart_XCreateFontCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XLoadFont = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XLoadFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XCreateGC = ffi.Pointer<_XGC> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _dart_XCreateGC = ffi.Pointer<_XGC> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _c_XGContextFromGC = ffi.Uint64 Function(
  ffi.Pointer<_XGC> arg0,
);

typedef _dart_XGContextFromGC = int Function(
  ffi.Pointer<_XGC> arg0,
);

typedef _c_XFlushGC = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
);

typedef _dart_XFlushGC = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
);

typedef _c_XCreatePixmap = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XCreatePixmap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XCreateBitmapFromData = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XCreateBitmapFromData = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  int arg4,
);

typedef _c_XCreatePixmapFromBitmapData = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint64 arg5,
  ffi.Uint64 arg6,
  ffi.Uint32 arg7,
);

typedef _dart_XCreatePixmapFromBitmapData = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
);

typedef _c_XCreateSimpleWindow = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Uint64 arg7,
  ffi.Uint64 arg8,
);

typedef _dart_XCreateSimpleWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XGetSelectionOwner = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XGetSelectionOwner = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XCreateWindow = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Uint32 arg8,
  ffi.Pointer<Visual> arg9,
  ffi.Uint64 arg10,
  ffi.Pointer<XSetWindowAttributes> arg11,
);

typedef _dart_XCreateWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  ffi.Pointer<Visual> arg9,
  int arg10,
  ffi.Pointer<XSetWindowAttributes> arg11,
);

typedef _c_XListInstalledColormaps = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XListInstalledColormaps = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XListFonts = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XListFonts = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XListFontsWithInfo = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Pointer<XFontStruct>> arg4,
);

typedef _dart_XListFontsWithInfo = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Pointer<XFontStruct>> arg4,
);

typedef _c_XGetFontPath = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XGetFontPath = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XListExtensions = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XListExtensions = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XListProperties = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XListProperties = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XListHosts = ffi.Pointer<XHostAddress> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XListHosts = ffi.Pointer<XHostAddress> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XKeycodeToKeysym = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XKeycodeToKeysym = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XLookupKeysym = ffi.Uint64 Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XLookupKeysym = int Function(
  ffi.Pointer<XKeyEvent> arg0,
  int arg1,
);

typedef _c_XGetKeyboardMapping = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetKeyboardMapping = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XStringToKeysym = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XStringToKeysym = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XMaxRequestSize = ffi.Int64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XMaxRequestSize = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XExtendedMaxRequestSize = ffi.Int64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XExtendedMaxRequestSize = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XResourceManagerString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XResourceManagerString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XScreenResourceString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XScreenResourceString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDisplayMotionBufferSize = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDisplayMotionBufferSize = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XVisualIDFromVisual = ffi.Uint64 Function(
  ffi.Pointer<Visual> arg0,
);

typedef _dart_XVisualIDFromVisual = int Function(
  ffi.Pointer<Visual> arg0,
);

typedef _c_XInitThreads = ffi.Int32 Function();

typedef _dart_XInitThreads = int Function();

typedef _c_XLockDisplay = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XLockDisplay = void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XUnlockDisplay = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XUnlockDisplay = void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XInitExtension = ffi.Pointer<XExtCodes> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XInitExtension = ffi.Pointer<XExtCodes> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XAddExtension = ffi.Pointer<XExtCodes> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XAddExtension = ffi.Pointer<XExtCodes> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XFindOnExtensionList = ffi.Pointer<XExtData> Function(
  ffi.Pointer<ffi.Pointer<XExtData>> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XFindOnExtensionList = ffi.Pointer<XExtData> Function(
  ffi.Pointer<ffi.Pointer<XExtData>> arg0,
  int arg1,
);

typedef _c_XRootWindow = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XRootWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultRootWindow = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDefaultRootWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XRootWindowOfScreen = ffi.Uint64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XRootWindowOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDefaultVisual = ffi.Pointer<Visual> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDefaultVisual = ffi.Pointer<Visual> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultVisualOfScreen = ffi.Pointer<Visual> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDefaultVisualOfScreen = ffi.Pointer<Visual> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDefaultGC = ffi.Pointer<_XGC> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDefaultGC = ffi.Pointer<_XGC> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultGCOfScreen = ffi.Pointer<_XGC> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDefaultGCOfScreen = ffi.Pointer<_XGC> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XBlackPixel = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XBlackPixel = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XWhitePixel = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XWhitePixel = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XAllPlanes = ffi.Uint64 Function();

typedef _dart_XAllPlanes = int Function();

typedef _c_XBlackPixelOfScreen = ffi.Uint64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XBlackPixelOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XWhitePixelOfScreen = ffi.Uint64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XWhitePixelOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XNextRequest = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XNextRequest = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XLastKnownRequestProcessed = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XLastKnownRequestProcessed = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XServerVendor = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XServerVendor = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XDisplayString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDisplayString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XDefaultColormap = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDefaultColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultColormapOfScreen = ffi.Uint64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDefaultColormapOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDisplayOfScreen = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDisplayOfScreen = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XScreenOfDisplay = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XScreenOfDisplay = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultScreenOfDisplay = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDefaultScreenOfDisplay = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XEventMaskOfScreen = ffi.Int64 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XEventMaskOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XScreenNumberOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XScreenNumberOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef XErrorHandler = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XErrorEvent>,
);

typedef _c_XSetErrorHandler = ffi.Pointer<ffi.NativeFunction<XErrorHandler>>
    Function(
  ffi.Pointer<ffi.NativeFunction<XErrorHandler>> arg0,
);

typedef _dart_XSetErrorHandler = ffi.Pointer<ffi.NativeFunction<XErrorHandler>>
    Function(
  ffi.Pointer<ffi.NativeFunction<XErrorHandler>> arg0,
);

typedef XIOErrorHandler = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _c_XSetIOErrorHandler = ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>>
    Function(
  ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> arg0,
);

typedef _dart_XSetIOErrorHandler
    = ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> Function(
  ffi.Pointer<ffi.NativeFunction<XIOErrorHandler>> arg0,
);

typedef _c_XListPixmapFormats = ffi.Pointer<XPixmapFormatValues> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XListPixmapFormats = ffi.Pointer<XPixmapFormatValues> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XListDepths = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XListDepths = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XReconfigureWMWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<XWindowChanges> arg4,
);

typedef _dart_XReconfigureWMWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<XWindowChanges> arg4,
);

typedef _c_XGetWMProtocols = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetWMProtocols = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XSetWMProtocols = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetWMProtocols = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
);

typedef _c_XIconifyWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XIconifyWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XWithdrawWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XWithdrawWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XGetCommand = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetCommand = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XGetWMColormapWindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetWMColormapWindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XSetWMColormapWindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetWMColormapWindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
);

typedef _c_XFreeStringList = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart_XFreeStringList = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c_XSetTransientForHint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetTransientForHint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XActivateScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XActivateScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XAddHost = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
);

typedef _dart_XAddHost = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
);

typedef _c_XAddHosts = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XAddHosts = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
  int arg2,
);

typedef _c_XAddToExtensionList = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<XExtData>> arg0,
  ffi.Pointer<XExtData> arg1,
);

typedef _dart_XAddToExtensionList = int Function(
  ffi.Pointer<ffi.Pointer<XExtData>> arg0,
  ffi.Pointer<XExtData> arg1,
);

typedef _c_XAddToSaveSet = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XAddToSaveSet = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XAllocColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _dart_XAllocColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _c_XAllocColorCells = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<ffi.Uint64> arg5,
  ffi.Uint32 arg6,
);

typedef _dart_XAllocColorCells = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  int arg4,
  ffi.Pointer<ffi.Uint64> arg5,
  int arg6,
);

typedef _c_XAllocColorPlanes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
  ffi.Int32 arg7,
  ffi.Pointer<ffi.Uint64> arg8,
  ffi.Pointer<ffi.Uint64> arg9,
  ffi.Pointer<ffi.Uint64> arg10,
);

typedef _dart_XAllocColorPlanes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  ffi.Pointer<ffi.Uint64> arg8,
  ffi.Pointer<ffi.Uint64> arg9,
  ffi.Pointer<ffi.Uint64> arg10,
);

typedef _c_XAllocNamedColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
);

typedef _dart_XAllocNamedColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
);

typedef _c_XAllowEvents = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XAllowEvents = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XAutoRepeatOff = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XAutoRepeatOff = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XAutoRepeatOn = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XAutoRepeatOn = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XBell = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XBell = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XBitmapBitOrder = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XBitmapBitOrder = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XBitmapPad = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XBitmapPad = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XBitmapUnit = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XBitmapUnit = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XCellsOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XCellsOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XChangeActivePointerGrab = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XChangeActivePointerGrab = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XChangeGC = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _dart_XChangeGC = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _c_XChangeKeyboardControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XKeyboardControl> arg2,
);

typedef _dart_XChangeKeyboardControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XKeyboardControl> arg2,
);

typedef _c_XChangeKeyboardMapping = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XChangeKeyboardMapping = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  int arg4,
);

typedef _c_XChangePointerControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XChangePointerControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XChangeProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Uint8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XChangeProperty = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Uint8> arg6,
  int arg7,
);

typedef _c_XChangeSaveSet = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XChangeSaveSet = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XChangeWindowAttributes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XSetWindowAttributes> arg3,
);

typedef _dart_XChangeWindowAttributes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XSetWindowAttributes> arg3,
);

typedef _c_XCirculateSubwindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XCirculateSubwindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XCirculateSubwindowsDown = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XCirculateSubwindowsDown = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XCirculateSubwindowsUp = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XCirculateSubwindowsUp = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XClearArea = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XClearArea = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XClearWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XClearWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XCloseDisplay = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XCloseDisplay = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XConfigureWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XWindowChanges> arg3,
);

typedef _dart_XConfigureWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XWindowChanges> arg3,
);

typedef _c_XConnectionNumber = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XConnectionNumber = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XConvertSelection = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Uint64 arg4,
  ffi.Uint64 arg5,
);

typedef _dart_XConvertSelection = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XCopyArea = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Uint32 arg6,
  ffi.Uint32 arg7,
  ffi.Int32 arg8,
  ffi.Int32 arg9,
);

typedef _dart_XCopyArea = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
);

typedef _c_XCopyGC = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<_XGC> arg3,
);

typedef _dart_XCopyGC = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  ffi.Pointer<_XGC> arg3,
);

typedef _c_XCopyPlane = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Uint32 arg6,
  ffi.Uint32 arg7,
  ffi.Int32 arg8,
  ffi.Int32 arg9,
  ffi.Uint64 arg10,
);

typedef _dart_XCopyPlane = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
  int arg10,
);

typedef _c_XDefaultDepth = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDefaultDepth = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDefaultDepthOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDefaultDepthOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDefaultScreen = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDefaultScreen = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XDefineCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XDefineCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XDeleteProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XDeleteProperty = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XDestroyWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XDestroyWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDestroySubwindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XDestroySubwindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDoesBackingStore = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDoesBackingStore = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDoesSaveUnders = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XDoesSaveUnders = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XDisableAccessControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XDisableAccessControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XDisplayCells = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayCells = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayHeight = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayHeight = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayHeightMM = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayHeightMM = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayKeycodes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XDisplayKeycodes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XDisplayPlanes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayPlanes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayWidth = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayWidth = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDisplayWidthMM = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XDisplayWidthMM = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XDrawArc = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Int32 arg8,
);

typedef _dart_XDrawArc = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XDrawArcs = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XArc> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XDrawArcs = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XArc> arg3,
  int arg4,
);

typedef _c_XDrawImageString = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawImageString = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int8> arg5,
  int arg6,
);

typedef _c_XDrawImageString16 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XChar2b> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawImageString16 = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XChar2b> arg5,
  int arg6,
);

typedef _c_XDrawLine = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawLine = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XDrawLines = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XDrawLines = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  int arg4,
  int arg5,
);

typedef _c_XDrawPoint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XDrawPoint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
);

typedef _c_XDrawPoints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XDrawPoints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  int arg4,
  int arg5,
);

typedef _c_XDrawRectangle = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
);

typedef _dart_XDrawRectangle = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XDrawRectangles = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XDrawRectangles = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XRectangle> arg3,
  int arg4,
);

typedef _c_XDrawSegments = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XSegment> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XDrawSegments = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XSegment> arg3,
  int arg4,
);

typedef _c_XDrawString = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawString = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int8> arg5,
  int arg6,
);

typedef _c_XDrawString16 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XChar2b> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawString16 = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XChar2b> arg5,
  int arg6,
);

typedef _c_XDrawText = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XTextItem> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawText = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XTextItem> arg5,
  int arg6,
);

typedef _c_XDrawText16 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XTextItem16> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XDrawText16 = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XTextItem16> arg5,
  int arg6,
);

typedef _c_XEnableAccessControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XEnableAccessControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XEventsQueued = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XEventsQueued = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XFetchName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_XFetchName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_XFillArc = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Int32 arg8,
);

typedef _dart_XFillArc = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XFillArcs = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XArc> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XFillArcs = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XArc> arg3,
  int arg4,
);

typedef _c_XFillPolygon = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XFillPolygon = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XPoint> arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XFillRectangle = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
);

typedef _dart_XFillRectangle = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XFillRectangles = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XFillRectangles = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XRectangle> arg3,
  int arg4,
);

typedef _c_XFlush = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XFlush = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XForceScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XForceScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XFree = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_XFree = int Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_XFreeColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XFreeColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XFreeColors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XFreeColors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  int arg4,
);

typedef _c_XFreeCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XFreeCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XFreeExtensionList = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart_XFreeExtensionList = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c_XFreeFont = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XFontStruct> arg1,
);

typedef _dart_XFreeFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XFontStruct> arg1,
);

typedef _c_XFreeFontInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<XFontStruct> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XFreeFontInfo = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<XFontStruct> arg1,
  int arg2,
);

typedef _c_XFreeFontNames = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart_XFreeFontNames = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c_XFreeFontPath = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart_XFreeFontPath = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c_XFreeGC = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
);

typedef _dart_XFreeGC = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
);

typedef _c_XFreeModifiermap = ffi.Int32 Function(
  ffi.Pointer<XModifierKeymap> arg0,
);

typedef _dart_XFreeModifiermap = int Function(
  ffi.Pointer<XModifierKeymap> arg0,
);

typedef _c_XFreePixmap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XFreePixmap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XGeometry = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Int32 arg8,
  ffi.Pointer<ffi.Int32> arg9,
  ffi.Pointer<ffi.Int32> arg10,
  ffi.Pointer<ffi.Int32> arg11,
  ffi.Pointer<ffi.Int32> arg12,
);

typedef _dart_XGeometry = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  ffi.Pointer<ffi.Int32> arg9,
  ffi.Pointer<ffi.Int32> arg10,
  ffi.Pointer<ffi.Int32> arg11,
  ffi.Pointer<ffi.Int32> arg12,
);

typedef _c_XGetErrorDatabaseText = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Int32 arg5,
);

typedef _dart_XGetErrorDatabaseText = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  int arg5,
);

typedef _c_XGetErrorText = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XGetErrorText = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
);

typedef _c_XGetFontProperty = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_XGetFontProperty = int Function(
  ffi.Pointer<XFontStruct> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_XGetGCValues = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _dart_XGetGCValues = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  ffi.Pointer<XGCValues> arg3,
);

typedef _c_XGetGeometry = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  ffi.Pointer<ffi.Uint32> arg7,
  ffi.Pointer<ffi.Uint32> arg8,
);

typedef _dart_XGetGeometry = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  ffi.Pointer<ffi.Uint32> arg7,
  ffi.Pointer<ffi.Uint32> arg8,
);

typedef _c_XGetIconName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_XGetIconName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_XGetInputFocus = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XGetInputFocus = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XGetKeyboardControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XKeyboardState> arg1,
);

typedef _dart_XGetKeyboardControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XKeyboardState> arg1,
);

typedef _c_XGetPointerControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetPointerControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XGetPointerMapping = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XGetPointerMapping = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  int arg2,
);

typedef _c_XGetScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XGetScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XGetTransientForHint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_XGetTransientForHint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_XGetWindowProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Int64 arg3,
  ffi.Int64 arg4,
  ffi.Int32 arg5,
  ffi.Uint64 arg6,
  ffi.Pointer<ffi.Uint64> arg7,
  ffi.Pointer<ffi.Int32> arg8,
  ffi.Pointer<ffi.Uint64> arg9,
  ffi.Pointer<ffi.Uint64> arg10,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg11,
);

typedef _dart_XGetWindowProperty = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  ffi.Pointer<ffi.Uint64> arg7,
  ffi.Pointer<ffi.Int32> arg8,
  ffi.Pointer<ffi.Uint64> arg9,
  ffi.Pointer<ffi.Uint64> arg10,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg11,
);

typedef _c_XGetWindowAttributes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XWindowAttributes> arg2,
);

typedef _dart_XGetWindowAttributes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XWindowAttributes> arg2,
);

typedef _c_XGrabButton = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Int32 arg6,
  ffi.Int32 arg7,
  ffi.Uint64 arg8,
  ffi.Uint64 arg9,
);

typedef _dart_XGrabButton = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
);

typedef _c_XGrabKey = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XGrabKey = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XGrabKeyboard = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint64 arg5,
);

typedef _dart_XGrabKeyboard = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XGrabPointer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Uint64 arg6,
  ffi.Uint64 arg7,
  ffi.Uint64 arg8,
);

typedef _dart_XGrabPointer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XGrabServer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XGrabServer = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XHeightMMOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XHeightMMOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XHeightOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XHeightOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XImageByteOrder = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XImageByteOrder = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XInstallColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XInstallColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XKeysymToKeycode = ffi.Uint8 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XKeysymToKeycode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XKillClient = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XKillClient = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XLookupColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
);

typedef _dart_XLookupColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
  ffi.Pointer<XColor> arg4,
);

typedef _c_XLowerWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XLowerWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XMapRaised = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XMapRaised = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XMapSubwindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XMapSubwindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XMapWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XMapWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XMaxCmapsOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XMaxCmapsOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XMinCmapsOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XMinCmapsOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XMoveResizeWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
);

typedef _dart_XMoveResizeWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XMoveWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XMoveWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XNoOp = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XNoOp = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XParseColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
);

typedef _dart_XParseColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XColor> arg3,
);

typedef _c_XParseGeometry = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint32> arg4,
);

typedef _dart_XParseGeometry = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint32> arg4,
);

typedef _c_XPending = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XPending = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XPlanesOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XPlanesOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XProtocolRevision = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XProtocolRevision = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XProtocolVersion = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XProtocolVersion = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XPutImage = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XImage> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
  ffi.Int32 arg7,
  ffi.Uint32 arg8,
  ffi.Uint32 arg9,
);

typedef _dart_XPutImage = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Pointer<XImage> arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
  int arg9,
);

typedef _c_XQLength = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XQLength = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XQueryBestCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_XQueryBestCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_XQueryBestSize = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
);

typedef _dart_XQueryBestSize = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
);

typedef _c_XQueryBestStipple = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_XQueryBestStipple = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_XQueryBestTile = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_XQueryBestTile = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_XQueryColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _dart_XQueryColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _c_XQueryColors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XQueryColors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
  int arg3,
);

typedef _c_XQueryExtension = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XQueryExtension = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XQueryKeymap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XQueryKeymap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XQueryPointer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
  ffi.Pointer<ffi.Uint32> arg8,
);

typedef _dart_XQueryPointer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
  ffi.Pointer<ffi.Uint32> arg8,
);

typedef _c_XQueryTextExtents = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XCharStruct> arg7,
);

typedef _dart_XQueryTextExtents = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XCharStruct> arg7,
);

typedef _c_XQueryTextExtents16 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XChar2b> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XCharStruct> arg7,
);

typedef _dart_XQueryTextExtents16 = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XChar2b> arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XCharStruct> arg7,
);

typedef _c_XQueryTree = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_XQueryTree = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Uint64>> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_XRaiseWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XRaiseWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XReadBitmapFile = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint64> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
);

typedef _dart_XReadBitmapFile = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint64> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
);

typedef _c_XReadBitmapFileData = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XReadBitmapFileData = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XRebindKeysym = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint8> arg4,
  ffi.Int32 arg5,
);

typedef _dart_XRebindKeysym = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint8> arg4,
  int arg5,
);

typedef _c_XRecolorCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
  ffi.Pointer<XColor> arg3,
);

typedef _dart_XRecolorCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
  ffi.Pointer<XColor> arg3,
);

typedef _c_XRefreshKeyboardMapping = ffi.Int32 Function(
  ffi.Pointer<XMappingEvent> arg0,
);

typedef _dart_XRefreshKeyboardMapping = int Function(
  ffi.Pointer<XMappingEvent> arg0,
);

typedef _c_XRemoveFromSaveSet = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XRemoveFromSaveSet = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XRemoveHost = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
);

typedef _dart_XRemoveHost = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
);

typedef _c_XRemoveHosts = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XRemoveHosts = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XHostAddress> arg1,
  int arg2,
);

typedef _c_XReparentWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XReparentWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XResetScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XResetScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XResizeWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XResizeWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XRestackWindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XRestackWindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
);

typedef _c_XRotateBuffers = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XRotateBuffers = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XRotateWindowProperties = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XRotateWindowProperties = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  int arg4,
);

typedef _c_XScreenCount = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XScreenCount = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XSelectInput = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int64 arg2,
);

typedef _dart_XSelectInput = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetAccessControl = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XSetAccessControl = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XSetArcMode = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetArcMode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetBackground = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetBackground = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetClipMask = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetClipMask = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetClipOrigin = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetClipOrigin = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
);

typedef _c_XSetClipRectangles = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<XRectangle> arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XSetClipRectangles = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<XRectangle> arg4,
  int arg5,
  int arg6,
);

typedef _c_XSetCloseDownMode = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XSetCloseDownMode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XSetCommand = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetCommand = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  int arg3,
);

typedef _c_XSetDashes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XSetDashes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
);

typedef _c_XSetFillRule = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetFillRule = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetFillStyle = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetFillStyle = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetFont = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetFontPath = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetFontPath = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
);

typedef _c_XSetForeground = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetForeground = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetFunction = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetFunction = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetGraphicsExposures = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetGraphicsExposures = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetIconName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XSetIconName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XSetInputFocus = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetInputFocus = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XSetLineAttributes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XSetLineAttributes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XSetModifierMapping = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XModifierKeymap> arg1,
);

typedef _dart_XSetModifierMapping = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XModifierKeymap> arg1,
);

typedef _c_XSetPlaneMask = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetPlaneMask = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetPointerMapping = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetPointerMapping = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
  int arg2,
);

typedef _c_XSetScreenSaver = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XSetScreenSaver = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XSetSelectionOwner = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetSelectionOwner = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XSetState = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
  ffi.Uint64 arg5,
);

typedef _dart_XSetState = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XSetStipple = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetStipple = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetSubwindowMode = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XSetSubwindowMode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetTSOrigin = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetTSOrigin = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
  int arg3,
);

typedef _c_XSetTile = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetTile = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  int arg2,
);

typedef _c_XSetWindowBackground = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowBackground = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowBackgroundPixmap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowBackgroundPixmap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowBorder = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowBorder = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowBorderPixmap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowBorderPixmap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowBorderWidth = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XSetWindowBorderWidth = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XSetWindowColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
);

typedef _dart_XSetWindowColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XStoreBuffer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XStoreBuffer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_XStoreBytes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XStoreBytes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XStoreColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _dart_XStoreColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
);

typedef _c_XStoreColors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XColor> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XStoreColors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XColor> arg2,
  int arg3,
);

typedef _c_XStoreName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XStoreName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XStoreNamedColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Uint64 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XStoreNamedColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  int arg4,
);

typedef _c_XSync = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XSync = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XTextExtents = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<XCharStruct> arg6,
);

typedef _dart_XTextExtents = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<XCharStruct> arg6,
);

typedef _c_XTextExtents16 = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<XCharStruct> arg6,
);

typedef _dart_XTextExtents16 = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<XCharStruct> arg6,
);

typedef _c_XTextWidth = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XTextWidth = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XTextWidth16 = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XTextWidth16 = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  int arg2,
);

typedef _c_XTranslateCoordinates = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Uint64> arg7,
);

typedef _dart_XTranslateCoordinates = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Uint64> arg7,
);

typedef _c_XUndefineCursor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUndefineCursor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUngrabButton = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XUngrabButton = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XUngrabKey = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XUngrabKey = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XUngrabKeyboard = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUngrabKeyboard = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUngrabPointer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUngrabPointer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUngrabServer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XUngrabServer = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XUninstallColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUninstallColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUnloadFont = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUnloadFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUnmapSubwindows = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUnmapSubwindows = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XUnmapWindow = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XUnmapWindow = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XVendorRelease = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XVendorRelease = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XWarpPointer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Uint32 arg5,
  ffi.Uint32 arg6,
  ffi.Int32 arg7,
  ffi.Int32 arg8,
);

typedef _dart_XWarpPointer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  int arg8,
);

typedef _c_XWidthMMOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XWidthMMOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XWidthOfScreen = ffi.Int32 Function(
  ffi.Pointer<Screen> arg0,
);

typedef _dart_XWidthOfScreen = int Function(
  ffi.Pointer<Screen> arg0,
);

typedef _c_XWriteBitmapFile = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart_XWriteBitmapFile = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XSupportsLocale = ffi.Int32 Function();

typedef _dart_XSupportsLocale = int Function();

typedef _c_XSetLocaleModifiers = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XSetLocaleModifiers = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XOpenOM = ffi.Pointer<_XOM> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_XOpenOM = ffi.Pointer<_XOM> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_XCloseOM = ffi.Int32 Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XCloseOM = int Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XSetOMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XSetOMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XGetOMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XGetOMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XDisplayOfOM = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XDisplayOfOM = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XLocaleOfOM = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XLocaleOfOM = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XCreateOC = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _dart_XCreateOC = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XOM> arg0,
);

typedef _c_XDestroyOC = ffi.Void Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XDestroyOC = void Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XOMOfOC = ffi.Pointer<_XOM> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XOMOfOC = ffi.Pointer<_XOM> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XSetOCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XSetOCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XGetOCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XGetOCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XCreateFontSet = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
);

typedef _dart_XCreateFontSet = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
);

typedef _c_XFreeFontSet = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XOC> arg1,
);

typedef _dart_XFreeFontSet = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XOC> arg1,
);

typedef _c_XFontsOfFontSet = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
);

typedef _dart_XFontsOfFontSet = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<XFontStruct>>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg2,
);

typedef _c_XBaseFontNameListOfFontSet = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XBaseFontNameListOfFontSet = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XLocaleOfFontSet = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XLocaleOfFontSet = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XContextDependentDrawing = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XContextDependentDrawing = int Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XDirectionalDependentDrawing = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XDirectionalDependentDrawing = int Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XContextualDrawing = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XContextualDrawing = int Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XExtentsOfFontSet = ffi.Pointer<XFontSetExtents> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _dart_XExtentsOfFontSet = ffi.Pointer<XFontSetExtents> Function(
  ffi.Pointer<_XOC> arg0,
);

typedef _c_XmbTextEscapement = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XmbTextEscapement = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XwcTextEscapement = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XwcTextEscapement = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_Xutf8TextEscapement = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_Xutf8TextEscapement = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_XmbTextExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _dart_XmbTextExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _c_XwcTextExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _dart_XwcTextExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _c_Xutf8TextExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _dart_Xutf8TextExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
);

typedef _c_XmbTextPerCharExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _dart_XmbTextPerCharExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _c_XwcTextPerCharExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _dart_XwcTextPerCharExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _c_Xutf8TextPerCharExtents = ffi.Int32 Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _dart_Xutf8TextPerCharExtents = int Function(
  ffi.Pointer<_XOC> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<XRectangle> arg3,
  ffi.Pointer<XRectangle> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XRectangle> arg7,
  ffi.Pointer<XRectangle> arg8,
);

typedef _c_XmbDrawText = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XmbTextItem> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XmbDrawText = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XmbTextItem> arg5,
  int arg6,
);

typedef _c_XwcDrawText = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XwcTextItem> arg5,
  ffi.Int32 arg6,
);

typedef _dart_XwcDrawText = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XwcTextItem> arg5,
  int arg6,
);

typedef _c_Xutf8DrawText = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XGC> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XmbTextItem> arg5,
  ffi.Int32 arg6,
);

typedef _dart_Xutf8DrawText = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XGC> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XmbTextItem> arg5,
  int arg6,
);

typedef _c_XmbDrawString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XmbDrawString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_XwcDrawString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XwcDrawString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  int arg7,
);

typedef _c_Xutf8DrawString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_Xutf8DrawString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_XmbDrawImageString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XmbDrawImageString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_XwcDrawImageString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Int32 arg7,
);

typedef _dart_XwcDrawImageString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
  int arg7,
);

typedef _c_Xutf8DrawImageString = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Pointer<ffi.Int8> arg6,
  ffi.Int32 arg7,
);

typedef _dart_Xutf8DrawImageString = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<_XOC> arg2,
  ffi.Pointer<_XGC> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Int8> arg6,
  int arg7,
);

typedef _c_XOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_XOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_XCloseIM = ffi.Int32 Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XCloseIM = int Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XGetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XGetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XSetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XSetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XDisplayOfIM = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XDisplayOfIM = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XLocaleOfIM = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XLocaleOfIM = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XCreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart_XCreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c_XDestroyIC = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XDestroyIC = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XSetICFocus = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XSetICFocus = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XUnsetICFocus = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XUnsetICFocus = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XwcResetIC = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XwcResetIC = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XmbResetIC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XmbResetIC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_Xutf8ResetIC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_Xutf8ResetIC = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XSetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XSetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XGetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XGetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XIMOfIC = ffi.Pointer<_XIM> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart_XIMOfIC = ffi.Pointer<_XIM> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c_XmbLookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XmbLookupString = int Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XwcLookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XwcLookupString = int Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_Xutf8LookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_Xutf8LookupString = int Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XVaCreateNestedList = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 arg0,
);

typedef _dart_XVaCreateNestedList = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef XIDProc = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XRegisterIMInstantiateCallback = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _dart_XRegisterIMInstantiateCallback = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _c_XUnregisterIMInstantiateCallback = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _dart_XUnregisterIMInstantiateCallback = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _c_XInternalConnectionNumbers = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XInternalConnectionNumbers = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XProcessInternalConnection = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XProcessInternalConnection = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef XConnectionWatchProc = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _c_XAddConnectionWatch = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XAddConnectionWatch = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XRemoveConnectionWatch = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XRemoveConnectionWatch = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.NativeFunction<XConnectionWatchProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XSetAuthorization = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetAuthorization = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
);

typedef _c__Xmbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart__Xmbtowc = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__Xwctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart__Xwctomb = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_XGetEventData = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
);

typedef _dart_XGetEventData = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
);

typedef _c_XFreeEventData = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
);

typedef _dart_XFreeEventData = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
);

typedef _c_XcmsAddColorSpace = ffi.Int32 Function(
  ffi.Pointer<XcmsColorSpace> arg0,
);

typedef _dart_XcmsAddColorSpace = int Function(
  ffi.Pointer<XcmsColorSpace> arg0,
);

typedef _c_XcmsAddFunctionSet = ffi.Int32 Function(
  ffi.Pointer<XcmsFunctionSet> arg0,
);

typedef _dart_XcmsAddFunctionSet = int Function(
  ffi.Pointer<XcmsFunctionSet> arg0,
);

typedef _c_XcmsAllocColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XcmsAllocColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsAllocNamedColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XcmsColor> arg3,
  ffi.Pointer<XcmsColor> arg4,
  ffi.Uint64 arg5,
);

typedef _dart_XcmsAllocNamedColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XcmsColor> arg3,
  ffi.Pointer<XcmsColor> arg4,
  int arg5,
);

typedef _c_XcmsCCCOfColormap = ffi.Pointer<XcmsCCCRec> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XcmsCCCOfColormap = ffi.Pointer<XcmsCCCRec> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XcmsCIELabClipab = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsCIELabClipab = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsCIELabClipL = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsCIELabClipL = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsCIELabClipLab = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsCIELabClipLab = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsCIELabQueryMaxC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsCIELabQueryMaxC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsCIELabQueryMaxL = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsCIELabQueryMaxL = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsCIELabQueryMaxLC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsCIELabQueryMaxLC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsCIELabQueryMinL = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsCIELabQueryMinL = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsCIELabToCIEXYZ = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIELabToCIEXYZ = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsCIELabWhiteShiftColors = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<XcmsColor> arg4,
  ffi.Uint32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
);

typedef _dart_XcmsCIELabWhiteShiftColors = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
  ffi.Pointer<XcmsColor> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
);

typedef _c_XcmsCIELuvClipL = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsCIELuvClipL = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsCIELuvClipLuv = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsCIELuvClipLuv = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsCIELuvClipuv = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsCIELuvClipuv = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsCIELuvQueryMaxC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsCIELuvQueryMaxC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsCIELuvQueryMaxL = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsCIELuvQueryMaxL = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsCIELuvQueryMaxLC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsCIELuvQueryMaxLC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsCIELuvQueryMinL = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsCIELuvQueryMinL = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsCIELuvToCIEuvY = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIELuvToCIEuvY = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsCIELuvWhiteShiftColors = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<XcmsColor> arg4,
  ffi.Uint32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
);

typedef _dart_XcmsCIELuvWhiteShiftColors = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
  ffi.Pointer<XcmsColor> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
);

typedef _c_XcmsCIEXYZToCIELab = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIEXYZToCIELab = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsCIEXYZToCIEuvY = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIEXYZToCIEuvY = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsCIEXYZToCIExyY = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIEXYZToCIExyY = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsCIEXYZToRGBi = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XcmsCIEXYZToRGBi = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XcmsCIEuvYToCIELuv = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIEuvYToCIELuv = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsCIEuvYToCIEXYZ = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIEuvYToCIEXYZ = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsCIEuvYToTekHVC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIEuvYToTekHVC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsCIExyYToCIEXYZ = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsCIExyYToCIEXYZ = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsClientWhitePointOfCCC = ffi.Pointer<XcmsColor> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _dart_XcmsClientWhitePointOfCCC = ffi.Pointer<XcmsColor> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _c_XcmsConvertColors = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsConvertColors = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef XcmsCompressionProc = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec>,
  ffi.Pointer<XcmsColor>,
  ffi.Uint32,
  ffi.Uint32,
  ffi.Pointer<ffi.Int32>,
);

typedef XcmsWhiteAdjustProc = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec>,
  ffi.Pointer<XcmsColor>,
  ffi.Pointer<XcmsColor>,
  ffi.Uint64,
  ffi.Pointer<XcmsColor>,
  ffi.Uint32,
  ffi.Pointer<ffi.Int32>,
);

typedef _c_XcmsCreateCCC = ffi.Pointer<XcmsCCCRec> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<Visual> arg2,
  ffi.Pointer<XcmsColor> arg3,
  ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> arg6,
  ffi.Pointer<ffi.Int8> arg7,
);

typedef _dart_XcmsCreateCCC = ffi.Pointer<XcmsCCCRec> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<Visual> arg2,
  ffi.Pointer<XcmsColor> arg3,
  ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
  ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> arg6,
  ffi.Pointer<ffi.Int8> arg7,
);

typedef _c_XcmsDefaultCCC = ffi.Pointer<XcmsCCCRec> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XcmsDefaultCCC = ffi.Pointer<XcmsCCCRec> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XcmsDisplayOfCCC = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _dart_XcmsDisplayOfCCC = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _c_XcmsFormatOfPrefix = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XcmsFormatOfPrefix = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XcmsFreeCCC = ffi.Void Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _dart_XcmsFreeCCC = void Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _c_XcmsLookupColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XcmsColor> arg3,
  ffi.Pointer<XcmsColor> arg4,
  ffi.Uint64 arg5,
);

typedef _dart_XcmsLookupColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XcmsColor> arg3,
  ffi.Pointer<XcmsColor> arg4,
  int arg5,
);

typedef _c_XcmsPrefixOfFormat = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 arg0,
);

typedef _dart_XcmsPrefixOfFormat = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_XcmsQueryBlack = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsQueryBlack = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsQueryBlue = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsQueryBlue = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsQueryColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XcmsQueryColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsQueryColors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XcmsQueryColors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
  int arg4,
);

typedef _c_XcmsQueryGreen = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsQueryGreen = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsQueryRed = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsQueryRed = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsQueryWhite = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsQueryWhite = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsRGBiToCIEXYZ = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XcmsRGBiToCIEXYZ = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XcmsRGBiToRGB = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XcmsRGBiToRGB = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XcmsRGBToRGBi = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XcmsRGBToRGBi = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XcmsScreenNumberOfCCC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _dart_XcmsScreenNumberOfCCC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _c_XcmsScreenWhitePointOfCCC = ffi.Pointer<XcmsColor> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _dart_XcmsScreenWhitePointOfCCC = ffi.Pointer<XcmsColor> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _c_XcmsSetCCCOfColormap = ffi.Pointer<XcmsCCCRec> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsCCCRec> arg2,
);

typedef _dart_XcmsSetCCCOfColormap = ffi.Pointer<XcmsCCCRec> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XcmsCCCRec> arg2,
);

typedef _c_XcmsSetCompressionProc
    = ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XcmsSetCompressionProc
    = ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<ffi.NativeFunction<XcmsCompressionProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XcmsSetWhiteAdjustProc
    = ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XcmsSetWhiteAdjustProc
    = ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<ffi.NativeFunction<XcmsWhiteAdjustProc>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XcmsSetWhitePoint = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
);

typedef _dart_XcmsSetWhitePoint = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
);

typedef _c_XcmsStoreColor = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsStoreColor = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsStoreColors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsStoreColors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsTekHVCClipC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsTekHVCClipC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsTekHVCClipV = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsTekHVCClipV = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsTekHVCClipVC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart_XcmsTekHVCClipVC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c_XcmsTekHVCQueryMaxC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsTekHVCQueryMaxC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsTekHVCQueryMaxV = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsTekHVCQueryMaxV = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsTekHVCQueryMaxVC = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _dart_XcmsTekHVCQueryMaxVC = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  ffi.Pointer<XcmsColor> arg2,
);

typedef _c_XcmsTekHVCQueryMaxVSamples = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsTekHVCQueryMaxVSamples = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsTekHVCQueryMinV = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Double arg1,
  ffi.Double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _dart_XcmsTekHVCQueryMinV = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  double arg1,
  double arg2,
  ffi.Pointer<XcmsColor> arg3,
);

typedef _c_XcmsTekHVCToCIEuvY = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XcmsTekHVCToCIEuvY = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_XcmsTekHVCWhiteShiftColors = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<XcmsColor> arg4,
  ffi.Uint32 arg5,
  ffi.Pointer<ffi.Int32> arg6,
);

typedef _dart_XcmsTekHVCWhiteShiftColors = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
  ffi.Pointer<XcmsColor> arg4,
  int arg5,
  ffi.Pointer<ffi.Int32> arg6,
);

typedef _c_XcmsVisualOfCCC = ffi.Pointer<Visual> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _dart_XcmsVisualOfCCC = ffi.Pointer<Visual> Function(
  ffi.Pointer<XcmsCCCRec> arg0,
);

typedef _c_XkbIgnoreExtension = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_XkbIgnoreExtension = int Function(
  int arg0,
);

typedef _c_XkbOpenDisplay = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XkbOpenDisplay = ffi.Pointer<_XDisplay> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XkbQueryExtension = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XkbQueryExtension = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XkbUseExtension = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XkbUseExtension = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XkbLibraryVersion = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XkbLibraryVersion = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XkbSetXlibControls = ffi.Uint32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbSetXlibControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbGetXlibControls = ffi.Uint32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XkbGetXlibControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XkbXlibControlsImplemented = ffi.Uint32 Function();

typedef _dart_XkbXlibControlsImplemented = int Function();

typedef XkbInternAtomFunc = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef XkbGetAtomNameFunc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay>,
  ffi.Uint64,
);

typedef _c_XkbSetAtomFuncs = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<XkbInternAtomFunc>> arg0,
  ffi.Pointer<ffi.NativeFunction<XkbGetAtomNameFunc>> arg1,
);

typedef _dart_XkbSetAtomFuncs = void Function(
  ffi.Pointer<ffi.NativeFunction<XkbInternAtomFunc>> arg0,
  ffi.Pointer<ffi.NativeFunction<XkbGetAtomNameFunc>> arg1,
);

typedef _c_XkbKeycodeToKeysym = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XkbKeycodeToKeysym = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbKeysymToModifiers = ffi.Uint32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XkbKeysymToModifiers = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XkbLookupKeySym = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint8 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _dart_XkbLookupKeySym = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _c_XkbLookupKeyBinding = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XkbLookupKeyBinding = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XkbTranslateKeyCode = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint8 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _dart_XkbTranslateKeyCode = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Uint32> arg3,
  ffi.Pointer<ffi.Uint64> arg4,
);

typedef _c_XkbTranslateKeySym = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Int32 arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XkbTranslateKeySym = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XkbSetAutoRepeatRate = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XkbSetAutoRepeatRate = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbGetAutoRepeatRate = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint32> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef _dart_XkbGetAutoRepeatRate = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint32> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef _c_XkbChangeEnabledControls = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XkbChangeEnabledControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbDeviceBell = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Uint64 arg6,
);

typedef _dart_XkbDeviceBell = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XkbForceDeviceBell = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XkbForceDeviceBell = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbDeviceBellEvent = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Uint64 arg6,
);

typedef _dart_XkbDeviceBellEvent = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c_XkbBell = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XkbBell = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbForceBell = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart_XkbForceBell = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XkbBellEvent = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XkbBellEvent = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbSelectEvents = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XkbSelectEvents = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbSelectEventDetails = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint64 arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XkbSelectEventDetails = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbNoteMapChanges = ffi.Void Function(
  ffi.Pointer<XkbMapChangesPtr> arg0,
  ffi.Pointer<XkbMapNotifyEvent> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbNoteMapChanges = void Function(
  ffi.Pointer<XkbMapChangesPtr> arg0,
  ffi.Pointer<XkbMapNotifyEvent> arg1,
  int arg2,
);

typedef _c_XkbNoteNameChanges = ffi.Void Function(
  ffi.Pointer<XkbNameChangesPtr> arg0,
  ffi.Pointer<XkbNamesNotifyEvent> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbNoteNameChanges = void Function(
  ffi.Pointer<XkbNameChangesPtr> arg0,
  ffi.Pointer<XkbNamesNotifyEvent> arg1,
  int arg2,
);

typedef _c_XkbGetIndicatorState = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_XkbGetIndicatorState = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_XkbGetDeviceIndicatorState = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
);

typedef _dart_XkbGetDeviceIndicatorState = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
);

typedef _c_XkbGetIndicatorMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbGetIndicatorMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbSetIndicatorMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbSetIndicatorMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbGetNamedIndicator = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<XkbIndicatorMapPtr> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_XkbGetNamedIndicator = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<XkbIndicatorMapPtr> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_XkbGetNamedDeviceIndicator = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint64 arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XkbIndicatorMapPtr> arg7,
  ffi.Pointer<ffi.Int32> arg8,
);

typedef _dart_XkbGetNamedDeviceIndicator = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<XkbIndicatorMapPtr> arg7,
  ffi.Pointer<ffi.Int32> arg8,
);

typedef _c_XkbSetNamedIndicator = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XkbIndicatorMapPtr> arg5,
);

typedef _dart_XkbSetNamedIndicator = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XkbIndicatorMapPtr> arg5,
);

typedef _c_XkbSetNamedDeviceIndicator = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint64 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
  ffi.Int32 arg7,
  ffi.Pointer<XkbIndicatorMapPtr> arg8,
);

typedef _dart_XkbSetNamedDeviceIndicator = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
  int arg7,
  ffi.Pointer<XkbIndicatorMapPtr> arg8,
);

typedef _c_XkbLockModifiers = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XkbLockModifiers = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbLatchModifiers = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XkbLatchModifiers = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbLockGroup = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbLockGroup = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbLatchGroup = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbLatchGroup = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbSetServerInternalMods = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
);

typedef _dart_XkbSetServerInternalMods = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XkbSetIgnoreLockMods = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
);

typedef _dart_XkbSetIgnoreLockMods = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XkbVirtualModsToReal = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_XkbVirtualModsToReal = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_XkbComputeEffectiveMap = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Pointer<XkbKeyTypePtr> arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _dart_XkbComputeEffectiveMap = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Pointer<XkbKeyTypePtr> arg1,
  ffi.Pointer<ffi.Uint8> arg2,
);

typedef _c_XkbInitCanonicalKeyTypes = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbInitCanonicalKeyTypes = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbAllocKeyboard = ffi.Pointer<XkbDescPtr> Function();

typedef _dart_XkbAllocKeyboard = ffi.Pointer<XkbDescPtr> Function();

typedef _c_XkbFreeKeyboard = ffi.Void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbFreeKeyboard = void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbAllocClientMap = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbAllocClientMap = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbAllocServerMap = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbAllocServerMap = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbFreeClientMap = ffi.Void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbFreeClientMap = void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbFreeServerMap = ffi.Void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbFreeServerMap = void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbAddKeyType = ffi.Pointer<XkbKeyTypePtr> Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XkbAddKeyType = ffi.Pointer<XkbKeyTypePtr> Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbAllocIndicatorMaps = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
);

typedef _dart_XkbAllocIndicatorMaps = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
);

typedef _c_XkbFreeIndicatorMaps = ffi.Void Function(
  ffi.Pointer<XkbDescPtr> arg0,
);

typedef _dart_XkbFreeIndicatorMaps = void Function(
  ffi.Pointer<XkbDescPtr> arg0,
);

typedef _c_XkbGetMap = ffi.Pointer<XkbDescPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbGetMap = ffi.Pointer<XkbDescPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbGetUpdatedMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbGetUpdatedMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbGetMapChanges = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
  ffi.Pointer<XkbMapChangesPtr> arg2,
);

typedef _dart_XkbGetMapChanges = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
  ffi.Pointer<XkbMapChangesPtr> arg2,
);

typedef _c_XkbRefreshKeyboardMapping = ffi.Int32 Function(
  ffi.Pointer<XkbMapNotifyEvent> arg0,
);

typedef _dart_XkbRefreshKeyboardMapping = int Function(
  ffi.Pointer<XkbMapNotifyEvent> arg0,
);

typedef _c_XkbGetKeyTypes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _dart_XkbGetKeyTypes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _c_XkbGetKeySyms = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _dart_XkbGetKeySyms = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _c_XkbGetKeyActions = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _dart_XkbGetKeyActions = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _c_XkbGetKeyBehaviors = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _dart_XkbGetKeyBehaviors = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _c_XkbGetVirtualMods = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbGetVirtualMods = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbGetKeyExplicitComponents = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _dart_XkbGetKeyExplicitComponents = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _c_XkbGetKeyModifierMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _dart_XkbGetKeyModifierMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _c_XkbGetKeyVirtualModMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _dart_XkbGetKeyVirtualModMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XkbDescPtr> arg3,
);

typedef _c_XkbAllocControls = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
);

typedef _dart_XkbAllocControls = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
);

typedef _c_XkbFreeControls = ffi.Void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbFreeControls = void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbGetControls = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbGetControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbSetControls = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbSetControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbNoteControlsChanges = ffi.Void Function(
  ffi.Pointer<XkbControlsChangesPtr> arg0,
  ffi.Pointer<XkbControlsNotifyEvent> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbNoteControlsChanges = void Function(
  ffi.Pointer<XkbControlsChangesPtr> arg0,
  ffi.Pointer<XkbControlsNotifyEvent> arg1,
  int arg2,
);

typedef _c_XkbAllocCompatMap = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbAllocCompatMap = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbFreeCompatMap = ffi.Void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbFreeCompatMap = void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbGetCompatMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbGetCompatMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbSetCompatMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XkbSetCompatMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  int arg3,
);

typedef _c_XkbAddSymInterpret = ffi.Pointer<XkbSymInterpretPtr> Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Pointer<XkbSymInterpretPtr> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XkbChangesPtr> arg3,
);

typedef _dart_XkbAddSymInterpret = ffi.Pointer<XkbSymInterpretPtr> Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Pointer<XkbSymInterpretPtr> arg1,
  int arg2,
  ffi.Pointer<XkbChangesPtr> arg3,
);

typedef _c_XkbAllocNames = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_XkbAllocNames = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbGetNames = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbGetNames = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbSetNames = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<XkbDescPtr> arg4,
);

typedef _dart_XkbSetNames = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<XkbDescPtr> arg4,
);

typedef _c_XkbChangeNames = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
  ffi.Pointer<XkbNameChangesPtr> arg2,
);

typedef _dart_XkbChangeNames = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
  ffi.Pointer<XkbNameChangesPtr> arg2,
);

typedef _c_XkbFreeNames = ffi.Void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbFreeNames = void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbGetState = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbStatePtr> arg2,
);

typedef _dart_XkbGetState = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbStatePtr> arg2,
);

typedef _c_XkbSetMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _dart_XkbSetMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDescPtr> arg2,
);

typedef _c_XkbChangeMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
  ffi.Pointer<XkbMapChangesPtr> arg2,
);

typedef _dart_XkbChangeMap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDescPtr> arg1,
  ffi.Pointer<XkbMapChangesPtr> arg2,
);

typedef _c_XkbSetDetectableAutoRepeat = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XkbSetDetectableAutoRepeat = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XkbGetDetectableAutoRepeat = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XkbGetDetectableAutoRepeat = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XkbSetAutoResetControls = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint32> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef _dart_XkbSetAutoResetControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint32> arg2,
  ffi.Pointer<ffi.Uint32> arg3,
);

typedef _c_XkbGetAutoResetControls = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_XkbGetAutoResetControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_XkbSetPerClientControls = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_XkbSetPerClientControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_XkbGetPerClientControls = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _dart_XkbGetPerClientControls = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _c_XkbCopyKeyType = ffi.Int32 Function(
  ffi.Pointer<XkbKeyTypePtr> arg0,
  ffi.Pointer<XkbKeyTypePtr> arg1,
);

typedef _dart_XkbCopyKeyType = int Function(
  ffi.Pointer<XkbKeyTypePtr> arg0,
  ffi.Pointer<XkbKeyTypePtr> arg1,
);

typedef _c_XkbCopyKeyTypes = ffi.Int32 Function(
  ffi.Pointer<XkbKeyTypePtr> arg0,
  ffi.Pointer<XkbKeyTypePtr> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbCopyKeyTypes = int Function(
  ffi.Pointer<XkbKeyTypePtr> arg0,
  ffi.Pointer<XkbKeyTypePtr> arg1,
  int arg2,
);

typedef _c_XkbResizeKeyType = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_XkbResizeKeyType = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbResizeKeySyms = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbResizeKeySyms = ffi.Pointer<ffi.Uint64> Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbChangeTypesOfKey = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<XkbMapChangesPtr> arg5,
);

typedef _dart_XkbChangeTypesOfKey = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<XkbMapChangesPtr> arg5,
);

typedef _c_XkbChangeKeycodeRange = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<XkbChangesPtr> arg3,
);

typedef _dart_XkbChangeKeycodeRange = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<XkbChangesPtr> arg3,
);

typedef _c_XkbListComponents = ffi.Pointer<XkbComponentListPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbComponentNamesPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XkbListComponents = ffi.Pointer<XkbComponentListPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbComponentNamesPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XkbFreeComponentList = ffi.Void Function(
  ffi.Pointer<XkbComponentListPtr> arg0,
);

typedef _dart_XkbFreeComponentList = void Function(
  ffi.Pointer<XkbComponentListPtr> arg0,
);

typedef _c_XkbGetKeyboard = ffi.Pointer<XkbDescPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbGetKeyboard = ffi.Pointer<XkbDescPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbGetKeyboardByName = ffi.Pointer<XkbDescPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbComponentNamesPtr> arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Int32 arg5,
);

typedef _dart_XkbGetKeyboardByName = ffi.Pointer<XkbDescPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbComponentNamesPtr> arg2,
  int arg3,
  int arg4,
  int arg5,
);

typedef _c_XkbKeyTypesForCoreSymbols = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Uint32 arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Uint64> arg5,
);

typedef _dart_XkbKeyTypesForCoreSymbols = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Uint64> arg5,
);

typedef _c_XkbApplyCompatMapToKey = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint8 arg1,
  ffi.Pointer<XkbChangesPtr> arg2,
);

typedef _dart_XkbApplyCompatMapToKey = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  ffi.Pointer<XkbChangesPtr> arg2,
);

typedef _c_XkbUpdateMapFromCore = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<XkbChangesPtr> arg5,
);

typedef _dart_XkbUpdateMapFromCore = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<XkbChangesPtr> arg5,
);

typedef _c_XkbAddDeviceLedInfo = ffi.Pointer<XkbDeviceLedInfoPtr> Function(
  ffi.Pointer<XkbDeviceInfoPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbAddDeviceLedInfo = ffi.Pointer<XkbDeviceLedInfoPtr> Function(
  ffi.Pointer<XkbDeviceInfoPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbResizeDeviceButtonActions = ffi.Int32 Function(
  ffi.Pointer<XkbDeviceInfoPtr> arg0,
  ffi.Uint32 arg1,
);

typedef _dart_XkbResizeDeviceButtonActions = int Function(
  ffi.Pointer<XkbDeviceInfoPtr> arg0,
  int arg1,
);

typedef _c_XkbAllocDeviceInfo = ffi.Pointer<XkbDeviceInfoPtr> Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbAllocDeviceInfo = ffi.Pointer<XkbDeviceInfoPtr> Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbFreeDeviceInfo = ffi.Void Function(
  ffi.Pointer<XkbDeviceInfoPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XkbFreeDeviceInfo = void Function(
  ffi.Pointer<XkbDeviceInfoPtr> arg0,
  int arg1,
  int arg2,
);

typedef _c_XkbNoteDeviceChanges = ffi.Void Function(
  ffi.Pointer<XkbDeviceChangesPtr> arg0,
  ffi.Pointer<XkbExtensionDeviceNotifyEvent> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_XkbNoteDeviceChanges = void Function(
  ffi.Pointer<XkbDeviceChangesPtr> arg0,
  ffi.Pointer<XkbExtensionDeviceNotifyEvent> arg1,
  int arg2,
);

typedef _c_XkbGetDeviceInfo = ffi.Pointer<XkbDeviceInfoPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XkbGetDeviceInfo = ffi.Pointer<XkbDeviceInfoPtr> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbGetDeviceInfoChanges = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  ffi.Pointer<XkbDeviceChangesPtr> arg2,
);

typedef _dart_XkbGetDeviceInfoChanges = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  ffi.Pointer<XkbDeviceChangesPtr> arg2,
);

typedef _c_XkbGetDeviceButtonActions = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XkbGetDeviceButtonActions = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbGetDeviceLedInfo = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XkbGetDeviceLedInfo = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbSetDeviceInfo = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbDeviceInfoPtr> arg2,
);

typedef _dart_XkbSetDeviceInfo = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XkbDeviceInfoPtr> arg2,
);

typedef _c_XkbChangeDeviceInfo = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  ffi.Pointer<XkbDeviceChangesPtr> arg2,
);

typedef _dart_XkbChangeDeviceInfo = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  ffi.Pointer<XkbDeviceChangesPtr> arg2,
);

typedef _c_XkbSetDeviceLedInfo = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XkbSetDeviceLedInfo = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XkbSetDeviceButtonActions = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_XkbSetDeviceButtonActions = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbDeviceInfoPtr> arg1,
  int arg2,
  int arg3,
);

typedef _c_XkbToControl = ffi.Int8 Function(
  ffi.Int8 arg0,
);

typedef _dart_XkbToControl = int Function(
  int arg0,
);

typedef _c_XkbSetDebuggingFlags = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint32 arg4,
  ffi.Uint32 arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  ffi.Pointer<ffi.Uint32> arg7,
);

typedef _dart_XkbSetDebuggingFlags = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  int arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  ffi.Pointer<ffi.Uint32> arg7,
);

typedef _c_XkbApplyVirtualModChanges = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<XkbChangesPtr> arg2,
);

typedef _dart_XkbApplyVirtualModChanges = int Function(
  ffi.Pointer<XkbDescPtr> arg0,
  int arg1,
  ffi.Pointer<XkbChangesPtr> arg2,
);

typedef _c_XkbUpdateKeyTypeVirtualMods = ffi.Void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Pointer<XkbKeyTypePtr> arg1,
  ffi.Uint32 arg2,
  ffi.Pointer<XkbChangesPtr> arg3,
);

typedef _dart_XkbUpdateKeyTypeVirtualMods = void Function(
  ffi.Pointer<XkbDescPtr> arg0,
  ffi.Pointer<XkbKeyTypePtr> arg1,
  int arg2,
  ffi.Pointer<XkbChangesPtr> arg3,
);

typedef _c_readv = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<iovec> __iovec,
  ffi.Int32 __count,
);

typedef _dart_readv = int Function(
  int __fd,
  ffi.Pointer<iovec> __iovec,
  int __count,
);

typedef _c_writev = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<iovec> __iovec,
  ffi.Int32 __count,
);

typedef _dart_writev = int Function(
  int __fd,
  ffi.Pointer<iovec> __iovec,
  int __count,
);

typedef _c_preadv = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<iovec> __iovec,
  ffi.Int32 __count,
  ffi.Int64 __offset,
);

typedef _dart_preadv = int Function(
  int __fd,
  ffi.Pointer<iovec> __iovec,
  int __count,
  int __offset,
);

typedef _c_pwritev = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<iovec> __iovec,
  ffi.Int32 __count,
  ffi.Int64 __offset,
);

typedef _dart_pwritev = int Function(
  int __fd,
  ffi.Pointer<iovec> __iovec,
  int __count,
  int __offset,
);

typedef _c___sched_cpucount = ffi.Int32 Function(
  ffi.Uint64 __setsize,
  ffi.Pointer<cpu_set_t> __setp,
);

typedef _dart___sched_cpucount = int Function(
  int __setsize,
  ffi.Pointer<cpu_set_t> __setp,
);

typedef _c___sched_cpualloc = ffi.Pointer<cpu_set_t> Function(
  ffi.Uint64 __count,
);

typedef _dart___sched_cpualloc = ffi.Pointer<cpu_set_t> Function(
  int __count,
);

typedef _c___sched_cpufree = ffi.Void Function(
  ffi.Pointer<cpu_set_t> __set,
);

typedef _dart___sched_cpufree = void Function(
  ffi.Pointer<cpu_set_t> __set,
);

typedef _c_sched_setparam = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Pointer<sched_param> __param,
);

typedef _dart_sched_setparam = int Function(
  int __pid,
  ffi.Pointer<sched_param> __param,
);

typedef _c_sched_getparam = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Pointer<sched_param> __param,
);

typedef _dart_sched_getparam = int Function(
  int __pid,
  ffi.Pointer<sched_param> __param,
);

typedef _c_sched_setscheduler = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Int32 __policy,
  ffi.Pointer<sched_param> __param,
);

typedef _dart_sched_setscheduler = int Function(
  int __pid,
  int __policy,
  ffi.Pointer<sched_param> __param,
);

typedef _c_sched_getscheduler = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart_sched_getscheduler = int Function(
  int __pid,
);

typedef _c_sched_yield = ffi.Int32 Function();

typedef _dart_sched_yield = int Function();

typedef _c_sched_get_priority_max = ffi.Int32 Function(
  ffi.Int32 __algorithm,
);

typedef _dart_sched_get_priority_max = int Function(
  int __algorithm,
);

typedef _c_sched_get_priority_min = ffi.Int32 Function(
  ffi.Int32 __algorithm,
);

typedef _dart_sched_get_priority_min = int Function(
  int __algorithm,
);

typedef _c_sched_rr_get_interval = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Pointer<timespec> __t,
);

typedef _dart_sched_rr_get_interval = int Function(
  int __pid,
  ffi.Pointer<timespec> __t,
);

typedef _c_clock = ffi.Int64 Function();

typedef _dart_clock = int Function();

typedef _c_time = ffi.Int64 Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_time = int Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_difftime = ffi.Double Function(
  ffi.Int64 __time1,
  ffi.Int64 __time0,
);

typedef _dart_difftime = double Function(
  int __time1,
  int __time0,
);

typedef _c_mktime = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_mktime = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_strftime = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
);

typedef _dart_strftime = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
);

typedef _c_strftime_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_strftime_l = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxsize,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<tm> __tp,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_gmtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_localtime = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _dart_gmtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _c_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _dart_localtime_r = ffi.Pointer<tm> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<tm> __tp,
);

typedef _c_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_asctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _dart_ctime = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
);

typedef _c_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_asctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<tm> __tp,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_ctime_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int64> __timer,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_tzset = ffi.Void Function();

typedef _dart_tzset = void Function();

typedef _c_timegm = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_timegm = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_timelocal = ffi.Int64 Function(
  ffi.Pointer<tm> __tp,
);

typedef _dart_timelocal = int Function(
  ffi.Pointer<tm> __tp,
);

typedef _c_dysize = ffi.Int32 Function(
  ffi.Int32 __year,
);

typedef _dart_dysize = int Function(
  int __year,
);

typedef _c_nanosleep = ffi.Int32 Function(
  ffi.Pointer<timespec> __requested_time,
  ffi.Pointer<timespec> __remaining,
);

typedef _dart_nanosleep = int Function(
  ffi.Pointer<timespec> __requested_time,
  ffi.Pointer<timespec> __remaining,
);

typedef _c_clock_getres = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _dart_clock_getres = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __res,
);

typedef _c_clock_gettime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_gettime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_settime = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _dart_clock_settime = int Function(
  int __clock_id,
  ffi.Pointer<timespec> __tp,
);

typedef _c_clock_nanosleep = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Int32 __flags,
  ffi.Pointer<timespec> __req,
  ffi.Pointer<timespec> __rem,
);

typedef _dart_clock_nanosleep = int Function(
  int __clock_id,
  int __flags,
  ffi.Pointer<timespec> __req,
  ffi.Pointer<timespec> __rem,
);

typedef _c_clock_getcpuclockid = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Pointer<ffi.Int32> __clock_id,
);

typedef _dart_clock_getcpuclockid = int Function(
  int __pid,
  ffi.Pointer<ffi.Int32> __clock_id,
);

typedef _c_timer_create = ffi.Int32 Function(
  ffi.Int32 __clock_id,
  ffi.Pointer<sigevent> __evp,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
);

typedef _dart_timer_create = int Function(
  int __clock_id,
  ffi.Pointer<sigevent> __evp,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __timerid,
);

typedef _c_timer_delete = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _dart_timer_delete = int Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _c_timer_settime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Int32 __flags,
  ffi.Pointer<itimerspec> __value,
  ffi.Pointer<itimerspec> __ovalue,
);

typedef _dart_timer_settime = int Function(
  ffi.Pointer<ffi.Void> __timerid,
  int __flags,
  ffi.Pointer<itimerspec> __value,
  ffi.Pointer<itimerspec> __ovalue,
);

typedef _c_timer_gettime = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Pointer<itimerspec> __value,
);

typedef _dart_timer_gettime = int Function(
  ffi.Pointer<ffi.Void> __timerid,
  ffi.Pointer<itimerspec> __value,
);

typedef _c_timer_getoverrun = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _dart_timer_getoverrun = int Function(
  ffi.Pointer<ffi.Void> __timerid,
);

typedef _c_timespec_get = ffi.Int32 Function(
  ffi.Pointer<timespec> __ts,
  ffi.Int32 __base,
);

typedef _dart_timespec_get = int Function(
  ffi.Pointer<timespec> __ts,
  int __base,
);

typedef _c_pthread_exit = ffi.Void Function(
  ffi.Pointer<ffi.Void> __retval,
);

typedef _dart_pthread_exit = void Function(
  ffi.Pointer<ffi.Void> __retval,
);

typedef _c_pthread_join = ffi.Int32 Function(
  ffi.Uint64 __th,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
);

typedef _dart_pthread_join = int Function(
  int __th,
  ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
);

typedef _c_pthread_detach = ffi.Int32 Function(
  ffi.Uint64 __th,
);

typedef _dart_pthread_detach = int Function(
  int __th,
);

typedef _c_pthread_self = ffi.Uint64 Function();

typedef _dart_pthread_self = int Function();

typedef _c_pthread_equal = ffi.Int32 Function(
  ffi.Uint64 __thread1,
  ffi.Uint64 __thread2,
);

typedef _dart_pthread_equal = int Function(
  int __thread1,
  int __thread2,
);

typedef _c_pthread_setschedparam = ffi.Int32 Function(
  ffi.Uint64 __target_thread,
  ffi.Int32 __policy,
  ffi.Pointer<sched_param> __param,
);

typedef _dart_pthread_setschedparam = int Function(
  int __target_thread,
  int __policy,
  ffi.Pointer<sched_param> __param,
);

typedef _c_pthread_getschedparam = ffi.Int32 Function(
  ffi.Uint64 __target_thread,
  ffi.Pointer<ffi.Int32> __policy,
  ffi.Pointer<sched_param> __param,
);

typedef _dart_pthread_getschedparam = int Function(
  int __target_thread,
  ffi.Pointer<ffi.Int32> __policy,
  ffi.Pointer<sched_param> __param,
);

typedef _c_pthread_setschedprio = ffi.Int32 Function(
  ffi.Uint64 __target_thread,
  ffi.Int32 __prio,
);

typedef _dart_pthread_setschedprio = int Function(
  int __target_thread,
  int __prio,
);

typedef _typedefC_15 = ffi.Void Function();

typedef _c_pthread_once = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __once_control,
  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> __init_routine,
);

typedef _dart_pthread_once = int Function(
  ffi.Pointer<ffi.Int32> __once_control,
  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> __init_routine,
);

typedef _c_pthread_setcancelstate = ffi.Int32 Function(
  ffi.Int32 __state,
  ffi.Pointer<ffi.Int32> __oldstate,
);

typedef _dart_pthread_setcancelstate = int Function(
  int __state,
  ffi.Pointer<ffi.Int32> __oldstate,
);

typedef _c_pthread_setcanceltype = ffi.Int32 Function(
  ffi.Int32 __type,
  ffi.Pointer<ffi.Int32> __oldtype,
);

typedef _dart_pthread_setcanceltype = int Function(
  int __type,
  ffi.Pointer<ffi.Int32> __oldtype,
);

typedef _c_pthread_cancel = ffi.Int32 Function(
  ffi.Uint64 __th,
);

typedef _dart_pthread_cancel = int Function(
  int __th,
);

typedef _c_pthread_testcancel = ffi.Void Function();

typedef _dart_pthread_testcancel = void Function();

typedef _c___pthread_register_cancel = ffi.Void Function(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

typedef _dart___pthread_register_cancel = void Function(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

typedef _c___pthread_unregister_cancel = ffi.Void Function(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

typedef _dart___pthread_unregister_cancel = void Function(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

typedef _c___pthread_unwind_next = ffi.Void Function(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

typedef _dart___pthread_unwind_next = void Function(
  ffi.Pointer<__pthread_unwind_buf_t> __buf,
);

typedef _c___sigsetjmp = ffi.Int32 Function(
  ffi.Pointer<__jmp_buf_tag> __env,
  ffi.Int32 __savemask,
);

typedef _dart___sigsetjmp = int Function(
  ffi.Pointer<__jmp_buf_tag> __env,
  int __savemask,
);

typedef _c_pthread_spin_init = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __lock,
  ffi.Int32 __pshared,
);

typedef _dart_pthread_spin_init = int Function(
  ffi.Pointer<ffi.Int32> __lock,
  int __pshared,
);

typedef _c_pthread_spin_destroy = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __lock,
);

typedef _dart_pthread_spin_destroy = int Function(
  ffi.Pointer<ffi.Int32> __lock,
);

typedef _c_pthread_spin_lock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __lock,
);

typedef _dart_pthread_spin_lock = int Function(
  ffi.Pointer<ffi.Int32> __lock,
);

typedef _c_pthread_spin_trylock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __lock,
);

typedef _dart_pthread_spin_trylock = int Function(
  ffi.Pointer<ffi.Int32> __lock,
);

typedef _c_pthread_spin_unlock = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __lock,
);

typedef _dart_pthread_spin_unlock = int Function(
  ffi.Pointer<ffi.Int32> __lock,
);

typedef _typedefC_17 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_pthread_key_create = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> __key,
  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> __destr_function,
);

typedef _dart_pthread_key_create = int Function(
  ffi.Pointer<ffi.Uint32> __key,
  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> __destr_function,
);

typedef _c_pthread_key_delete = ffi.Int32 Function(
  ffi.Uint32 __key,
);

typedef _dart_pthread_key_delete = int Function(
  int __key,
);

typedef _c_pthread_getspecific = ffi.Pointer<ffi.Void> Function(
  ffi.Uint32 __key,
);

typedef _dart_pthread_getspecific = ffi.Pointer<ffi.Void> Function(
  int __key,
);

typedef _c_pthread_setspecific = ffi.Int32 Function(
  ffi.Uint32 __key,
  ffi.Pointer<ffi.Void> __pointer,
);

typedef _dart_pthread_setspecific = int Function(
  int __key,
  ffi.Pointer<ffi.Void> __pointer,
);

typedef _c_pthread_getcpuclockid = ffi.Int32 Function(
  ffi.Uint64 __thread_id,
  ffi.Pointer<ffi.Int32> __clock_id,
);

typedef _dart_pthread_getcpuclockid = int Function(
  int __thread_id,
  ffi.Pointer<ffi.Int32> __clock_id,
);

typedef _typedefC_18 = ffi.Void Function();

typedef _typedefC_19 = ffi.Void Function();

typedef _typedefC_20 = ffi.Void Function();

typedef _c_pthread_atfork = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> __prepare,
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> __parent,
  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> __child,
);

typedef _dart_pthread_atfork = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> __prepare,
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> __parent,
  ffi.Pointer<ffi.NativeFunction<_typedefC_20>> __child,
);

typedef _c_xcb_char2b_next = ffi.Void Function(
  ffi.Pointer<xcb_char2b_iterator_t> i,
);

typedef _dart_xcb_char2b_next = void Function(
  ffi.Pointer<xcb_char2b_iterator_t> i,
);

typedef _c_xcb_window_next = ffi.Void Function(
  ffi.Pointer<xcb_window_iterator_t> i,
);

typedef _dart_xcb_window_next = void Function(
  ffi.Pointer<xcb_window_iterator_t> i,
);

typedef _c_xcb_pixmap_next = ffi.Void Function(
  ffi.Pointer<xcb_pixmap_iterator_t> i,
);

typedef _dart_xcb_pixmap_next = void Function(
  ffi.Pointer<xcb_pixmap_iterator_t> i,
);

typedef _c_xcb_cursor_next = ffi.Void Function(
  ffi.Pointer<xcb_cursor_iterator_t> i,
);

typedef _dart_xcb_cursor_next = void Function(
  ffi.Pointer<xcb_cursor_iterator_t> i,
);

typedef _c_xcb_font_next = ffi.Void Function(
  ffi.Pointer<xcb_font_iterator_t> i,
);

typedef _dart_xcb_font_next = void Function(
  ffi.Pointer<xcb_font_iterator_t> i,
);

typedef _c_xcb_gcontext_next = ffi.Void Function(
  ffi.Pointer<xcb_gcontext_iterator_t> i,
);

typedef _dart_xcb_gcontext_next = void Function(
  ffi.Pointer<xcb_gcontext_iterator_t> i,
);

typedef _c_xcb_colormap_next = ffi.Void Function(
  ffi.Pointer<xcb_colormap_iterator_t> i,
);

typedef _dart_xcb_colormap_next = void Function(
  ffi.Pointer<xcb_colormap_iterator_t> i,
);

typedef _c_xcb_atom_next = ffi.Void Function(
  ffi.Pointer<xcb_atom_iterator_t> i,
);

typedef _dart_xcb_atom_next = void Function(
  ffi.Pointer<xcb_atom_iterator_t> i,
);

typedef _c_xcb_drawable_next = ffi.Void Function(
  ffi.Pointer<xcb_drawable_iterator_t> i,
);

typedef _dart_xcb_drawable_next = void Function(
  ffi.Pointer<xcb_drawable_iterator_t> i,
);

typedef _c_xcb_fontable_next = ffi.Void Function(
  ffi.Pointer<xcb_fontable_iterator_t> i,
);

typedef _dart_xcb_fontable_next = void Function(
  ffi.Pointer<xcb_fontable_iterator_t> i,
);

typedef _c_xcb_bool32_next = ffi.Void Function(
  ffi.Pointer<xcb_bool32_iterator_t> i,
);

typedef _dart_xcb_bool32_next = void Function(
  ffi.Pointer<xcb_bool32_iterator_t> i,
);

typedef _c_xcb_visualid_next = ffi.Void Function(
  ffi.Pointer<xcb_visualid_iterator_t> i,
);

typedef _dart_xcb_visualid_next = void Function(
  ffi.Pointer<xcb_visualid_iterator_t> i,
);

typedef _c_xcb_timestamp_next = ffi.Void Function(
  ffi.Pointer<xcb_timestamp_iterator_t> i,
);

typedef _dart_xcb_timestamp_next = void Function(
  ffi.Pointer<xcb_timestamp_iterator_t> i,
);

typedef _c_xcb_keysym_next = ffi.Void Function(
  ffi.Pointer<xcb_keysym_iterator_t> i,
);

typedef _dart_xcb_keysym_next = void Function(
  ffi.Pointer<xcb_keysym_iterator_t> i,
);

typedef _c_xcb_keycode_next = ffi.Void Function(
  ffi.Pointer<xcb_keycode_iterator_t> i,
);

typedef _dart_xcb_keycode_next = void Function(
  ffi.Pointer<xcb_keycode_iterator_t> i,
);

typedef _c_xcb_keycode32_next = ffi.Void Function(
  ffi.Pointer<xcb_keycode32_iterator_t> i,
);

typedef _dart_xcb_keycode32_next = void Function(
  ffi.Pointer<xcb_keycode32_iterator_t> i,
);

typedef _c_xcb_button_next = ffi.Void Function(
  ffi.Pointer<xcb_button_iterator_t> i,
);

typedef _dart_xcb_button_next = void Function(
  ffi.Pointer<xcb_button_iterator_t> i,
);

typedef _c_xcb_point_next = ffi.Void Function(
  ffi.Pointer<xcb_point_iterator_t> i,
);

typedef _dart_xcb_point_next = void Function(
  ffi.Pointer<xcb_point_iterator_t> i,
);

typedef _c_xcb_rectangle_next = ffi.Void Function(
  ffi.Pointer<xcb_rectangle_iterator_t> i,
);

typedef _dart_xcb_rectangle_next = void Function(
  ffi.Pointer<xcb_rectangle_iterator_t> i,
);

typedef _c_xcb_arc_next = ffi.Void Function(
  ffi.Pointer<xcb_arc_iterator_t> i,
);

typedef _dart_xcb_arc_next = void Function(
  ffi.Pointer<xcb_arc_iterator_t> i,
);

typedef _c_xcb_format_next = ffi.Void Function(
  ffi.Pointer<xcb_format_iterator_t> i,
);

typedef _dart_xcb_format_next = void Function(
  ffi.Pointer<xcb_format_iterator_t> i,
);

typedef _c_xcb_visualtype_next = ffi.Void Function(
  ffi.Pointer<xcb_visualtype_iterator_t> i,
);

typedef _dart_xcb_visualtype_next = void Function(
  ffi.Pointer<xcb_visualtype_iterator_t> i,
);

typedef _c_xcb_depth_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_depth_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_depth_visuals = ffi.Pointer<xcb_visualtype_t> Function(
  ffi.Pointer<xcb_depth_t> R,
);

typedef _dart_xcb_depth_visuals = ffi.Pointer<xcb_visualtype_t> Function(
  ffi.Pointer<xcb_depth_t> R,
);

typedef _c_xcb_depth_visuals_length = ffi.Int32 Function(
  ffi.Pointer<xcb_depth_t> R,
);

typedef _dart_xcb_depth_visuals_length = int Function(
  ffi.Pointer<xcb_depth_t> R,
);

typedef _c_xcb_depth_next = ffi.Void Function(
  ffi.Pointer<xcb_depth_iterator_t> i,
);

typedef _dart_xcb_depth_next = void Function(
  ffi.Pointer<xcb_depth_iterator_t> i,
);

typedef _c_xcb_screen_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_screen_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_screen_allowed_depths_length = ffi.Int32 Function(
  ffi.Pointer<xcb_screen_t> R,
);

typedef _dart_xcb_screen_allowed_depths_length = int Function(
  ffi.Pointer<xcb_screen_t> R,
);

typedef _c_xcb_screen_next = ffi.Void Function(
  ffi.Pointer<xcb_screen_iterator_t> i,
);

typedef _dart_xcb_screen_next = void Function(
  ffi.Pointer<xcb_screen_iterator_t> i,
);

typedef _c_xcb_setup_request_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_setup_request_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_setup_request_authorization_protocol_name = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<xcb_setup_request_t> R,
);

typedef _dart_xcb_setup_request_authorization_protocol_name
    = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_setup_request_t> R,
);

typedef _c_xcb_setup_request_authorization_protocol_name_length = ffi.Int32
    Function(
  ffi.Pointer<xcb_setup_request_t> R,
);

typedef _dart_xcb_setup_request_authorization_protocol_name_length = int
    Function(
  ffi.Pointer<xcb_setup_request_t> R,
);

typedef _c_xcb_setup_request_authorization_protocol_data = ffi.Pointer<ffi.Int8>
    Function(
  ffi.Pointer<xcb_setup_request_t> R,
);

typedef _dart_xcb_setup_request_authorization_protocol_data
    = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_setup_request_t> R,
);

typedef _c_xcb_setup_request_authorization_protocol_data_length = ffi.Int32
    Function(
  ffi.Pointer<xcb_setup_request_t> R,
);

typedef _dart_xcb_setup_request_authorization_protocol_data_length = int
    Function(
  ffi.Pointer<xcb_setup_request_t> R,
);

typedef _c_xcb_setup_request_next = ffi.Void Function(
  ffi.Pointer<xcb_setup_request_iterator_t> i,
);

typedef _dart_xcb_setup_request_next = void Function(
  ffi.Pointer<xcb_setup_request_iterator_t> i,
);

typedef _c_xcb_setup_failed_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_setup_failed_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_setup_failed_reason = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_setup_failed_t> R,
);

typedef _dart_xcb_setup_failed_reason = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_setup_failed_t> R,
);

typedef _c_xcb_setup_failed_reason_length = ffi.Int32 Function(
  ffi.Pointer<xcb_setup_failed_t> R,
);

typedef _dart_xcb_setup_failed_reason_length = int Function(
  ffi.Pointer<xcb_setup_failed_t> R,
);

typedef _c_xcb_setup_failed_next = ffi.Void Function(
  ffi.Pointer<xcb_setup_failed_iterator_t> i,
);

typedef _dart_xcb_setup_failed_next = void Function(
  ffi.Pointer<xcb_setup_failed_iterator_t> i,
);

typedef _c_xcb_setup_authenticate_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_setup_authenticate_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_setup_authenticate_reason = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_setup_authenticate_t> R,
);

typedef _dart_xcb_setup_authenticate_reason = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_setup_authenticate_t> R,
);

typedef _c_xcb_setup_authenticate_reason_length = ffi.Int32 Function(
  ffi.Pointer<xcb_setup_authenticate_t> R,
);

typedef _dart_xcb_setup_authenticate_reason_length = int Function(
  ffi.Pointer<xcb_setup_authenticate_t> R,
);

typedef _c_xcb_setup_authenticate_next = ffi.Void Function(
  ffi.Pointer<xcb_setup_authenticate_iterator_t> i,
);

typedef _dart_xcb_setup_authenticate_next = void Function(
  ffi.Pointer<xcb_setup_authenticate_iterator_t> i,
);

typedef _c_xcb_setup_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_setup_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_setup_vendor = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _dart_xcb_setup_vendor = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _c_xcb_setup_vendor_length = ffi.Int32 Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _dart_xcb_setup_vendor_length = int Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _c_xcb_setup_pixmap_formats = ffi.Pointer<xcb_format_t> Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _dart_xcb_setup_pixmap_formats = ffi.Pointer<xcb_format_t> Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _c_xcb_setup_pixmap_formats_length = ffi.Int32 Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _dart_xcb_setup_pixmap_formats_length = int Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _c_xcb_setup_roots_length = ffi.Int32 Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _dart_xcb_setup_roots_length = int Function(
  ffi.Pointer<xcb_setup_t> R,
);

typedef _c_xcb_setup_next = ffi.Void Function(
  ffi.Pointer<xcb_setup_iterator_t> i,
);

typedef _dart_xcb_setup_next = void Function(
  ffi.Pointer<xcb_setup_iterator_t> i,
);

typedef _c_xcb_client_message_data_next = ffi.Void Function(
  ffi.Pointer<xcb_client_message_data_iterator_t> i,
);

typedef _dart_xcb_client_message_data_next = void Function(
  ffi.Pointer<xcb_client_message_data_iterator_t> i,
);

typedef _c_xcb_create_window_value_list_serialize = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_create_window_value_list_t> _aux,
);

typedef _dart_xcb_create_window_value_list_serialize = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  int value_mask,
  ffi.Pointer<xcb_create_window_value_list_t> _aux,
);

typedef _c_xcb_create_window_value_list_unpack = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_create_window_value_list_t> _aux,
);

typedef _dart_xcb_create_window_value_list_unpack = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
  ffi.Pointer<xcb_create_window_value_list_t> _aux,
);

typedef _c_xcb_create_window_value_list_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
);

typedef _dart_xcb_create_window_value_list_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
);

typedef _c_xcb_create_window_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_create_window_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_create_window_value_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_create_window_request_t> R,
);

typedef _dart_xcb_create_window_value_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_create_window_request_t> R,
);

typedef _c_xcb_change_window_attributes_value_list_serialize = ffi.Int32
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_change_window_attributes_value_list_t> _aux,
);

typedef _dart_xcb_change_window_attributes_value_list_serialize = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  int value_mask,
  ffi.Pointer<xcb_change_window_attributes_value_list_t> _aux,
);

typedef _c_xcb_change_window_attributes_value_list_unpack = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_change_window_attributes_value_list_t> _aux,
);

typedef _dart_xcb_change_window_attributes_value_list_unpack = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
  ffi.Pointer<xcb_change_window_attributes_value_list_t> _aux,
);

typedef _c_xcb_change_window_attributes_value_list_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
);

typedef _dart_xcb_change_window_attributes_value_list_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
);

typedef _c_xcb_change_window_attributes_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_change_window_attributes_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_change_window_attributes_value_list = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<xcb_change_window_attributes_request_t> R,
);

typedef _dart_xcb_change_window_attributes_value_list = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<xcb_change_window_attributes_request_t> R,
);

typedef _c_xcb_configure_window_value_list_serialize = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  ffi.Uint16 value_mask,
  ffi.Pointer<xcb_configure_window_value_list_t> _aux,
);

typedef _dart_xcb_configure_window_value_list_serialize = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  int value_mask,
  ffi.Pointer<xcb_configure_window_value_list_t> _aux,
);

typedef _c_xcb_configure_window_value_list_unpack = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint16 value_mask,
  ffi.Pointer<xcb_configure_window_value_list_t> _aux,
);

typedef _dart_xcb_configure_window_value_list_unpack = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
  ffi.Pointer<xcb_configure_window_value_list_t> _aux,
);

typedef _c_xcb_configure_window_value_list_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint16 value_mask,
);

typedef _dart_xcb_configure_window_value_list_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
);

typedef _c_xcb_configure_window_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_configure_window_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_configure_window_value_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_configure_window_request_t> R,
);

typedef _dart_xcb_configure_window_value_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_configure_window_request_t> R,
);

typedef _c_xcb_query_tree_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_query_tree_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_query_tree_children = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_query_tree_reply_t> R,
);

typedef _dart_xcb_query_tree_children = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_query_tree_reply_t> R,
);

typedef _c_xcb_query_tree_children_length = ffi.Int32 Function(
  ffi.Pointer<xcb_query_tree_reply_t> R,
);

typedef _dart_xcb_query_tree_children_length = int Function(
  ffi.Pointer<xcb_query_tree_reply_t> R,
);

typedef _c_xcb_intern_atom_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_intern_atom_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_atom_name_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_get_atom_name_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_atom_name_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_get_atom_name_reply_t> R,
);

typedef _dart_xcb_get_atom_name_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_get_atom_name_reply_t> R,
);

typedef _c_xcb_get_atom_name_name_length = ffi.Int32 Function(
  ffi.Pointer<xcb_get_atom_name_reply_t> R,
);

typedef _dart_xcb_get_atom_name_name_length = int Function(
  ffi.Pointer<xcb_get_atom_name_reply_t> R,
);

typedef _c_xcb_change_property_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_change_property_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_change_property_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_change_property_request_t> R,
);

typedef _dart_xcb_change_property_data = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_change_property_request_t> R,
);

typedef _c_xcb_change_property_data_length = ffi.Int32 Function(
  ffi.Pointer<xcb_change_property_request_t> R,
);

typedef _dart_xcb_change_property_data_length = int Function(
  ffi.Pointer<xcb_change_property_request_t> R,
);

typedef _c_xcb_get_property_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_get_property_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_property_value = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_get_property_reply_t> R,
);

typedef _dart_xcb_get_property_value = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_get_property_reply_t> R,
);

typedef _c_xcb_get_property_value_length = ffi.Int32 Function(
  ffi.Pointer<xcb_get_property_reply_t> R,
);

typedef _dart_xcb_get_property_value_length = int Function(
  ffi.Pointer<xcb_get_property_reply_t> R,
);

typedef _c_xcb_list_properties_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_list_properties_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_list_properties_atoms = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_list_properties_reply_t> R,
);

typedef _dart_xcb_list_properties_atoms = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_list_properties_reply_t> R,
);

typedef _c_xcb_list_properties_atoms_length = ffi.Int32 Function(
  ffi.Pointer<xcb_list_properties_reply_t> R,
);

typedef _dart_xcb_list_properties_atoms_length = int Function(
  ffi.Pointer<xcb_list_properties_reply_t> R,
);

typedef _c_xcb_timecoord_next = ffi.Void Function(
  ffi.Pointer<xcb_timecoord_iterator_t> i,
);

typedef _dart_xcb_timecoord_next = void Function(
  ffi.Pointer<xcb_timecoord_iterator_t> i,
);

typedef _c_xcb_get_motion_events_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_get_motion_events_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_motion_events_events = ffi.Pointer<xcb_timecoord_t> Function(
  ffi.Pointer<xcb_get_motion_events_reply_t> R,
);

typedef _dart_xcb_get_motion_events_events = ffi.Pointer<xcb_timecoord_t>
    Function(
  ffi.Pointer<xcb_get_motion_events_reply_t> R,
);

typedef _c_xcb_get_motion_events_events_length = ffi.Int32 Function(
  ffi.Pointer<xcb_get_motion_events_reply_t> R,
);

typedef _dart_xcb_get_motion_events_events_length = int Function(
  ffi.Pointer<xcb_get_motion_events_reply_t> R,
);

typedef _c_xcb_open_font_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_open_font_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_open_font_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_open_font_request_t> R,
);

typedef _dart_xcb_open_font_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_open_font_request_t> R,
);

typedef _c_xcb_open_font_name_length = ffi.Int32 Function(
  ffi.Pointer<xcb_open_font_request_t> R,
);

typedef _dart_xcb_open_font_name_length = int Function(
  ffi.Pointer<xcb_open_font_request_t> R,
);

typedef _c_xcb_fontprop_next = ffi.Void Function(
  ffi.Pointer<xcb_fontprop_iterator_t> i,
);

typedef _dart_xcb_fontprop_next = void Function(
  ffi.Pointer<xcb_fontprop_iterator_t> i,
);

typedef _c_xcb_charinfo_next = ffi.Void Function(
  ffi.Pointer<xcb_charinfo_iterator_t> i,
);

typedef _dart_xcb_charinfo_next = void Function(
  ffi.Pointer<xcb_charinfo_iterator_t> i,
);

typedef _c_xcb_query_font_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_query_font_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_query_font_properties = ffi.Pointer<xcb_fontprop_t> Function(
  ffi.Pointer<xcb_query_font_reply_t> R,
);

typedef _dart_xcb_query_font_properties = ffi.Pointer<xcb_fontprop_t> Function(
  ffi.Pointer<xcb_query_font_reply_t> R,
);

typedef _c_xcb_query_font_properties_length = ffi.Int32 Function(
  ffi.Pointer<xcb_query_font_reply_t> R,
);

typedef _dart_xcb_query_font_properties_length = int Function(
  ffi.Pointer<xcb_query_font_reply_t> R,
);

typedef _c_xcb_query_font_char_infos = ffi.Pointer<xcb_charinfo_t> Function(
  ffi.Pointer<xcb_query_font_reply_t> R,
);

typedef _dart_xcb_query_font_char_infos = ffi.Pointer<xcb_charinfo_t> Function(
  ffi.Pointer<xcb_query_font_reply_t> R,
);

typedef _c_xcb_query_font_char_infos_length = ffi.Int32 Function(
  ffi.Pointer<xcb_query_font_reply_t> R,
);

typedef _dart_xcb_query_font_char_infos_length = int Function(
  ffi.Pointer<xcb_query_font_reply_t> R,
);

typedef _c_xcb_query_text_extents_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 string_len,
);

typedef _dart_xcb_query_text_extents_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int string_len,
);

typedef _c_xcb_str_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_str_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_str_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_str_t> R,
);

typedef _dart_xcb_str_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_str_t> R,
);

typedef _c_xcb_str_name_length = ffi.Int32 Function(
  ffi.Pointer<xcb_str_t> R,
);

typedef _dart_xcb_str_name_length = int Function(
  ffi.Pointer<xcb_str_t> R,
);

typedef _c_xcb_str_next = ffi.Void Function(
  ffi.Pointer<xcb_str_iterator_t> i,
);

typedef _dart_xcb_str_next = void Function(
  ffi.Pointer<xcb_str_iterator_t> i,
);

typedef _c_xcb_list_fonts_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_list_fonts_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_list_fonts_names_length = ffi.Int32 Function(
  ffi.Pointer<xcb_list_fonts_reply_t> R,
);

typedef _dart_xcb_list_fonts_names_length = int Function(
  ffi.Pointer<xcb_list_fonts_reply_t> R,
);

typedef _c_xcb_list_fonts_with_info_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_list_fonts_with_info_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_list_fonts_with_info_properties = ffi.Pointer<xcb_fontprop_t>
    Function(
  ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
);

typedef _dart_xcb_list_fonts_with_info_properties = ffi.Pointer<xcb_fontprop_t>
    Function(
  ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
);

typedef _c_xcb_list_fonts_with_info_properties_length = ffi.Int32 Function(
  ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
);

typedef _dart_xcb_list_fonts_with_info_properties_length = int Function(
  ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
);

typedef _c_xcb_list_fonts_with_info_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
);

typedef _dart_xcb_list_fonts_with_info_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
);

typedef _c_xcb_list_fonts_with_info_name_length = ffi.Int32 Function(
  ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
);

typedef _dart_xcb_list_fonts_with_info_name_length = int Function(
  ffi.Pointer<xcb_list_fonts_with_info_reply_t> R,
);

typedef _c_xcb_set_font_path_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_set_font_path_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_set_font_path_font_length = ffi.Int32 Function(
  ffi.Pointer<xcb_set_font_path_request_t> R,
);

typedef _dart_xcb_set_font_path_font_length = int Function(
  ffi.Pointer<xcb_set_font_path_request_t> R,
);

typedef _c_xcb_get_font_path_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_get_font_path_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_font_path_path_length = ffi.Int32 Function(
  ffi.Pointer<xcb_get_font_path_reply_t> R,
);

typedef _dart_xcb_get_font_path_path_length = int Function(
  ffi.Pointer<xcb_get_font_path_reply_t> R,
);

typedef _c_xcb_create_gc_value_list_serialize = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_create_gc_value_list_t> _aux,
);

typedef _dart_xcb_create_gc_value_list_serialize = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  int value_mask,
  ffi.Pointer<xcb_create_gc_value_list_t> _aux,
);

typedef _c_xcb_create_gc_value_list_unpack = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_create_gc_value_list_t> _aux,
);

typedef _dart_xcb_create_gc_value_list_unpack = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
  ffi.Pointer<xcb_create_gc_value_list_t> _aux,
);

typedef _c_xcb_create_gc_value_list_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
);

typedef _dart_xcb_create_gc_value_list_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
);

typedef _c_xcb_create_gc_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_create_gc_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_create_gc_value_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_create_gc_request_t> R,
);

typedef _dart_xcb_create_gc_value_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_create_gc_request_t> R,
);

typedef _c_xcb_change_gc_value_list_serialize = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_change_gc_value_list_t> _aux,
);

typedef _dart_xcb_change_gc_value_list_serialize = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  int value_mask,
  ffi.Pointer<xcb_change_gc_value_list_t> _aux,
);

typedef _c_xcb_change_gc_value_list_unpack = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_change_gc_value_list_t> _aux,
);

typedef _dart_xcb_change_gc_value_list_unpack = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
  ffi.Pointer<xcb_change_gc_value_list_t> _aux,
);

typedef _c_xcb_change_gc_value_list_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
);

typedef _dart_xcb_change_gc_value_list_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
);

typedef _c_xcb_change_gc_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_change_gc_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_change_gc_value_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_change_gc_request_t> R,
);

typedef _dart_xcb_change_gc_value_list = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_change_gc_request_t> R,
);

typedef _c_xcb_set_dashes_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_set_dashes_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_set_dashes_dashes = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_set_dashes_request_t> R,
);

typedef _dart_xcb_set_dashes_dashes = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_set_dashes_request_t> R,
);

typedef _c_xcb_set_dashes_dashes_length = ffi.Int32 Function(
  ffi.Pointer<xcb_set_dashes_request_t> R,
);

typedef _dart_xcb_set_dashes_dashes_length = int Function(
  ffi.Pointer<xcb_set_dashes_request_t> R,
);

typedef _c_xcb_set_clip_rectangles_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 rectangles_len,
);

typedef _dart_xcb_set_clip_rectangles_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int rectangles_len,
);

typedef _c_xcb_set_clip_rectangles_rectangles = ffi.Pointer<xcb_rectangle_t>
    Function(
  ffi.Pointer<xcb_set_clip_rectangles_request_t> R,
);

typedef _dart_xcb_set_clip_rectangles_rectangles = ffi.Pointer<xcb_rectangle_t>
    Function(
  ffi.Pointer<xcb_set_clip_rectangles_request_t> R,
);

typedef _c_xcb_set_clip_rectangles_rectangles_length = ffi.Int32 Function(
  ffi.Pointer<xcb_set_clip_rectangles_request_t> R,
);

typedef _dart_xcb_set_clip_rectangles_rectangles_length = int Function(
  ffi.Pointer<xcb_set_clip_rectangles_request_t> R,
);

typedef _c_xcb_poly_point_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 points_len,
);

typedef _dart_xcb_poly_point_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int points_len,
);

typedef _c_xcb_poly_point_points = ffi.Pointer<xcb_point_t> Function(
  ffi.Pointer<xcb_poly_point_request_t> R,
);

typedef _dart_xcb_poly_point_points = ffi.Pointer<xcb_point_t> Function(
  ffi.Pointer<xcb_poly_point_request_t> R,
);

typedef _c_xcb_poly_point_points_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_point_request_t> R,
);

typedef _dart_xcb_poly_point_points_length = int Function(
  ffi.Pointer<xcb_poly_point_request_t> R,
);

typedef _c_xcb_poly_line_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 points_len,
);

typedef _dart_xcb_poly_line_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int points_len,
);

typedef _c_xcb_poly_line_points = ffi.Pointer<xcb_point_t> Function(
  ffi.Pointer<xcb_poly_line_request_t> R,
);

typedef _dart_xcb_poly_line_points = ffi.Pointer<xcb_point_t> Function(
  ffi.Pointer<xcb_poly_line_request_t> R,
);

typedef _c_xcb_poly_line_points_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_line_request_t> R,
);

typedef _dart_xcb_poly_line_points_length = int Function(
  ffi.Pointer<xcb_poly_line_request_t> R,
);

typedef _c_xcb_segment_next = ffi.Void Function(
  ffi.Pointer<xcb_segment_iterator_t> i,
);

typedef _dart_xcb_segment_next = void Function(
  ffi.Pointer<xcb_segment_iterator_t> i,
);

typedef _c_xcb_poly_segment_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 segments_len,
);

typedef _dart_xcb_poly_segment_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int segments_len,
);

typedef _c_xcb_poly_segment_segments = ffi.Pointer<xcb_segment_t> Function(
  ffi.Pointer<xcb_poly_segment_request_t> R,
);

typedef _dart_xcb_poly_segment_segments = ffi.Pointer<xcb_segment_t> Function(
  ffi.Pointer<xcb_poly_segment_request_t> R,
);

typedef _c_xcb_poly_segment_segments_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_segment_request_t> R,
);

typedef _dart_xcb_poly_segment_segments_length = int Function(
  ffi.Pointer<xcb_poly_segment_request_t> R,
);

typedef _c_xcb_poly_rectangle_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 rectangles_len,
);

typedef _dart_xcb_poly_rectangle_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int rectangles_len,
);

typedef _c_xcb_poly_rectangle_rectangles = ffi.Pointer<xcb_rectangle_t>
    Function(
  ffi.Pointer<xcb_poly_rectangle_request_t> R,
);

typedef _dart_xcb_poly_rectangle_rectangles = ffi.Pointer<xcb_rectangle_t>
    Function(
  ffi.Pointer<xcb_poly_rectangle_request_t> R,
);

typedef _c_xcb_poly_rectangle_rectangles_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_rectangle_request_t> R,
);

typedef _dart_xcb_poly_rectangle_rectangles_length = int Function(
  ffi.Pointer<xcb_poly_rectangle_request_t> R,
);

typedef _c_xcb_poly_arc_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 arcs_len,
);

typedef _dart_xcb_poly_arc_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int arcs_len,
);

typedef _c_xcb_poly_arc_arcs = ffi.Pointer<xcb_arc_t> Function(
  ffi.Pointer<xcb_poly_arc_request_t> R,
);

typedef _dart_xcb_poly_arc_arcs = ffi.Pointer<xcb_arc_t> Function(
  ffi.Pointer<xcb_poly_arc_request_t> R,
);

typedef _c_xcb_poly_arc_arcs_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_arc_request_t> R,
);

typedef _dart_xcb_poly_arc_arcs_length = int Function(
  ffi.Pointer<xcb_poly_arc_request_t> R,
);

typedef _c_xcb_fill_poly_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 points_len,
);

typedef _dart_xcb_fill_poly_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int points_len,
);

typedef _c_xcb_fill_poly_points = ffi.Pointer<xcb_point_t> Function(
  ffi.Pointer<xcb_fill_poly_request_t> R,
);

typedef _dart_xcb_fill_poly_points = ffi.Pointer<xcb_point_t> Function(
  ffi.Pointer<xcb_fill_poly_request_t> R,
);

typedef _c_xcb_fill_poly_points_length = ffi.Int32 Function(
  ffi.Pointer<xcb_fill_poly_request_t> R,
);

typedef _dart_xcb_fill_poly_points_length = int Function(
  ffi.Pointer<xcb_fill_poly_request_t> R,
);

typedef _c_xcb_poly_fill_rectangle_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 rectangles_len,
);

typedef _dart_xcb_poly_fill_rectangle_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int rectangles_len,
);

typedef _c_xcb_poly_fill_rectangle_rectangles = ffi.Pointer<xcb_rectangle_t>
    Function(
  ffi.Pointer<xcb_poly_fill_rectangle_request_t> R,
);

typedef _dart_xcb_poly_fill_rectangle_rectangles = ffi.Pointer<xcb_rectangle_t>
    Function(
  ffi.Pointer<xcb_poly_fill_rectangle_request_t> R,
);

typedef _c_xcb_poly_fill_rectangle_rectangles_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_fill_rectangle_request_t> R,
);

typedef _dart_xcb_poly_fill_rectangle_rectangles_length = int Function(
  ffi.Pointer<xcb_poly_fill_rectangle_request_t> R,
);

typedef _c_xcb_poly_fill_arc_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 arcs_len,
);

typedef _dart_xcb_poly_fill_arc_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int arcs_len,
);

typedef _c_xcb_poly_fill_arc_arcs = ffi.Pointer<xcb_arc_t> Function(
  ffi.Pointer<xcb_poly_fill_arc_request_t> R,
);

typedef _dart_xcb_poly_fill_arc_arcs = ffi.Pointer<xcb_arc_t> Function(
  ffi.Pointer<xcb_poly_fill_arc_request_t> R,
);

typedef _c_xcb_poly_fill_arc_arcs_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_fill_arc_request_t> R,
);

typedef _dart_xcb_poly_fill_arc_arcs_length = int Function(
  ffi.Pointer<xcb_poly_fill_arc_request_t> R,
);

typedef _c_xcb_put_image_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 data_len,
);

typedef _dart_xcb_put_image_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int data_len,
);

typedef _c_xcb_put_image_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_put_image_request_t> R,
);

typedef _dart_xcb_put_image_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_put_image_request_t> R,
);

typedef _c_xcb_put_image_data_length = ffi.Int32 Function(
  ffi.Pointer<xcb_put_image_request_t> R,
);

typedef _dart_xcb_put_image_data_length = int Function(
  ffi.Pointer<xcb_put_image_request_t> R,
);

typedef _c_xcb_get_image_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_get_image_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_image_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_get_image_reply_t> R,
);

typedef _dart_xcb_get_image_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_get_image_reply_t> R,
);

typedef _c_xcb_get_image_data_length = ffi.Int32 Function(
  ffi.Pointer<xcb_get_image_reply_t> R,
);

typedef _dart_xcb_get_image_data_length = int Function(
  ffi.Pointer<xcb_get_image_reply_t> R,
);

typedef _c_xcb_poly_text_8_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 items_len,
);

typedef _dart_xcb_poly_text_8_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int items_len,
);

typedef _c_xcb_poly_text_8_items = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_poly_text_8_request_t> R,
);

typedef _dart_xcb_poly_text_8_items = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_poly_text_8_request_t> R,
);

typedef _c_xcb_poly_text_8_items_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_text_8_request_t> R,
);

typedef _dart_xcb_poly_text_8_items_length = int Function(
  ffi.Pointer<xcb_poly_text_8_request_t> R,
);

typedef _c_xcb_poly_text_16_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 items_len,
);

typedef _dart_xcb_poly_text_16_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int items_len,
);

typedef _c_xcb_poly_text_16_items = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_poly_text_16_request_t> R,
);

typedef _dart_xcb_poly_text_16_items = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_poly_text_16_request_t> R,
);

typedef _c_xcb_poly_text_16_items_length = ffi.Int32 Function(
  ffi.Pointer<xcb_poly_text_16_request_t> R,
);

typedef _dart_xcb_poly_text_16_items_length = int Function(
  ffi.Pointer<xcb_poly_text_16_request_t> R,
);

typedef _c_xcb_image_text_8_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_image_text_8_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_image_text_8_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_image_text_8_request_t> R,
);

typedef _dart_xcb_image_text_8_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_image_text_8_request_t> R,
);

typedef _c_xcb_image_text_8_string_length = ffi.Int32 Function(
  ffi.Pointer<xcb_image_text_8_request_t> R,
);

typedef _dart_xcb_image_text_8_string_length = int Function(
  ffi.Pointer<xcb_image_text_8_request_t> R,
);

typedef _c_xcb_image_text_16_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_image_text_16_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_image_text_16_string = ffi.Pointer<xcb_char2b_t> Function(
  ffi.Pointer<xcb_image_text_16_request_t> R,
);

typedef _dart_xcb_image_text_16_string = ffi.Pointer<xcb_char2b_t> Function(
  ffi.Pointer<xcb_image_text_16_request_t> R,
);

typedef _c_xcb_image_text_16_string_length = ffi.Int32 Function(
  ffi.Pointer<xcb_image_text_16_request_t> R,
);

typedef _dart_xcb_image_text_16_string_length = int Function(
  ffi.Pointer<xcb_image_text_16_request_t> R,
);

typedef _c_xcb_list_installed_colormaps_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_list_installed_colormaps_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_list_installed_colormaps_cmaps = ffi.Pointer<ffi.Uint32>
    Function(
  ffi.Pointer<xcb_list_installed_colormaps_reply_t> R,
);

typedef _dart_xcb_list_installed_colormaps_cmaps = ffi.Pointer<ffi.Uint32>
    Function(
  ffi.Pointer<xcb_list_installed_colormaps_reply_t> R,
);

typedef _c_xcb_list_installed_colormaps_cmaps_length = ffi.Int32 Function(
  ffi.Pointer<xcb_list_installed_colormaps_reply_t> R,
);

typedef _dart_xcb_list_installed_colormaps_cmaps_length = int Function(
  ffi.Pointer<xcb_list_installed_colormaps_reply_t> R,
);

typedef _c_xcb_alloc_named_color_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_alloc_named_color_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_alloc_color_cells_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_alloc_color_cells_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_alloc_color_cells_pixels = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
);

typedef _dart_xcb_alloc_color_cells_pixels = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
);

typedef _c_xcb_alloc_color_cells_pixels_length = ffi.Int32 Function(
  ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
);

typedef _dart_xcb_alloc_color_cells_pixels_length = int Function(
  ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
);

typedef _c_xcb_alloc_color_cells_masks = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
);

typedef _dart_xcb_alloc_color_cells_masks = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
);

typedef _c_xcb_alloc_color_cells_masks_length = ffi.Int32 Function(
  ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
);

typedef _dart_xcb_alloc_color_cells_masks_length = int Function(
  ffi.Pointer<xcb_alloc_color_cells_reply_t> R,
);

typedef _c_xcb_alloc_color_planes_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_alloc_color_planes_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_alloc_color_planes_pixels = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_alloc_color_planes_reply_t> R,
);

typedef _dart_xcb_alloc_color_planes_pixels = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_alloc_color_planes_reply_t> R,
);

typedef _c_xcb_alloc_color_planes_pixels_length = ffi.Int32 Function(
  ffi.Pointer<xcb_alloc_color_planes_reply_t> R,
);

typedef _dart_xcb_alloc_color_planes_pixels_length = int Function(
  ffi.Pointer<xcb_alloc_color_planes_reply_t> R,
);

typedef _c_xcb_free_colors_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 pixels_len,
);

typedef _dart_xcb_free_colors_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int pixels_len,
);

typedef _c_xcb_free_colors_pixels = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_free_colors_request_t> R,
);

typedef _dart_xcb_free_colors_pixels = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_free_colors_request_t> R,
);

typedef _c_xcb_free_colors_pixels_length = ffi.Int32 Function(
  ffi.Pointer<xcb_free_colors_request_t> R,
);

typedef _dart_xcb_free_colors_pixels_length = int Function(
  ffi.Pointer<xcb_free_colors_request_t> R,
);

typedef _c_xcb_coloritem_next = ffi.Void Function(
  ffi.Pointer<xcb_coloritem_iterator_t> i,
);

typedef _dart_xcb_coloritem_next = void Function(
  ffi.Pointer<xcb_coloritem_iterator_t> i,
);

typedef _c_xcb_store_colors_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 items_len,
);

typedef _dart_xcb_store_colors_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int items_len,
);

typedef _c_xcb_store_colors_items = ffi.Pointer<xcb_coloritem_t> Function(
  ffi.Pointer<xcb_store_colors_request_t> R,
);

typedef _dart_xcb_store_colors_items = ffi.Pointer<xcb_coloritem_t> Function(
  ffi.Pointer<xcb_store_colors_request_t> R,
);

typedef _c_xcb_store_colors_items_length = ffi.Int32 Function(
  ffi.Pointer<xcb_store_colors_request_t> R,
);

typedef _dart_xcb_store_colors_items_length = int Function(
  ffi.Pointer<xcb_store_colors_request_t> R,
);

typedef _c_xcb_store_named_color_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_store_named_color_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_store_named_color_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_store_named_color_request_t> R,
);

typedef _dart_xcb_store_named_color_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<xcb_store_named_color_request_t> R,
);

typedef _c_xcb_store_named_color_name_length = ffi.Int32 Function(
  ffi.Pointer<xcb_store_named_color_request_t> R,
);

typedef _dart_xcb_store_named_color_name_length = int Function(
  ffi.Pointer<xcb_store_named_color_request_t> R,
);

typedef _c_xcb_rgb_next = ffi.Void Function(
  ffi.Pointer<xcb_rgb_iterator_t> i,
);

typedef _dart_xcb_rgb_next = void Function(
  ffi.Pointer<xcb_rgb_iterator_t> i,
);

typedef _c_xcb_query_colors_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 pixels_len,
);

typedef _dart_xcb_query_colors_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int pixels_len,
);

typedef _c_xcb_query_colors_colors = ffi.Pointer<xcb_rgb_t> Function(
  ffi.Pointer<xcb_query_colors_reply_t> R,
);

typedef _dart_xcb_query_colors_colors = ffi.Pointer<xcb_rgb_t> Function(
  ffi.Pointer<xcb_query_colors_reply_t> R,
);

typedef _c_xcb_query_colors_colors_length = ffi.Int32 Function(
  ffi.Pointer<xcb_query_colors_reply_t> R,
);

typedef _dart_xcb_query_colors_colors_length = int Function(
  ffi.Pointer<xcb_query_colors_reply_t> R,
);

typedef _c_xcb_lookup_color_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_lookup_color_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_query_extension_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_query_extension_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_list_extensions_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_list_extensions_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_list_extensions_names_length = ffi.Int32 Function(
  ffi.Pointer<xcb_list_extensions_reply_t> R,
);

typedef _dart_xcb_list_extensions_names_length = int Function(
  ffi.Pointer<xcb_list_extensions_reply_t> R,
);

typedef _c_xcb_change_keyboard_mapping_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_change_keyboard_mapping_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_change_keyboard_mapping_keysyms = ffi.Pointer<ffi.Uint32>
    Function(
  ffi.Pointer<xcb_change_keyboard_mapping_request_t> R,
);

typedef _dart_xcb_change_keyboard_mapping_keysyms = ffi.Pointer<ffi.Uint32>
    Function(
  ffi.Pointer<xcb_change_keyboard_mapping_request_t> R,
);

typedef _c_xcb_change_keyboard_mapping_keysyms_length = ffi.Int32 Function(
  ffi.Pointer<xcb_change_keyboard_mapping_request_t> R,
);

typedef _dart_xcb_change_keyboard_mapping_keysyms_length = int Function(
  ffi.Pointer<xcb_change_keyboard_mapping_request_t> R,
);

typedef _c_xcb_get_keyboard_mapping_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_get_keyboard_mapping_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_keyboard_mapping_keysyms = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_get_keyboard_mapping_reply_t> R,
);

typedef _dart_xcb_get_keyboard_mapping_keysyms = ffi.Pointer<ffi.Uint32>
    Function(
  ffi.Pointer<xcb_get_keyboard_mapping_reply_t> R,
);

typedef _c_xcb_get_keyboard_mapping_keysyms_length = ffi.Int32 Function(
  ffi.Pointer<xcb_get_keyboard_mapping_reply_t> R,
);

typedef _dart_xcb_get_keyboard_mapping_keysyms_length = int Function(
  ffi.Pointer<xcb_get_keyboard_mapping_reply_t> R,
);

typedef _c_xcb_change_keyboard_control_value_list_serialize = ffi.Int32
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_change_keyboard_control_value_list_t> _aux,
);

typedef _dart_xcb_change_keyboard_control_value_list_serialize = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> _buffer,
  int value_mask,
  ffi.Pointer<xcb_change_keyboard_control_value_list_t> _aux,
);

typedef _c_xcb_change_keyboard_control_value_list_unpack = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
  ffi.Pointer<xcb_change_keyboard_control_value_list_t> _aux,
);

typedef _dart_xcb_change_keyboard_control_value_list_unpack = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
  ffi.Pointer<xcb_change_keyboard_control_value_list_t> _aux,
);

typedef _c_xcb_change_keyboard_control_value_list_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
  ffi.Uint32 value_mask,
);

typedef _dart_xcb_change_keyboard_control_value_list_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
  int value_mask,
);

typedef _c_xcb_change_keyboard_control_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_change_keyboard_control_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_change_keyboard_control_value_list = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<xcb_change_keyboard_control_request_t> R,
);

typedef _dart_xcb_change_keyboard_control_value_list = ffi.Pointer<ffi.Void>
    Function(
  ffi.Pointer<xcb_change_keyboard_control_request_t> R,
);

typedef _c_xcb_change_hosts_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_change_hosts_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_change_hosts_address = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_change_hosts_request_t> R,
);

typedef _dart_xcb_change_hosts_address = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_change_hosts_request_t> R,
);

typedef _c_xcb_change_hosts_address_length = ffi.Int32 Function(
  ffi.Pointer<xcb_change_hosts_request_t> R,
);

typedef _dart_xcb_change_hosts_address_length = int Function(
  ffi.Pointer<xcb_change_hosts_request_t> R,
);

typedef _c_xcb_host_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_host_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_host_address = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_host_t> R,
);

typedef _dart_xcb_host_address = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_host_t> R,
);

typedef _c_xcb_host_address_length = ffi.Int32 Function(
  ffi.Pointer<xcb_host_t> R,
);

typedef _dart_xcb_host_address_length = int Function(
  ffi.Pointer<xcb_host_t> R,
);

typedef _c_xcb_host_next = ffi.Void Function(
  ffi.Pointer<xcb_host_iterator_t> i,
);

typedef _dart_xcb_host_next = void Function(
  ffi.Pointer<xcb_host_iterator_t> i,
);

typedef _c_xcb_list_hosts_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_list_hosts_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_list_hosts_hosts_length = ffi.Int32 Function(
  ffi.Pointer<xcb_list_hosts_reply_t> R,
);

typedef _dart_xcb_list_hosts_hosts_length = int Function(
  ffi.Pointer<xcb_list_hosts_reply_t> R,
);

typedef _c_xcb_rotate_properties_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_rotate_properties_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_rotate_properties_atoms = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_rotate_properties_request_t> R,
);

typedef _dart_xcb_rotate_properties_atoms = ffi.Pointer<ffi.Uint32> Function(
  ffi.Pointer<xcb_rotate_properties_request_t> R,
);

typedef _c_xcb_rotate_properties_atoms_length = ffi.Int32 Function(
  ffi.Pointer<xcb_rotate_properties_request_t> R,
);

typedef _dart_xcb_rotate_properties_atoms_length = int Function(
  ffi.Pointer<xcb_rotate_properties_request_t> R,
);

typedef _c_xcb_set_pointer_mapping_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_set_pointer_mapping_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_pointer_mapping_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_get_pointer_mapping_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_pointer_mapping_map = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_get_pointer_mapping_reply_t> R,
);

typedef _dart_xcb_get_pointer_mapping_map = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_get_pointer_mapping_reply_t> R,
);

typedef _c_xcb_get_pointer_mapping_map_length = ffi.Int32 Function(
  ffi.Pointer<xcb_get_pointer_mapping_reply_t> R,
);

typedef _dart_xcb_get_pointer_mapping_map_length = int Function(
  ffi.Pointer<xcb_get_pointer_mapping_reply_t> R,
);

typedef _c_xcb_set_modifier_mapping_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_set_modifier_mapping_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_modifier_mapping_sizeof = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _dart_xcb_get_modifier_mapping_sizeof = int Function(
  ffi.Pointer<ffi.Void> _buffer,
);

typedef _c_xcb_get_modifier_mapping_keycodes = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<xcb_get_modifier_mapping_reply_t> R,
);

typedef _dart_xcb_get_modifier_mapping_keycodes = ffi.Pointer<ffi.Uint8>
    Function(
  ffi.Pointer<xcb_get_modifier_mapping_reply_t> R,
);

typedef _c_xcb_get_modifier_mapping_keycodes_length = ffi.Int32 Function(
  ffi.Pointer<xcb_get_modifier_mapping_reply_t> R,
);

typedef _dart_xcb_get_modifier_mapping_keycodes_length = int Function(
  ffi.Pointer<xcb_get_modifier_mapping_reply_t> R,
);

typedef _c_xcb_flush = ffi.Int32 Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_flush = int Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_get_maximum_request_length = ffi.Uint32 Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_get_maximum_request_length = int Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_prefetch_maximum_request_length = ffi.Void Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_prefetch_maximum_request_length = void Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_wait_for_event = ffi.Pointer<xcb_generic_event_t> Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_wait_for_event = ffi.Pointer<xcb_generic_event_t> Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_poll_for_event = ffi.Pointer<xcb_generic_event_t> Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_poll_for_event = ffi.Pointer<xcb_generic_event_t> Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_poll_for_queued_event = ffi.Pointer<xcb_generic_event_t>
    Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_poll_for_queued_event = ffi.Pointer<xcb_generic_event_t>
    Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_poll_for_special_event = ffi.Pointer<xcb_generic_event_t>
    Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_special_event> se,
);

typedef _dart_xcb_poll_for_special_event = ffi.Pointer<xcb_generic_event_t>
    Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_special_event> se,
);

typedef _c_xcb_wait_for_special_event = ffi.Pointer<xcb_generic_event_t>
    Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_special_event> se,
);

typedef _dart_xcb_wait_for_special_event = ffi.Pointer<xcb_generic_event_t>
    Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_special_event> se,
);

typedef _c_xcb_register_for_special_xge = ffi.Pointer<xcb_special_event>
    Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_extension_t> ext,
  ffi.Uint32 eid,
  ffi.Pointer<ffi.Uint32> stamp,
);

typedef _dart_xcb_register_for_special_xge = ffi.Pointer<xcb_special_event>
    Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_extension_t> ext,
  int eid,
  ffi.Pointer<ffi.Uint32> stamp,
);

typedef _c_xcb_unregister_for_special_event = ffi.Void Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_special_event> se,
);

typedef _dart_xcb_unregister_for_special_event = void Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_special_event> se,
);

typedef _c_xcb_discard_reply = ffi.Void Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Uint32 sequence,
);

typedef _dart_xcb_discard_reply = void Function(
  ffi.Pointer<xcb_connection_t> c,
  int sequence,
);

typedef _c_xcb_discard_reply64 = ffi.Void Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Uint64 sequence,
);

typedef _dart_xcb_discard_reply64 = void Function(
  ffi.Pointer<xcb_connection_t> c,
  int sequence,
);

typedef _c_xcb_get_extension_data = ffi.Pointer<xcb_query_extension_reply_t>
    Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_extension_t> ext,
);

typedef _dart_xcb_get_extension_data = ffi.Pointer<xcb_query_extension_reply_t>
    Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_extension_t> ext,
);

typedef _c_xcb_prefetch_extension_data = ffi.Void Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_extension_t> ext,
);

typedef _dart_xcb_prefetch_extension_data = void Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<xcb_extension_t> ext,
);

typedef _c_xcb_get_setup = ffi.Pointer<xcb_setup_t> Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_get_setup = ffi.Pointer<xcb_setup_t> Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_get_file_descriptor = ffi.Int32 Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_get_file_descriptor = int Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_connection_has_error = ffi.Int32 Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_connection_has_error = int Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_connect_to_fd = ffi.Pointer<xcb_connection_t> Function(
  ffi.Int32 fd,
  ffi.Pointer<xcb_auth_info_t> auth_info,
);

typedef _dart_xcb_connect_to_fd = ffi.Pointer<xcb_connection_t> Function(
  int fd,
  ffi.Pointer<xcb_auth_info_t> auth_info,
);

typedef _c_xcb_disconnect = ffi.Void Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_disconnect = void Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_parse_display = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> host,
  ffi.Pointer<ffi.Int32> display,
  ffi.Pointer<ffi.Int32> screen,
);

typedef _dart_xcb_parse_display = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> host,
  ffi.Pointer<ffi.Int32> display,
  ffi.Pointer<ffi.Int32> screen,
);

typedef _c_xcb_connect = ffi.Pointer<xcb_connection_t> Function(
  ffi.Pointer<ffi.Int8> displayname,
  ffi.Pointer<ffi.Int32> screenp,
);

typedef _dart_xcb_connect = ffi.Pointer<xcb_connection_t> Function(
  ffi.Pointer<ffi.Int8> displayname,
  ffi.Pointer<ffi.Int32> screenp,
);

typedef _c_xcb_connect_to_display_with_auth_info = ffi.Pointer<xcb_connection_t>
    Function(
  ffi.Pointer<ffi.Int8> display,
  ffi.Pointer<xcb_auth_info_t> auth,
  ffi.Pointer<ffi.Int32> screen,
);

typedef _dart_xcb_connect_to_display_with_auth_info
    = ffi.Pointer<xcb_connection_t> Function(
  ffi.Pointer<ffi.Int8> display,
  ffi.Pointer<xcb_auth_info_t> auth,
  ffi.Pointer<ffi.Int32> screen,
);

typedef _c_xcb_generate_id = ffi.Uint32 Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_generate_id = int Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_total_read = ffi.Uint64 Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_total_read = int Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_xcb_total_written = ffi.Uint64 Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _dart_xcb_total_written = int Function(
  ffi.Pointer<xcb_connection_t> c,
);

typedef _c_XGetXCBConnection = ffi.Pointer<xcb_connection_t> Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_XGetXCBConnection = ffi.Pointer<xcb_connection_t> Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_XSetEventQueueOwner = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 owner,
);

typedef _dart_XSetEventQueueOwner = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int owner,
);

typedef _c___errno_location = ffi.Pointer<ffi.Int32> Function();

typedef _dart___errno_location = ffi.Pointer<ffi.Int32> Function();

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dest,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strcoll_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strcoll_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_strxfrm_l = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strxfrm_l = int Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __string,
  ffi.Uint64 __n,
);

typedef _dart_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __string,
  int __n,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __reject,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __reject,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __accept,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __haystack,
  ffi.Pointer<ffi.Int8> __needle,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __haystack,
  ffi.Pointer<ffi.Int8> __needle,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c___strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _dart___strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _c_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _dart_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __save_ptr,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __string,
  ffi.Uint64 __maxlen,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> __string,
  int __maxlen,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
);

typedef _c_strerror_r = ffi.Int32 Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __buflen,
);

typedef _dart_strerror_r = int Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __buf,
  int __buflen,
);

typedef _c_strerror_l = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_strerror_l = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_bcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_bcopy = ffi.Void Function(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  ffi.Uint64 __n,
);

typedef _dart_bcopy = void Function(
  ffi.Pointer<ffi.Void> __src,
  ffi.Pointer<ffi.Void> __dest,
  int __n,
);

typedef _c_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __n,
);

typedef _dart_bzero = void Function(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

typedef _c_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_ffs = ffi.Int32 Function(
  ffi.Int32 __i,
);

typedef _dart_ffs = int Function(
  int __i,
);

typedef _c_ffsl = ffi.Int32 Function(
  ffi.Int64 __l,
);

typedef _dart_ffsl = int Function(
  int __l,
);

typedef _c_ffsll = ffi.Int32 Function(
  ffi.Int64 __ll,
);

typedef _dart_ffsll = int Function(
  int __ll,
);

typedef _c_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strcasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_strcasecmp_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_strncasecmp_l = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _dart_strncasecmp_l = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
  ffi.Pointer<__locale_struct> __loc,
);

typedef _c_explicit_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __n,
);

typedef _dart_explicit_bzero = void Function(
  ffi.Pointer<ffi.Void> __s,
  int __n,
);

typedef _c_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_strsignal = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __sig,
);

typedef _dart_strsignal = ffi.Pointer<ffi.Int8> Function(
  int __sig,
);

typedef _c___stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart___stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c___stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart___stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dest,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c___ctype_get_mb_cur_max = ffi.Uint64 Function();

typedef _dart___ctype_get_mb_cur_max = int Function();

typedef _c_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
);

typedef _c_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _c_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
);

typedef _c_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoq = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoq = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtouq = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtouq = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_l64a = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 __n,
);

typedef _dart_l64a = ffi.Pointer<ffi.Int8> Function(
  int __n,
);

typedef _c_a64l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_a64l = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_random = ffi.Int64 Function();

typedef _dart_random = int Function();

typedef _c_srandom = ffi.Void Function(
  ffi.Uint32 __seed,
);

typedef _dart_srandom = void Function(
  int __seed,
);

typedef _c_initstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Uint64 __statelen,
);

typedef _dart_initstate = ffi.Pointer<ffi.Int8> Function(
  int __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  int __statelen,
);

typedef _c_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __statebuf,
);

typedef _dart_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __statebuf,
);

typedef _c_random_r = ffi.Int32 Function(
  ffi.Pointer<random_data> __buf,
  ffi.Pointer<ffi.Int32> __result,
);

typedef _dart_random_r = int Function(
  ffi.Pointer<random_data> __buf,
  ffi.Pointer<ffi.Int32> __result,
);

typedef _c_srandom_r = ffi.Int32 Function(
  ffi.Uint32 __seed,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_srandom_r = int Function(
  int __seed,
  ffi.Pointer<random_data> __buf,
);

typedef _c_initstate_r = ffi.Int32 Function(
  ffi.Uint32 __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Uint64 __statelen,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_initstate_r = int Function(
  int __seed,
  ffi.Pointer<ffi.Int8> __statebuf,
  int __statelen,
  ffi.Pointer<random_data> __buf,
);

typedef _c_setstate_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Pointer<random_data> __buf,
);

typedef _dart_setstate_r = int Function(
  ffi.Pointer<ffi.Int8> __statebuf,
  ffi.Pointer<random_data> __buf,
);

typedef _c_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef _c_srand = ffi.Void Function(
  ffi.Uint32 __seed,
);

typedef _dart_srand = void Function(
  int __seed,
);

typedef _c_rand_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> __seed,
);

typedef _dart_rand_r = int Function(
  ffi.Pointer<ffi.Uint32> __seed,
);

typedef _c_drand48 = ffi.Double Function();

typedef _dart_drand48 = double Function();

typedef _c_erand48 = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_erand48 = double Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_lrand48 = ffi.Int64 Function();

typedef _dart_lrand48 = int Function();

typedef _c_nrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_nrand48 = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_mrand48 = ffi.Int64 Function();

typedef _dart_mrand48 = int Function();

typedef _c_jrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _dart_jrand48 = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
);

typedef _c_srand48 = ffi.Void Function(
  ffi.Int64 __seedval,
);

typedef _dart_srand48 = void Function(
  int __seedval,
);

typedef _c_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
);

typedef _dart_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
);

typedef _c_lcong48 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> __param,
);

typedef _dart_lcong48 = void Function(
  ffi.Pointer<ffi.Uint16> __param,
);

typedef _c_drand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _dart_drand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _c_erand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _dart_erand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Double> __result,
);

typedef _c_lrand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_lrand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_nrand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_nrand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_mrand48_r = ffi.Int32 Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_mrand48_r = int Function(
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_jrand48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _dart_jrand48_r = int Function(
  ffi.Pointer<ffi.Uint16> __xsubi,
  ffi.Pointer<drand48_data> __buffer,
  ffi.Pointer<ffi.Int64> __result,
);

typedef _c_srand48_r = ffi.Int32 Function(
  ffi.Int64 __seedval,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_srand48_r = int Function(
  int __seedval,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_seed48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_seed48_r = int Function(
  ffi.Pointer<ffi.Uint16> __seed16v,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_lcong48_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __param,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _dart_lcong48_r = int Function(
  ffi.Pointer<ffi.Uint16> __param,
  ffi.Pointer<drand48_data> __buffer,
);

typedef _c_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __nmemb,
  ffi.Uint64 __size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int __nmemb,
  int __size,
);

typedef _c_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_reallocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __nmemb,
  ffi.Uint64 __size,
);

typedef _dart_reallocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __nmemb,
  int __size,
);

typedef _c_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> __ptr,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> __ptr,
);

typedef _c_alloca = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_alloca = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_valloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_valloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_posix_memalign = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_posix_memalign = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

typedef _c_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  int __alignment,
  int __size,
);

typedef _c_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef _typedefC_23 = ffi.Void Function();

typedef _c_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_23>> __func,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_23>> __func,
);

typedef _typedefC_24 = ffi.Void Function();

typedef _c_at_quick_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_24>> __func,
);

typedef _dart_at_quick_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_24>> __func,
);

typedef _typedefC_25 = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_on_exit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_25>> __func,
  ffi.Pointer<ffi.Void> __arg,
);

typedef _dart_on_exit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_25>> __func,
  ffi.Pointer<ffi.Void> __arg,
);

typedef _c_exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart_exit = void Function(
  int __status,
);

typedef _c_quick_exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart_quick_exit = void Function(
  int __status,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart__Exit = void Function(
  int __status,
);

typedef _c_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __string,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> __string,
);

typedef _c_setenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  ffi.Int32 __replace,
);

typedef _dart_setenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  int __replace,
);

typedef _c_unsetenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_unsetenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_clearenv = ffi.Int32 Function();

typedef _dart_clearenv = int Function();

typedef _c_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_mkstemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mkstemp = int Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_mkstemps = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __template,
  ffi.Int32 __suffixlen,
);

typedef _dart_mkstemps = int Function(
  ffi.Pointer<ffi.Int8> __template,
  int __suffixlen,
);

typedef _c_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _dart_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __template,
);

typedef _c_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __command,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> __command,
);

typedef _c_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __resolved,
);

typedef _dart_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __resolved,
);

typedef __compar_fn_t = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nmemb,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _c_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nmemb,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nmemb,
  int __size,
  ffi.Pointer<ffi.NativeFunction<__compar_fn_t>> __compar,
);

typedef _c_abs = ffi.Int32 Function(
  ffi.Int32 __x,
);

typedef _dart_abs = int Function(
  int __x,
);

typedef _c_labs = ffi.Int64 Function(
  ffi.Int64 __x,
);

typedef _dart_labs = int Function(
  int __x,
);

typedef _c_llabs = ffi.Int64 Function(
  ffi.Int64 __x,
);

typedef _dart_llabs = int Function(
  int __x,
);

typedef _c_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _c_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
);

typedef _c_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_ecvt_r = ffi.Int32 Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_ecvt_r = int Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_fcvt_r = ffi.Int32 Function(
  ffi.Double __value,
  ffi.Int32 __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_fcvt_r = int Function(
  double __value,
  int __ndigit,
  ffi.Pointer<ffi.Int32> __decpt,
  ffi.Pointer<ffi.Int32> __sign,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __pwc,
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Int32> __pwc,
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __wchar,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __wchar,
);

typedef _c_mbstowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_wcstombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int32> __pwcs,
  ffi.Uint64 __n,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int32> __pwcs,
  int __n,
);

typedef _c_rpmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __response,
);

typedef _dart_rpmatch = int Function(
  ffi.Pointer<ffi.Int8> __response,
);

typedef _c_getsubopt = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
);

typedef _dart_getsubopt = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
);

typedef _c_getloadavg = ffi.Int32 Function(
  ffi.Pointer<ffi.Double> __loadavg,
  ffi.Int32 __nelem,
);

typedef _dart_getloadavg = int Function(
  ffi.Pointer<ffi.Double> __loadavg,
  int __nelem,
);

typedef _c__XGetRequest = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint8 type,
  ffi.Uint64 len,
);

typedef _dart__XGetRequest = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<_XDisplay> dpy,
  int type,
  int len,
);

typedef _c__XFlushGCCache = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XGC> gc,
);

typedef _dart__XFlushGCCache = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XGC> gc,
);

typedef _c__XData32 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int64> data,
  ffi.Uint32 len,
);

typedef _dart__XData32 = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int64> data,
  int len,
);

typedef _c__XRead32 = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int64> data,
  ffi.Int64 len,
);

typedef _dart__XRead32 = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int64> data,
  int len,
);

typedef _c__XDeqAsyncHandler = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XAsyncHandler> handler,
);

typedef _dart__XDeqAsyncHandler = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XAsyncHandler> handler,
);

typedef _c__XError = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xError> arg1,
);

typedef _dart__XError = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xError> arg1,
);

typedef _c__XIOError = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart__XIOError = int Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c__XEatData = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__XEatData = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XEatDataWords = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__XEatDataWords = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XAllocScratch = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__XAllocScratch = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XAllocTemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__XAllocTemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XFreeTemp = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart__XFreeTemp = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XVIDtoVisual = ffi.Pointer<Visual> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__XVIDtoVisual = ffi.Pointer<Visual> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XSetLastRequestRead = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xGenericReply> arg1,
);

typedef _dart__XSetLastRequestRead = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xGenericReply> arg1,
);

typedef _c__XGetHostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XGetHostname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c__XScreenOfWindow = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__XScreenOfWindow = ffi.Pointer<Screen> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XGetAsyncData = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Int32 arg5,
  ffi.Int32 arg6,
);

typedef _dart__XGetAsyncData = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  int arg4,
  int arg5,
  int arg6,
);

typedef _c__XFlush = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart__XFlush = void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c__XEventsQueued = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XEventsQueued = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XReadEvents = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart__XReadEvents = void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c__XRead = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int64 arg2,
);

typedef _dart__XRead = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XReadPad = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int64 arg2,
);

typedef _dart__XReadPad = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XSend = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int64 arg2,
);

typedef _dart__XSend = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XEnq = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xEvent> arg1,
);

typedef _dart__XEnq = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xEvent> arg1,
);

typedef _c__XDeq = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XQEvent> arg1,
  ffi.Pointer<_XQEvent> arg2,
);

typedef _dart__XDeq = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XQEvent> arg1,
  ffi.Pointer<_XQEvent> arg2,
);

typedef _c__XUnknownWireEventCookie = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
  ffi.Pointer<xEvent> arg2,
);

typedef _dart__XUnknownWireEventCookie = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
  ffi.Pointer<xEvent> arg2,
);

typedef _c__XUnknownCopyEventCookie = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
  ffi.Pointer<XGenericEventCookie> arg2,
);

typedef _dart__XUnknownCopyEventCookie = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XGenericEventCookie> arg1,
  ffi.Pointer<XGenericEventCookie> arg2,
);

typedef _c__XDefaultWireError = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XErrorEvent> he,
  ffi.Pointer<xError> we,
);

typedef _dart__XDefaultWireError = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XErrorEvent> he,
  ffi.Pointer<xError> we,
);

typedef _c__XPollfdCacheInit = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XPollfdCacheInit = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XPollfdCacheAdd = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 fd,
);

typedef _dart__XPollfdCacheAdd = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int fd,
);

typedef _c__XPollfdCacheDel = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 fd,
);

typedef _dart__XPollfdCacheDel = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int fd,
);

typedef _c__XAllocID = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XAllocID = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XAllocIDs = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Uint64> ids,
  ffi.Int32 count,
);

typedef _dart__XAllocIDs = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Uint64> ids,
  int count,
);

typedef _c__XFreeExtData = ffi.Int32 Function(
  ffi.Pointer<XExtData> arg0,
);

typedef _dart__XFreeExtData = int Function(
  ffi.Pointer<XExtData> arg0,
);

typedef _typedefC_28 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XGC>,
  ffi.Pointer<XExtCodes>,
);

typedef _typedefC_29 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XGC>,
  ffi.Pointer<XExtCodes>,
);

typedef _c_XESetCreateGC = ffi.Pointer<ffi.NativeFunction<_typedefC_28>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_29>> arg2,
);

typedef _dart_XESetCreateGC = ffi.Pointer<ffi.NativeFunction<_typedefC_28>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_29>> arg2,
);

typedef _typedefC_30 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XGC>,
  ffi.Pointer<XExtCodes>,
);

typedef _typedefC_31 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XGC>,
  ffi.Pointer<XExtCodes>,
);

typedef _c_XESetCopyGC = ffi.Pointer<ffi.NativeFunction<_typedefC_30>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_31>> arg2,
);

typedef _dart_XESetCopyGC = ffi.Pointer<ffi.NativeFunction<_typedefC_30>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_31>> arg2,
);

typedef _typedefC_32 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XGC>,
  ffi.Pointer<XExtCodes>,
);

typedef _typedefC_33 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XGC>,
  ffi.Pointer<XExtCodes>,
);

typedef _c_XESetFlushGC = ffi.Pointer<ffi.NativeFunction<_typedefC_32>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_33>> arg2,
);

typedef _dart_XESetFlushGC = ffi.Pointer<ffi.NativeFunction<_typedefC_32>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_33>> arg2,
);

typedef _typedefC_34 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XGC>,
  ffi.Pointer<XExtCodes>,
);

typedef _typedefC_35 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XGC>,
  ffi.Pointer<XExtCodes>,
);

typedef _c_XESetFreeGC = ffi.Pointer<ffi.NativeFunction<_typedefC_34>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_35>> arg2,
);

typedef _dart_XESetFreeGC = ffi.Pointer<ffi.NativeFunction<_typedefC_34>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_35>> arg2,
);

typedef _typedefC_36 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XFontStruct>,
  ffi.Pointer<XExtCodes>,
);

typedef _typedefC_37 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XFontStruct>,
  ffi.Pointer<XExtCodes>,
);

typedef _c_XESetCreateFont = ffi.Pointer<ffi.NativeFunction<_typedefC_36>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_37>> arg2,
);

typedef _dart_XESetCreateFont = ffi.Pointer<ffi.NativeFunction<_typedefC_36>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_37>> arg2,
);

typedef _typedefC_38 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XFontStruct>,
  ffi.Pointer<XExtCodes>,
);

typedef _typedefC_39 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XFontStruct>,
  ffi.Pointer<XExtCodes>,
);

typedef _c_XESetFreeFont = ffi.Pointer<ffi.NativeFunction<_typedefC_38>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_39>> arg2,
);

typedef _dart_XESetFreeFont = ffi.Pointer<ffi.NativeFunction<_typedefC_38>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_39>> arg2,
);

typedef _typedefC_40 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XExtCodes>,
);

typedef _typedefC_41 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XExtCodes>,
);

typedef _c_XESetCloseDisplay = ffi.Pointer<ffi.NativeFunction<_typedefC_40>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_41>> arg2,
);

typedef _dart_XESetCloseDisplay = ffi.Pointer<ffi.NativeFunction<_typedefC_40>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_41>> arg2,
);

typedef _typedefC_42 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<xError>,
  ffi.Pointer<XExtCodes>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_43 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<xError>,
  ffi.Pointer<XExtCodes>,
  ffi.Pointer<ffi.Int32>,
);

typedef _c_XESetError = ffi.Pointer<ffi.NativeFunction<_typedefC_42>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_43>> arg2,
);

typedef _dart_XESetError = ffi.Pointer<ffi.NativeFunction<_typedefC_42>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_43>> arg2,
);

typedef _typedefC_44 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay>,
  ffi.Int32,
  ffi.Pointer<XExtCodes>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_45 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay>,
  ffi.Int32,
  ffi.Pointer<XExtCodes>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c_XESetErrorString = ffi.Pointer<ffi.NativeFunction<_typedefC_44>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_45>> arg2,
);

typedef _dart_XESetErrorString = ffi.Pointer<ffi.NativeFunction<_typedefC_44>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_45>> arg2,
);

typedef _typedefC_46 = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XErrorEvent>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_47 = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XErrorEvent>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_XESetPrintErrorValues = ffi.Pointer<ffi.NativeFunction<_typedefC_46>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_47>> arg2,
);

typedef _dart_XESetPrintErrorValues
    = ffi.Pointer<ffi.NativeFunction<_typedefC_46>> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_47>> arg2,
);

typedef _typedefC_48 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XGenericEventCookie>,
  ffi.Pointer<xEvent>,
);

typedef _typedefC_49 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XGenericEventCookie>,
  ffi.Pointer<xEvent>,
);

typedef _c_XESetWireToEventCookie
    = ffi.Pointer<ffi.NativeFunction<_typedefC_48>> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_49>> arg2,
);

typedef _dart_XESetWireToEventCookie
    = ffi.Pointer<ffi.NativeFunction<_typedefC_48>> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_49>> arg2,
);

typedef _typedefC_50 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XGenericEventCookie>,
  ffi.Pointer<XGenericEventCookie>,
);

typedef _typedefC_51 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XGenericEventCookie>,
  ffi.Pointer<XGenericEventCookie>,
);

typedef _c_XESetCopyEventCookie = ffi.Pointer<ffi.NativeFunction<_typedefC_50>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_51>> arg2,
);

typedef _dart_XESetCopyEventCookie
    = ffi.Pointer<ffi.NativeFunction<_typedefC_50>> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_51>> arg2,
);

typedef _typedefC_52 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XErrorEvent>,
  ffi.Pointer<xError>,
);

typedef _typedefC_53 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XErrorEvent>,
  ffi.Pointer<xError>,
);

typedef _c_XESetWireToError = ffi.Pointer<ffi.NativeFunction<_typedefC_52>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_53>> arg2,
);

typedef _dart_XESetWireToError = ffi.Pointer<ffi.NativeFunction<_typedefC_52>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_53>> arg2,
);

typedef _typedefC_54 = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XExtCodes>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _typedefC_55 = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XExtCodes>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
);

typedef _c_XESetBeforeFlush = ffi.Pointer<ffi.NativeFunction<_typedefC_54>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_55>> arg2,
);

typedef _dart_XESetBeforeFlush = ffi.Pointer<ffi.NativeFunction<_typedefC_54>>
    Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_55>> arg2,
);

typedef _XInternalConnectionProc = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef _c__XRegisterInternalConnection = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.NativeFunction<_XInternalConnectionProc>> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart__XRegisterInternalConnection = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.NativeFunction<_XInternalConnectionProc>> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c__XUnregisterInternalConnection = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XUnregisterInternalConnection = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XProcessInternalConnection = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XConnectionInfo> arg1,
);

typedef _dart__XProcessInternalConnection = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XConnectionInfo> arg1,
);

typedef _c__XTextHeight = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XTextHeight = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XTextHeight16 = ffi.Int32 Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XTextHeight16 = int Function(
  ffi.Pointer<XFontStruct> arg0,
  ffi.Pointer<XChar2b> arg1,
  int arg2,
);

typedef _c__XF86LoadQueryLocaleFont = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<XFontStruct>> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef _dart__XF86LoadQueryLocaleFont = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<XFontStruct>> arg2,
  ffi.Pointer<ffi.Uint64> arg3,
);

typedef _c__XProcessWindowAttributes = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xChangeWindowAttributesReq> req,
  ffi.Uint64 valuemask,
  ffi.Pointer<XSetWindowAttributes> attributes,
);

typedef _dart__XProcessWindowAttributes = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xChangeWindowAttributesReq> req,
  int valuemask,
  ffi.Pointer<XSetWindowAttributes> attributes,
);

typedef _c__XDefaultError = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XErrorEvent> event,
);

typedef _dart__XDefaultError = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XErrorEvent> event,
);

typedef _c__XDefaultIOError = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XDefaultIOError = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XSetClipRectangles = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XGC> gc,
  ffi.Int32 clip_x_origin,
  ffi.Int32 clip_y_origin,
  ffi.Pointer<XRectangle> rectangles,
  ffi.Int32 n,
  ffi.Int32 ordering,
);

typedef _dart__XSetClipRectangles = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XGC> gc,
  int clip_x_origin,
  int clip_y_origin,
  ffi.Pointer<XRectangle> rectangles,
  int n,
  int ordering,
);

typedef _c__XGetWindowAttributes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 w,
  ffi.Pointer<XWindowAttributes> attr,
);

typedef _dart__XGetWindowAttributes = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int w,
  ffi.Pointer<XWindowAttributes> attr,
);

typedef _c__XFreeEventCookies = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XFreeEventCookies = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XFetchEventCookie = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XGenericEventCookie> ev,
);

typedef _dart__XFetchEventCookie = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XGenericEventCookie> ev,
);

typedef _c__XCopyEventCookie = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XGenericEventCookie> in_1,
  ffi.Pointer<XGenericEventCookie> out,
);

typedef _dart__XCopyEventCookie = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XGenericEventCookie> in_1,
  ffi.Pointer<XGenericEventCookie> out,
);

typedef _c_xlocaledir = ffi.Void Function(
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 buf_len,
);

typedef _dart_xlocaledir = void Function(
  ffi.Pointer<ffi.Int8> buf,
  int buf_len,
);

typedef _c_setlocale = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __category,
  ffi.Pointer<ffi.Int8> __locale,
);

typedef _dart_setlocale = ffi.Pointer<ffi.Int8> Function(
  int __category,
  ffi.Pointer<ffi.Int8> __locale,
);

typedef _c_localeconv = ffi.Pointer<lconv> Function();

typedef _dart_localeconv = ffi.Pointer<lconv> Function();

typedef _c_newlocale = ffi.Pointer<__locale_struct> Function(
  ffi.Int32 __category_mask,
  ffi.Pointer<ffi.Int8> __locale,
  ffi.Pointer<__locale_struct> __base,
);

typedef _dart_newlocale = ffi.Pointer<__locale_struct> Function(
  int __category_mask,
  ffi.Pointer<ffi.Int8> __locale,
  ffi.Pointer<__locale_struct> __base,
);

typedef _c_duplocale = ffi.Pointer<__locale_struct> Function(
  ffi.Pointer<__locale_struct> __dataset,
);

typedef _dart_duplocale = ffi.Pointer<__locale_struct> Function(
  ffi.Pointer<__locale_struct> __dataset,
);

typedef _c_freelocale = ffi.Void Function(
  ffi.Pointer<__locale_struct> __dataset,
);

typedef _dart_freelocale = void Function(
  ffi.Pointer<__locale_struct> __dataset,
);

typedef _c_uselocale = ffi.Pointer<__locale_struct> Function(
  ffi.Pointer<__locale_struct> __dataset,
);

typedef _dart_uselocale = ffi.Pointer<__locale_struct> Function(
  ffi.Pointer<__locale_struct> __dataset,
);

typedef _c_Xpermalloc = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 arg0,
);

typedef _dart_Xpermalloc = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_XrmStringToQuark = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XrmStringToQuark = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XrmPermStringToQuark = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XrmPermStringToQuark = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XrmQuarkToString = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
);

typedef _dart_XrmQuarkToString = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_XrmUniqueQuark = ffi.Int32 Function();

typedef _dart_XrmUniqueQuark = int Function();

typedef _c_XrmStringToQuarkList = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_XrmStringToQuarkList = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_XrmStringToBindingQuarkList = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XrmStringToBindingQuarkList = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XrmDestroyDatabase = ffi.Void Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
);

typedef _dart_XrmDestroyDatabase = void Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
);

typedef _c_XrmQPutResource = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<XrmValuePtr> arg4,
);

typedef _dart_XrmQPutResource = void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  int arg3,
  ffi.Pointer<XrmValuePtr> arg4,
);

typedef _c_XrmPutResource = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XrmValuePtr> arg3,
);

typedef _dart_XrmPutResource = void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<XrmValuePtr> arg3,
);

typedef _c_XrmQPutStringResource = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_XrmQPutStringResource = void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_XrmPutStringResource = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XrmPutStringResource = void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_XrmPutLineResource = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XrmPutLineResource = void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XrmQGetResource = ffi.Int32 Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<XrmValuePtr> arg4,
);

typedef _dart_XrmQGetResource = int Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<XrmValuePtr> arg4,
);

typedef _c_XrmGetResource = ffi.Int32 Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ffi.Pointer<XrmValuePtr> arg4,
);

typedef _dart_XrmGetResource = int Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
  ffi.Pointer<XrmValuePtr> arg4,
);

typedef _c_XrmQGetSearchList = ffi.Int32 Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>>> arg3,
  ffi.Int32 arg4,
);

typedef _dart_XrmQGetSearchList = int Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>>> arg3,
  int arg4,
);

typedef _c_XrmQGetSearchResource = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>>> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<XrmValuePtr> arg4,
);

typedef _dart_XrmQGetSearchResource = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>>> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Pointer<XrmValuePtr> arg4,
);

typedef _c_XrmSetDatabase = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
);

typedef _dart_XrmSetDatabase = void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XrmHashBucketRec> arg1,
);

typedef _c_XrmGetDatabase = ffi.Pointer<_XrmHashBucketRec> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart_XrmGetDatabase = ffi.Pointer<_XrmHashBucketRec> Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c_XrmGetFileDatabase = ffi.Pointer<_XrmHashBucketRec> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XrmGetFileDatabase = ffi.Pointer<_XrmHashBucketRec> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XrmCombineFileDatabase = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XrmCombineFileDatabase = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
  int arg2,
);

typedef _c_XrmGetStringDatabase = ffi.Pointer<_XrmHashBucketRec> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_XrmGetStringDatabase = ffi.Pointer<_XrmHashBucketRec> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_XrmPutFileDatabase = ffi.Void Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_XrmPutFileDatabase = void Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_XrmMergeDatabases = ffi.Void Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
);

typedef _dart_XrmMergeDatabases = void Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
);

typedef _c_XrmCombineDatabase = ffi.Void Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
  ffi.Int32 arg2,
);

typedef _dart_XrmCombineDatabase = void Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg1,
  int arg2,
);

typedef _typedefC_56 = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<XrmValuePtr>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c_XrmEnumerateDatabase = ffi.Int32 Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_56>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _dart_XrmEnumerateDatabase = int Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  int arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_56>> arg4,
  ffi.Pointer<ffi.Int8> arg5,
);

typedef _c_XrmLocaleOfDatabase = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
);

typedef _dart_XrmLocaleOfDatabase = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XrmHashBucketRec> arg0,
);

typedef _c_XrmParseCommand = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<XrmOptionDescList> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
);

typedef _dart_XrmParseCommand = void Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> arg0,
  ffi.Pointer<XrmOptionDescList> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int32> arg4,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
);

typedef _c_XAllocClassHint = ffi.Pointer<XClassHint> Function();

typedef _dart_XAllocClassHint = ffi.Pointer<XClassHint> Function();

typedef _c_XAllocIconSize = ffi.Pointer<XIconSize> Function();

typedef _dart_XAllocIconSize = ffi.Pointer<XIconSize> Function();

typedef _c_XAllocSizeHints = ffi.Pointer<XSizeHints> Function();

typedef _dart_XAllocSizeHints = ffi.Pointer<XSizeHints> Function();

typedef _c_XAllocStandardColormap = ffi.Pointer<XStandardColormap> Function();

typedef _dart_XAllocStandardColormap = ffi.Pointer<XStandardColormap>
    Function();

typedef _c_XAllocWMHints = ffi.Pointer<XWMHints> Function();

typedef _dart_XAllocWMHints = ffi.Pointer<XWMHints> Function();

typedef _c_XClipBox = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<XRectangle> arg1,
);

typedef _dart_XClipBox = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<XRectangle> arg1,
);

typedef _c_XCreateRegion = ffi.Pointer<_XRegion> Function();

typedef _dart_XCreateRegion = ffi.Pointer<_XRegion> Function();

typedef _c_XDefaultString = ffi.Pointer<ffi.Int8> Function();

typedef _dart_XDefaultString = ffi.Pointer<ffi.Int8> Function();

typedef _c_XDeleteContext = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XDeleteContext = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c_XDestroyRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
);

typedef _dart_XDestroyRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
);

typedef _c_XEmptyRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
);

typedef _dart_XEmptyRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
);

typedef _c_XEqualRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
);

typedef _dart_XEqualRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
);

typedef _c_XFindContext = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _dart_XFindContext = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg3,
);

typedef _c_XGetClassHint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XClassHint> arg2,
);

typedef _dart_XGetClassHint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XClassHint> arg2,
);

typedef _c_XGetIconSizes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<XIconSize>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetIconSizes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<XIconSize>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XGetNormalHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XGetNormalHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XGetRGBColormaps = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Pointer<XStandardColormap>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XGetRGBColormaps = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Pointer<XStandardColormap>> arg2,
  ffi.Pointer<ffi.Int32> arg3,
  int arg4,
);

typedef _c_XGetSizeHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XGetSizeHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  int arg3,
);

typedef _c_XGetStandardColormap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XStandardColormap> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XGetStandardColormap = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XStandardColormap> arg2,
  int arg3,
);

typedef _c_XGetTextProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XGetTextProperty = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
  int arg3,
);

typedef _c_XGetVisualInfo = ffi.Pointer<XVisualInfo> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int64 arg1,
  ffi.Pointer<XVisualInfo> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_XGetVisualInfo = ffi.Pointer<XVisualInfo> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XVisualInfo> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_XGetWMClientMachine = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XGetWMClientMachine = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XGetWMHints = ffi.Pointer<XWMHints> Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_XGetWMHints = ffi.Pointer<XWMHints> Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c_XGetWMIconName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XGetWMIconName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XGetWMName = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XGetWMName = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XGetWMNormalHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _dart_XGetWMNormalHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _c_XGetWMSizeHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Pointer<ffi.Int64> arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XGetWMSizeHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Pointer<ffi.Int64> arg3,
  int arg4,
);

typedef _c_XGetZoomHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XGetZoomHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XIntersectRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XIntersectRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XConvertCase = ffi.Void Function(
  ffi.Uint64 arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_XConvertCase = void Function(
  int arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_XLookupString = ffi.Int32 Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<XComposeStatus> arg4,
);

typedef _dart_XLookupString = int Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<XComposeStatus> arg4,
);

typedef _c_XMatchVisualInfo = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
  ffi.Pointer<XVisualInfo> arg4,
);

typedef _dart_XMatchVisualInfo = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<XVisualInfo> arg4,
);

typedef _c_XOffsetRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XOffsetRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  int arg1,
  int arg2,
);

typedef _c_XPointInRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XPointInRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  int arg1,
  int arg2,
);

typedef _c_XPolygonRegion = ffi.Pointer<_XRegion> Function(
  ffi.Pointer<XPoint> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XPolygonRegion = ffi.Pointer<_XRegion> Function(
  ffi.Pointer<XPoint> arg0,
  int arg1,
  int arg2,
);

typedef _c_XRectInRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_XRectInRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_XSaveContext = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_XSaveContext = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_XSetClassHint = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XClassHint> arg2,
);

typedef _dart_XSetClassHint = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XClassHint> arg2,
);

typedef _c_XSetIconSizes = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XIconSize> arg2,
  ffi.Int32 arg3,
);

typedef _dart_XSetIconSizes = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XIconSize> arg2,
  int arg3,
);

typedef _c_XSetNormalHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XSetNormalHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XSetRGBColormaps = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XStandardColormap> arg2,
  ffi.Int32 arg3,
  ffi.Uint64 arg4,
);

typedef _dart_XSetRGBColormaps = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XStandardColormap> arg2,
  int arg3,
  int arg4,
);

typedef _c_XSetSizeHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetSizeHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  int arg3,
);

typedef _c_XSetStandardProperties = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint64 arg4,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
  ffi.Int32 arg6,
  ffi.Pointer<XSizeHints> arg7,
);

typedef _dart_XSetStandardProperties = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg5,
  int arg6,
  ffi.Pointer<XSizeHints> arg7,
);

typedef _c_XSetTextProperty = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetTextProperty = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
  int arg3,
);

typedef _c_XSetWMClientMachine = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XSetWMClientMachine = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XSetWMHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XWMHints> arg2,
);

typedef _dart_XSetWMHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XWMHints> arg2,
);

typedef _c_XSetWMIconName = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XSetWMIconName = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XSetWMName = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XSetWMName = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XSetWMNormalHints = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XSetWMNormalHints = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XSetWMProperties = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XTextProperty> arg2,
  ffi.Pointer<XTextProperty> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _dart_XSetWMProperties = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
  ffi.Pointer<XTextProperty> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  int arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _c_XmbSetWMProperties = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _dart_XmbSetWMProperties = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  int arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _c_Xutf8SetWMProperties = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  ffi.Int32 arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _dart_Xutf8SetWMProperties = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg4,
  int arg5,
  ffi.Pointer<XSizeHints> arg6,
  ffi.Pointer<XWMHints> arg7,
  ffi.Pointer<XClassHint> arg8,
);

typedef _c_XSetWMSizeHints = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetWMSizeHints = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
  int arg3,
);

typedef _c_XSetRegion = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XSetRegion = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<_XGC> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XSetStandardColormap = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XStandardColormap> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_XSetStandardColormap = void Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XStandardColormap> arg2,
  int arg3,
);

typedef _c_XSetZoomHints = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _dart_XSetZoomHints = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<XSizeHints> arg2,
);

typedef _c_XShrinkRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_XShrinkRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  int arg1,
  int arg2,
);

typedef _c_XStringListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _dart_XStringListToTextProperty = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  int arg1,
  ffi.Pointer<XTextProperty> arg2,
);

typedef _c_XSubtractRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XSubtractRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XmbTextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  ffi.Int32 count,
  ffi.Int32 style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _dart_XmbTextListToTextProperty = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  int count,
  int style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _c_XwcTextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
  ffi.Int32 count,
  ffi.Int32 style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _dart_XwcTextListToTextProperty = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
  int count,
  int style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _c_Xutf8TextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  ffi.Int32 count,
  ffi.Int32 style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _dart_Xutf8TextListToTextProperty = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  int count,
  int style,
  ffi.Pointer<XTextProperty> text_prop_return,
);

typedef _c_XwcFreeStringList = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
);

typedef _dart_XwcFreeStringList = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int32>> list,
);

typedef _c_XTextPropertyToStringList = ffi.Int32 Function(
  ffi.Pointer<XTextProperty> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_XTextPropertyToStringList = int Function(
  ffi.Pointer<XTextProperty> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_XmbTextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _dart_XmbTextPropertyToTextList = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _c_XwcTextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _dart_XwcTextPropertyToTextList = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _c_Xutf8TextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _dart_Xutf8TextPropertyToTextList = int Function(
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_return,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _c_XUnionRectWithRegion = ffi.Int32 Function(
  ffi.Pointer<XRectangle> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XUnionRectWithRegion = int Function(
  ffi.Pointer<XRectangle> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XUnionRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XUnionRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c_XWMGeometry = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<XSizeHints> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
  ffi.Pointer<ffi.Int32> arg8,
  ffi.Pointer<ffi.Int32> arg9,
  ffi.Pointer<ffi.Int32> arg10,
);

typedef _dart_XWMGeometry = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
  ffi.Pointer<XSizeHints> arg5,
  ffi.Pointer<ffi.Int32> arg6,
  ffi.Pointer<ffi.Int32> arg7,
  ffi.Pointer<ffi.Int32> arg8,
  ffi.Pointer<ffi.Int32> arg9,
  ffi.Pointer<ffi.Int32> arg10,
);

typedef _c_XXorRegion = ffi.Int32 Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _dart_XXorRegion = int Function(
  ffi.Pointer<_XRegion> arg0,
  ffi.Pointer<_XRegion> arg1,
  ffi.Pointer<_XRegion> arg2,
);

typedef _c__XimGeometryCallback = ffi.Int32 Function();

typedef _dart__XimGeometryCallback = int Function();

typedef _c__XimStrConversionCallback = ffi.Int32 Function();

typedef _dart__XimStrConversionCallback = int Function();

typedef _c__XimPreeditStartCallback = ffi.Int32 Function();

typedef _dart__XimPreeditStartCallback = int Function();

typedef _c__XimPreeditDoneCallback = ffi.Int32 Function();

typedef _dart__XimPreeditDoneCallback = int Function();

typedef _c__free_memory_for_text = ffi.Void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__free_memory_for_text = void Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c__XimPreeditDrawCallback = ffi.Int32 Function();

typedef _dart__XimPreeditDrawCallback = int Function();

typedef _c__XimPreeditCaretCallback = ffi.Int32 Function();

typedef _dart__XimPreeditCaretCallback = int Function();

typedef _c__XimStatusStartCallback = ffi.Int32 Function();

typedef _dart__XimStatusStartCallback = int Function();

typedef _c__XimStatusDoneCallback = ffi.Int32 Function();

typedef _dart__XimStatusDoneCallback = int Function();

typedef _c__XimStatusDrawCallback = ffi.Int32 Function();

typedef _dart__XimStatusDrawCallback = int Function();

typedef _c__XimPreeditStateNotifyCallback = ffi.Int32 Function();

typedef _dart__XimPreeditStateNotifyCallback = int Function();

typedef _c__XimIsReadyForProcess = ffi.Int32 Function(
  ffi.Int32 ic,
);

typedef _dart__XimIsReadyForProcess = int Function(
  int ic,
);

typedef _c__XimProcessPendingCallbacks = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimProcessPendingCallbacks = void Function(
  int ic,
);

typedef _c__XimPutCbIntoQueue = ffi.Void Function(
  ffi.Int32 ic,
  ffi.Int32 call_data,
);

typedef _dart__XimPutCbIntoQueue = void Function(
  int ic,
  int call_data,
);

typedef _c__XimCbDispatch = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 call_data,
);

typedef _dart__XimCbDispatch = int Function(
  int xim,
  int len,
  int data,
  int call_data,
);

typedef _c__read_text_from_packet = ffi.Void Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> text_ptr,
);

typedef _dart__read_text_from_packet = void Function(
  int im,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> text_ptr,
);

typedef _c__XimTriggerCheck = ffi.Int64 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> keylist,
);

typedef _dart__XimTriggerCheck = int Function(
  int im,
  ffi.Pointer<ffi.Int32> ev,
  int len,
  ffi.Pointer<ffi.Int32> keylist,
);

typedef _c__XimTriggerOnCheck = ffi.Int64 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _dart__XimTriggerOnCheck = int Function(
  int im,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _c__XimTriggerOffCheck = ffi.Int64 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _dart__XimTriggerOffCheck = int Function(
  int im,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _c__XimOnKeysCheck = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _dart__XimOnKeysCheck = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _c__XimOffKeysCheck = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _dart__XimOffKeysCheck = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _c__XimPendingFilter = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimPendingFilter = void Function(
  int ic,
);

typedef _c__XimProtoKeypressFilter = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _dart__XimProtoKeypressFilter = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _c__XimFilterKeypress = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> d,
  ffi.Int32 w,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 client_data,
);

typedef _dart__XimFilterKeypress = int Function(
  ffi.Pointer<ffi.Int32> d,
  int w,
  ffi.Pointer<ffi.Int32> ev,
  int client_data,
);

typedef _c__XimProtoKeyreleaseFilter = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _dart__XimProtoKeyreleaseFilter = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> ev,
);

typedef _c__XimFilterKeyrelease = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> d,
  ffi.Int32 w,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 client_data,
);

typedef _dart__XimFilterKeyrelease = int Function(
  ffi.Pointer<ffi.Int32> d,
  int w,
  ffi.Pointer<ffi.Int32> ev,
  int client_data,
);

typedef _c__XimRegisterKeyPressFilter = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimRegisterKeyPressFilter = void Function(
  int ic,
);

typedef _c__XimRegisterKeyReleaseFilter = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimRegisterKeyReleaseFilter = void Function(
  int ic,
);

typedef _c__XimUnregisterKeyPressFilter = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimUnregisterKeyPressFilter = void Function(
  int ic,
);

typedef _c__XimUnregisterKeyReleaseFilter = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimUnregisterKeyReleaseFilter = void Function(
  int ic,
);

typedef _c__XimRegisterFilter = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimRegisterFilter = void Function(
  int ic,
);

typedef _c__XimUnregisterFilter = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimUnregisterFilter = void Function(
  int ic,
);

typedef _c__XimReregisterFilter = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimReregisterFilter = void Function(
  int ic,
);

typedef _c__XimFilterServerDestroy = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> d,
  ffi.Int32 w,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 client_data,
);

typedef _dart__XimFilterServerDestroy = int Function(
  ffi.Pointer<ffi.Int32> d,
  int w,
  ffi.Pointer<ffi.Int32> ev,
  int client_data,
);

typedef _c__XimRegisterServerFilter = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimRegisterServerFilter = void Function(
  int im,
);

typedef _c__XimUnregisterServerFilter = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimUnregisterServerFilter = void Function(
  int im,
);

typedef _c__XimCreateICCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimCreateICCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimGetICValuesCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimGetICValuesCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimProtoGetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xic,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _dart__XimProtoGetICValues = ffi.Pointer<ffi.Int8> Function(
  int xic,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _c__XimSetICValuesCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimSetICValuesCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimProtoSetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xic,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _dart__XimProtoSetICValues = ffi.Pointer<ffi.Int8> Function(
  int xic,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _c__XimDestroyICCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimDestroyICCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimProtoICFree = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimProtoICFree = void Function(
  int ic,
);

typedef _c__XimProtoDestroyIC = ffi.Void Function(
  ffi.Int32 xic,
);

typedef _dart__XimProtoDestroyIC = void Function(
  int xic,
);

typedef _c_BrokenSyncWithServer = ffi.Void Function(
  ffi.Int32 xic,
);

typedef _dart_BrokenSyncWithServer = void Function(
  int xic,
);

typedef _c__XimProtoSetFocus = ffi.Void Function(
  ffi.Int32 xic,
);

typedef _dart__XimProtoSetFocus = void Function(
  int xic,
);

typedef _c__XimProtoUnsetFocus = ffi.Void Function(
  ffi.Int32 xic,
);

typedef _dart__XimProtoUnsetFocus = void Function(
  int xic,
);

typedef _c__XimResetICCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimResetICCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _typedefC_57 = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32,
  ffi.Int32,
  ffi.Int32,
);

typedef _c__XimProtoReset = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xic,
  ffi.Pointer<ffi.NativeFunction<_typedefC_57>> retfunc,
);

typedef _dart__XimProtoReset = ffi.Pointer<ffi.Int8> Function(
  int xic,
  ffi.Pointer<ffi.NativeFunction<_typedefC_57>> retfunc,
);

typedef _c__XimCommitedMbString = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 buf,
);

typedef _dart__XimCommitedMbString = ffi.Pointer<ffi.Int8> Function(
  int im,
  int ic,
  int buf,
);

typedef _c__XimProtoMbReset = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xic,
);

typedef _dart__XimProtoMbReset = ffi.Pointer<ffi.Int8> Function(
  int xic,
);

typedef _c__XimCommitedWcString = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 buf,
);

typedef _dart__XimCommitedWcString = ffi.Pointer<ffi.Int32> Function(
  int im,
  int ic,
  int buf,
);

typedef _c__XimProtoWcReset = ffi.Pointer<ffi.Int32> Function(
  ffi.Int32 xic,
);

typedef _dart__XimProtoWcReset = ffi.Pointer<ffi.Int32> Function(
  int xic,
);

typedef _c__XimCommitedUtf8String = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 buf,
);

typedef _dart__XimCommitedUtf8String = ffi.Pointer<ffi.Int8> Function(
  int im,
  int ic,
  int buf,
);

typedef _c__XimProtoUtf8Reset = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xic,
);

typedef _dart__XimProtoUtf8Reset = ffi.Pointer<ffi.Int8> Function(
  int xic,
);

typedef _c__XimGetInputStyle = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Int32> input_style,
);

typedef _dart__XimGetInputStyle = int Function(
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Int32> input_style,
);

typedef _c__XimProtoCreateIC = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _dart__XimProtoCreateIC = int Function(
  int xim,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _c__XimCheckDataSize = ffi.Int32 Function(
  ffi.Int32 buf,
  ffi.Int32 len,
);

typedef _dart__XimCheckDataSize = int Function(
  int buf,
  int len,
);

typedef _c__XimSetHeader = ffi.Void Function(
  ffi.Int32 buf,
  ffi.Int32 major_opcode,
  ffi.Int32 minor_opcode,
  ffi.Pointer<ffi.Int32> len,
);

typedef _dart__XimSetHeader = void Function(
  int buf,
  int major_opcode,
  int minor_opcode,
  ffi.Pointer<ffi.Int32> len,
);

typedef _c__XimGetMyEndian = ffi.Int8 Function();

typedef _dart__XimGetMyEndian = int Function();

typedef _c__XimCheckServerName = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart__XimCheckServerName = int Function(
  int im,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c__XimCheckLocaleName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> address,
  ffi.Int32 address_len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> locale_name,
  ffi.Int32 len,
);

typedef _dart__XimCheckLocaleName = ffi.Pointer<ffi.Int8> Function(
  int im,
  ffi.Pointer<ffi.Int8> address,
  int address_len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> locale_name,
  int len,
);

typedef _c__XimCheckTransport = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> address,
  ffi.Int32 address_len,
  ffi.Pointer<ffi.Int8> transport,
  ffi.Int32 len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> trans_addr,
);

typedef _dart__XimCheckTransport = int Function(
  ffi.Pointer<ffi.Int8> address,
  int address_len,
  ffi.Pointer<ffi.Int8> transport,
  int len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> trans_addr,
);

typedef _c__CheckSNEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Pointer<ffi.Int32> xevent,
  ffi.Int32 arg,
);

typedef _dart__CheckSNEvent = int Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Pointer<ffi.Int32> xevent,
  int arg,
);

typedef _c__XimGetSelectionNotify = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Int32 window,
  ffi.Int32 target,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ret_address,
);

typedef _dart__XimGetSelectionNotify = int Function(
  ffi.Pointer<ffi.Int32> display,
  int window,
  int target,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ret_address,
);

typedef _c__XimPreConnectionIM = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 selection,
);

typedef _dart__XimPreConnectionIM = int Function(
  int im,
  int selection,
);

typedef _c__XimPreConnect = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimPreConnect = int Function(
  int im,
);

typedef _c__XimGetAuthProtocolNames = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Pointer<ffi.Int32> num,
  ffi.Pointer<ffi.Int32> len,
);

typedef _dart__XimGetAuthProtocolNames = int Function(
  int im,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Pointer<ffi.Int32> num,
  ffi.Pointer<ffi.Int32> len,
);

typedef _c__XimSetAuthReplyData = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _dart__XimSetAuthReplyData = int Function(
  int im,
  int buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _c__XimSetAuthNextData = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _dart__XimSetAuthNextData = int Function(
  int im,
  int buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _c__XimSetAuthRequiredData = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _dart__XimSetAuthRequiredData = int Function(
  int im,
  int buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _c__XimCheckAuthSetupData = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 buf,
);

typedef _dart__XimCheckAuthSetupData = int Function(
  int im,
  int buf,
);

typedef _c__XimCheckAuthNextData = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 buf,
);

typedef _dart__XimCheckAuthNextData = int Function(
  int im,
  int buf,
);

typedef _c__XimClientAuthCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 buf,
);

typedef _dart__XimClientAuthCheck = int Function(
  int im,
  int buf,
);

typedef _c__XimAuthNG = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimAuthNG = void Function(
  int im,
);

typedef _c__XimAllRecv = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimAllRecv = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimConnection = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimConnection = int Function(
  int im,
);

typedef _c__XimDisconnectCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimDisconnectCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimDisconnect = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimDisconnect = int Function(
  int im,
);

typedef _c__XimOpenCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimOpenCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimOpen = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimOpen = int Function(
  int im,
);

typedef _c__XimCloseCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimCloseCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimClose = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimClose = int Function(
  int im,
);

typedef _c__XimProtoIMFree = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimProtoIMFree = void Function(
  int im,
);

typedef _c__XimProtoCloseIM = ffi.Int32 Function(
  ffi.Int32 xim,
);

typedef _dart__XimProtoCloseIM = int Function(
  int xim,
);

typedef _c__XimSetIMValuesCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimSetIMValuesCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimProtoSetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xim,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _dart__XimProtoSetIMValues = ffi.Pointer<ffi.Int8> Function(
  int xim,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _c__XimGetIMValuesCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimGetIMValuesCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimProtoGetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xim,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _dart__XimProtoGetIMValues = ffi.Pointer<ffi.Int8> Function(
  int xim,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _c__XimSetEncodingByName = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _dart__XimSetEncodingByName = int Function(
  int im,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _c__XimSetEncodingByDetail = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _dart__XimSetEncodingByDetail = int Function(
  int im,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> buf,
  ffi.Pointer<ffi.Int32> len,
);

typedef _c__XimGetEncoding = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 name_len,
  ffi.Pointer<ffi.Int8> detail,
  ffi.Int32 detail_len,
);

typedef _dart__XimGetEncoding = int Function(
  int im,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Pointer<ffi.Int8> name,
  int name_len,
  ffi.Pointer<ffi.Int8> detail,
  int detail_len,
);

typedef _c__XimEncodingNegoCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimEncodingNegoCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimEncodingNegotiation = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimEncodingNegotiation = int Function(
  int im,
);

typedef _c__XimProtoOpenIM = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimProtoOpenIM = int Function(
  int im,
);

typedef _c__XimICOfXICID = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 icid,
);

typedef _dart__XimICOfXICID = int Function(
  int im,
  int icid,
);

typedef _c__XimProcIMSetEventMask = ffi.Void Function(
  ffi.Int32 im,
  ffi.Int32 buf,
);

typedef _dart__XimProcIMSetEventMask = void Function(
  int im,
  int buf,
);

typedef _c__XimProcICSetEventMask = ffi.Void Function(
  ffi.Int32 ic,
  ffi.Int32 buf,
);

typedef _dart__XimProcICSetEventMask = void Function(
  int ic,
  int buf,
);

typedef _c__XimSetEventMaskCallback = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 call_data,
);

typedef _dart__XimSetEventMaskCallback = int Function(
  int xim,
  int len,
  int data,
  int call_data,
);

typedef _c__XimSyncCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimSyncCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimSync = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 ic,
);

typedef _dart__XimSync = int Function(
  int im,
  int ic,
);

typedef _c__XimProcSyncReply = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 ic,
);

typedef _dart__XimProcSyncReply = int Function(
  int im,
  int ic,
);

typedef _c__XimRespSyncReply = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 mode,
);

typedef _dart__XimRespSyncReply = int Function(
  int ic,
  int mode,
);

typedef _c__XimSyncCallback = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 call_data,
);

typedef _dart__XimSyncCallback = int Function(
  int xim,
  int len,
  int data,
  int call_data,
);

typedef _c__XimSetEventToWire = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart__XimSetEventToWire = int Function(
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c__XimForwardEventCore = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 sync_1,
);

typedef _dart__XimForwardEventCore = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> ev,
  int sync_1,
);

typedef _c__XimForwardEvent = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 sync_1,
);

typedef _dart__XimForwardEvent = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> ev,
  int sync_1,
);

typedef _c__XimProcEvent = ffi.Void Function(
  ffi.Pointer<ffi.Int32> d,
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int32> buf,
);

typedef _dart__XimProcEvent = void Function(
  ffi.Pointer<ffi.Int32> d,
  int ic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int32> buf,
);

typedef _c__XimForwardEventRecv = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 buf,
);

typedef _dart__XimForwardEventRecv = int Function(
  int im,
  int ic,
  int buf,
);

typedef _c__XimForwardEventCallback = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 call_data,
);

typedef _dart__XimForwardEventCallback = int Function(
  int xim,
  int len,
  int data,
  int call_data,
);

typedef _c__XimRegisterTriggerkey = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 buf,
);

typedef _dart__XimRegisterTriggerkey = int Function(
  int im,
  int buf,
);

typedef _c__XimRegisterTriggerKeysCallback = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 call_data,
);

typedef _dart__XimRegisterTriggerKeysCallback = int Function(
  int xim,
  int len,
  int data,
  int call_data,
);

typedef _c__XimGetWindowEventmask = ffi.Int32 Function(
  ffi.Int32 ic,
);

typedef _dart__XimGetWindowEventmask = int Function(
  int ic,
);

typedef _c__XimTriggerNotifyCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimTriggerNotifyCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimTriggerNotify = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 mode,
  ffi.Int32 idx,
);

typedef _dart__XimTriggerNotify = int Function(
  int im,
  int ic,
  int mode,
  int idx,
);

typedef _c__XimRegCommitInfo = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int8> string,
  ffi.Int32 string_len,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Int32 keysym_len,
);

typedef _dart__XimRegCommitInfo = int Function(
  int ic,
  ffi.Pointer<ffi.Int8> string,
  int string_len,
  ffi.Pointer<ffi.Int32> keysym,
  int keysym_len,
);

typedef _c__XimUnregCommitInfo = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimUnregCommitInfo = void Function(
  int ic,
);

typedef _c__XimFreeCommitInfo = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart__XimFreeCommitInfo = void Function(
  int ic,
);

typedef _c__XimProcKeySym = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 sym,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> xim_keysym,
  ffi.Pointer<ffi.Int32> xim_keysym_len,
);

typedef _dart__XimProcKeySym = int Function(
  int ic,
  int sym,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> xim_keysym,
  ffi.Pointer<ffi.Int32> xim_keysym_len,
);

typedef _c__XimProcCommit = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Int32 len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> xim_string,
  ffi.Pointer<ffi.Int32> xim_string_len,
);

typedef _dart__XimProcCommit = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> buf,
  int len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> xim_string,
  ffi.Pointer<ffi.Int32> xim_string_len,
);

typedef _c__XimCommitRecv = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 buf,
);

typedef _dart__XimCommitRecv = int Function(
  int im,
  int ic,
  int buf,
);

typedef _c__XimCommitCallback = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 call_data,
);

typedef _dart__XimCommitCallback = int Function(
  int xim,
  int len,
  int data,
  int call_data,
);

typedef _c__XimProcError = ffi.Void Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 data,
);

typedef _dart__XimProcError = void Function(
  int im,
  int ic,
  int data,
);

typedef _c__XimErrorCallback = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 call_data,
);

typedef _dart__XimErrorCallback = int Function(
  int xim,
  int len,
  int data,
  int call_data,
);

typedef _c__XimError = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 error_code,
  ffi.Int32 detail_length,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int8> detail,
);

typedef _dart__XimError = int Function(
  int im,
  int ic,
  int error_code,
  int detail_length,
  int type,
  ffi.Pointer<ffi.Int8> detail,
);

typedef _c__Ximctsconvert = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int8> from,
  ffi.Int32 from_len,
  ffi.Pointer<ffi.Int8> to,
  ffi.Int32 to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__Ximctsconvert = int Function(
  int conv,
  ffi.Pointer<ffi.Int8> from,
  int from_len,
  ffi.Pointer<ffi.Int8> to,
  int to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__Ximctstombs = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Pointer<ffi.Int8> from,
  ffi.Int32 from_len,
  ffi.Pointer<ffi.Int8> to,
  ffi.Int32 to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__Ximctstombs = int Function(
  int xim,
  ffi.Pointer<ffi.Int8> from,
  int from_len,
  ffi.Pointer<ffi.Int8> to,
  int to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__Ximctstowcs = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Pointer<ffi.Int8> from,
  ffi.Int32 from_len,
  ffi.Pointer<ffi.Int32> to,
  ffi.Int32 to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__Ximctstowcs = int Function(
  int xim,
  ffi.Pointer<ffi.Int8> from,
  int from_len,
  ffi.Pointer<ffi.Int32> to,
  int to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__Ximctstoutf8 = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Pointer<ffi.Int8> from,
  ffi.Int32 from_len,
  ffi.Pointer<ffi.Int8> to,
  ffi.Int32 to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__Ximctstoutf8 = int Function(
  int xim,
  ffi.Pointer<ffi.Int8> from,
  int from_len,
  ffi.Pointer<ffi.Int8> to,
  int to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__XimProtoMbLookupString = ffi.Int32 Function(
  ffi.Int32 xic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 bytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__XimProtoMbLookupString = int Function(
  int xic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int8> buffer,
  int bytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__XimProtoWcLookupString = ffi.Int32 Function(
  ffi.Int32 xic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int32> buffer,
  ffi.Int32 bytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__XimProtoWcLookupString = int Function(
  int xic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int32> buffer,
  int bytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__XimProtoUtf8LookupString = ffi.Int32 Function(
  ffi.Int32 xic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 bytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__XimProtoUtf8LookupString = int Function(
  int xic,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Pointer<ffi.Int8> buffer,
  int bytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> state,
);

typedef _typedefC_58 = ffi.Int32 Function();

typedef _c__XimRegProtoIntrCallback = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 major_code,
  ffi.Int32 minor_code,
  ffi.Pointer<ffi.NativeFunction<_typedefC_58>> proc,
  ffi.Pointer<ffi.Int8> call_data,
);

typedef _dart__XimRegProtoIntrCallback = int Function(
  int im,
  int major_code,
  int minor_code,
  ffi.Pointer<ffi.NativeFunction<_typedefC_58>> proc,
  ffi.Pointer<ffi.Int8> call_data,
);

typedef _c__XimFreeProtoIntrCallback = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimFreeProtoIntrCallback = void Function(
  int im,
);

typedef _c__XimTransportIntr = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int8> data,
  ffi.Pointer<ffi.Int8> call_data,
);

typedef _dart__XimTransportIntr = int Function(
  int im,
  int len,
  ffi.Pointer<ffi.Int8> data,
  ffi.Pointer<ffi.Int8> call_data,
);

typedef _c__XimDispatchInit = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimDispatchInit = int Function(
  int im,
);

typedef _c__XimIsSupportExt = ffi.Int32 Function(
  ffi.Int32 idx,
);

typedef _dart__XimIsSupportExt = int Function(
  int idx,
);

typedef _c__XimProcExtSetEventMask = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 ic,
  ffi.Int32 buf,
);

typedef _dart__XimProcExtSetEventMask = int Function(
  int im,
  int ic,
  int buf,
);

typedef _c__XimExtSetEventMaskCallback = ffi.Int32 Function(
  ffi.Int32 xim,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 call_data,
);

typedef _dart__XimExtSetEventMaskCallback = int Function(
  int xim,
  int len,
  int data,
  int call_data,
);

typedef _c__XimCheckExtensionListSize = ffi.Int32 Function();

typedef _dart__XimCheckExtensionListSize = int Function();

typedef _c__XimSetExtensionList = ffi.Void Function(
  ffi.Pointer<ffi.Int32> buf,
);

typedef _dart__XimSetExtensionList = void Function(
  ffi.Pointer<ffi.Int32> buf,
);

typedef _c__XimCountNumberOfExtension = ffi.Uint32 Function(
  ffi.Int32 total,
  ffi.Pointer<ffi.Int32> ext,
);

typedef _dart__XimCountNumberOfExtension = int Function(
  int total,
  ffi.Pointer<ffi.Int32> ext,
);

typedef _c__XimParseExtensionList = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> data,
);

typedef _dart__XimParseExtensionList = int Function(
  int im,
  ffi.Pointer<ffi.Int32> data,
);

typedef _c__XimQueryExtensionCheck = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
  ffi.Int32 arg,
);

typedef _dart__XimQueryExtensionCheck = int Function(
  int im,
  int len,
  int data,
  int arg,
);

typedef _c__XimExtension = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimExtension = int Function(
  int im,
);

typedef _c__XimCheckIfDefault = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimCheckIfDefault = int Function(
  int im,
);

typedef _c_MakeLocale = ffi.Void Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int8> locale,
);

typedef _dart_MakeLocale = void Function(
  int lcd,
  ffi.Pointer<ffi.Int8> locale,
);

typedef _c__XimFilterPropertyNotify = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Int32 window,
  ffi.Pointer<ffi.Int32> event,
  ffi.Int32 client_data,
);

typedef _dart__XimFilterPropertyNotify = int Function(
  ffi.Pointer<ffi.Int32> display,
  int window,
  ffi.Pointer<ffi.Int32> event,
  int client_data,
);

typedef _c__XimRegisterIMInstantiateCallback = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int32> display,
  ffi.Int32 rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
  ffi.Int32 callback,
  ffi.Int32 client_data,
);

typedef _dart__XimRegisterIMInstantiateCallback = int Function(
  int lcd,
  ffi.Pointer<ffi.Int32> display,
  int rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
  int callback,
  int client_data,
);

typedef _c__XimUnRegisterIMInstantiateCallback = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int32> display,
  ffi.Int32 rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
  ffi.Int32 callback,
  ffi.Int32 client_data,
);

typedef _dart__XimUnRegisterIMInstantiateCallback = int Function(
  int lcd,
  ffi.Pointer<ffi.Int32> display,
  int rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
  int callback,
  int client_data,
);

typedef _c__XimResetIMInstantiateCallback = ffi.Void Function(
  ffi.Int32 xim,
);

typedef _dart__XimResetIMInstantiateCallback = void Function(
  int xim,
);

typedef _c__XimSetIMStructureList = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimSetIMStructureList = int Function(
  int im,
);

typedef _c__XimDestroyIMStructureList = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimDestroyIMStructureList = void Function(
  int im,
);

typedef _c__XimServerDestroy = ffi.Void Function(
  ffi.Int32 im_2_destroy,
);

typedef _dart__XimServerDestroy = void Function(
  int im_2_destroy,
);

typedef _c__XimStrstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int8> dest,
);

typedef _dart__XimStrstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int8> dest,
);

typedef _c__XimMakeImName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 lcd,
);

typedef _dart__XimMakeImName = ffi.Pointer<ffi.Int8> Function(
  int lcd,
);

typedef _c__XimOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Int32 lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _dart__XimOpenIM = ffi.Pointer<_XIM> Function(
  int lcd,
  ffi.Pointer<_XDisplay> dpy,
  int rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _c__XInitIM = ffi.Int32 Function(
  ffi.Int32 lcd,
);

typedef _dart__XInitIM = int Function(
  int lcd,
);

typedef _c__XimLocalFilter = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> d,
  ffi.Int32 w,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 client_data,
);

typedef _dart__XimLocalFilter = int Function(
  ffi.Pointer<ffi.Int32> d,
  int w,
  ffi.Pointer<ffi.Int32> ev,
  int client_data,
);

typedef _c__XimLocalGetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xic,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart__XimLocalGetICValues = ffi.Pointer<ffi.Int8> Function(
  int xic,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> __filename,
);

typedef _c_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_renameat = ffi.Int32 Function(
  ffi.Int32 __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  ffi.Int32 __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_renameat = int Function(
  int __oldfd,
  ffi.Pointer<ffi.Int8> __old,
  int __newfd,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_tmpfile = ffi.Pointer<_IO_FILE> Function();

typedef _dart_tmpfile = ffi.Pointer<_IO_FILE> Function();

typedef _c_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_tmpnam_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __pfx,
);

typedef _c_fclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fflush = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fflush_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fflush_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_freopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_freopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __modes,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fdopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fdopen = ffi.Pointer<_IO_FILE> Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_fmemopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_fmemopen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Void> __s,
  int __len,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_open_memstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Uint64> __sizeloc,
);

typedef _dart_open_memstream = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufloc,
  ffi.Pointer<ffi.Uint64> __sizeloc,
);

typedef _c_setbuf = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_setvbuf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Int32 __modes,
  ffi.Uint64 __n,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __modes,
  int __n,
);

typedef _c_setbuffer = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __size,
);

typedef _dart_setbuffer = void Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __buf,
  int __size,
);

typedef _c_setlinebuf = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_setlinebuf = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fprintf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_printf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_printf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfprintf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vfprintf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vprintf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vsprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_snprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __maxlen,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vdprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vdprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_dprintf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _dart_dprintf = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __fmt,
);

typedef _c_fscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_fscanf = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_scanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_scanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_sscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfscanf = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vfscanf = int Function(
  ffi.Pointer<_IO_FILE> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vscanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _dart_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> __arg,
);

typedef _c_fgetc = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getc = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getc = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef _c_getc_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getc_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getchar_unlocked = ffi.Int32 Function();

typedef _dart_getchar_unlocked = int Function();

typedef _c_fgetc_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetc_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putchar = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar = int Function(
  int __c,
);

typedef _c_fputc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputc_unlocked = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putc_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putc_unlocked = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putchar_unlocked = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_putchar_unlocked = int Function(
  int __c,
);

typedef _c_getw = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getw = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putw = ffi.Int32 Function(
  ffi.Int32 __w,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_putw = int Function(
  int __w,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c___getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart___getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  int __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Int32 __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  int __delimiter,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_getline = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_getline = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lineptr,
  ffi.Pointer<ffi.Uint64> __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_ungetc = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ungetc = int Function(
  int __c,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fwrite = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __s,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __s,
);

typedef _c_fread_unlocked = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fread_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fwrite_unlocked = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fwrite_unlocked = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __n,
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fseek = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  int __off,
  int __whence,
);

typedef _c_ftell = ffi.Int64 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_rewind = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fseeko = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Int64 __off,
  ffi.Int32 __whence,
);

typedef _dart_fseeko = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  int __off,
  int __whence,
);

typedef _c_ftello = ffi.Int64 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftello = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fgetpos = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _c_fsetpos = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<__fpos_t> __pos,
);

typedef _c_clearerr = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_feof = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_feof = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ferror = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_clearerr_unlocked = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_clearerr_unlocked = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_feof_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_feof_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ferror_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ferror_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_fileno = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_fileno_unlocked = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fileno_unlocked = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_popen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _dart_popen = ffi.Pointer<_IO_FILE> Function(
  ffi.Pointer<ffi.Int8> __command,
  ffi.Pointer<ffi.Int8> __modes,
);

typedef _c_pclose = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_pclose = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_flockfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_flockfile = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_ftrylockfile = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_ftrylockfile = int Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_funlockfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_funlockfile = void Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c___uflow = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> arg0,
);

typedef _dart___uflow = int Function(
  ffi.Pointer<_IO_FILE> arg0,
);

typedef _c___overflow = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> arg0,
  ffi.Int32 arg1,
);

typedef _dart___overflow = int Function(
  ffi.Pointer<_IO_FILE> arg0,
  int arg1,
);

typedef _c__XimLocalUnSetFocus = ffi.Void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimLocalUnSetFocus = void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimLocalDestroyIC = ffi.Void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimLocalDestroyIC = void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimLocalSetFocus = ffi.Void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimLocalSetFocus = void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimLocalReset = ffi.Void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimLocalReset = void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimLocalMbReset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimLocalMbReset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimLocalWcReset = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimLocalWcReset = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimLocalCreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> im,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart__XimLocalCreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> im,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c_fcntl = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __cmd,
);

typedef _dart_fcntl = int Function(
  int __fd,
  int __cmd,
);

typedef _c_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_open = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __oflag,
);

typedef _c_openat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __oflag,
);

typedef _dart_openat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __oflag,
);

typedef _c_creat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __mode,
);

typedef _dart_creat = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __mode,
);

typedef _c_lockf = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __cmd,
  ffi.Int64 __len,
);

typedef _dart_lockf = int Function(
  int __fd,
  int __cmd,
  int __len,
);

typedef _c_posix_fadvise = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int64 __offset,
  ffi.Int64 __len,
  ffi.Int32 __advise,
);

typedef _dart_posix_fadvise = int Function(
  int __fd,
  int __offset,
  int __len,
  int __advise,
);

typedef _c_posix_fallocate = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int64 __offset,
  ffi.Int64 __len,
);

typedef _dart_posix_fallocate = int Function(
  int __fd,
  int __offset,
  int __len,
);

typedef _c_access = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __type,
);

typedef _dart_access = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __type,
);

typedef _c_faccessat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __type,
  ffi.Int32 __flag,
);

typedef _dart_faccessat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __type,
  int __flag,
);

typedef _c_lseek = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Int64 __offset,
  ffi.Int32 __whence,
);

typedef _dart_lseek = int Function(
  int __fd,
  int __offset,
  int __whence,
);

typedef _c_close = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_close = int Function(
  int __fd,
);

typedef _c_read = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_read = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef _c_write = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
);

typedef _dart_write = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
);

typedef _c_pread = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
  ffi.Int64 __offset,
);

typedef _dart_pread = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
  int __offset,
);

typedef _c_pwrite = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
  ffi.Int64 __offset,
);

typedef _dart_pwrite = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __offset,
);

typedef _c_pipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> __pipedes,
);

typedef _dart_pipe = int Function(
  ffi.Pointer<ffi.Int32> __pipedes,
);

typedef _c_alarm = ffi.Uint32 Function(
  ffi.Uint32 __seconds,
);

typedef _dart_alarm = int Function(
  int __seconds,
);

typedef _c_sleep = ffi.Uint32 Function(
  ffi.Uint32 __seconds,
);

typedef _dart_sleep = int Function(
  int __seconds,
);

typedef _c_ualarm = ffi.Uint32 Function(
  ffi.Uint32 __value,
  ffi.Uint32 __interval,
);

typedef _dart_ualarm = int Function(
  int __value,
  int __interval,
);

typedef _c_usleep = ffi.Int32 Function(
  ffi.Uint32 __useconds,
);

typedef _dart_usleep = int Function(
  int __useconds,
);

typedef _c_pause = ffi.Int32 Function();

typedef _dart_pause = int Function();

typedef _c_chown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_chown = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
);

typedef _c_fchown = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_fchown = int Function(
  int __fd,
  int __owner,
  int __group,
);

typedef _c_lchown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
);

typedef _dart_lchown = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
);

typedef _c_fchownat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __owner,
  ffi.Uint32 __group,
  ffi.Int32 __flag,
);

typedef _dart_fchownat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __owner,
  int __group,
  int __flag,
);

typedef _c_chdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_chdir = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_fchdir = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_fchdir = int Function(
  int __fd,
);

typedef _c_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __size,
);

typedef _dart_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
  int __size,
);

typedef _c_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_dup = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_dup = int Function(
  int __fd,
);

typedef _c_dup2 = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __fd2,
);

typedef _dart_dup2 = int Function(
  int __fd,
  int __fd2,
);

typedef _c_execve = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _dart_execve = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _c_fexecve = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _dart_fexecve = int Function(
  int __fd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _c_execv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execv = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_execle = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execle = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_execl = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execl = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_execvp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execvp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_execlp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _dart_execlp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg,
);

typedef _c_nice = ffi.Int32 Function(
  ffi.Int32 __inc,
);

typedef _dart_nice = int Function(
  int __inc,
);

typedef _c__exit = ffi.Void Function(
  ffi.Int32 __status,
);

typedef _dart__exit = void Function(
  int __status,
);

typedef _c_pathconf = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Int32 __name,
);

typedef _dart_pathconf = int Function(
  ffi.Pointer<ffi.Int8> __path,
  int __name,
);

typedef _c_fpathconf = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Int32 __name,
);

typedef _dart_fpathconf = int Function(
  int __fd,
  int __name,
);

typedef _c_sysconf = ffi.Int64 Function(
  ffi.Int32 __name,
);

typedef _dart_sysconf = int Function(
  int __name,
);

typedef _c_confstr = ffi.Uint64 Function(
  ffi.Int32 __name,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_confstr = int Function(
  int __name,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_getpid = ffi.Int32 Function();

typedef _dart_getpid = int Function();

typedef _c_getppid = ffi.Int32 Function();

typedef _dart_getppid = int Function();

typedef _c_getpgrp = ffi.Int32 Function();

typedef _dart_getpgrp = int Function();

typedef _c___getpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart___getpgid = int Function(
  int __pid,
);

typedef _c_getpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart_getpgid = int Function(
  int __pid,
);

typedef _c_setpgid = ffi.Int32 Function(
  ffi.Int32 __pid,
  ffi.Int32 __pgid,
);

typedef _dart_setpgid = int Function(
  int __pid,
  int __pgid,
);

typedef _c_setpgrp = ffi.Int32 Function();

typedef _dart_setpgrp = int Function();

typedef _c_setsid = ffi.Int32 Function();

typedef _dart_setsid = int Function();

typedef _c_getsid = ffi.Int32 Function(
  ffi.Int32 __pid,
);

typedef _dart_getsid = int Function(
  int __pid,
);

typedef _c_getuid = ffi.Uint32 Function();

typedef _dart_getuid = int Function();

typedef _c_geteuid = ffi.Uint32 Function();

typedef _dart_geteuid = int Function();

typedef _c_getgid = ffi.Uint32 Function();

typedef _dart_getgid = int Function();

typedef _c_getegid = ffi.Uint32 Function();

typedef _dart_getegid = int Function();

typedef _c_getgroups = ffi.Int32 Function(
  ffi.Int32 __size,
  ffi.Pointer<ffi.Uint32> __list,
);

typedef _dart_getgroups = int Function(
  int __size,
  ffi.Pointer<ffi.Uint32> __list,
);

typedef _c_setuid = ffi.Int32 Function(
  ffi.Uint32 __uid,
);

typedef _dart_setuid = int Function(
  int __uid,
);

typedef _c_setreuid = ffi.Int32 Function(
  ffi.Uint32 __ruid,
  ffi.Uint32 __euid,
);

typedef _dart_setreuid = int Function(
  int __ruid,
  int __euid,
);

typedef _c_seteuid = ffi.Int32 Function(
  ffi.Uint32 __uid,
);

typedef _dart_seteuid = int Function(
  int __uid,
);

typedef _c_setgid = ffi.Int32 Function(
  ffi.Uint32 __gid,
);

typedef _dart_setgid = int Function(
  int __gid,
);

typedef _c_setregid = ffi.Int32 Function(
  ffi.Uint32 __rgid,
  ffi.Uint32 __egid,
);

typedef _dart_setregid = int Function(
  int __rgid,
  int __egid,
);

typedef _c_setegid = ffi.Int32 Function(
  ffi.Uint32 __gid,
);

typedef _dart_setegid = int Function(
  int __gid,
);

typedef _c_fork = ffi.Int32 Function();

typedef _dart_fork = int Function();

typedef _c_vfork = ffi.Int32 Function();

typedef _dart_vfork = int Function();

typedef _c_ttyname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __fd,
);

typedef _dart_ttyname = ffi.Pointer<ffi.Int8> Function(
  int __fd,
);

typedef _c_ttyname_r = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __buflen,
);

typedef _dart_ttyname_r = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __buf,
  int __buflen,
);

typedef _c_isatty = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_isatty = int Function(
  int __fd,
);

typedef _c_ttyslot = ffi.Int32 Function();

typedef _dart_ttyslot = int Function();

typedef _c_link = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_link = int Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_linkat = ffi.Int32 Function(
  ffi.Int32 __fromfd,
  ffi.Pointer<ffi.Int8> __from,
  ffi.Int32 __tofd,
  ffi.Pointer<ffi.Int8> __to,
  ffi.Int32 __flags,
);

typedef _dart_linkat = int Function(
  int __fromfd,
  ffi.Pointer<ffi.Int8> __from,
  int __tofd,
  ffi.Pointer<ffi.Int8> __to,
  int __flags,
);

typedef _c_symlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_symlink = int Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_readlink = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_readlink = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_symlinkat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __from,
  ffi.Int32 __tofd,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _dart_symlinkat = int Function(
  ffi.Pointer<ffi.Int8> __from,
  int __tofd,
  ffi.Pointer<ffi.Int8> __to,
);

typedef _c_readlinkat = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_readlinkat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_unlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_unlink = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_unlinkat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __name,
  ffi.Int32 __flag,
);

typedef _dart_unlinkat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __name,
  int __flag,
);

typedef _c_rmdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_rmdir = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_tcgetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcgetpgrp = int Function(
  int __fd,
);

typedef _c_tcsetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __pgrp_id,
);

typedef _dart_tcsetpgrp = int Function(
  int __fd,
  int __pgrp_id,
);

typedef _c_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _c_getlogin_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __name_len,
);

typedef _dart_getlogin_r = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __name_len,
);

typedef _c_setlogin = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_setlogin = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_getopt = ffi.Int32 Function(
  ffi.Int32 ___argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
  ffi.Pointer<ffi.Int8> __shortopts,
);

typedef _dart_getopt = int Function(
  int ___argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ___argv,
  ffi.Pointer<ffi.Int8> __shortopts,
);

typedef _c_gethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __len,
);

typedef _dart_gethostname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_sethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __len,
);

typedef _dart_sethostname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_sethostid = ffi.Int32 Function(
  ffi.Int64 __id,
);

typedef _dart_sethostid = int Function(
  int __id,
);

typedef _c_getdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __len,
);

typedef _dart_getdomainname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_setdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Uint64 __len,
);

typedef _dart_setdomainname = int Function(
  ffi.Pointer<ffi.Int8> __name,
  int __len,
);

typedef _c_vhangup = ffi.Int32 Function();

typedef _dart_vhangup = int Function();

typedef _c_revoke = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
);

typedef _dart_revoke = int Function(
  ffi.Pointer<ffi.Int8> __file,
);

typedef _c_profil = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint16> __sample_buffer,
  ffi.Uint64 __size,
  ffi.Uint64 __offset,
  ffi.Uint32 __scale,
);

typedef _dart_profil = int Function(
  ffi.Pointer<ffi.Uint16> __sample_buffer,
  int __size,
  int __offset,
  int __scale,
);

typedef _c_acct = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_acct = int Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _c_endusershell = ffi.Void Function();

typedef _dart_endusershell = void Function();

typedef _c_setusershell = ffi.Void Function();

typedef _dart_setusershell = void Function();

typedef _c_daemon = ffi.Int32 Function(
  ffi.Int32 __nochdir,
  ffi.Int32 __noclose,
);

typedef _dart_daemon = int Function(
  int __nochdir,
  int __noclose,
);

typedef _c_chroot = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _dart_chroot = int Function(
  ffi.Pointer<ffi.Int8> __path,
);

typedef _c_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __prompt,
);

typedef _dart_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __prompt,
);

typedef _c_fsync = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_fsync = int Function(
  int __fd,
);

typedef _c_gethostid = ffi.Int64 Function();

typedef _dart_gethostid = int Function();

typedef _c_sync_1 = ffi.Void Function();

typedef _dart_sync_1 = void Function();

typedef _c_getpagesize = ffi.Int32 Function();

typedef _dart_getpagesize = int Function();

typedef _c_getdtablesize = ffi.Int32 Function();

typedef _dart_getdtablesize = int Function();

typedef _c_truncate = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int64 __length,
);

typedef _dart_truncate = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __length,
);

typedef _c_ftruncate = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int64 __length,
);

typedef _dart_ftruncate = int Function(
  int __fd,
  int __length,
);

typedef _c_brk = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __addr,
);

typedef _dart_brk = int Function(
  ffi.Pointer<ffi.Void> __addr,
);

typedef _c_sbrk = ffi.Pointer<ffi.Void> Function(
  ffi.IntPtr __delta,
);

typedef _dart_sbrk = ffi.Pointer<ffi.Void> Function(
  int __delta,
);

typedef _c_syscall = ffi.Int64 Function(
  ffi.Int64 __sysno,
);

typedef _dart_syscall = int Function(
  int __sysno,
);

typedef _c_fdatasync = ffi.Int32 Function(
  ffi.Int32 __fildes,
);

typedef _dart_fdatasync = int Function(
  int __fildes,
);

typedef _c_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __key,
  ffi.Pointer<ffi.Int8> __salt,
);

typedef _dart_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __key,
  ffi.Pointer<ffi.Int8> __salt,
);

typedef _c_getentropy = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __buffer,
  ffi.Uint64 __length,
);

typedef _dart_getentropy = int Function(
  ffi.Pointer<ffi.Void> __buffer,
  int __length,
);

typedef _c_gettimeofday = ffi.Int32 Function(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<ffi.Void> __tz,
);

typedef _dart_gettimeofday = int Function(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<ffi.Void> __tz,
);

typedef _c_settimeofday = ffi.Int32 Function(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<timezone> __tz,
);

typedef _dart_settimeofday = int Function(
  ffi.Pointer<timeval> __tv,
  ffi.Pointer<timezone> __tz,
);

typedef _c_adjtime = ffi.Int32 Function(
  ffi.Pointer<timeval> __delta,
  ffi.Pointer<timeval> __olddelta,
);

typedef _dart_adjtime = int Function(
  ffi.Pointer<timeval> __delta,
  ffi.Pointer<timeval> __olddelta,
);

typedef _c_getitimer = ffi.Int32 Function(
  ffi.Int32 __which,
  ffi.Pointer<itimerval> __value,
);

typedef _dart_getitimer = int Function(
  int __which,
  ffi.Pointer<itimerval> __value,
);

typedef _c_setitimer = ffi.Int32 Function(
  ffi.Int32 __which,
  ffi.Pointer<itimerval> __new,
  ffi.Pointer<itimerval> __old,
);

typedef _dart_setitimer = int Function(
  int __which,
  ffi.Pointer<itimerval> __new,
  ffi.Pointer<itimerval> __old,
);

typedef _c_utimes = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<timeval> __tvp,
);

typedef _dart_utimes = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<timeval> __tvp,
);

typedef _c_lutimes = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<timeval> __tvp,
);

typedef _dart_lutimes = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<timeval> __tvp,
);

typedef _c_futimes = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<timeval> __tvp,
);

typedef _dart_futimes = int Function(
  int __fd,
  ffi.Pointer<timeval> __tvp,
);

typedef _c___ctype_b_loc = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _dart___ctype_b_loc = ffi.Pointer<ffi.Pointer<ffi.Uint16>> Function();

typedef _c___ctype_tolower_loc = ffi.Pointer<ffi.Pointer<ffi.Int32>> Function();

typedef _dart___ctype_tolower_loc = ffi.Pointer<ffi.Pointer<ffi.Int32>>
    Function();

typedef _c___ctype_toupper_loc = ffi.Pointer<ffi.Pointer<ffi.Int32>> Function();

typedef _dart___ctype_toupper_loc = ffi.Pointer<ffi.Pointer<ffi.Int32>>
    Function();

typedef _c_isalnum = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isalnum = int Function(
  int arg0,
);

typedef _c_isalpha = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isalpha = int Function(
  int arg0,
);

typedef _c_iscntrl = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_iscntrl = int Function(
  int arg0,
);

typedef _c_isdigit = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isdigit = int Function(
  int arg0,
);

typedef _c_islower = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_islower = int Function(
  int arg0,
);

typedef _c_isgraph = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isgraph = int Function(
  int arg0,
);

typedef _c_isprint = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isprint = int Function(
  int arg0,
);

typedef _c_ispunct = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_ispunct = int Function(
  int arg0,
);

typedef _c_isspace = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isspace = int Function(
  int arg0,
);

typedef _c_isupper = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isupper = int Function(
  int arg0,
);

typedef _c_isxdigit = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isxdigit = int Function(
  int arg0,
);

typedef _c_tolower = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_tolower = int Function(
  int __c,
);

typedef _c_toupper = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_toupper = int Function(
  int __c,
);

typedef _c_isblank = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isblank = int Function(
  int arg0,
);

typedef _c_isascii = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_isascii = int Function(
  int __c,
);

typedef _c_toascii = ffi.Int32 Function(
  ffi.Int32 __c,
);

typedef _dart_toascii = int Function(
  int __c,
);

typedef _c__toupper = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart__toupper = int Function(
  int arg0,
);

typedef _c__tolower = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart__tolower = int Function(
  int arg0,
);

typedef _c_isalnum_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isalnum_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isalpha_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isalpha_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_iscntrl_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_iscntrl_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isdigit_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isdigit_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_islower_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_islower_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isgraph_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isgraph_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isprint_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isprint_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_ispunct_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_ispunct_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isspace_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isspace_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isupper_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isupper_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isxdigit_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isxdigit_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c_isblank_l = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _dart_isblank_l = int Function(
  int arg0,
  ffi.Pointer<__locale_struct> arg1,
);

typedef _c___tolower_l = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart___tolower_l = int Function(
  int __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_tolower_l = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_tolower_l = int Function(
  int __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c___toupper_l = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart___toupper_l = int Function(
  int __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c_toupper_l = ffi.Int32 Function(
  ffi.Int32 __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _dart_toupper_l = int Function(
  int __c,
  ffi.Pointer<__locale_struct> __l,
);

typedef _c___assert_fail = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __assertion,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __line,
  ffi.Pointer<ffi.Int8> __function,
);

typedef _dart___assert_fail = void Function(
  ffi.Pointer<ffi.Int8> __assertion,
  ffi.Pointer<ffi.Int8> __file,
  int __line,
  ffi.Pointer<ffi.Int8> __function,
);

typedef _c___assert_perror_fail = ffi.Void Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __line,
  ffi.Pointer<ffi.Int8> __function,
);

typedef _dart___assert_perror_fail = void Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __file,
  int __line,
  ffi.Pointer<ffi.Int8> __function,
);

typedef _c___assert = ffi.Void Function(
  ffi.Pointer<ffi.Int8> __assertion,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __line,
);

typedef _dart___assert = void Function(
  ffi.Pointer<ffi.Int8> __assertion,
  ffi.Pointer<ffi.Int8> __file,
  int __line,
);

typedef _c__XimCheckIfLocalProcessing = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimCheckIfLocalProcessing = int Function(
  int im,
);

typedef _c_XimFreeDefaultTree = ffi.Void Function(
  ffi.Pointer<ffi.Int32> b,
);

typedef _dart_XimFreeDefaultTree = void Function(
  ffi.Pointer<ffi.Int32> b,
);

typedef _c__XimLocalIMFree = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimLocalIMFree = void Function(
  int im,
);

typedef _c__XimLocalCloseIM = ffi.Int32 Function(
  ffi.Int32 xim,
);

typedef _dart__XimLocalCloseIM = int Function(
  int xim,
);

typedef _c__XimLocalGetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xim,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart__XimLocalGetIMValues = ffi.Pointer<ffi.Int8> Function(
  int xim,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c__XimLocalSetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 xim,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart__XimLocalSetIMValues = ffi.Pointer<ffi.Int8> Function(
  int xim,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c__XimCreateDefaultTree = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimCreateDefaultTree = void Function(
  int im,
);

typedef _c__XimLocalOpenIM = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimLocalOpenIM = int Function(
  int im,
);

typedef _c__XimLocalMbLookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> xic,
  ffi.Pointer<XKeyEvent> ev,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 bytes,
  ffi.Pointer<ffi.Uint64> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _dart__XimLocalMbLookupString = int Function(
  ffi.Pointer<_XIC> xic,
  ffi.Pointer<XKeyEvent> ev,
  ffi.Pointer<ffi.Int8> buffer,
  int bytes,
  ffi.Pointer<ffi.Uint64> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _c__XimLocalWcLookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> xic,
  ffi.Pointer<XKeyEvent> ev,
  ffi.Pointer<ffi.Int32> buffer,
  ffi.Int32 wlen,
  ffi.Pointer<ffi.Uint64> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _dart__XimLocalWcLookupString = int Function(
  ffi.Pointer<_XIC> xic,
  ffi.Pointer<XKeyEvent> ev,
  ffi.Pointer<ffi.Int32> buffer,
  int wlen,
  ffi.Pointer<ffi.Uint64> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _c__XimLocalUtf8LookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> xic,
  ffi.Pointer<XKeyEvent> ev,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 bytes,
  ffi.Pointer<ffi.Uint64> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _dart__XimLocalUtf8LookupString = int Function(
  ffi.Pointer<_XIC> xic,
  ffi.Pointer<XKeyEvent> ev,
  ffi.Pointer<ffi.Int8> buffer,
  int bytes,
  ffi.Pointer<ffi.Uint64> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _c__XimLcctsconvert = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int8> from,
  ffi.Int32 from_len,
  ffi.Pointer<ffi.Int8> to,
  ffi.Int32 to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__XimLcctsconvert = int Function(
  int conv,
  ffi.Pointer<ffi.Int8> from,
  int from_len,
  ffi.Pointer<ffi.Int8> to,
  int to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__XimLcctstombs = ffi.Int32 Function(
  ffi.Pointer<_XIM> xim,
  ffi.Pointer<ffi.Int8> from,
  ffi.Int32 from_len,
  ffi.Pointer<ffi.Int8> to,
  ffi.Int32 to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__XimLcctstombs = int Function(
  ffi.Pointer<_XIM> xim,
  ffi.Pointer<ffi.Int8> from,
  int from_len,
  ffi.Pointer<ffi.Int8> to,
  int to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__XimLcctstowcs = ffi.Int32 Function(
  ffi.Pointer<_XIM> xim,
  ffi.Pointer<ffi.Int8> from,
  ffi.Int32 from_len,
  ffi.Pointer<ffi.Int32> to,
  ffi.Int32 to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__XimLcctstowcs = int Function(
  ffi.Pointer<_XIM> xim,
  ffi.Pointer<ffi.Int8> from,
  int from_len,
  ffi.Pointer<ffi.Int32> to,
  int to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c__XimLcctstoutf8 = ffi.Int32 Function(
  ffi.Pointer<_XIM> xim,
  ffi.Pointer<ffi.Int8> from,
  ffi.Int32 from_len,
  ffi.Pointer<ffi.Int8> to,
  ffi.Int32 to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _dart__XimLcctstoutf8 = int Function(
  ffi.Pointer<_XIM> xim,
  ffi.Pointer<ffi.Int8> from,
  int from_len,
  ffi.Pointer<ffi.Int8> to,
  int to_len,
  ffi.Pointer<ffi.Int32> state,
);

typedef _c_stat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<stat> __buf,
);

typedef _dart_stat = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<stat> __buf,
);

typedef _c_fstat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<stat> __buf,
);

typedef _dart_fstat = int Function(
  int __fd,
  ffi.Pointer<stat> __buf,
);

typedef _c_fstatat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<stat> __buf,
  ffi.Int32 __flag,
);

typedef _dart_fstatat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<stat> __buf,
  int __flag,
);

typedef _c_lstat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<stat> __buf,
);

typedef _dart_lstat = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<stat> __buf,
);

typedef _c_chmod = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __mode,
);

typedef _dart_chmod = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __mode,
);

typedef _c_lchmod = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __mode,
);

typedef _dart_lchmod = int Function(
  ffi.Pointer<ffi.Int8> __file,
  int __mode,
);

typedef _c_fchmod = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Uint32 __mode,
);

typedef _dart_fchmod = int Function(
  int __fd,
  int __mode,
);

typedef _c_fchmodat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __file,
  ffi.Uint32 __mode,
  ffi.Int32 __flag,
);

typedef _dart_fchmodat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __file,
  int __mode,
  int __flag,
);

typedef _c_umask = ffi.Uint32 Function(
  ffi.Uint32 __mask,
);

typedef _dart_umask = int Function(
  int __mask,
);

typedef _c_mkdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Uint32 __mode,
);

typedef _dart_mkdir = int Function(
  ffi.Pointer<ffi.Int8> __path,
  int __mode,
);

typedef _c_mkdirat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Uint32 __mode,
);

typedef _dart_mkdirat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __path,
  int __mode,
);

typedef _c_mknod = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Uint32 __mode,
  ffi.Uint64 __dev,
);

typedef _dart_mknod = int Function(
  ffi.Pointer<ffi.Int8> __path,
  int __mode,
  int __dev,
);

typedef _c_mknodat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Uint32 __mode,
  ffi.Uint64 __dev,
);

typedef _dart_mknodat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __path,
  int __mode,
  int __dev,
);

typedef _c_mkfifo = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Uint32 __mode,
);

typedef _dart_mkfifo = int Function(
  ffi.Pointer<ffi.Int8> __path,
  int __mode,
);

typedef _c_mkfifoat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Uint32 __mode,
);

typedef _dart_mkfifoat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __path,
  int __mode,
);

typedef _c_utimensat = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<timespec> __times,
  ffi.Int32 __flags,
);

typedef _dart_utimensat = int Function(
  int __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<timespec> __times,
  int __flags,
);

typedef _c_futimens = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<timespec> __times,
);

typedef _dart_futimens = int Function(
  int __fd,
  ffi.Pointer<timespec> __times,
);

typedef _c___fxstat = ffi.Int32 Function(
  ffi.Int32 __ver,
  ffi.Int32 __fildes,
  ffi.Pointer<stat> __stat_buf,
);

typedef _dart___fxstat = int Function(
  int __ver,
  int __fildes,
  ffi.Pointer<stat> __stat_buf,
);

typedef _c___xstat = ffi.Int32 Function(
  ffi.Int32 __ver,
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<stat> __stat_buf,
);

typedef _dart___xstat = int Function(
  int __ver,
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<stat> __stat_buf,
);

typedef _c___lxstat = ffi.Int32 Function(
  ffi.Int32 __ver,
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<stat> __stat_buf,
);

typedef _dart___lxstat = int Function(
  int __ver,
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<stat> __stat_buf,
);

typedef _c___fxstatat = ffi.Int32 Function(
  ffi.Int32 __ver,
  ffi.Int32 __fildes,
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<stat> __stat_buf,
  ffi.Int32 __flag,
);

typedef _dart___fxstatat = int Function(
  int __ver,
  int __fildes,
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<stat> __stat_buf,
  int __flag,
);

typedef _c___xmknod = ffi.Int32 Function(
  ffi.Int32 __ver,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Uint32 __mode,
  ffi.Pointer<ffi.Uint64> __dev,
);

typedef _dart___xmknod = int Function(
  int __ver,
  ffi.Pointer<ffi.Int8> __path,
  int __mode,
  ffi.Pointer<ffi.Uint64> __dev,
);

typedef _c___xmknodat = ffi.Int32 Function(
  ffi.Int32 __ver,
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Int8> __path,
  ffi.Uint32 __mode,
  ffi.Pointer<ffi.Uint64> __dev,
);

typedef _dart___xmknodat = int Function(
  int __ver,
  int __fd,
  ffi.Pointer<ffi.Int8> __path,
  int __mode,
  ffi.Pointer<ffi.Uint64> __dev,
);

typedef _c__Xmbstowcs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> wstr,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 len,
);

typedef _dart__Xmbstowcs = int Function(
  ffi.Pointer<ffi.Int32> wstr,
  ffi.Pointer<ffi.Int8> str,
  int len,
);

typedef _c__Xmbstoutf8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> ustr,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 len,
);

typedef _dart__Xmbstoutf8 = int Function(
  ffi.Pointer<ffi.Int8> ustr,
  ffi.Pointer<ffi.Int8> str,
  int len,
);

typedef _c_parsestringfile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> fp,
  ffi.Int32 im,
  ffi.Int32 depth,
);

typedef _dart_parsestringfile = void Function(
  ffi.Pointer<_IO_FILE> fp,
  int im,
  int depth,
);

typedef _c_nextch = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> fp,
  ffi.Pointer<ffi.Int32> lastch,
);

typedef _dart_nextch = int Function(
  ffi.Pointer<_IO_FILE> fp,
  ffi.Pointer<ffi.Int32> lastch,
);

typedef _c_putbackch = ffi.Void Function(
  ffi.Int32 c,
  ffi.Pointer<ffi.Int32> lastch,
);

typedef _dart_putbackch = void Function(
  int c,
  ffi.Pointer<ffi.Int32> lastch,
);

typedef _c_nexttoken = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> fp,
  ffi.Pointer<ffi.Int8> tokenbuf,
  ffi.Pointer<ffi.Int32> lastch,
);

typedef _dart_nexttoken = int Function(
  ffi.Pointer<_IO_FILE> fp,
  ffi.Pointer<ffi.Int8> tokenbuf,
  ffi.Pointer<ffi.Int32> lastch,
);

typedef _c_modmask = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_modmask = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_TransFileName = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_TransFileName = ffi.Pointer<ffi.Int8> Function(
  int im,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_get_mb_string = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Uint64 ks,
);

typedef _dart_get_mb_string = int Function(
  int im,
  ffi.Pointer<ffi.Int8> buf,
  int ks,
);

typedef _c_parseline = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> fp,
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> tokenbuf,
  ffi.Int32 depth,
);

typedef _dart_parseline = int Function(
  ffi.Pointer<_IO_FILE> fp,
  int im,
  ffi.Pointer<ffi.Int8> tokenbuf,
  int depth,
);

typedef _c__XimParseStringFile = ffi.Void Function(
  ffi.Pointer<_IO_FILE> fp,
  ffi.Int32 im,
);

typedef _dart__XimParseStringFile = void Function(
  ffi.Pointer<_IO_FILE> fp,
  int im,
);

typedef _c__XimLocalSetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> xic,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart__XimLocalSetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> xic,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c__XimDefaultStyles = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultStyles = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultIMValues = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultIMValues = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultICValues = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultICValues = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultVisiblePos = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultVisiblePos = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultFocusWindow = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultFocusWindow = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultResName = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultResName = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultResClass = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultResClass = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultDestroyCB = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultDestroyCB = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultResetState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultResetState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultHotKeyState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultHotKeyState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultArea = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultArea = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultColormap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultColormap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultStdColormap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultStdColormap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultFg = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultFg = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultBg = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultBg = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultBgPixmap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultBgPixmap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultFontSet = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultFontSet = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultLineSpace = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultLineSpace = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultCursor = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultCursor = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultPreeditState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultPreeditState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimDefaultNest = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  ffi.Uint64 mode,
);

typedef _dart__XimDefaultNest = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> parm,
  int mode,
);

typedef _c__XimEncodeCallback = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeCallback = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeString = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeString = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeStyle = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeStyle = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeWindow = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeWindow = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeStringConv = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeStringConv = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeResetState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeResetState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeHotKey = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeHotKey = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeHotKetState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeHotKetState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeRectangle = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeRectangle = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeSpot = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeSpot = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeColormap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeColormap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeStdColormap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeStdColormap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeLong = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeLong = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeBgPixmap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeBgPixmap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeFontSet = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeFontSet = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeLineSpace = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeLineSpace = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeCursor = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeCursor = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodePreeditState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodePreeditState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeNest = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeNest = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeStyles = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeStyles = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeValues = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeValues = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeCallback = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeCallback = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeString = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeString = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeBool = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeBool = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeStyle = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeStyle = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeWindow = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeWindow = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeStringConv = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeStringConv = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeResetState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeResetState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeHotKey = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeHotKey = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeHotKetState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeHotKetState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeRectangle = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeRectangle = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeSpot = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeSpot = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeColormap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeColormap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeStdColormap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeStdColormap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeLong = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeLong = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeBgPixmap = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeBgPixmap = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeFontSet = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeFontSet = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeLineSpace = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeLineSpace = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeCursor = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeCursor = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodePreeditState = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodePreeditState = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeNest = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeNest = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimSetResourceList = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
  ffi.Int32 resource,
  ffi.Uint32 num_resource,
  ffi.Uint16 id,
);

typedef _dart__XimSetResourceList = int Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
  int resource,
  int num_resource,
  int id,
);

typedef _c__XimSetIMResourceList = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
);

typedef _dart__XimSetIMResourceList = int Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
);

typedef _c__XimSetICResourceList = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
);

typedef _dart__XimSetICResourceList = int Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
);

typedef _c__XimSetInnerIMResourceList = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
);

typedef _dart__XimSetInnerIMResourceList = int Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
);

typedef _c__XimSetInnerICResourceList = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
);

typedef _dart__XimSetInnerICResourceList = int Function(
  ffi.Pointer<ffi.Int32> res_list,
  ffi.Pointer<ffi.Uint32> list_num,
);

typedef _c__XimGetResourceListRecByMode = ffi.Int32 Function(
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
  ffi.Uint16 mode,
);

typedef _dart__XimGetResourceListRecByMode = int Function(
  int res_list,
  int list_num,
  int mode,
);

typedef _c__XimCheckCreateICValues = ffi.Int32 Function(
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
);

typedef _dart__XimCheckCreateICValues = int Function(
  int res_list,
  int list_num,
);

typedef _c__XimGetResourceListRecByQuark = ffi.Int32 Function(
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
  ffi.Int32 quark,
);

typedef _dart__XimGetResourceListRecByQuark = int Function(
  int res_list,
  int list_num,
  int quark,
);

typedef _c__XimGetResourceListRec = ffi.Int32 Function(
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XimGetResourceListRec = int Function(
  int res_list,
  int list_num,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XimSetIMValueData = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int32> values,
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
);

typedef _dart__XimSetIMValueData = ffi.Pointer<ffi.Int8> Function(
  int im,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int32> values,
  int res_list,
  int list_num,
);

typedef _c__XimGetIMValueData = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int32> values,
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
);

typedef _dart__XimGetIMValueData = ffi.Pointer<ffi.Int8> Function(
  int im,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int32> values,
  int res_list,
  int list_num,
);

typedef _c__XimSetIMMode = ffi.Void Function(
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
);

typedef _dart__XimSetIMMode = void Function(
  int res_list,
  int list_num,
);

typedef _c__XimCheckSetIMDefaultsMode = ffi.Int32 Function(
  ffi.Int32 res,
);

typedef _dart__XimCheckSetIMDefaultsMode = int Function(
  int res,
);

typedef _c__XimCheckSetIMValuesMode = ffi.Int32 Function(
  ffi.Int32 res,
);

typedef _dart__XimCheckSetIMValuesMode = int Function(
  int res,
);

typedef _c__XimCheckGetIMValuesMode = ffi.Int32 Function(
  ffi.Int32 res,
);

typedef _dart__XimCheckGetIMValuesMode = int Function(
  int res,
);

typedef _c__XimCheckIMMode = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Uint64 mode,
);

typedef _dart__XimCheckIMMode = int Function(
  int res,
  int mode,
);

typedef _c__XimSetICMode = ffi.Void Function(
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
  ffi.Uint64 style,
);

typedef _dart__XimSetICMode = void Function(
  int res_list,
  int list_num,
  int style,
);

typedef _c__XimCheckSetICDefaultsMode = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Uint64 mode,
);

typedef _dart__XimCheckSetICDefaultsMode = int Function(
  int res,
  int mode,
);

typedef _c__XimCheckCreateICMode = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Uint64 mode,
);

typedef _dart__XimCheckCreateICMode = int Function(
  int res,
  int mode,
);

typedef _c__XimCheckSetICValuesMode = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Uint64 mode,
);

typedef _dart__XimCheckSetICValuesMode = int Function(
  int res,
  int mode,
);

typedef _c__XimCheckGetICValuesMode = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Uint64 mode,
);

typedef _dart__XimCheckGetICValuesMode = int Function(
  int res,
  int mode,
);

typedef _c__XimCheckICMode = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Uint64 mode,
);

typedef _dart__XimCheckICMode = int Function(
  int res,
  int mode,
);

typedef _c__XimSetLocalIMDefaults = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> top,
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
);

typedef _dart__XimSetLocalIMDefaults = int Function(
  int im,
  ffi.Pointer<ffi.Int8> top,
  int res_list,
  int list_num,
);

typedef _c__XimSetICDefaults = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int8> top,
  ffi.Uint64 mode,
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
);

typedef _dart__XimSetICDefaults = int Function(
  int ic,
  ffi.Pointer<ffi.Int8> top,
  int mode,
  int res_list,
  int list_num,
);

typedef _c__XimEncodeAttr = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Uint32 num,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeAttr = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  int num,
  int res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeLocalIMAttr = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeLocalIMAttr = int Function(
  int res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeLocalICAttr = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Uint64 mode,
);

typedef _dart__XimEncodeLocalICAttr = int Function(
  int ic,
  int res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int32> arg,
  int mode,
);

typedef _c__XimEncodeLocalTopValue = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> val,
  ffi.Int32 flag,
);

typedef _dart__XimEncodeLocalTopValue = int Function(
  int ic,
  int res,
  ffi.Pointer<ffi.Int8> val,
  int flag,
);

typedef _c__XimEncodeLocalPreeditValue = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeLocalPreeditValue = int Function(
  int ic,
  int res,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimEncodeLocalStatusValue = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimEncodeLocalStatusValue = int Function(
  int ic,
  int res,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimSetICValueData = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int8> top,
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
  ffi.Pointer<ffi.Int32> values,
  ffi.Uint64 mode,
  ffi.Int32 flag,
);

typedef _dart__XimSetICValueData = ffi.Pointer<ffi.Int8> Function(
  int ic,
  ffi.Pointer<ffi.Int8> top,
  int res_list,
  int list_num,
  ffi.Pointer<ffi.Int32> values,
  int mode,
  int flag,
);

typedef _c__XimCheckInputStyle = ffi.Int32 Function(
  ffi.Pointer<XIMStyles> styles,
  ffi.Uint64 style,
);

typedef _dart__XimCheckInputStyle = int Function(
  ffi.Pointer<XIMStyles> styles,
  int style,
);

typedef _c__XimCheckLocalInputStyle = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int32> values,
  ffi.Pointer<XIMStyles> styles,
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
);

typedef _dart__XimCheckLocalInputStyle = int Function(
  int ic,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int32> values,
  ffi.Pointer<XIMStyles> styles,
  int res_list,
  int list_num,
);

typedef _c__XimDecodeAttr = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  ffi.Uint32 num,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeAttr = int Function(
  ffi.Pointer<XimValueOffsetInfo> info,
  int num,
  int res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeLocalIMAttr = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _dart__XimDecodeLocalIMAttr = int Function(
  int res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
);

typedef _c__XimDecodeLocalICAttr = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
  ffi.Uint64 mode,
);

typedef _dart__XimDecodeLocalICAttr = int Function(
  int res,
  ffi.Pointer<ffi.Int8> top,
  ffi.Pointer<ffi.Int8> val,
  int mode,
);

typedef _c__XimGetICValueData = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int8> top,
  ffi.Int32 res_list,
  ffi.Uint32 list_num,
  ffi.Pointer<ffi.Int32> values,
  ffi.Uint64 mode,
);

typedef _dart__XimGetICValueData = ffi.Pointer<ffi.Int8> Function(
  int ic,
  ffi.Pointer<ffi.Int8> top,
  int res_list,
  int list_num,
  ffi.Pointer<ffi.Int32> values,
  int mode,
);

typedef _c__XimGetCurrentIMValues = ffi.Void Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> im_values,
);

typedef _dart__XimGetCurrentIMValues = void Function(
  int im,
  ffi.Pointer<ffi.Int32> im_values,
);

typedef _c__XimSetCurrentIMValues = ffi.Void Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> im_values,
);

typedef _dart__XimSetCurrentIMValues = void Function(
  int im,
  ffi.Pointer<ffi.Int32> im_values,
);

typedef _c__XimGetCurrentICValues = ffi.Void Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ic_values,
);

typedef _dart__XimGetCurrentICValues = void Function(
  int ic,
  ffi.Pointer<ffi.Int32> ic_values,
);

typedef _c__XimSetCurrentICValues = ffi.Void Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> ic_values,
);

typedef _dart__XimSetCurrentICValues = void Function(
  int ic,
  ffi.Pointer<ffi.Int32> ic_values,
);

typedef _c__XimInitialIMOffsetInfo = ffi.Void Function();

typedef _dart__XimInitialIMOffsetInfo = void Function();

typedef _c__XimInitialICOffsetInfo = ffi.Void Function();

typedef _dart__XimInitialICOffsetInfo = void Function();

typedef _c__XimInitialIMMode = ffi.Void Function();

typedef _dart__XimInitialIMMode = void Function();

typedef _c__XimInitialICMode = ffi.Void Function();

typedef _dart__XimInitialICMode = void Function();

typedef _c__XimInitialResourceInfo = ffi.Void Function();

typedef _dart__XimInitialResourceInfo = void Function();

typedef _c__XimGetNestedListSeparator = ffi.Int32 Function(
  ffi.Int32 res_list,
  ffi.Uint32 res_num,
);

typedef _dart__XimGetNestedListSeparator = int Function(
  int res_list,
  int res_num,
);

typedef _c__XimCheckInnerIMAttributes = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Uint64 mode,
);

typedef _dart__XimCheckInnerIMAttributes = int Function(
  int im,
  ffi.Pointer<ffi.Int32> arg,
  int mode,
);

typedef _c__XimMakeIMAttrIDList = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Int32 res_list,
  ffi.Uint32 res_num,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Pointer<ffi.Int32> len,
  ffi.Uint64 mode,
);

typedef _dart__XimMakeIMAttrIDList = ffi.Pointer<ffi.Int8> Function(
  int im,
  int res_list,
  int res_num,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Pointer<ffi.Int32> len,
  int mode,
);

typedef _c__XimCheckInnerICAttributes = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Uint64 mode,
);

typedef _dart__XimCheckInnerICAttributes = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> arg,
  int mode,
);

typedef _c__XimMakeICAttrIDList = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 ic,
  ffi.Int32 res_list,
  ffi.Uint32 res_num,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Pointer<ffi.Int32> len,
  ffi.Uint64 mode,
);

typedef _dart__XimMakeICAttrIDList = ffi.Pointer<ffi.Int8> Function(
  int ic,
  int res_list,
  int res_num,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Int32> buf,
  ffi.Pointer<ffi.Int32> len,
  int mode,
);

typedef _c__XimAttributeToValue = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int32> data,
  ffi.Int32 data_len,
  ffi.Int32 value,
  ffi.Int32 mode,
);

typedef _dart__XimAttributeToValue = int Function(
  int ic,
  int res,
  ffi.Pointer<ffi.Int32> data,
  int data_len,
  int value,
  int mode,
);

typedef _c__XimDecodeInnerIMATTRIBUTE = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _dart__XimDecodeInnerIMATTRIBUTE = int Function(
  int im,
  ffi.Pointer<ffi.Int32> arg,
);

typedef _c__XimDecodeIMATTRIBUTE = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Int32 res_list,
  ffi.Uint32 res_num,
  ffi.Pointer<ffi.Int32> data,
  ffi.Int32 data_len,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Int32 mode,
);

typedef _dart__XimDecodeIMATTRIBUTE = ffi.Pointer<ffi.Int8> Function(
  int im,
  int res_list,
  int res_num,
  ffi.Pointer<ffi.Int32> data,
  int data_len,
  ffi.Pointer<ffi.Int32> arg,
  int mode,
);

typedef _c__XimDecodeInnerICATTRIBUTE = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Uint64 mode,
);

typedef _dart__XimDecodeInnerICATTRIBUTE = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> arg,
  int mode,
);

typedef _c__XimDecodeICATTRIBUTE = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 ic,
  ffi.Int32 res_list,
  ffi.Uint32 res_num,
  ffi.Pointer<ffi.Int32> data,
  ffi.Int32 data_len,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Int32 mode,
);

typedef _dart__XimDecodeICATTRIBUTE = ffi.Pointer<ffi.Int8> Function(
  int ic,
  int res_list,
  int res_num,
  ffi.Pointer<ffi.Int32> data,
  int data_len,
  ffi.Pointer<ffi.Int32> arg,
  int mode,
);

typedef _c__XimValueToAttribute = ffi.Int32 Function(
  ffi.Int32 res,
  ffi.Int32 buf,
  ffi.Int32 buf_size,
  ffi.Int32 value,
  ffi.Pointer<ffi.Int32> len,
  ffi.Uint64 mode,
  ffi.Int32 param,
);

typedef _dart__XimValueToAttribute = int Function(
  int res,
  int buf,
  int buf_size,
  int value,
  ffi.Pointer<ffi.Int32> len,
  int mode,
  int param,
);

typedef _c__XimSetInnerIMAttributes = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 top,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Uint64 mode,
);

typedef _dart__XimSetInnerIMAttributes = int Function(
  int im,
  int top,
  ffi.Pointer<ffi.Int32> arg,
  int mode,
);

typedef _c__XimEncodeIMATTRIBUTE = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 im,
  ffi.Int32 res_list,
  ffi.Uint32 res_num,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg_ret,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 size,
  ffi.Pointer<ffi.Int32> ret_len,
  ffi.Int32 top,
  ffi.Uint64 mode,
);

typedef _dart__XimEncodeIMATTRIBUTE = ffi.Pointer<ffi.Int8> Function(
  int im,
  int res_list,
  int res_num,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg_ret,
  ffi.Pointer<ffi.Int8> buf,
  int size,
  ffi.Pointer<ffi.Int32> ret_len,
  int top,
  int mode,
);

typedef _c__XimEncodeTopValue = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int32> p,
);

typedef _dart__XimEncodeTopValue = int Function(
  int ic,
  int res,
  ffi.Pointer<ffi.Int32> p,
);

typedef _c__XimEncodePreeditValue = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int32> p,
);

typedef _dart__XimEncodePreeditValue = int Function(
  int ic,
  int res,
  ffi.Pointer<ffi.Int32> p,
);

typedef _c__XimEncodeStatusValue = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 res,
  ffi.Pointer<ffi.Int32> p,
);

typedef _dart__XimEncodeStatusValue = int Function(
  int ic,
  int res,
  ffi.Pointer<ffi.Int32> p,
);

typedef _c__XimSetInnerICAttributes = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Int32 top,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Uint64 mode,
);

typedef _dart__XimSetInnerICAttributes = int Function(
  int ic,
  int top,
  ffi.Pointer<ffi.Int32> arg,
  int mode,
);

typedef _c__XimEncodeICATTRIBUTE = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 ic,
  ffi.Int32 res_list,
  ffi.Uint32 res_num,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg_ret,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 size,
  ffi.Pointer<ffi.Int32> ret_len,
  ffi.Int32 top,
  ffi.Pointer<ffi.Int32> flag,
  ffi.Uint64 mode,
);

typedef _dart__XimEncodeICATTRIBUTE = ffi.Pointer<ffi.Int8> Function(
  int ic,
  int res_list,
  int res_num,
  ffi.Pointer<ffi.Int32> arg,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg_ret,
  ffi.Pointer<ffi.Int8> buf,
  int size,
  ffi.Pointer<ffi.Int32> ret_len,
  int top,
  ffi.Pointer<ffi.Int32> flag,
  int mode,
);

typedef _c__XimCountNumberOfAttr = ffi.Uint32 Function(
  ffi.Int32 total,
  ffi.Pointer<ffi.Int32> attr,
  ffi.Pointer<ffi.Uint32> names_len,
);

typedef _dart__XimCountNumberOfAttr = int Function(
  int total,
  ffi.Pointer<ffi.Int32> attr,
  ffi.Pointer<ffi.Uint32> names_len,
);

typedef _c__XimGetAttributeID = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> buf,
);

typedef _dart__XimGetAttributeID = int Function(
  int im,
  ffi.Pointer<ffi.Int32> buf,
);

typedef _c_THAI_chtype = ffi.Int32 Function(
  ffi.Uint8 ch,
);

typedef _dart_THAI_chtype = int Function(
  int ch,
);

typedef _c_THAI_iscomposible = ffi.Int32 Function(
  ffi.Uint8 follow_ch,
  ffi.Uint8 lead_ch,
);

typedef _dart_THAI_iscomposible = int Function(
  int follow_ch,
  int lead_ch,
);

typedef _c_THAI_isaccepted = ffi.Int32 Function(
  ffi.Uint8 follow_ch,
  ffi.Uint8 lead_ch,
  ffi.Uint8 mode,
);

typedef _dart_THAI_isaccepted = int Function(
  int follow_ch,
  int lead_ch,
  int mode,
);

typedef _c_IC_RealGetPreviousChar = ffi.Uint8 Function(
  ffi.Int32 ic,
  ffi.Uint16 pos,
);

typedef _dart_IC_RealGetPreviousChar = int Function(
  int ic,
  int pos,
);

typedef _c_IC_RealDeletePreviousChar = ffi.Uint8 Function(
  ffi.Int32 ic,
);

typedef _dart_IC_RealDeletePreviousChar = int Function(
  int ic,
);

typedef _c_InitIscMode = ffi.Void Function(
  ffi.Int32 ic,
);

typedef _dart_InitIscMode = void Function(
  int ic,
);

typedef _c_ThaiFltAcceptInput = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Uint8 new_char,
  ffi.Uint64 symbol,
);

typedef _dart_ThaiFltAcceptInput = int Function(
  int ic,
  int new_char,
  int symbol,
);

typedef _c_ThaiFltReorderInput = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Uint8 previous_char,
  ffi.Uint8 new_char,
);

typedef _dart_ThaiFltReorderInput = int Function(
  int ic,
  int previous_char,
  int new_char,
);

typedef _c_ThaiFltReplaceInput = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Uint8 new_char,
  ffi.Uint64 symbol,
);

typedef _dart_ThaiFltReplaceInput = int Function(
  int ic,
  int new_char,
  int symbol,
);

typedef _c_NumLockMask = ffi.Uint32 Function(
  ffi.Pointer<_XDisplay> d,
);

typedef _dart_NumLockMask = int Function(
  ffi.Pointer<_XDisplay> d,
);

typedef _c__XimThaiUnSetFocus = ffi.Void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimThaiUnSetFocus = void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimThaiDestroyIC = ffi.Void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimThaiDestroyIC = void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimThaiSetFocus = ffi.Void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimThaiSetFocus = void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimThaiReset = ffi.Void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimThaiReset = void Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimThaiMbReset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimThaiMbReset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimThaiWcReset = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> xic,
);

typedef _dart__XimThaiWcReset = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> xic,
);

typedef _c__XimThaiCreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> im,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart__XimThaiCreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> im,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c__XimCheckIfThaiProcessing = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimCheckIfThaiProcessing = int Function(
  int im,
);

typedef _c__XimThaiOpenIM = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimThaiOpenIM = int Function(
  int im,
);

typedef _c__XimThaiIMFree = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimThaiIMFree = void Function(
  int im,
);

typedef _c__XimThaiCloseIM = ffi.Int32 Function(
  ffi.Pointer<_XIM> xim,
);

typedef _dart__XimThaiCloseIM = int Function(
  ffi.Pointer<_XIM> xim,
);

typedef _c___cmsg_nxthdr = ffi.Pointer<cmsghdr> Function(
  ffi.Pointer<msghdr> __mhdr,
  ffi.Pointer<cmsghdr> __cmsg,
);

typedef _dart___cmsg_nxthdr = ffi.Pointer<cmsghdr> Function(
  ffi.Pointer<msghdr> __mhdr,
  ffi.Pointer<cmsghdr> __cmsg,
);

typedef _c_socket = ffi.Int32 Function(
  ffi.Int32 __domain,
  ffi.Int32 __type,
  ffi.Int32 __protocol,
);

typedef _dart_socket = int Function(
  int __domain,
  int __type,
  int __protocol,
);

typedef _c_socketpair = ffi.Int32 Function(
  ffi.Int32 __domain,
  ffi.Int32 __type,
  ffi.Int32 __protocol,
  ffi.Pointer<ffi.Int32> __fds,
);

typedef _dart_socketpair = int Function(
  int __domain,
  int __type,
  int __protocol,
  ffi.Pointer<ffi.Int32> __fds,
);

typedef _c_bind = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Uint32 __len,
);

typedef _dart_bind = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  int __len,
);

typedef _c_getsockname = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __len,
);

typedef _dart_getsockname = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __len,
);

typedef _c_connect = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Uint32 __len,
);

typedef _dart_connect = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  int __len,
);

typedef _c_getpeername = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __len,
);

typedef _dart_getpeername = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __len,
);

typedef _c_send = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
  ffi.Int32 __flags,
);

typedef _dart_send = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
);

typedef _c_recv = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
  ffi.Int32 __flags,
);

typedef _dart_recv = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
);

typedef _c_sendto = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
  ffi.Int32 __flags,
  ffi.Pointer<sockaddr> __addr,
  ffi.Uint32 __addr_len,
);

typedef _dart_sendto = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
  ffi.Pointer<sockaddr> __addr,
  int __addr_len,
);

typedef _c_recvfrom = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __n,
  ffi.Int32 __flags,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __addr_len,
);

typedef _dart_recvfrom = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __n,
  int __flags,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __addr_len,
);

typedef _c_sendmsg = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<msghdr> __message,
  ffi.Int32 __flags,
);

typedef _dart_sendmsg = int Function(
  int __fd,
  ffi.Pointer<msghdr> __message,
  int __flags,
);

typedef _c_recvmsg = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<msghdr> __message,
  ffi.Int32 __flags,
);

typedef _dart_recvmsg = int Function(
  int __fd,
  ffi.Pointer<msghdr> __message,
  int __flags,
);

typedef _c_getsockopt = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __level,
  ffi.Int32 __optname,
  ffi.Pointer<ffi.Void> __optval,
  ffi.Pointer<ffi.Uint32> __optlen,
);

typedef _dart_getsockopt = int Function(
  int __fd,
  int __level,
  int __optname,
  ffi.Pointer<ffi.Void> __optval,
  ffi.Pointer<ffi.Uint32> __optlen,
);

typedef _c_setsockopt = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __level,
  ffi.Int32 __optname,
  ffi.Pointer<ffi.Void> __optval,
  ffi.Uint32 __optlen,
);

typedef _dart_setsockopt = int Function(
  int __fd,
  int __level,
  int __optname,
  ffi.Pointer<ffi.Void> __optval,
  int __optlen,
);

typedef _c_listen = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __n,
);

typedef _dart_listen = int Function(
  int __fd,
  int __n,
);

typedef _c_accept = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __addr_len,
);

typedef _dart_accept = int Function(
  int __fd,
  ffi.Pointer<sockaddr> __addr,
  ffi.Pointer<ffi.Uint32> __addr_len,
);

typedef _c_shutdown = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __how,
);

typedef _dart_shutdown = int Function(
  int __fd,
  int __how,
);

typedef _c_sockatmark = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_sockatmark = int Function(
  int __fd,
);

typedef _c_isfdtype = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __fdtype,
);

typedef _dart_isfdtype = int Function(
  int __fd,
  int __fdtype,
);

typedef _c__XTransFreeConnInfo = ffi.Void Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XTransFreeConnInfo = void Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XTransSetOption = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart__XTransSetOption = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  int arg1,
  int arg2,
);

typedef _c__XTransBytesReadable = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart__XTransBytesReadable = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c__XTransRead = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XTransRead = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XTransWrite = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XTransWrite = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XTransReadv = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<iovec> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XTransReadv = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<iovec> arg1,
  int arg2,
);

typedef _c__XTransWritev = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<iovec> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XTransWritev = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<iovec> arg1,
  int arg2,
);

typedef _c__XTransSendFd = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> ciptr,
  ffi.Int32 fd,
  ffi.Int32 do_close,
);

typedef _dart__XTransSendFd = int Function(
  ffi.Pointer<_XtransConnInfo> ciptr,
  int fd,
  int do_close,
);

typedef _c__XTransRecvFd = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> ciptr,
);

typedef _dart__XTransRecvFd = int Function(
  ffi.Pointer<_XtransConnInfo> ciptr,
);

typedef _c__XTransDisconnect = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XTransDisconnect = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XTransClose = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XTransClose = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XTransCloseForCloning = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XTransCloseForCloning = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XTransIsLocal = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XTransIsLocal = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XTransGetPeerAddr = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Pointer<Xtransaddr>> arg3,
);

typedef _dart__XTransGetPeerAddr = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Pointer<Xtransaddr>> arg3,
);

typedef _c__XTransGetConnectionNumber = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XTransGetConnectionNumber = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XTransGetHostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XTransGetHostname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c__XimTransConnect = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimTransConnect = int Function(
  int im,
);

typedef _c__XimTransShutdown = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimTransShutdown = int Function(
  int im,
);

typedef _typedefC_62 = ffi.NativeFunction<_typedefC_63> Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c__XimTransRegisterDispatcher = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.NativeFunction<_typedefC_62>> Bool,
  ffi.Int32 call_data,
);

typedef _dart__XimTransRegisterDispatcher = int Function(
  int im,
  ffi.Pointer<ffi.NativeFunction<_typedefC_62>> Bool,
  int call_data,
);

typedef _c__XimFreeTransIntrCallback = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimFreeTransIntrCallback = void Function(
  int im,
);

typedef _c__XimTransCallDispatcher = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int16 len,
  ffi.Int32 data,
);

typedef _dart__XimTransCallDispatcher = int Function(
  int im,
  int len,
  int data,
);

typedef _c__XimTransFilterWaitEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> d,
  ffi.Int32 w,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 arg,
);

typedef _dart__XimTransFilterWaitEvent = int Function(
  ffi.Pointer<ffi.Int32> d,
  int w,
  ffi.Pointer<ffi.Int32> ev,
  int arg,
);

typedef _c__XimTransInternalConnection = ffi.Void Function(
  ffi.Pointer<ffi.Int32> d,
  ffi.Int32 fd,
  ffi.Int32 arg,
);

typedef _dart__XimTransInternalConnection = void Function(
  ffi.Pointer<ffi.Int32> d,
  int fd,
  int arg,
);

typedef _c__XimTransWrite = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int16 len,
  ffi.Int32 data,
);

typedef _dart__XimTransWrite = int Function(
  int im,
  int len,
  int data,
);

typedef _c__XimTransRead = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 recv_buf,
  ffi.Int32 buf_len,
  ffi.Pointer<ffi.Int32> ret_len,
);

typedef _dart__XimTransRead = int Function(
  int im,
  int recv_buf,
  int buf_len,
  ffi.Pointer<ffi.Int32> ret_len,
);

typedef _c__XimTransFlush = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimTransFlush = void Function(
  int im,
);

typedef _c__XimTransConf = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> address,
);

typedef _dart__XimTransConf = int Function(
  int im,
  ffi.Pointer<ffi.Int8> address,
);

typedef _c__XimConnect = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimConnect = int Function(
  int im,
);

typedef _c__XimShutdown = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimShutdown = int Function(
  int im,
);

typedef _c__XimWrite = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
);

typedef _dart__XimWrite = int Function(
  int im,
  int len,
  int data,
);

typedef _c__CheckProtocolData = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> recv_buf,
);

typedef _dart__CheckProtocolData = int Function(
  int im,
  ffi.Pointer<ffi.Int8> recv_buf,
);

typedef _c__XimReadData = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> len,
  ffi.Int32 buf,
  ffi.Int32 buf_size,
);

typedef _dart__XimReadData = int Function(
  int im,
  ffi.Pointer<ffi.Int32> len,
  int buf,
  int buf_size,
);

typedef _c__XimCallDispatcher = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
);

typedef _dart__XimCallDispatcher = int Function(
  int im,
  int len,
  int data,
);

typedef _typedefC_64 = ffi.NativeFunction<_typedefC_65> Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c__XimRead = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int32> len,
  ffi.Int32 buf,
  ffi.Int32 buf_size,
  ffi.Pointer<ffi.NativeFunction<_typedefC_64>> Bool,
  ffi.Int32 arg,
);

typedef _dart__XimRead = int Function(
  int im,
  ffi.Pointer<ffi.Int32> len,
  int buf,
  int buf_size,
  ffi.Pointer<ffi.NativeFunction<_typedefC_64>> Bool,
  int arg,
);

typedef _typedefC_66 = ffi.NativeFunction<_typedefC_67> Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c__XimRegisterDispatcher = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.NativeFunction<_typedefC_66>> Bool,
  ffi.Int32 call_data,
);

typedef _dart__XimRegisterDispatcher = int Function(
  int im,
  ffi.Pointer<ffi.NativeFunction<_typedefC_66>> Bool,
  int call_data,
);

typedef _c__XimFlush = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimFlush = void Function(
  int im,
);

typedef _c__XimFilterWaitEvent = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimFilterWaitEvent = int Function(
  int im,
);

typedef _typedefC_68 = ffi.NativeFunction<_typedefC_69> Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c__XimXRegisterDispatcher = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.NativeFunction<_typedefC_68>> Bool,
  ffi.Int32 call_data,
);

typedef _dart__XimXRegisterDispatcher = int Function(
  int im,
  ffi.Pointer<ffi.NativeFunction<_typedefC_68>> Bool,
  int call_data,
);

typedef _c__XimXFreeIntrCallback = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimXFreeIntrCallback = void Function(
  int im,
);

typedef _c__XimXCallDispatcher = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
);

typedef _dart__XimXCallDispatcher = int Function(
  int im,
  int len,
  int data,
);

typedef _c__XimXFilterWaitEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> d,
  ffi.Int32 w,
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 arg,
);

typedef _dart__XimXFilterWaitEvent = int Function(
  ffi.Pointer<ffi.Int32> d,
  int w,
  ffi.Pointer<ffi.Int32> ev,
  int arg,
);

typedef _c__CheckConnect = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Pointer<ffi.Int32> event,
  ffi.Int32 xim,
);

typedef _dart__CheckConnect = int Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Pointer<ffi.Int32> event,
  int xim,
);

typedef _c__XimXConnect = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimXConnect = int Function(
  int im,
);

typedef _c__XimXShutdown = ffi.Int32 Function(
  ffi.Int32 im,
);

typedef _dart__XimXShutdown = int Function(
  int im,
);

typedef _c__NewAtom = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> atomName,
);

typedef _dart__NewAtom = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> atomName,
);

typedef _c__XimXWrite = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 len,
  ffi.Int32 data,
);

typedef _dart__XimXWrite = int Function(
  int im,
  int len,
  int data,
);

typedef _c__XimXGetReadData = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 buf_len,
  ffi.Pointer<ffi.Int32> ret_len,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart__XimXGetReadData = int Function(
  int im,
  ffi.Pointer<ffi.Int8> buf,
  int buf_len,
  ffi.Pointer<ffi.Int32> ret_len,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c__CheckCMEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Pointer<ffi.Int32> event,
  ffi.Int32 xim,
);

typedef _dart__CheckCMEvent = int Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Pointer<ffi.Int32> event,
  int xim,
);

typedef _c__XimXRead = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Int32 recv_buf,
  ffi.Int32 buf_len,
  ffi.Pointer<ffi.Int32> ret_len,
);

typedef _dart__XimXRead = int Function(
  int im,
  int recv_buf,
  int buf_len,
  ffi.Pointer<ffi.Int32> ret_len,
);

typedef _c__XimXFlush = ffi.Void Function(
  ffi.Int32 im,
);

typedef _dart__XimXFlush = void Function(
  int im,
);

typedef _c__XimXConf = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.Int8> address,
);

typedef _dart__XimXConf = int Function(
  int im,
  ffi.Pointer<ffi.Int8> address,
);

typedef _c_MBtoWCdef = ffi.Int32 Function(
  ffi.Pointer<State> state,
  ffi.Pointer<ffi.Int8> ch,
  ffi.Pointer<ffi.Int32> wc,
);

typedef _dart_MBtoWCdef = int Function(
  ffi.Pointer<State> state,
  ffi.Pointer<ffi.Int8> ch,
  ffi.Pointer<ffi.Int32> wc,
);

typedef _c_MBtoWCstd = ffi.Int32 Function(
  ffi.Pointer<State> state,
  ffi.Pointer<ffi.Int8> ch,
  ffi.Pointer<ffi.Int32> wc,
);

typedef _dart_MBtoWCstd = int Function(
  ffi.Pointer<State> state,
  ffi.Pointer<ffi.Int8> ch,
  ffi.Pointer<ffi.Int32> wc,
);

typedef _c_WCtoMBdef = ffi.Int32 Function(
  ffi.Pointer<State> state,
  ffi.Int32 wc,
  ffi.Pointer<ffi.Int8> ch,
);

typedef _dart_WCtoMBdef = int Function(
  ffi.Pointer<State> state,
  int wc,
  ffi.Pointer<ffi.Int8> ch,
);

typedef _c_WCtoMBstd = ffi.Int32 Function(
  ffi.Pointer<State> state,
  ffi.Int32 wc,
  ffi.Pointer<ffi.Int8> ch,
);

typedef _dart_WCtoMBstd = int Function(
  ffi.Pointer<State> state,
  int wc,
  ffi.Pointer<ffi.Int8> ch,
);

typedef _c_get_charset = ffi.Int32 Function(
  ffi.Pointer<State> state,
  ffi.Int8 side,
);

typedef _dart_get_charset = int Function(
  ffi.Pointer<State> state,
  int side,
);

typedef _c_def_mbstowcs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_def_mbstowcs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_def_wcstombs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_def_wcstombs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_mbstostr = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_mbstostr = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_wcstostr = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstostr = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_mbstocs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_mbstocs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_wcstocs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstocs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_cstombs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_cstombs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_cstowcs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_cstowcs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_strtombs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_strtombs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_close_converter = ffi.Void Function(
  ffi.Int32 conv,
);

typedef _dart_close_converter = void Function(
  int conv,
);

typedef _c_create_conv = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Int32 methods,
);

typedef _dart_create_conv = int Function(
  int lcd,
  int methods,
);

typedef _c_open_mbstowcs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_mbstowcs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_mbstostr = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_mbstostr = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_mbstocs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_mbstocs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_wcstombs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstombs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_wcstostr = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstostr = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_wcstocs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstocs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_strtombs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_strtombs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_cstombs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cstombs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_cstowcs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cstowcs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c__XlcDefaultLoader = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XlcDefaultLoader = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_mbstocts = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_mbstocts = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_ctstombs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_ctstombs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_cstombs_1 = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_cstombs_1 = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_compare = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Int32 length,
);

typedef _dart_compare = int Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int8> encoding,
  int length,
);

typedef _c_conv_to_dest = ffi.Uint64 Function(
  ffi.Int32 conv,
  ffi.Uint64 code,
);

typedef _dart_conv_to_dest = int Function(
  int conv,
  int code,
);

typedef _c_conv_to_source = ffi.Uint64 Function(
  ffi.Int32 conv,
  ffi.Uint64 code,
);

typedef _dart_conv_to_source = int Function(
  int conv,
  int code,
);

typedef _c_mb_to_gi = ffi.Uint64 Function(
  ffi.Uint64 mb,
  ffi.Int32 codeset,
);

typedef _dart_mb_to_gi = int Function(
  int mb,
  int codeset,
);

typedef _c_gi_to_mb = ffi.Uint64 Function(
  ffi.Uint64 glyph_index,
  ffi.Int32 codeset,
);

typedef _dart_gi_to_mb = int Function(
  int glyph_index,
  int codeset,
);

typedef _c_gi_to_wc = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Uint64 glyph_index,
  ffi.Int32 codeset,
  ffi.Pointer<ffi.Int32> wc,
);

typedef _dart_gi_to_wc = int Function(
  int lcd,
  int glyph_index,
  int codeset,
  ffi.Pointer<ffi.Int32> wc,
);

typedef _c_wc_to_gi = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Int32 wc,
  ffi.Pointer<ffi.Uint64> glyph_index,
  ffi.Pointer<ffi.Int32> codeset,
);

typedef _dart_wc_to_gi = int Function(
  int lcd,
  int wc,
  ffi.Pointer<ffi.Uint64> glyph_index,
  ffi.Pointer<ffi.Int32> codeset,
);

typedef _c_mb_parse_codeset = ffi.Int32 Function(
  ffi.Pointer<State> state,
  ffi.Int32 num,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> inbufptr,
  ffi.Pointer<ffi.Int32> from_left,
);

typedef _dart_mb_parse_codeset = int Function(
  ffi.Pointer<State> state,
  int num,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> inbufptr,
  ffi.Pointer<ffi.Int32> from_left,
);

typedef _c_byteM_parse_codeset = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int8> inbufptr,
);

typedef _dart_byteM_parse_codeset = int Function(
  int lcd,
  ffi.Pointer<ffi.Int8> inbufptr,
);

typedef _c_gi_parse_charset = ffi.Int32 Function(
  ffi.Uint64 glyph_index,
  ffi.Int32 codeset,
);

typedef _dart_gi_parse_charset = int Function(
  int glyph_index,
  int codeset,
);

typedef _c_ct_parse_csi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> inbufptr,
  ffi.Pointer<ffi.Int32> ctr_seq_len,
);

typedef _dart_ct_parse_csi = int Function(
  ffi.Pointer<ffi.Int8> inbufptr,
  ffi.Pointer<ffi.Int32> ctr_seq_len,
);

typedef _c_cmp_esc_sequence = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> inbufptr,
  ffi.Int32 charset,
);

typedef _dart_cmp_esc_sequence = int Function(
  ffi.Pointer<ffi.Int8> inbufptr,
  int charset,
);

typedef _c_ct_parse_charset = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int8> inbufptr,
  ffi.Pointer<ffi.Int32> charset,
  ffi.Pointer<ffi.Int32> ctr_seq_len,
);

typedef _dart_ct_parse_charset = int Function(
  int lcd,
  ffi.Pointer<ffi.Int8> inbufptr,
  ffi.Pointer<ffi.Int32> charset,
  ffi.Pointer<ffi.Int32> ctr_seq_len,
);

typedef _c_segment_conversion = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int32> charset,
  ffi.Pointer<ffi.Uint64> glyph_index,
);

typedef _dart_segment_conversion = int Function(
  int lcd,
  ffi.Pointer<ffi.Int32> charset,
  ffi.Pointer<ffi.Uint64> glyph_index,
);

typedef _c__XlcGetCodeSetFromName = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XlcGetCodeSetFromName = int Function(
  int lcd,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XlcGetCodeSetFromCharSet = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Int32 charset,
  ffi.Pointer<ffi.Int32> codeset,
  ffi.Pointer<ffi.Uint64> glyph_index,
);

typedef _dart__XlcGetCodeSetFromCharSet = int Function(
  int lcd,
  int charset,
  ffi.Pointer<ffi.Int32> codeset,
  ffi.Pointer<ffi.Uint64> glyph_index,
);

typedef _c_output_ulong_value = ffi.Void Function(
  ffi.Pointer<ffi.Int8> outbufptr,
  ffi.Uint64 code,
  ffi.Int32 length,
  ffi.Int32 side,
);

typedef _dart_output_ulong_value = void Function(
  ffi.Pointer<ffi.Int8> outbufptr,
  int code,
  int length,
  int side,
);

typedef _c_init_state = ffi.Void Function(
  ffi.Int32 conv,
);

typedef _dart_init_state = void Function(
  int conv,
);

typedef _c_mbstowcs_org = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_mbstowcs_org = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_mbstowcs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_mbstowcs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_wcstombs_org = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstombs_org = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_wcstombs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_wcstombs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_wcstocts = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstocts = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_wcstocts = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_wcstocts = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_ctstowcs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_ctstowcs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_cstowcs_1 = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_cstowcs_1 = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_ctstowcs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_ctstowcs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_cstowcs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_cstowcs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_mbstostr_1 = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_mbstostr_1 = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_mbtocs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_mbtocs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_mbstocs_1 = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_mbstocs_1 = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_wcstostr_1 = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstostr_1 = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_wcstostr = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_wcstostr = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_wctocs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_wctocs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_wctocs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_wctocs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_wcstocs_1 = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstocs_1 = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_wcstocs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_wcstocs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_strtombs_1 = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_strtombs_1 = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_strtowcs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_strtowcs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_stdc_strtowcs = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart_stdc_strtowcs = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c_close_converter_1 = ffi.Void Function(
  ffi.Int32 conv,
);

typedef _dart_close_converter_1 = void Function(
  int conv,
);

typedef _c_create_conv_1 = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Int32 methods,
);

typedef _dart_create_conv_1 = int Function(
  int lcd,
  int methods,
);

typedef _c_open_mbstocts = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_mbstocts = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_mbstostr_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_mbstostr_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_mbstocs_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_mbstocs_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_mbtocs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_mbtocs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_ctstombs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_ctstombs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_cstombs_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cstombs_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_strtombs_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_strtombs_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_mbstowcs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_mbstowcs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_wcstombs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_wcstombs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_wcstocts = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_wcstocts = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_wcstostr = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_wcstostr = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_wcstocs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_wcstocs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_wctocs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_wctocs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_ctstowcs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_ctstowcs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_cstowcs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_cstowcs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_stdc_strtowcs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_stdc_strtowcs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_mbstowcs_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_mbstowcs_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_wcstombs_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstombs_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_wcstocts = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstocts = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_wcstostr_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstostr_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_wcstocs_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstocs_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_wctocs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wctocs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_ctstowcs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_ctstowcs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_cstowcs_1 = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cstowcs_1 = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_strtowcs = ffi.Int32 Function(
  ffi.Int32 from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Int32 to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_strtowcs = int Function(
  int from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  int to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c__XlcGenericLoader = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XlcGenericLoader = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XlcUtf8Loader = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XlcUtf8Loader = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_wcs_to_mbs = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int8> to,
  ffi.Int32 wchar_t,
);

typedef _dart_wcs_to_mbs = int Function(
  int oc,
  ffi.Pointer<ffi.Int8> to,
  int wchar_t,
);

typedef _c_utf8_to_mbs = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int8> to,
  ffi.Pointer<ffi.Int32> from,
  ffi.Int32 length,
);

typedef _dart_utf8_to_mbs = int Function(
  int oc,
  ffi.Pointer<ffi.Int8> to,
  ffi.Pointer<ffi.Int32> from,
  int length,
);

typedef _c__XmbDefaultTextEscapement = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XmbDefaultTextEscapement = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XwcDefaultTextEscapement = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcDefaultTextEscapement = int Function(
  int oc,
  int wchar_t,
);

typedef _c__Xutf8DefaultTextEscapement = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__Xutf8DefaultTextEscapement = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XmbDefaultTextExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__XmbDefaultTextExtents = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XwcDefaultTextExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcDefaultTextExtents = int Function(
  int oc,
  int wchar_t,
);

typedef _c__Xutf8DefaultTextExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__Xutf8DefaultTextExtents = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XmbDefaultTextPerCharExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  ffi.Int32 buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__XmbDefaultTextPerCharExtents = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  int buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XwcDefaultTextPerCharExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcDefaultTextPerCharExtents = int Function(
  int oc,
  int wchar_t,
);

typedef _c__Xutf8DefaultTextPerCharExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  ffi.Int32 buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__Xutf8DefaultTextPerCharExtents = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  int buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XmbDefaultDrawString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XmbDefaultDrawString = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XwcDefaultDrawString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcDefaultDrawString = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  int wchar_t,
);

typedef _c__Xutf8DefaultDrawString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__Xutf8DefaultDrawString = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XmbDefaultDrawImageString = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XmbDefaultDrawImageString = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XwcDefaultDrawImageString = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcDefaultDrawImageString = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  int wchar_t,
);

typedef _c__Xutf8DefaultDrawImageString = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__Xutf8DefaultDrawImageString = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c_init_fontdata = ffi.Int32 Function(
  ffi.Int32 font_data,
  ffi.Int32 font_data_count,
);

typedef _dart_init_fontdata = int Function(
  int font_data,
  int font_data_count,
);

typedef _c_init_vrotate = ffi.Int32 Function(
  ffi.Int32 font_data,
  ffi.Int32 font_data_count,
  ffi.Int32 type,
  ffi.Int32 code_range,
  ffi.Int32 code_range_num,
);

typedef _dart_init_vrotate = int Function(
  int font_data,
  int font_data_count,
  int type,
  int code_range,
  int code_range_num,
);

typedef _c_init_fontset = ffi.Int32 Function(
  ffi.Int32 oc,
);

typedef _dart_init_fontset = int Function(
  int oc,
);

typedef _c_get_prop_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> fs,
);

typedef _dart_get_prop_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> fs,
);

typedef _c_load_fontdata = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 font_data,
  ffi.Int32 font_data_num,
);

typedef _dart_load_fontdata = int Function(
  int oc,
  int font_data,
  int font_data_num,
);

typedef _c_load_fontset_data = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 font_set,
);

typedef _dart_load_fontset_data = int Function(
  int oc,
  int font_set,
);

typedef _c_load_font = ffi.Int32 Function(
  ffi.Int32 oc,
);

typedef _dart_load_font = int Function(
  int oc,
);

typedef _c_load_font_info = ffi.Int32 Function(
  ffi.Int32 oc,
);

typedef _dart_load_font_info = int Function(
  int oc,
);

typedef _c_check_fontset_extents = ffi.Void Function(
  ffi.Pointer<ffi.Int32> overall,
  ffi.Pointer<ffi.Int32> logical_ascent,
  ffi.Pointer<ffi.Int32> logical_descent,
  ffi.Pointer<ffi.Int32> font,
);

typedef _dart_check_fontset_extents = void Function(
  ffi.Pointer<ffi.Int32> overall,
  ffi.Pointer<ffi.Int32> logical_ascent,
  ffi.Pointer<ffi.Int32> logical_descent,
  ffi.Pointer<ffi.Int32> font,
);

typedef _c_set_fontset_extents = ffi.Void Function(
  ffi.Int32 oc,
);

typedef _dart_set_fontset_extents = void Function(
  int oc,
);

typedef _c_init_core_part = ffi.Int32 Function(
  ffi.Int32 oc,
);

typedef _dart_init_core_part = int Function(
  int oc,
);

typedef _c_get_font_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int8> pattern,
);

typedef _dart_get_font_name = ffi.Pointer<ffi.Int8> Function(
  int oc,
  ffi.Pointer<ffi.Int8> pattern,
);

typedef _c_get_rotate_fontname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> font_name,
);

typedef _dart_get_rotate_fontname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> font_name,
);

typedef _c_is_match_charset = ffi.Int32 Function(
  ffi.Int32 font_data,
  ffi.Pointer<ffi.Int8> font_name,
);

typedef _dart_is_match_charset = int Function(
  int font_data,
  ffi.Pointer<ffi.Int8> font_name,
);

typedef _c_parse_all_name = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 font_data,
  ffi.Pointer<ffi.Int8> pattern,
);

typedef _dart_parse_all_name = int Function(
  int oc,
  int font_data,
  ffi.Pointer<ffi.Int8> pattern,
);

typedef _c_parse_omit_name = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 font_data,
  ffi.Pointer<ffi.Int8> pattern,
);

typedef _dart_parse_omit_name = int Function(
  int oc,
  int font_data,
  ffi.Pointer<ffi.Int8> pattern,
);

typedef _c_parse_fontdata = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 font_set,
  ffi.Int32 font_data,
  ffi.Int32 font_data_count,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name_list,
  ffi.Int32 name_list_count,
  ffi.Int32 class_1,
  ffi.Pointer<ffi.Int32> font_data_return,
);

typedef _dart_parse_fontdata = int Function(
  int oc,
  int font_set,
  int font_data,
  int font_data_count,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name_list,
  int name_list_count,
  int class_1,
  ffi.Pointer<ffi.Int32> font_data_return,
);

typedef _c_parse_vw = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 font_set,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name_list,
  ffi.Int32 count,
);

typedef _dart_parse_vw = int Function(
  int oc,
  int font_set,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name_list,
  int count,
);

typedef _c_parse_fontname = ffi.Int32 Function(
  ffi.Int32 oc,
);

typedef _dart_parse_fontname = int Function(
  int oc,
);

typedef _c_set_missing_list = ffi.Int32 Function(
  ffi.Int32 oc,
);

typedef _dart_set_missing_list = int Function(
  int oc,
);

typedef _c_create_fontset = ffi.Int32 Function(
  ffi.Int32 oc,
);

typedef _dart_create_fontset = int Function(
  int oc,
);

typedef _c_free_fontdataOC = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 font_data,
  ffi.Int32 font_data_count,
);

typedef _dart_free_fontdataOC = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int font_data,
  int font_data_count,
);

typedef _c_destroy_fontdata = ffi.Void Function(
  ffi.Pointer<ffi.Int32> gen,
  ffi.Pointer<ffi.Int32> dpy,
);

typedef _dart_destroy_fontdata = void Function(
  ffi.Pointer<ffi.Int32> gen,
  ffi.Pointer<ffi.Int32> dpy,
);

typedef _c_destroy_oc = ffi.Void Function(
  ffi.Int32 oc,
);

typedef _dart_destroy_oc = void Function(
  int oc,
);

typedef _c_set_oc_values = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 oc,
  ffi.Int32 args,
  ffi.Int32 num_args,
);

typedef _dart_set_oc_values = ffi.Pointer<ffi.Int8> Function(
  int oc,
  int args,
  int num_args,
);

typedef _c_get_oc_values = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 oc,
  ffi.Int32 args,
  ffi.Int32 num_args,
);

typedef _dart_get_oc_values = ffi.Pointer<ffi.Int8> Function(
  int oc,
  int args,
  int num_args,
);

typedef _c_create_oc = ffi.Int32 Function(
  ffi.Int32 om,
  ffi.Int32 args,
  ffi.Int32 num_args,
);

typedef _dart_create_oc = int Function(
  int om,
  int args,
  int num_args,
);

typedef _c_free_fontdataOM = ffi.Void Function(
  ffi.Int32 font_data,
  ffi.Int32 font_data_count,
);

typedef _dart_free_fontdataOM = void Function(
  int font_data,
  int font_data_count,
);

typedef _c_close_om = ffi.Int32 Function(
  ffi.Int32 om,
);

typedef _dart_close_om = int Function(
  int om,
);

typedef _c_set_om_values = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 om,
  ffi.Int32 args,
  ffi.Int32 num_args,
);

typedef _dart_set_om_values = ffi.Pointer<ffi.Int8> Function(
  int om,
  int args,
  int num_args,
);

typedef _c_get_om_values = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 om,
  ffi.Int32 args,
  ffi.Int32 num_args,
);

typedef _dart_get_om_values = ffi.Pointer<ffi.Int8> Function(
  int om,
  int args,
  int num_args,
);

typedef _c_create_om = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 rdb,
  ffi.Pointer<ffi.Int32> res_name,
  ffi.Pointer<ffi.Int32> res_class,
);

typedef _dart_create_om = int Function(
  int lcd,
  ffi.Pointer<ffi.Int32> dpy,
  int rdb,
  ffi.Pointer<ffi.Int32> res_name,
  ffi.Pointer<ffi.Int32> res_class,
);

typedef _c_add_data = ffi.Int32 Function(
  ffi.Int32 om,
);

typedef _dart_add_data = int Function(
  int om,
);

typedef _c_read_EncodingInfo = ffi.Int32 Function(
  ffi.Int32 count,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _dart_read_EncodingInfo = int Function(
  int count,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
);

typedef _c_read_vrotate = ffi.Int32 Function(
  ffi.Int32 count,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ffi.Pointer<ffi.Int32> type,
  ffi.Pointer<ffi.Int32> vrotate_num,
);

typedef _dart_read_vrotate = int Function(
  int count,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ffi.Pointer<ffi.Int32> type,
  ffi.Pointer<ffi.Int32> vrotate_num,
);

typedef _c_read_vw = ffi.Void Function(
  ffi.Int32 lcd,
  ffi.Int32 font_set,
  ffi.Int32 num,
);

typedef _dart_read_vw = void Function(
  int lcd,
  int font_set,
  int num,
);

typedef _c_init_om = ffi.Int32 Function(
  ffi.Int32 om,
);

typedef _dart_init_om = int Function(
  int om,
);

typedef _c__XomGenericOpenOM = ffi.Int32 Function(
  ffi.Int32 lcd,
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 rdb,
  ffi.Pointer<ffi.Int32> res_name,
  ffi.Pointer<ffi.Int32> res_class,
);

typedef _dart__XomGenericOpenOM = int Function(
  int lcd,
  ffi.Pointer<ffi.Int32> dpy,
  int rdb,
  ffi.Pointer<ffi.Int32> res_name,
  ffi.Pointer<ffi.Int32> res_class,
);

typedef _c__XInitOM = ffi.Int32 Function(
  ffi.Int32 lcd,
);

typedef _dart__XInitOM = int Function(
  int lcd,
);

typedef _c__XomGenericDrawImageString = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 type,
  ffi.Int32 text,
  ffi.Int32 length,
);

typedef _dart__XomGenericDrawImageString = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  int type,
  int text,
  int length,
);

typedef _c__XmbGenericDrawImageString = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XmbGenericDrawImageString = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XwcGenericDrawImageString = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcGenericDrawImageString = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  int wchar_t,
);

typedef _c__Xutf8GenericDrawImageString = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__Xutf8GenericDrawImageString = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c_is_rotate = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> font,
);

typedef _dart_is_rotate = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> font,
);

typedef _c_is_codemap = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> font,
);

typedef _dart_is_codemap = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> font,
);

typedef _c_draw_vertical = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Pointer<ffi.Int32> font,
  ffi.Int32 is_xchar2b,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 text,
  ffi.Int32 length,
);

typedef _dart_draw_vertical = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  ffi.Pointer<ffi.Int32> font,
  int is_xchar2b,
  int x,
  int y,
  int text,
  int length,
);

typedef _c_DrawStringWithFontSet = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 fs,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 text,
  ffi.Int32 length,
);

typedef _dart_DrawStringWithFontSet = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int fs,
  int gc,
  int x,
  int y,
  int text,
  int length,
);

typedef _c__XomGenericDrawString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 type,
  ffi.Int32 text,
  ffi.Int32 length,
);

typedef _dart__XomGenericDrawString = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  int type,
  int text,
  int length,
);

typedef _c__XmbGenericDrawString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XmbGenericDrawString = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XwcGenericDrawString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcGenericDrawString = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  int wchar_t,
);

typedef _c__Xutf8GenericDrawString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 d,
  ffi.Int32 oc,
  ffi.Int32 gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__Xutf8GenericDrawString = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int d,
  int oc,
  int gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c_is_rotate_1 = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> font,
);

typedef _dart_is_rotate_1 = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> font,
);

typedef _c_is_codemap_1 = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> font,
);

typedef _dart_is_codemap_1 = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> font,
);

typedef _c_escapement_vertical = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> font,
  ffi.Int32 is_xchar2b,
  ffi.Int32 text,
  ffi.Int32 length,
);

typedef _dart_escapement_vertical = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> font,
  int is_xchar2b,
  int text,
  int length,
);

typedef _c_TextWidthWithFontSet = ffi.Int32 Function(
  ffi.Int32 font_set,
  ffi.Int32 oc,
  ffi.Int32 text,
  ffi.Int32 length,
);

typedef _dart_TextWidthWithFontSet = int Function(
  int font_set,
  int oc,
  int text,
  int length,
);

typedef _c__XomGenericTextEscapement = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 type,
  ffi.Int32 text,
  ffi.Int32 length,
);

typedef _dart__XomGenericTextEscapement = int Function(
  int oc,
  int type,
  int text,
  int length,
);

typedef _c__XmbGenericTextEscapement = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XmbGenericTextEscapement = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XwcGenericTextEscapement = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcGenericTextEscapement = int Function(
  int oc,
  int wchar_t,
);

typedef _c__Xutf8GenericTextEscapement = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__Xutf8GenericTextEscapement = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XomGenericTextExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 type,
  ffi.Int32 text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__XomGenericTextExtents = int Function(
  int oc,
  int type,
  int text,
  int length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XmbGenericTextExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__XmbGenericTextExtents = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XwcGenericTextExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcGenericTextExtents = int Function(
  int oc,
  int wchar_t,
);

typedef _c__Xutf8GenericTextExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__Xutf8GenericTextExtents = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XomGenericTextPerCharExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 type,
  ffi.Int32 text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  ffi.Int32 buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__XomGenericTextPerCharExtents = int Function(
  int oc,
  int type,
  int text,
  int length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  int buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XmbGenericTextPerCharExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  ffi.Int32 buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__XmbGenericTextPerCharExtents = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  int buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c__XwcGenericTextPerCharExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 wchar_t,
);

typedef _dart__XwcGenericTextPerCharExtents = int Function(
  int oc,
  int wchar_t,
);

typedef _c__Xutf8GenericTextPerCharExtents = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  ffi.Int32 buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _dart__Xutf8GenericTextPerCharExtents = int Function(
  int oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<ffi.Int32> ink_buf,
  ffi.Pointer<ffi.Int32> logical_buf,
  int buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<ffi.Int32> overall_ink,
  ffi.Pointer<ffi.Int32> overall_logical,
);

typedef _c_ismatch_scopes = ffi.Int32 Function(
  ffi.Int32 fontdata,
  ffi.Pointer<ffi.Uint64> value,
  ffi.Int32 is_shift,
);

typedef _dart_ismatch_scopes = int Function(
  int fontdata,
  ffi.Pointer<ffi.Uint64> value,
  int is_shift,
);

typedef _c_check_vertical_fonttype = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_check_vertical_fonttype = int Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XomGetFontDataFromFontSet = ffi.Int32 Function(
  ffi.Int32 fs,
  ffi.Pointer<ffi.Uint8> str,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int32> len_ret,
  ffi.Int32 is2b,
  ffi.Int32 type,
);

typedef _dart__XomGetFontDataFromFontSet = int Function(
  int fs,
  ffi.Pointer<ffi.Uint8> str,
  int len,
  ffi.Pointer<ffi.Int32> len_ret,
  int is2b,
  int type,
);

typedef _c__XomGetFontSetFromCharSet = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 charset,
);

typedef _dart__XomGetFontSetFromCharSet = int Function(
  int oc,
  int charset,
);

typedef _c_shift_to_gl = ffi.Void Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 length,
);

typedef _dart_shift_to_gl = void Function(
  ffi.Pointer<ffi.Int8> text,
  int length,
);

typedef _c_shift_to_gr = ffi.Void Function(
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 length,
);

typedef _dart_shift_to_gr = void Function(
  ffi.Pointer<ffi.Int8> text,
  int length,
);

typedef _c_load_font_1 = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 font_set,
);

typedef _dart_load_font_1 = int Function(
  int oc,
  int font_set,
);

typedef _c__XomConvert = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  ffi.Int32 num_args,
);

typedef _dart__XomConvert = int Function(
  int oc,
  int conv,
  ffi.Pointer<ffi.Int32> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Int32> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Int32> args,
  int num_args,
);

typedef _c__XomInitConverter = ffi.Int32 Function(
  ffi.Int32 oc,
  ffi.Int32 type,
);

typedef _dart__XomInitConverter = int Function(
  int oc,
  int type,
);

typedef _c__XUpdateGCCache = ffi.Int32 Function(
  ffi.Pointer<_XGC> gc,
  ffi.Uint64 mask,
  ffi.Pointer<XGCValues> attr,
);

typedef _dart__XUpdateGCCache = int Function(
  ffi.Pointer<_XGC> gc,
  int mask,
  ffi.Pointer<XGCValues> attr,
);

typedef _c__XNoticeCreateBitmap = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 pid,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart__XNoticeCreateBitmap = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int pid,
  int width,
  int height,
);

typedef _c__XNoticePutBitmap = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 draw,
  ffi.Pointer<XImage> image,
);

typedef _dart__XNoticePutBitmap = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int draw,
  ffi.Pointer<XImage> image,
);

typedef _c__XTryShapeBitmapCursor = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 source,
  ffi.Uint64 mask,
  ffi.Pointer<XColor> foreground,
  ffi.Pointer<XColor> background,
  ffi.Uint32 x,
  ffi.Uint32 y,
);

typedef _dart__XTryShapeBitmapCursor = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int source,
  int mask,
  ffi.Pointer<XColor> foreground,
  ffi.Pointer<XColor> background,
  int x,
  int y,
);

typedef _typedefC_70 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c_XCheckIfEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.NativeFunction<_typedefC_70>> Bool,
  ffi.Pointer<ffi.Int8> arg,
);

typedef _dart_XCheckIfEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.NativeFunction<_typedefC_70>> Bool,
  ffi.Pointer<ffi.Int8> arg,
);

typedef _c_XCheckMaskEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int64 mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XCheckMaskEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c_XCheckTypedEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XCheckTypedEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int type,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c_XCheckTypedWindowEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 w,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XCheckTypedWindowEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int w,
  int type,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c_XCheckWindowEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 w,
  ffi.Int64 mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XCheckWindowEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int w,
  int mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c__XConnectXCB = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int8> display,
  ffi.Pointer<ffi.Int32> screenp,
);

typedef _dart__XConnectXCB = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int8> display,
  ffi.Pointer<ffi.Int32> screenp,
);

typedef _c__XFreeX11XCBStructure = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XFreeX11XCBStructure = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XNextRequest = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XNextRequest = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XFreeDisplayStructure = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XFreeDisplayStructure = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XcmsDeleteCmapRec = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 cmap,
);

typedef _dart__XcmsDeleteCmapRec = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int cmap,
);

typedef _c_ResizeTable = ffi.Void Function(
  ffi.Pointer<DB> db,
);

typedef _dart_ResizeTable = void Function(
  ffi.Pointer<DB> db,
);

typedef _c__XFreeContextDB = ffi.Void Function(
  ffi.Pointer<ffi.Int32> display,
);

typedef _dart__XFreeContextDB = void Function(
  ffi.Pointer<ffi.Int32> display,
);

typedef _c__XcmsCopyCmapRecAndFree = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 src_cmap,
  ffi.Int32 copy_cmap,
);

typedef _dart__XcmsCopyCmapRecAndFree = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> dpy,
  int src_cmap,
  int copy_cmap,
);

typedef _c__XGenerateGCList = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XGC> gc,
  ffi.Pointer<ffi.Int32> req,
);

typedef _dart__XGenerateGCList = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XGC> gc,
  ffi.Pointer<ffi.Int32> req,
);

typedef _c_xreallocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> optr,
  ffi.Uint64 nmemb,
  ffi.Uint64 size,
);

typedef _dart_xreallocarray = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> optr,
  int nmemb,
  int size,
);

typedef _c__XEventToWire = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> re,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart__XEventToWire = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> re,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c_XFilterEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> ev,
  ffi.Int32 window,
);

typedef _dart_XFilterEvent = int Function(
  ffi.Pointer<ffi.Int32> ev,
  int window,
);

typedef _c__XQueryFont = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 Font,
  ffi.Uint64 arg2,
);

typedef _dart__XQueryFont = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> arg0,
  int Font,
  int arg2,
);

typedef _c__XParseBaseFontNameList = ffi.Pointer<ffi.Pointer<ffi.Int8>>
    Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> num,
);

typedef _dart__XParseBaseFontNameList = ffi.Pointer<ffi.Pointer<ffi.Int8>>
    Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> num,
);

typedef _c_copy_string_list = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> string_list,
  ffi.Int32 list_count,
);

typedef _dart_copy_string_list = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> string_list,
  int list_count,
);

typedef _c__XUpdateAtomCache = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int8> name,
  ffi.Uint64 atom,
  ffi.Uint64 sig,
  ffi.Int32 idx,
  ffi.Int32 n,
);

typedef _dart__XUpdateAtomCache = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int8> name,
  int atom,
  int sig,
  int idx,
  int n,
);

typedef _c__XFreeAtomTable = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XFreeAtomTable = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XGetAtomName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 atom,
);

typedef _dart__XGetAtomName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> dpy,
  int atom,
);

typedef _c__XGetAtomNameHandler = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int32> rep,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart__XGetAtomNameHandler = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int32> rep,
  ffi.Pointer<ffi.Int8> buf,
  int len,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c_setpwent = ffi.Void Function();

typedef _dart_setpwent = void Function();

typedef _c_endpwent = ffi.Void Function();

typedef _dart_endpwent = void Function();

typedef _c_getpwent = ffi.Pointer<passwd> Function();

typedef _dart_getpwent = ffi.Pointer<passwd> Function();

typedef _c_fgetpwent = ffi.Pointer<passwd> Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _dart_fgetpwent = ffi.Pointer<passwd> Function(
  ffi.Pointer<_IO_FILE> __stream,
);

typedef _c_putpwent = ffi.Int32 Function(
  ffi.Pointer<passwd> __p,
  ffi.Pointer<_IO_FILE> __f,
);

typedef _dart_putpwent = int Function(
  ffi.Pointer<passwd> __p,
  ffi.Pointer<_IO_FILE> __f,
);

typedef _c_getpwuid = ffi.Pointer<passwd> Function(
  ffi.Uint32 __uid,
);

typedef _dart_getpwuid = ffi.Pointer<passwd> Function(
  int __uid,
);

typedef _c_getpwnam = ffi.Pointer<passwd> Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_getpwnam = ffi.Pointer<passwd> Function(
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_getpwent_r = ffi.Int32 Function(
  ffi.Pointer<passwd> __resultbuf,
  ffi.Pointer<ffi.Int8> __buffer,
  ffi.Uint64 __buflen,
  ffi.Pointer<ffi.Pointer<passwd>> __result,
);

typedef _dart_getpwent_r = int Function(
  ffi.Pointer<passwd> __resultbuf,
  ffi.Pointer<ffi.Int8> __buffer,
  int __buflen,
  ffi.Pointer<ffi.Pointer<passwd>> __result,
);

typedef _c_getpwuid_r = ffi.Int32 Function(
  ffi.Uint32 __uid,
  ffi.Pointer<passwd> __resultbuf,
  ffi.Pointer<ffi.Int8> __buffer,
  ffi.Uint64 __buflen,
  ffi.Pointer<ffi.Pointer<passwd>> __result,
);

typedef _dart_getpwuid_r = int Function(
  int __uid,
  ffi.Pointer<passwd> __resultbuf,
  ffi.Pointer<ffi.Int8> __buffer,
  int __buflen,
  ffi.Pointer<ffi.Pointer<passwd>> __result,
);

typedef _c_getpwnam_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<passwd> __resultbuf,
  ffi.Pointer<ffi.Int8> __buffer,
  ffi.Uint64 __buflen,
  ffi.Pointer<ffi.Pointer<passwd>> __result,
);

typedef _dart_getpwnam_r = int Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<passwd> __resultbuf,
  ffi.Pointer<ffi.Int8> __buffer,
  int __buflen,
  ffi.Pointer<ffi.Pointer<passwd>> __result,
);

typedef _c_fgetpwent_r = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<passwd> __resultbuf,
  ffi.Pointer<ffi.Int8> __buffer,
  ffi.Uint64 __buflen,
  ffi.Pointer<ffi.Pointer<passwd>> __result,
);

typedef _dart_fgetpwent_r = int Function(
  ffi.Pointer<_IO_FILE> __stream,
  ffi.Pointer<passwd> __resultbuf,
  ffi.Pointer<ffi.Int8> __buffer,
  int __buflen,
  ffi.Pointer<ffi.Pointer<passwd>> __result,
);

typedef _c_GetHomeDir = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> dest,
  ffi.Int32 len,
);

typedef _dart_GetHomeDir = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> dest,
  int len,
);

typedef _c_InitDefaults = ffi.Pointer<_XrmHashBucketRec> Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_InitDefaults = ffi.Pointer<_XrmHashBucketRec> Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_Ones = ffi.Uint32 Function(
  ffi.Uint64 mask,
);

typedef _dart_Ones = int Function(
  int mask,
);

typedef _c__XWAttrsHandler = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> rep,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 len,
  ffi.Int32 data,
);

typedef _dart__XWAttrsHandler = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> rep,
  ffi.Pointer<ffi.Int8> buf,
  int len,
  int data,
);

typedef _c_changehost = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> host,
  ffi.Int32 mode,
);

typedef _dart_changehost = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> host,
  int mode,
);

typedef _typedefC_79 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c_XIfEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.NativeFunction<_typedefC_79>> Bool,
  ffi.Pointer<ffi.Int8> arg,
);

typedef _dart_XIfEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.NativeFunction<_typedefC_79>> Bool,
  ffi.Pointer<ffi.Int8> arg,
);

typedef _c__XimGetLocaleCode = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> encoding_name,
);

typedef _dart__XimGetLocaleCode = int Function(
  ffi.Pointer<ffi.Int32> encoding_name,
);

typedef _c__XimGetCharCode = ffi.Int32 Function(
  ffi.Int32 ucs_conv,
  ffi.Int32 keysym,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.Int32 nbytes,
);

typedef _dart__XimGetCharCode = int Function(
  int ucs_conv,
  int keysym,
  ffi.Pointer<ffi.Uint8> buf,
  int nbytes,
);

typedef _c__XimLookupMBText = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 nbytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _dart__XimLookupMBText = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.Int8> buffer,
  int nbytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _c__XimLookupWCText = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.Int32> buffer,
  ffi.Int32 nbytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _dart__XimLookupWCText = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.Int32> buffer,
  int nbytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _c__XimLookupUTF8Text = ffi.Int32 Function(
  ffi.Int32 ic,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 nbytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _dart__XimLookupUTF8Text = int Function(
  int ic,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.Int8> buffer,
  int nbytes,
  ffi.Pointer<ffi.Int32> keysym,
  ffi.Pointer<ffi.Int32> status,
);

typedef _c__XDestroyImage = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
);

typedef _dart__XDestroyImage = int Function(
  ffi.Pointer<XImage> arg0,
);

typedef _c__XGetPixel = ffi.Uint64 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart__XGetPixel = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
);

typedef _c__XGetPixel1 = ffi.Uint64 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart__XGetPixel1 = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
);

typedef _c__XGetPixel8 = ffi.Uint64 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart__XGetPixel8 = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
);

typedef _c__XGetPixel16 = ffi.Uint64 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart__XGetPixel16 = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
);

typedef _c__XGetPixel32 = ffi.Uint64 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart__XGetPixel32 = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
);

typedef _c__XPutPixel = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart__XPutPixel = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c__XPutPixel1 = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart__XPutPixel1 = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c__XPutPixel8 = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart__XPutPixel8 = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c__XPutPixel16 = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart__XPutPixel16 = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c__XPutPixel32 = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart__XPutPixel32 = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c__XSubImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
);

typedef _dart__XSubImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c__XAddPixel = ffi.Int32 Function(
  ffi.Pointer<XImage> arg0,
  ffi.Int64 arg1,
);

typedef _dart__XAddPixel = int Function(
  ffi.Pointer<XImage> arg0,
  int arg1,
);

typedef _c__xynormalizeimagebits = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> bp,
  ffi.Pointer<XImage> img,
);

typedef _dart__xynormalizeimagebits = void Function(
  ffi.Pointer<ffi.Uint8> bp,
  ffi.Pointer<XImage> img,
);

typedef _c__znormalizeimagebits = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> bp,
  ffi.Pointer<XImage> img,
);

typedef _dart__znormalizeimagebits = void Function(
  ffi.Pointer<ffi.Uint8> bp,
  ffi.Pointer<XImage> img,
);

typedef _c__putbits = ffi.Void Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Int32 dstoffset,
  ffi.Int32 numbits,
  ffi.Pointer<ffi.Int8> dst,
);

typedef _dart__putbits = void Function(
  ffi.Pointer<ffi.Int8> src,
  int dstoffset,
  int numbits,
  ffi.Pointer<ffi.Int8> dst,
);

typedef _c_XLookupExtension = ffi.Pointer<_XExtension> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 extension_1,
);

typedef _dart_XLookupExtension = ffi.Pointer<_XExtension> Function(
  ffi.Pointer<_XDisplay> dpy,
  int extension_1,
);

typedef _c__XInternAtom = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 onlyIfExists,
  ffi.Pointer<ffi.Uint64> psig,
  ffi.Pointer<ffi.Int32> pidx,
  ffi.Pointer<ffi.Int32> pn,
);

typedef _dart__XInternAtom = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int8> name,
  int onlyIfExists,
  ffi.Pointer<ffi.Uint64> psig,
  ffi.Pointer<ffi.Int32> pidx,
  ffi.Pointer<ffi.Int32> pn,
);

typedef _c__XIntAtomHandler = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int32> rep,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 len,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart__XIntAtomHandler = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int32> rep,
  ffi.Pointer<ffi.Int8> buf,
  int len,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c__XKeyInitialize = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XKeyInitialize = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XInitKeysymDB = ffi.Pointer<_XrmHashBucketRec> Function();

typedef _dart__XInitKeysymDB = ffi.Pointer<_XrmHashBucketRec> Function();

typedef _c_ComputeMaskFromKeytrans = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XKeytrans> p,
);

typedef _dart_ComputeMaskFromKeytrans = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XKeytrans> p,
);

typedef _c_KeyCodetoKeySym = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint8 keycode,
  ffi.Int32 col,
);

typedef _dart_KeyCodetoKeySym = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int keycode,
  int col,
);

typedef _c_ResetModMap = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_ResetModMap = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_InitModMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_InitModMap = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_UCSConvertCase = ffi.Void Function(
  ffi.Uint32 code,
  ffi.Pointer<ffi.Uint64> lower,
  ffi.Pointer<ffi.Uint64> upper,
);

typedef _dart_UCSConvertCase = void Function(
  int code,
  ffi.Pointer<ffi.Uint64> lower,
  ffi.Pointer<ffi.Uint64> upper,
);

typedef _c__XTranslateKey = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint8 keycode,
  ffi.Uint32 modifiers,
  ffi.Pointer<ffi.Uint32> modifiers_return,
  ffi.Pointer<ffi.Uint64> keysym_return,
);

typedef _dart__XTranslateKey = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int keycode,
  int modifiers,
  ffi.Pointer<ffi.Uint32> modifiers_return,
  ffi.Pointer<ffi.Uint64> keysym_return,
);

typedef _c__XTranslateKeySym = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 symbol,
  ffi.Uint32 modifiers,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 nbytes,
);

typedef _dart__XTranslateKeySym = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int symbol,
  int modifiers,
  ffi.Pointer<ffi.Int8> buffer,
  int nbytes,
);

typedef _c__XFreeKeyBindings = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XFreeKeyBindings = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XKeysymToModifiers = ffi.Uint32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 ks,
);

typedef _dart__XKeysymToModifiers = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int ks,
);

typedef _c_imaxabs = ffi.Int64 Function(
  ffi.Int64 __n,
);

typedef _dart_imaxabs = int Function(
  int __n,
);

typedef _c_strtoimax = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoimax = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoumax = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoumax = int Function(
  ffi.Pointer<ffi.Int8> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_wcstoimax = ffi.Int64 Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_wcstoimax = int Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  int __base,
);

typedef _c_wcstoumax = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_wcstoumax = int Function(
  ffi.Pointer<ffi.Int32> __nptr,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> __endptr,
  int __base,
);

typedef _c__XrmInternalStringToQuark = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 len,
  ffi.Uint32 sig,
  ffi.Int32 permstring,
);

typedef _dart__XrmInternalStringToQuark = int Function(
  ffi.Pointer<ffi.Int8> name,
  int len,
  int sig,
  int permstring,
);

typedef _c_SameValue = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> db,
  ffi.Pointer<ffi.Int32> bindings,
  ffi.Pointer<ffi.Int32> quarks,
  ffi.Pointer<ffi.Int32> type,
  ffi.Pointer<XrmValuePtr> value,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart_SameValue = int Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> db,
  ffi.Pointer<ffi.Int32> bindings,
  ffi.Pointer<ffi.Int32> quarks,
  ffi.Pointer<ffi.Int32> type,
  ffi.Pointer<XrmValuePtr> value,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c_XDestroyImage = ffi.Int32 Function(
  ffi.Pointer<XImage> ximage,
);

typedef _dart_XDestroyImage = int Function(
  ffi.Pointer<XImage> ximage,
);

typedef _c_XGetPixel = ffi.Uint64 Function(
  ffi.Pointer<XImage> ximage,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart_XGetPixel = int Function(
  ffi.Pointer<XImage> ximage,
  int x,
  int y,
);

typedef _c_XPutPixel = ffi.Int32 Function(
  ffi.Pointer<XImage> ximage,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint64 pixel,
);

typedef _dart_XPutPixel = int Function(
  ffi.Pointer<XImage> ximage,
  int x,
  int y,
  int pixel,
);

typedef _c_XSubImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<XImage> ximage,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint32 width,
  ffi.Uint32 height,
);

typedef _dart_XSubImage = ffi.Pointer<XImage> Function(
  ffi.Pointer<XImage> ximage,
  int x,
  int y,
  int width,
  int height,
);

typedef _c_XAddPixel = ffi.Int32 Function(
  ffi.Pointer<XImage> ximage,
  ffi.Int64 value,
);

typedef _dart_XAddPixel = int Function(
  ffi.Pointer<XImage> ximage,
  int value,
);

typedef _c_XMaskEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int64 mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XMaskEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c_XNextEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XNextEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c_OutOfMemory = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_OutOfMemory = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c___XOS2RedirRoot = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> fname,
);

typedef _dart___XOS2RedirRoot = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> fname,
);

typedef _c___XOS2RedirRoot1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart___XOS2RedirRoot1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> format,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_os2_get_sys_millis = ffi.Int32 Function();

typedef _dart_os2_get_sys_millis = int Function();

typedef _c_os2ClientSelect = ffi.Int32 Function(
  ffi.Int32 nfds,
  ffi.Pointer<fd_set> readfds,
  ffi.Pointer<fd_set> writefds,
  ffi.Pointer<fd_set> exceptfds,
  ffi.Pointer<timeval> timeout,
);

typedef _dart_os2ClientSelect = int Function(
  int nfds,
  ffi.Pointer<fd_set> readfds,
  ffi.Pointer<fd_set> writefds,
  ffi.Pointer<fd_set> exceptfds,
  ffi.Pointer<timeval> timeout,
);

typedef _c_os2_parse_select = ffi.Int32 Function(
  ffi.Pointer<select_data> sd,
  ffi.Int32 nfds,
);

typedef _dart_os2_parse_select = int Function(
  ffi.Pointer<select_data> sd,
  int nfds,
);

typedef _c_os2_check_sockets = ffi.Int32 Function(
  ffi.Pointer<select_data> sd,
  ffi.Pointer<fd_set> readfds,
  ffi.Pointer<fd_set> writefds,
);

typedef _dart_os2_check_sockets = int Function(
  ffi.Pointer<select_data> sd,
  ffi.Pointer<fd_set> readfds,
  ffi.Pointer<fd_set> writefds,
);

typedef _c_os2_check_pipes = ffi.Int32 Function(
  ffi.Pointer<select_data> sd,
  ffi.Pointer<fd_set> readfds,
  ffi.Pointer<fd_set> writefds,
);

typedef _dart_os2_check_pipes = int Function(
  ffi.Pointer<select_data> sd,
  ffi.Pointer<fd_set> readfds,
  ffi.Pointer<fd_set> writefds,
);

typedef _c__XReportParseError = ffi.Void Function(
  ffi.Pointer<XrmOptionDescList> arg,
  ffi.Pointer<ffi.Int8> msg,
);

typedef _dart__XReportParseError = void Function(
  ffi.Pointer<XrmOptionDescList> arg,
  ffi.Pointer<ffi.Int8> msg,
);

typedef _c_ReadInteger = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> NextString,
);

typedef _dart_ReadInteger = int Function(
  ffi.Pointer<ffi.Int8> string,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> NextString,
);

typedef _c_XPeekEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XPeekEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
);

typedef _typedefC_83 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c_XPeekIfEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.NativeFunction<_typedefC_83>> Bool,
  ffi.Pointer<ffi.Int8> arg,
);

typedef _dart_XPeekIfEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
  ffi.Pointer<ffi.NativeFunction<_typedefC_83>> Bool,
  ffi.Pointer<ffi.Int8> arg,
);

typedef _c_InsertEdgeInET = ffi.Void Function(
  ffi.Pointer<EdgeTable> ET,
  ffi.Pointer<EdgeTableEntry> ETE,
  ffi.Int32 scanline,
  ffi.Pointer<ffi.Pointer<ScanLineListBlock>> SLLBlock,
  ffi.Pointer<ffi.Int32> iSLLBlock,
);

typedef _dart_InsertEdgeInET = void Function(
  ffi.Pointer<EdgeTable> ET,
  ffi.Pointer<EdgeTableEntry> ETE,
  int scanline,
  ffi.Pointer<ffi.Pointer<ScanLineListBlock>> SLLBlock,
  ffi.Pointer<ffi.Int32> iSLLBlock,
);

typedef _c_CreateETandAET = ffi.Void Function(
  ffi.Int32 count,
  ffi.Pointer<ffi.Int32> pts,
  ffi.Pointer<EdgeTable> ET,
  ffi.Pointer<EdgeTableEntry> AET,
  ffi.Pointer<EdgeTableEntry> pETEs,
  ffi.Pointer<ScanLineListBlock> pSLLBlock,
);

typedef _dart_CreateETandAET = void Function(
  int count,
  ffi.Pointer<ffi.Int32> pts,
  ffi.Pointer<EdgeTable> ET,
  ffi.Pointer<EdgeTableEntry> AET,
  ffi.Pointer<EdgeTableEntry> pETEs,
  ffi.Pointer<ScanLineListBlock> pSLLBlock,
);

typedef _c_loadAET = ffi.Void Function(
  ffi.Pointer<EdgeTableEntry> AET,
  ffi.Pointer<EdgeTableEntry> ETEs,
);

typedef _dart_loadAET = void Function(
  ffi.Pointer<EdgeTableEntry> AET,
  ffi.Pointer<EdgeTableEntry> ETEs,
);

typedef _c_computeWAET = ffi.Void Function(
  ffi.Pointer<EdgeTableEntry> AET,
);

typedef _dart_computeWAET = void Function(
  ffi.Pointer<EdgeTableEntry> AET,
);

typedef _c_InsertionSort = ffi.Int32 Function(
  ffi.Pointer<EdgeTableEntry> AET,
);

typedef _dart_InsertionSort = int Function(
  ffi.Pointer<EdgeTableEntry> AET,
);

typedef _c_FreeStorage = ffi.Void Function(
  ffi.Pointer<ScanLineListBlock> pSLLBlock,
);

typedef _dart_FreeStorage = void Function(
  ffi.Pointer<ScanLineListBlock> pSLLBlock,
);

typedef _c_PtsToRegion = ffi.Int32 Function(
  ffi.Int32 numFullPtBlocks,
  ffi.Int32 iCurPtBlock,
  ffi.Pointer<POINTBLOCK> FirstPtBlock,
  ffi.Pointer<_XRegion> reg,
);

typedef _dart_PtsToRegion = int Function(
  int numFullPtBlocks,
  int iCurPtBlock,
  ffi.Pointer<POINTBLOCK> FirstPtBlock,
  ffi.Pointer<_XRegion> reg,
);

typedef _c__XPutBackEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart__XPutBackEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c_XPutBackEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XPutBackEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c_NoSwap = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 half_order,
);

typedef _dart_NoSwap = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int half_order,
);

typedef _c_SwapTwoBytes = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 half_order,
);

typedef _dart_SwapTwoBytes = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int half_order,
);

typedef _c_SwapThreeBytes = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 byte_order,
);

typedef _dart_SwapThreeBytes = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int byte_order,
);

typedef _c_SwapFourBytes = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 half_order,
);

typedef _dart_SwapFourBytes = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int half_order,
);

typedef _c_SwapWords = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 half_order,
);

typedef _dart_SwapWords = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int half_order,
);

typedef _c_SwapNibbles = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
);

typedef _dart_SwapNibbles = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
);

typedef _c_ShiftNibblesLeft = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 nibble_order,
);

typedef _dart_ShiftNibblesLeft = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int nibble_order,
);

typedef _c_SwapBits = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 half_order,
);

typedef _dart_SwapBits = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int half_order,
);

typedef _c_SwapBitsAndTwoBytes = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 half_order,
);

typedef _dart_SwapBitsAndTwoBytes = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int half_order,
);

typedef _c_SwapBitsAndFourBytes = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 half_order,
);

typedef _dart_SwapBitsAndFourBytes = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int half_order,
);

typedef _c_SwapBitsAndWords = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  ffi.Int64 srclen,
  ffi.Int64 srcinc,
  ffi.Int64 destinc,
  ffi.Uint32 height,
  ffi.Int32 half_order,
);

typedef _dart_SwapBitsAndWords = void Function(
  ffi.Pointer<ffi.Uint8> src,
  ffi.Pointer<ffi.Uint8> dest,
  int srclen,
  int srcinc,
  int destinc,
  int height,
  int half_order,
);

typedef _c_SendXYImage = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int32> req,
  ffi.Pointer<XImage> image,
  ffi.Int32 req_xoffset,
  ffi.Int32 req_yoffset,
);

typedef _dart_SendXYImage = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int32> req,
  ffi.Pointer<XImage> image,
  int req_xoffset,
  int req_yoffset,
);

typedef _c_SendZImage = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int32> req,
  ffi.Pointer<XImage> image,
  ffi.Int32 req_xoffset,
  ffi.Int32 req_yoffset,
  ffi.Int32 dest_bits_per_pixel,
  ffi.Int32 dest_scanline_pad,
);

typedef _dart_SendZImage = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int32> req,
  ffi.Pointer<XImage> image,
  int req_xoffset,
  int req_yoffset,
  int dest_bits_per_pixel,
  int dest_scanline_pad,
);

typedef _c_PutImageRequest = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 d,
  ffi.Pointer<_XGC> gc,
  ffi.Pointer<XImage> image,
  ffi.Int32 req_xoffset,
  ffi.Int32 req_yoffset,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint32 req_width,
  ffi.Uint32 req_height,
  ffi.Int32 dest_bits_per_pixel,
  ffi.Int32 dest_scanline_pad,
);

typedef _dart_PutImageRequest = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int d,
  ffi.Pointer<_XGC> gc,
  ffi.Pointer<XImage> image,
  int req_xoffset,
  int req_yoffset,
  int x,
  int y,
  int req_width,
  int req_height,
  int dest_bits_per_pixel,
  int dest_scanline_pad,
);

typedef _c_PutSubImage = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 d,
  ffi.Pointer<_XGC> gc,
  ffi.Pointer<XImage> image,
  ffi.Int32 req_xoffset,
  ffi.Int32 req_yoffset,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Uint32 req_width,
  ffi.Uint32 req_height,
  ffi.Int32 dest_bits_per_pixel,
  ffi.Int32 dest_scanline_pad,
);

typedef _dart_PutSubImage = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int d,
  ffi.Pointer<_XGC> gc,
  ffi.Pointer<XImage> image,
  int req_xoffset,
  int req_yoffset,
  int x,
  int y,
  int req_width,
  int req_height,
  int dest_bits_per_pixel,
  int dest_scanline_pad,
);

typedef _c_permalloc = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 length,
);

typedef _dart_permalloc = ffi.Pointer<ffi.Int8> Function(
  int length,
);

typedef _c_ExpandQuarkTable = ffi.Int32 Function();

typedef _dart_ExpandQuarkTable = int Function();

typedef _c__XQueryColors = ffi.Void Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 cmap,
  ffi.Pointer<ffi.Int32> defs,
  ffi.Int32 ncolors,
);

typedef _dart__XQueryColors = void Function(
  ffi.Pointer<ffi.Int32> dpy,
  int cmap,
  ffi.Pointer<ffi.Int32> defs,
  int ncolors,
);

typedef _c_NextInt = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> fstream,
);

typedef _dart_NextInt = int Function(
  ffi.Pointer<_IO_FILE> fstream,
);

typedef _typedefC_84 = ffi.Int32 Function(
  ffi.Int32,
  ffi.Pointer<BoxPtr>,
  ffi.Pointer<BoxPtr>,
  ffi.Pointer<BoxPtr>,
  ffi.Pointer<BoxPtr>,
  ffi.Int16,
  ffi.Int16,
);

typedef _typedefC_85 = ffi.Int32 Function(
  ffi.Int32,
  ffi.Pointer<BoxPtr>,
  ffi.Pointer<BoxPtr>,
  ffi.Int16,
  ffi.Int16,
);

typedef _typedefC_86 = ffi.Int32 Function(
  ffi.Int32,
  ffi.Pointer<BoxPtr>,
  ffi.Pointer<BoxPtr>,
  ffi.Int16,
  ffi.Int16,
);

typedef _c_miRegionOp = ffi.Void Function(
  ffi.Int32 newReg,
  ffi.Int32 reg1,
  ffi.Int32 reg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_84>> overlapFunc,
  ffi.Pointer<ffi.NativeFunction<_typedefC_85>> nonOverlap1Func,
  ffi.Pointer<ffi.NativeFunction<_typedefC_86>> nonOverlap2Func,
);

typedef _dart_miRegionOp = void Function(
  int newReg,
  int reg1,
  int reg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_84>> overlapFunc,
  ffi.Pointer<ffi.NativeFunction<_typedefC_85>> nonOverlap1Func,
  ffi.Pointer<ffi.NativeFunction<_typedefC_86>> nonOverlap2Func,
);

typedef _c_miSetExtents = ffi.Void Function(
  ffi.Int32 pReg,
);

typedef _dart_miSetExtents = void Function(
  int pReg,
);

typedef _c_Compress = ffi.Void Function(
  ffi.Int32 r,
  ffi.Int32 s,
  ffi.Int32 t,
  ffi.Uint32 dx,
  ffi.Int32 xdir,
  ffi.Int32 grow,
);

typedef _dart_Compress = void Function(
  int r,
  int s,
  int t,
  int dx,
  int xdir,
  int grow,
);

typedef _c_miIntersectO = ffi.Int32 Function(
  ffi.Int32 pReg,
  ffi.Pointer<BoxPtr> r1,
  ffi.Pointer<BoxPtr> r1End,
  ffi.Pointer<BoxPtr> r2,
  ffi.Pointer<BoxPtr> r2End,
  ffi.Int16 y1,
  ffi.Int16 y2,
);

typedef _dart_miIntersectO = int Function(
  int pReg,
  ffi.Pointer<BoxPtr> r1,
  ffi.Pointer<BoxPtr> r1End,
  ffi.Pointer<BoxPtr> r2,
  ffi.Pointer<BoxPtr> r2End,
  int y1,
  int y2,
);

typedef _c_miRegionCopy = ffi.Int32 Function(
  ffi.Int32 dstrgn,
  ffi.Int32 rgn,
);

typedef _dart_miRegionCopy = int Function(
  int dstrgn,
  int rgn,
);

typedef _c_miCoalesce = ffi.Int32 Function(
  ffi.Int32 pReg,
  ffi.Int32 prevStart,
  ffi.Int32 curStart,
);

typedef _dart_miCoalesce = int Function(
  int pReg,
  int prevStart,
  int curStart,
);

typedef _c_miUnionNonO = ffi.Int32 Function(
  ffi.Int32 pReg,
  ffi.Pointer<BoxPtr> r,
  ffi.Pointer<BoxPtr> rEnd,
  ffi.Int16 y1,
  ffi.Int16 y2,
);

typedef _dart_miUnionNonO = int Function(
  int pReg,
  ffi.Pointer<BoxPtr> r,
  ffi.Pointer<BoxPtr> rEnd,
  int y1,
  int y2,
);

typedef _c_miUnionO = ffi.Int32 Function(
  ffi.Int32 pReg,
  ffi.Pointer<BoxPtr> r1,
  ffi.Pointer<BoxPtr> r1End,
  ffi.Pointer<BoxPtr> r2,
  ffi.Pointer<BoxPtr> r2End,
  ffi.Int16 y1,
  ffi.Int16 y2,
);

typedef _dart_miUnionO = int Function(
  int pReg,
  ffi.Pointer<BoxPtr> r1,
  ffi.Pointer<BoxPtr> r1End,
  ffi.Pointer<BoxPtr> r2,
  ffi.Pointer<BoxPtr> r2End,
  int y1,
  int y2,
);

typedef _c_miSubtractNonO1 = ffi.Int32 Function(
  ffi.Int32 pReg,
  ffi.Pointer<BoxPtr> r,
  ffi.Pointer<BoxPtr> rEnd,
  ffi.Int16 y1,
  ffi.Int16 y2,
);

typedef _dart_miSubtractNonO1 = int Function(
  int pReg,
  ffi.Pointer<BoxPtr> r,
  ffi.Pointer<BoxPtr> rEnd,
  int y1,
  int y2,
);

typedef _c_miSubtractO = ffi.Int32 Function(
  ffi.Int32 pReg,
  ffi.Pointer<BoxPtr> r1,
  ffi.Pointer<BoxPtr> r1End,
  ffi.Pointer<BoxPtr> r2,
  ffi.Pointer<BoxPtr> r2End,
  ffi.Int16 y1,
  ffi.Int16 y2,
);

typedef _dart_miSubtractO = int Function(
  int pReg,
  ffi.Pointer<BoxPtr> r1,
  ffi.Pointer<BoxPtr> r1End,
  ffi.Pointer<BoxPtr> r2,
  ffi.Pointer<BoxPtr> r2End,
  int y1,
  int y2,
);

typedef _c__XFreeIMFilters = ffi.Void Function(
  ffi.Pointer<ffi.Int32> display,
);

typedef _dart__XFreeIMFilters = void Function(
  ffi.Pointer<ffi.Int32> display,
);

typedef _typedefC_87 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c__XRegisterFilterByMask = ffi.Void Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Int32 window,
  ffi.Uint64 event_mask,
  ffi.Pointer<ffi.NativeFunction<_typedefC_87>> Bool,
  ffi.Int32 client_data,
);

typedef _dart__XRegisterFilterByMask = void Function(
  ffi.Pointer<ffi.Int32> display,
  int window,
  int event_mask,
  ffi.Pointer<ffi.NativeFunction<_typedefC_87>> Bool,
  int client_data,
);

typedef _typedefC_88 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c__XRegisterFilterByType = ffi.Void Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Int32 window,
  ffi.Int32 start_type,
  ffi.Int32 end_type,
  ffi.Pointer<ffi.NativeFunction<_typedefC_88>> Bool,
  ffi.Int32 client_data,
);

typedef _dart__XRegisterFilterByType = void Function(
  ffi.Pointer<ffi.Int32> display,
  int window,
  int start_type,
  int end_type,
  ffi.Pointer<ffi.NativeFunction<_typedefC_88>> Bool,
  int client_data,
);

typedef _typedefC_89 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c__XUnregisterFilter = ffi.Void Function(
  ffi.Pointer<ffi.Int32> display,
  ffi.Int32 window,
  ffi.Pointer<ffi.NativeFunction<_typedefC_89>> Bool,
  ffi.Int32 client_data,
);

typedef _dart__XUnregisterFilter = void Function(
  ffi.Pointer<ffi.Int32> display,
  int window,
  ffi.Pointer<ffi.NativeFunction<_typedefC_89>> Bool,
  int client_data,
);

typedef _c_XSendEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 w,
  ffi.Int32 propagate,
  ffi.Int64 event_mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XSendEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int w,
  int propagate,
  int event_mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c__XlcMapOSLocaleName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> osname,
  ffi.Pointer<ffi.Int8> siname,
);

typedef _dart__XlcMapOSLocaleName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> osname,
  ffi.Pointer<ffi.Int8> siname,
);

typedef _c__XSyncFunction = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
);

typedef _dart__XSyncFunction = int Function(
  ffi.Pointer<ffi.Int32> dpy,
);

typedef _c__Xthr_equal_stub_ = ffi.Int32 Function();

typedef _dart__Xthr_equal_stub_ = int Function();

typedef _c__Xthr_self_stub_ = ffi.Uint64 Function();

typedef _dart__Xthr_self_stub_ = int Function();

typedef _c__Xthr_zero_stub_ = ffi.Int32 Function();

typedef _dart__Xthr_zero_stub_ = int Function();

typedef _c_parse_line = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> buf,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int8> prefix,
);

typedef _dart_parse_line = int Function(
  ffi.Pointer<ffi.Int8> buf,
  ffi.Pointer<ffi.Int8> key,
  ffi.Pointer<ffi.Uint64> val,
  ffi.Pointer<ffi.Int8> prefix,
);

typedef _c_main = ffi.Int32 Function(
  ffi.Int32 argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _dart_main = int Function(
  int argc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
);

typedef _c_XWindowEvent = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> dpy,
  ffi.Int32 w,
  ffi.Int64 mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _dart_XWindowEvent = int Function(
  ffi.Pointer<ffi.Int32> dpy,
  int w,
  int mask,
  ffi.Pointer<ffi.Int32> event,
);

typedef _c__GeometryMaskToGravity = ffi.Int32 Function(
  ffi.Int32 mask,
);

typedef _dart__GeometryMaskToGravity = int Function(
  int mask,
);

typedef _c_Format_Image = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> image,
  ffi.Pointer<ffi.Int32> resultsize,
);

typedef _dart_Format_Image = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> image,
  ffi.Pointer<ffi.Int32> resultsize,
);

typedef _c_xcb_send_request = ffi.Uint32 Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Int32 flags,
  ffi.Pointer<iovec> vector,
  ffi.Pointer<xcb_protocol_request_t> request,
);

typedef _dart_xcb_send_request = int Function(
  ffi.Pointer<xcb_connection_t> c,
  int flags,
  ffi.Pointer<iovec> vector,
  ffi.Pointer<xcb_protocol_request_t> request,
);

typedef _c_xcb_send_request_with_fds = ffi.Uint32 Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Int32 flags,
  ffi.Pointer<iovec> vector,
  ffi.Pointer<xcb_protocol_request_t> request,
  ffi.Uint32 num_fds,
  ffi.Pointer<ffi.Int32> fds,
);

typedef _dart_xcb_send_request_with_fds = int Function(
  ffi.Pointer<xcb_connection_t> c,
  int flags,
  ffi.Pointer<iovec> vector,
  ffi.Pointer<xcb_protocol_request_t> request,
  int num_fds,
  ffi.Pointer<ffi.Int32> fds,
);

typedef _c_xcb_send_request64 = ffi.Uint64 Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Int32 flags,
  ffi.Pointer<iovec> vector,
  ffi.Pointer<xcb_protocol_request_t> request,
);

typedef _dart_xcb_send_request64 = int Function(
  ffi.Pointer<xcb_connection_t> c,
  int flags,
  ffi.Pointer<iovec> vector,
  ffi.Pointer<xcb_protocol_request_t> request,
);

typedef _c_xcb_send_request_with_fds64 = ffi.Uint64 Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Int32 flags,
  ffi.Pointer<iovec> vector,
  ffi.Pointer<xcb_protocol_request_t> request,
  ffi.Uint32 num_fds,
  ffi.Pointer<ffi.Int32> fds,
);

typedef _dart_xcb_send_request_with_fds64 = int Function(
  ffi.Pointer<xcb_connection_t> c,
  int flags,
  ffi.Pointer<iovec> vector,
  ffi.Pointer<xcb_protocol_request_t> request,
  int num_fds,
  ffi.Pointer<ffi.Int32> fds,
);

typedef _c_xcb_send_fd = ffi.Void Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Int32 fd,
);

typedef _dart_xcb_send_fd = void Function(
  ffi.Pointer<xcb_connection_t> c,
  int fd,
);

typedef _typedefC_93 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_xcb_take_socket = ffi.Int32 Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<ffi.NativeFunction<_typedefC_93>> return_socket,
  ffi.Pointer<ffi.Void> closure,
  ffi.Int32 flags,
  ffi.Pointer<ffi.Uint64> sent,
);

typedef _dart_xcb_take_socket = int Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<ffi.NativeFunction<_typedefC_93>> return_socket,
  ffi.Pointer<ffi.Void> closure,
  int flags,
  ffi.Pointer<ffi.Uint64> sent,
);

typedef _c_xcb_writev = ffi.Int32 Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<iovec> vector,
  ffi.Int32 count,
  ffi.Uint64 requests,
);

typedef _dart_xcb_writev = int Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<iovec> vector,
  int count,
  int requests,
);

typedef _c_xcb_wait_for_reply = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Uint32 request,
  ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> e,
);

typedef _dart_xcb_wait_for_reply = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_connection_t> c,
  int request,
  ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> e,
);

typedef _c_xcb_wait_for_reply64 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Uint64 request,
  ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> e,
);

typedef _dart_xcb_wait_for_reply64 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<xcb_connection_t> c,
  int request,
  ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> e,
);

typedef _c_xcb_poll_for_reply = ffi.Int32 Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Uint32 request,
  ffi.Pointer<ffi.Pointer<ffi.Void>> reply,
  ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> error,
);

typedef _dart_xcb_poll_for_reply = int Function(
  ffi.Pointer<xcb_connection_t> c,
  int request,
  ffi.Pointer<ffi.Pointer<ffi.Void>> reply,
  ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> error,
);

typedef _c_xcb_poll_for_reply64 = ffi.Int32 Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Uint64 request,
  ffi.Pointer<ffi.Pointer<ffi.Void>> reply,
  ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> error,
);

typedef _dart_xcb_poll_for_reply64 = int Function(
  ffi.Pointer<xcb_connection_t> c,
  int request,
  ffi.Pointer<ffi.Pointer<ffi.Void>> reply,
  ffi.Pointer<ffi.Pointer<xcb_generic_error_t>> error,
);

typedef _c_xcb_get_reply_fds = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<ffi.Void> reply,
  ffi.Uint64 replylen,
);

typedef _dart_xcb_get_reply_fds = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<xcb_connection_t> c,
  ffi.Pointer<ffi.Void> reply,
  int replylen,
);

typedef _c_xcb_popcount = ffi.Int32 Function(
  ffi.Uint32 mask,
);

typedef _dart_xcb_popcount = int Function(
  int mask,
);

typedef _c_xcb_sumof = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> list,
  ffi.Int32 len,
);

typedef _dart_xcb_sumof = int Function(
  ffi.Pointer<ffi.Uint8> list,
  int len,
);

typedef _c_alloc_copy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> src,
  ffi.Pointer<ffi.Int32> dstn,
  ffi.Uint64 n,
);

typedef _dart_alloc_copy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> src,
  ffi.Pointer<ffi.Int32> dstn,
  int n,
);

typedef _c__XIDHandler = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XIDHandler = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XSeqSyncFunction = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XSeqSyncFunction = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XSetPrivSyncFunction = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XSetPrivSyncFunction = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XSetSeqSyncFunction = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XSetSeqSyncFunction = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_return_socket = ffi.Void Function(
  ffi.Pointer<ffi.Void> closure,
);

typedef _dart_return_socket = void Function(
  ffi.Pointer<ffi.Void> closure,
);

typedef _c_require_socket = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_require_socket = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_check_internal_connections = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_check_internal_connections = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_append_pending_request = ffi.Pointer<PendingRequest> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 sequence,
);

typedef _dart_append_pending_request = ffi.Pointer<PendingRequest> Function(
  ffi.Pointer<_XDisplay> dpy,
  int sequence,
);

typedef _c_dequeue_pending_request = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<PendingRequest> req,
);

typedef _dart_dequeue_pending_request = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<PendingRequest> req,
);

typedef _c_handle_error = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xError> err,
  ffi.Int32 in_XReply,
);

typedef _dart_handle_error = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xError> err,
  int in_XReply,
);

typedef _c_widen = ffi.Void Function(
  ffi.Pointer<ffi.Uint64> wide,
  ffi.Uint32 narrow,
);

typedef _dart_widen = void Function(
  ffi.Pointer<ffi.Uint64> wide,
  int narrow,
);

typedef _c_poll_for_event = ffi.Pointer<xcb_generic_reply_t> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 queued_only,
);

typedef _dart_poll_for_event = ffi.Pointer<xcb_generic_reply_t> Function(
  ffi.Pointer<_XDisplay> dpy,
  int queued_only,
);

typedef _c_poll_for_response = ffi.Pointer<xcb_generic_reply_t> Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_poll_for_response = ffi.Pointer<xcb_generic_reply_t> Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_handle_response = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xcb_generic_reply_t> response,
  ffi.Int32 in_XReply,
);

typedef _dart_handle_response = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xcb_generic_reply_t> response,
  int in_XReply,
);

typedef _c__XFreeReplyData = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 force,
);

typedef _dart__XFreeReplyData = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int force,
);

typedef _c__XcmsAddCmapRec = ffi.Pointer<XcmsCmapRec> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 cmap,
  ffi.Uint64 windowID,
  ffi.Pointer<Visual> visual,
);

typedef _dart__XcmsAddCmapRec = ffi.Pointer<XcmsCmapRec> Function(
  ffi.Pointer<_XDisplay> dpy,
  int cmap,
  int windowID,
  ffi.Pointer<Visual> visual,
);

typedef _c__XcmsRGB_to_XColor = ffi.Void Function(
  ffi.Pointer<XcmsColor> pColors,
  ffi.Pointer<XColor> pXColors,
  ffi.Uint32 nColors,
);

typedef _dart__XcmsRGB_to_XColor = void Function(
  ffi.Pointer<XcmsColor> pColors,
  ffi.Pointer<XColor> pXColors,
  int nColors,
);

typedef _c__XcmsResolveColorString = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> color_string,
  ffi.Pointer<XcmsColor> pColor_exact_return,
  ffi.Uint64 result_format,
);

typedef _dart__XcmsResolveColorString = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> color_string,
  ffi.Pointer<XcmsColor> pColor_exact_return,
  int result_format,
);

typedef _c__XUnresolveColor = ffi.Void Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XColor> pXColor,
);

typedef _dart__XUnresolveColor = void Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XColor> pXColor,
);

typedef _c__XcmsArcTangent = ffi.Double Function(
  ffi.Double a,
);

typedef _dart__XcmsArcTangent = double Function(
  double a,
);

typedef _c__XcmsCosine = ffi.Double Function(
  ffi.Double a,
);

typedef _dart__XcmsCosine = double Function(
  double a,
);

typedef _c__XcmsCubeRoot = ffi.Double Function(
  ffi.Double a,
);

typedef _dart__XcmsCubeRoot = double Function(
  double a,
);

typedef _c__XcmsSine = ffi.Double Function(
  ffi.Double a,
);

typedef _dart__XcmsSine = double Function(
  double a,
);

typedef _c__XcmsSquareRoot = ffi.Double Function(
  ffi.Double a,
);

typedef _dart__XcmsSquareRoot = double Function(
  double a,
);

typedef _c__XcmsCopyPointerArray = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
);

typedef _dart__XcmsCopyPointerArray = ffi.Pointer<ffi.Pointer<ffi.Int8>>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
);

typedef _c__XcmsFreePointerArray = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
);

typedef _dart__XcmsFreePointerArray = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
);

typedef _c__XcmsPushPointerArray = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> papNoFree,
);

typedef _dart__XcmsPushPointerArray = ffi.Pointer<ffi.Pointer<ffi.Int8>>
    Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pap,
  ffi.Pointer<ffi.Int8> p,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> papNoFree,
);

typedef _c__XcmsCIEXYZ_ValidSpec = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart__XcmsCIEXYZ_ValidSpec = int Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c__XcmsCIEuvY_ValidSpec = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart__XcmsCIEuvY_ValidSpec = int Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c__XcmsTekHVC_CheckModify = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart__XcmsTekHVC_CheckModify = int Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c__XcmsTekHVCQueryMaxVCRGB = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Double hue,
  ffi.Pointer<XcmsColor> pColor_return,
  ffi.Pointer<XcmsRGBi> pRGB_return,
);

typedef _dart__XcmsTekHVCQueryMaxVCRGB = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  double hue,
  ffi.Pointer<XcmsColor> pColor_return,
  ffi.Pointer<XcmsRGBi> pRGB_return,
);

typedef _c__XcmsCIELabQueryMaxLCRGB = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Double hue,
  ffi.Pointer<XcmsColor> pColor_return,
  ffi.Pointer<XcmsRGBi> pRGB_return,
);

typedef _dart__XcmsCIELabQueryMaxLCRGB = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  double hue,
  ffi.Pointer<XcmsColor> pColor_return,
  ffi.Pointer<XcmsRGBi> pRGB_return,
);

typedef _c__XcmsConvertColorsWithWhitePt = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Pointer<XcmsColor> pWhitePt,
  ffi.Uint32 nColors,
  ffi.Uint64 newFormat,
  ffi.Pointer<ffi.Int32> pCompressed,
);

typedef _dart__XcmsConvertColorsWithWhitePt = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Pointer<XcmsColor> pWhitePt,
  int nColors,
  int newFormat,
  ffi.Pointer<ffi.Int32> pCompressed,
);

typedef _c__XcmsDIConvertColors = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Pointer<XcmsColor> pWhitePt,
  ffi.Uint32 nColors,
  ffi.Uint64 newFormat,
);

typedef _dart__XcmsDIConvertColors = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Pointer<XcmsColor> pWhitePt,
  int nColors,
  int newFormat,
);

typedef _c__XcmsDDConvertColors = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Uint32 nColors,
  ffi.Uint64 newFormat,
  ffi.Pointer<ffi.Int32> pCompressed,
);

typedef _dart__XcmsDDConvertColors = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColors_in_out,
  int nColors,
  int newFormat,
  ffi.Pointer<ffi.Int32> pCompressed,
);

typedef _c__XcmsRegFormatOfPrefix = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> prefix,
);

typedef _dart__XcmsRegFormatOfPrefix = int Function(
  ffi.Pointer<ffi.Int8> prefix,
);

typedef _c__XColor_to_XcmsRGB = ffi.Void Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XColor> pXColors,
  ffi.Pointer<XcmsColor> pColors,
  ffi.Uint32 nColors,
);

typedef _dart__XColor_to_XcmsRGB = void Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XColor> pXColors,
  ffi.Pointer<XcmsColor> pColors,
  int nColors,
);

typedef _typedefC_96 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Uint64,
  ffi.Pointer<XColor>,
);

typedef _c__XcmsSetGetColor = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_96>> xColorProc,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 cmap,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Uint64 result_format,
  ffi.Pointer<ffi.Int32> pCompressed,
);

typedef _dart__XcmsSetGetColor = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_96>> xColorProc,
  ffi.Pointer<_XDisplay> dpy,
  int cmap,
  ffi.Pointer<XcmsColor> pColors_in_out,
  int result_format,
  ffi.Pointer<ffi.Int32> pCompressed,
);

typedef _typedefC_97 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Uint64,
  ffi.Pointer<XColor>,
  ffi.Int32,
);

typedef _c__XcmsSetGetColors = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_97>> xColorProc,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 cmap,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Int32 nColors,
  ffi.Uint64 result_format,
  ffi.Pointer<ffi.Int32> pCompressed,
);

typedef _dart__XcmsSetGetColors = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_97>> xColorProc,
  ffi.Pointer<_XDisplay> dpy,
  int cmap,
  ffi.Pointer<XcmsColor> pColors_in_out,
  int nColors,
  int result_format,
  ffi.Pointer<ffi.Int32> pCompressed,
);

typedef _c__XcmsCIELuvQueryMaxLCRGB = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Double hue,
  ffi.Pointer<XcmsColor> pColor_return,
  ffi.Pointer<XcmsRGBi> pRGB_return,
);

typedef _dart__XcmsCIELuvQueryMaxLCRGB = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  double hue,
  ffi.Pointer<XcmsColor> pColor_return,
  ffi.Pointer<XcmsRGBi> pRGB_return,
);

typedef _c__XcmsGetIntensityMap = ffi.Pointer<XcmsIntensityMap> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<Visual> visual,
);

typedef _dart__XcmsGetIntensityMap = ffi.Pointer<XcmsIntensityMap> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<Visual> visual,
);

typedef _c__XcmsInitDefaultCCCs = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XcmsInitDefaultCCCs = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XcmsInitScrnInfo = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 screenNumber,
);

typedef _dart__XcmsInitScrnInfo = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int screenNumber,
);

typedef _c__XcmsCopyISOLatin1Lowered = ffi.Void Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
);

typedef _dart__XcmsCopyISOLatin1Lowered = void Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
);

typedef _c__XcmsEqualWhitePts = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pWhitePt1,
  ffi.Pointer<XcmsColor> pWhitePt2,
);

typedef _dart__XcmsEqualWhitePts = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pWhitePt1,
  ffi.Pointer<XcmsColor> pWhitePt2,
);

typedef _c__XcmsLRGB_InitScrnDefault = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 screenNumber,
  ffi.Pointer<XcmsPerScrnInfo> pPerScrnInfo,
);

typedef _dart__XcmsLRGB_InitScrnDefault = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int screenNumber,
  ffi.Pointer<XcmsPerScrnInfo> pPerScrnInfo,
);

typedef _c__XcmsFreeIntensityMaps = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XcmsFreeIntensityMaps = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XcmsGetProperty = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> pDpy,
  ffi.Uint64 w,
  ffi.Uint64 property,
  ffi.Pointer<ffi.Int32> pFormat,
  ffi.Pointer<ffi.Uint64> pNItems,
  ffi.Pointer<ffi.Uint64> pNBytes,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pValue,
);

typedef _dart__XcmsGetProperty = int Function(
  ffi.Pointer<_XDisplay> pDpy,
  int w,
  int property,
  ffi.Pointer<ffi.Int32> pFormat,
  ffi.Pointer<ffi.Uint64> pNItems,
  ffi.Pointer<ffi.Uint64> pNBytes,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pValue,
);

typedef _c__XcmsGetElement = ffi.Uint64 Function(
  ffi.Int32 format,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pValue,
  ffi.Pointer<ffi.Uint64> pCount,
);

typedef _dart__XcmsGetElement = int Function(
  int format,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pValue,
  ffi.Pointer<ffi.Uint64> pCount,
);

typedef _c__XcmsUnresolveColor = ffi.Void Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart__XcmsUnresolveColor = void Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c__XcmsResolveColor = ffi.Void Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pXcmsColor,
);

typedef _dart__XcmsResolveColor = void Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pXcmsColor,
);

typedef _c__XcmsFreeClientCmaps = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XcmsFreeClientCmaps = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_CmapRecForColormap = ffi.Pointer<XcmsCmapRec> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 cmap,
);

typedef _dart_CmapRecForColormap = ffi.Pointer<XcmsCmapRec> Function(
  ffi.Pointer<_XDisplay> dpy,
  int cmap,
);

typedef _c_LoadColornameDB = ffi.Int32 Function();

typedef _dart_LoadColornameDB = int Function();

typedef _c__XcmsColorSpaceOfString = ffi.Pointer<XcmsColorSpace> Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<ffi.Int8> color_string,
);

typedef _dart__XcmsColorSpaceOfString = ffi.Pointer<XcmsColorSpace> Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<ffi.Int8> color_string,
);

typedef _c__XcmsParseColorString = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<ffi.Int8> color_string,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart__XcmsParseColorString = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<ffi.Int8> color_string,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_FirstCmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> p1,
  ffi.Pointer<ffi.Void> p2,
);

typedef _dart_FirstCmp = int Function(
  ffi.Pointer<ffi.Void> p1,
  ffi.Pointer<ffi.Void> p2,
);

typedef _c_SetNoVisit = ffi.Void Function();

typedef _dart_SetNoVisit = void Function();

typedef _c_field2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pBuf,
  ffi.Int8 delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> p1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> p2,
);

typedef _dart_field2 = int Function(
  ffi.Pointer<ffi.Int8> pBuf,
  int delim,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> p1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> p2,
);

typedef _c__XcmsLookupColorName = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart__XcmsLookupColorName = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> name,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_RemoveSpaces = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> pString,
);

typedef _dart_RemoveSpaces = int Function(
  ffi.Pointer<ffi.Int8> pString,
);

typedef _c_stringSectionSize = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> stream,
  ffi.Pointer<ffi.Int32> pNumEntries,
  ffi.Pointer<ffi.Int32> pSectionSize,
);

typedef _dart_stringSectionSize = int Function(
  ffi.Pointer<_IO_FILE> stream,
  ffi.Pointer<ffi.Int32> pNumEntries,
  ffi.Pointer<ffi.Int32> pSectionSize,
);

typedef _c_ReadColornameDB = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> stream,
  ffi.Pointer<XcmsPair> pRec,
  ffi.Pointer<ffi.Int8> pString,
);

typedef _dart_ReadColornameDB = int Function(
  ffi.Pointer<_IO_FILE> stream,
  ffi.Pointer<XcmsPair> pRec,
  ffi.Pointer<ffi.Int8> pString,
);

typedef _c__XcmsFreeDefaultCCCs = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XcmsFreeDefaultCCCs = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XcmsModulo = ffi.Double Function(
  ffi.Double value,
  ffi.Double base,
);

typedef _dart__XcmsModulo = double Function(
  double value,
  double base,
);

typedef _c__XcmsPolynomial = ffi.Double Function(
  ffi.Int32 order,
  ffi.Pointer<ffi.Double> coeffs,
  ffi.Double x,
);

typedef _dart__XcmsPolynomial = double Function(
  int order,
  ffi.Pointer<ffi.Double> coeffs,
  double x,
);

typedef _c__XcmsModuloF = ffi.Double Function(
  ffi.Double val,
  ffi.Pointer<ffi.Double> dp,
);

typedef _dart__XcmsModuloF = double Function(
  double val,
  ffi.Pointer<ffi.Double> dp,
);

typedef _c_EqualCIEXYZ = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> p1,
  ffi.Pointer<XcmsColor> p2,
);

typedef _dart_EqualCIEXYZ = int Function(
  ffi.Pointer<XcmsColor> p1,
  ffi.Pointer<XcmsColor> p2,
);

typedef _c_ColorSpaceOfID = ffi.Pointer<XcmsColorSpace> Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Uint64 id,
);

typedef _dart_ColorSpaceOfID = ffi.Pointer<XcmsColorSpace> Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  int id,
);

typedef _c_ValidDIColorSpaceID = ffi.Int32 Function(
  ffi.Uint64 id,
);

typedef _dart_ValidDIColorSpaceID = int Function(
  int id,
);

typedef _c_ValidDDColorSpaceID = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Uint64 id,
);

typedef _dart_ValidDDColorSpaceID = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  int id,
);

typedef _c_ConvertMixedColors = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Pointer<XcmsColor> pWhitePt,
  ffi.Uint32 nColors,
  ffi.Uint64 targetFormat,
  ffi.Uint8 format_flag,
);

typedef _dart_ConvertMixedColors = int Function(
  ffi.Pointer<XcmsCCCRec> ccc,
  ffi.Pointer<XcmsColor> pColors_in_out,
  ffi.Pointer<XcmsColor> pWhitePt,
  int nColors,
  int targetFormat,
  int format_flag,
);

typedef _c___fpclassify = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___fpclassify = int Function(
  double __value,
);

typedef _c___signbit = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___signbit = int Function(
  double __value,
);

typedef _c___isinf = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___isinf = int Function(
  double __value,
);

typedef _c___finite = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___finite = int Function(
  double __value,
);

typedef _c___isnan = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___isnan = int Function(
  double __value,
);

typedef _c___iseqsig = ffi.Int32 Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___iseqsig = int Function(
  double __x,
  double __y,
);

typedef _c___issignaling = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart___issignaling = int Function(
  double __value,
);

typedef _c_acos = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_acos = double Function(
  double __x,
);

typedef _c___acos = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___acos = double Function(
  double __x,
);

typedef _c_asin = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_asin = double Function(
  double __x,
);

typedef _c___asin = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___asin = double Function(
  double __x,
);

typedef _c_atan = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_atan = double Function(
  double __x,
);

typedef _c___atan = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___atan = double Function(
  double __x,
);

typedef _c_atan2 = ffi.Double Function(
  ffi.Double __y,
  ffi.Double __x,
);

typedef _dart_atan2 = double Function(
  double __y,
  double __x,
);

typedef _c___atan2 = ffi.Double Function(
  ffi.Double __y,
  ffi.Double __x,
);

typedef _dart___atan2 = double Function(
  double __y,
  double __x,
);

typedef _c_cos = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_cos = double Function(
  double __x,
);

typedef _c___cos = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___cos = double Function(
  double __x,
);

typedef _c_sin = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_sin = double Function(
  double __x,
);

typedef _c___sin = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___sin = double Function(
  double __x,
);

typedef _c_tan = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_tan = double Function(
  double __x,
);

typedef _c___tan = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___tan = double Function(
  double __x,
);

typedef _c_cosh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_cosh = double Function(
  double __x,
);

typedef _c___cosh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___cosh = double Function(
  double __x,
);

typedef _c_sinh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_sinh = double Function(
  double __x,
);

typedef _c___sinh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___sinh = double Function(
  double __x,
);

typedef _c_tanh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_tanh = double Function(
  double __x,
);

typedef _c___tanh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___tanh = double Function(
  double __x,
);

typedef _c_acosh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_acosh = double Function(
  double __x,
);

typedef _c___acosh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___acosh = double Function(
  double __x,
);

typedef _c_asinh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_asinh = double Function(
  double __x,
);

typedef _c___asinh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___asinh = double Function(
  double __x,
);

typedef _c_atanh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_atanh = double Function(
  double __x,
);

typedef _c___atanh = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___atanh = double Function(
  double __x,
);

typedef _c_exp = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_exp = double Function(
  double __x,
);

typedef _c___exp = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___exp = double Function(
  double __x,
);

typedef _c_frexp = ffi.Double Function(
  ffi.Double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _dart_frexp = double Function(
  double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _c___frexp = ffi.Double Function(
  ffi.Double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _dart___frexp = double Function(
  double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _c_ldexp = ffi.Double Function(
  ffi.Double __x,
  ffi.Int32 __exponent,
);

typedef _dart_ldexp = double Function(
  double __x,
  int __exponent,
);

typedef _c___ldexp = ffi.Double Function(
  ffi.Double __x,
  ffi.Int32 __exponent,
);

typedef _dart___ldexp = double Function(
  double __x,
  int __exponent,
);

typedef _c_log = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_log = double Function(
  double __x,
);

typedef _c___log = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___log = double Function(
  double __x,
);

typedef _c_log10 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_log10 = double Function(
  double __x,
);

typedef _c___log10 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___log10 = double Function(
  double __x,
);

typedef _c_modf = ffi.Double Function(
  ffi.Double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

typedef _dart_modf = double Function(
  double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

typedef _c___modf = ffi.Double Function(
  ffi.Double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

typedef _dart___modf = double Function(
  double __x,
  ffi.Pointer<ffi.Double> __iptr,
);

typedef _c_expm1 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_expm1 = double Function(
  double __x,
);

typedef _c___expm1 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___expm1 = double Function(
  double __x,
);

typedef _c_log1p = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_log1p = double Function(
  double __x,
);

typedef _c___log1p = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___log1p = double Function(
  double __x,
);

typedef _c_logb = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_logb = double Function(
  double __x,
);

typedef _c___logb = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___logb = double Function(
  double __x,
);

typedef _c_exp2 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_exp2 = double Function(
  double __x,
);

typedef _c___exp2 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___exp2 = double Function(
  double __x,
);

typedef _c_log2 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_log2 = double Function(
  double __x,
);

typedef _c___log2 = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___log2 = double Function(
  double __x,
);

typedef _c_pow = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_pow = double Function(
  double __x,
  double __y,
);

typedef _c___pow = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___pow = double Function(
  double __x,
  double __y,
);

typedef _c_sqrt = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_sqrt = double Function(
  double __x,
);

typedef _c___sqrt = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___sqrt = double Function(
  double __x,
);

typedef _c_hypot = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_hypot = double Function(
  double __x,
  double __y,
);

typedef _c___hypot = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___hypot = double Function(
  double __x,
  double __y,
);

typedef _c_cbrt = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_cbrt = double Function(
  double __x,
);

typedef _c___cbrt = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___cbrt = double Function(
  double __x,
);

typedef _c_ceil = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_ceil = double Function(
  double __x,
);

typedef _c___ceil = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___ceil = double Function(
  double __x,
);

typedef _c_fabs = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_fabs = double Function(
  double __x,
);

typedef _c___fabs = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___fabs = double Function(
  double __x,
);

typedef _c_floor = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_floor = double Function(
  double __x,
);

typedef _c___floor = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___floor = double Function(
  double __x,
);

typedef _c_fmod = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_fmod = double Function(
  double __x,
  double __y,
);

typedef _c___fmod = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___fmod = double Function(
  double __x,
  double __y,
);

typedef _c_isinf = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart_isinf = int Function(
  double __value,
);

typedef _c_finite = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart_finite = int Function(
  double __value,
);

typedef _c_drem = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_drem = double Function(
  double __x,
  double __y,
);

typedef _c___drem = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___drem = double Function(
  double __x,
  double __y,
);

typedef _c_significand = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_significand = double Function(
  double __x,
);

typedef _c___significand = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___significand = double Function(
  double __x,
);

typedef _c_copysign = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_copysign = double Function(
  double __x,
  double __y,
);

typedef _c___copysign = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___copysign = double Function(
  double __x,
  double __y,
);

typedef _c_nan = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _dart_nan = double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _c___nan = ffi.Double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _dart___nan = double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _c_isnan = ffi.Int32 Function(
  ffi.Double __value,
);

typedef _dart_isnan = int Function(
  double __value,
);

typedef _c_j0 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_j0 = double Function(
  double arg0,
);

typedef _c___j0 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___j0 = double Function(
  double arg0,
);

typedef _c_j1 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_j1 = double Function(
  double arg0,
);

typedef _c___j1 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___j1 = double Function(
  double arg0,
);

typedef _c_jn = ffi.Double Function(
  ffi.Int32 arg0,
  ffi.Double arg1,
);

typedef _dart_jn = double Function(
  int arg0,
  double arg1,
);

typedef _c___jn = ffi.Double Function(
  ffi.Int32 arg0,
  ffi.Double arg1,
);

typedef _dart___jn = double Function(
  int arg0,
  double arg1,
);

typedef _c_y0 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_y0 = double Function(
  double arg0,
);

typedef _c___y0 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___y0 = double Function(
  double arg0,
);

typedef _c_y1 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_y1 = double Function(
  double arg0,
);

typedef _c___y1 = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___y1 = double Function(
  double arg0,
);

typedef _c_yn = ffi.Double Function(
  ffi.Int32 arg0,
  ffi.Double arg1,
);

typedef _dart_yn = double Function(
  int arg0,
  double arg1,
);

typedef _c___yn = ffi.Double Function(
  ffi.Int32 arg0,
  ffi.Double arg1,
);

typedef _dart___yn = double Function(
  int arg0,
  double arg1,
);

typedef _c_erf = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_erf = double Function(
  double arg0,
);

typedef _c___erf = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___erf = double Function(
  double arg0,
);

typedef _c_erfc = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_erfc = double Function(
  double arg0,
);

typedef _c___erfc = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___erfc = double Function(
  double arg0,
);

typedef _c_lgamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_lgamma = double Function(
  double arg0,
);

typedef _c___lgamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___lgamma = double Function(
  double arg0,
);

typedef _c_tgamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_tgamma = double Function(
  double arg0,
);

typedef _c___tgamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___tgamma = double Function(
  double arg0,
);

typedef _c_gamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart_gamma = double Function(
  double arg0,
);

typedef _c___gamma = ffi.Double Function(
  ffi.Double arg0,
);

typedef _dart___gamma = double Function(
  double arg0,
);

typedef _c_lgamma_r = ffi.Double Function(
  ffi.Double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _dart_lgamma_r = double Function(
  double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _c___lgamma_r = ffi.Double Function(
  ffi.Double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _dart___lgamma_r = double Function(
  double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _c_rint = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_rint = double Function(
  double __x,
);

typedef _c___rint = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___rint = double Function(
  double __x,
);

typedef _c_nextafter = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_nextafter = double Function(
  double __x,
  double __y,
);

typedef _c___nextafter = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___nextafter = double Function(
  double __x,
  double __y,
);

typedef _c_remainder = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_remainder = double Function(
  double __x,
  double __y,
);

typedef _c___remainder = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___remainder = double Function(
  double __x,
  double __y,
);

typedef _c_scalbn = ffi.Double Function(
  ffi.Double __x,
  ffi.Int32 __n,
);

typedef _dart_scalbn = double Function(
  double __x,
  int __n,
);

typedef _c___scalbn = ffi.Double Function(
  ffi.Double __x,
  ffi.Int32 __n,
);

typedef _dart___scalbn = double Function(
  double __x,
  int __n,
);

typedef _c_ilogb = ffi.Int32 Function(
  ffi.Double __x,
);

typedef _dart_ilogb = int Function(
  double __x,
);

typedef _c___ilogb = ffi.Int32 Function(
  ffi.Double __x,
);

typedef _dart___ilogb = int Function(
  double __x,
);

typedef _c_scalbln = ffi.Double Function(
  ffi.Double __x,
  ffi.Int64 __n,
);

typedef _dart_scalbln = double Function(
  double __x,
  int __n,
);

typedef _c___scalbln = ffi.Double Function(
  ffi.Double __x,
  ffi.Int64 __n,
);

typedef _dart___scalbln = double Function(
  double __x,
  int __n,
);

typedef _c_nearbyint = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_nearbyint = double Function(
  double __x,
);

typedef _c___nearbyint = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___nearbyint = double Function(
  double __x,
);

typedef _c_round = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_round = double Function(
  double __x,
);

typedef _c___round = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___round = double Function(
  double __x,
);

typedef _c_trunc = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart_trunc = double Function(
  double __x,
);

typedef _c___trunc = ffi.Double Function(
  ffi.Double __x,
);

typedef _dart___trunc = double Function(
  double __x,
);

typedef _c_remquo = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _dart_remquo = double Function(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _c___remquo = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _dart___remquo = double Function(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _c_lrint = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart_lrint = int Function(
  double __x,
);

typedef _c___lrint = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart___lrint = int Function(
  double __x,
);

typedef _c_llrint = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart_llrint = int Function(
  double __x,
);

typedef _c___llrint = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart___llrint = int Function(
  double __x,
);

typedef _c_lround = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart_lround = int Function(
  double __x,
);

typedef _c___lround = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart___lround = int Function(
  double __x,
);

typedef _c_llround = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart_llround = int Function(
  double __x,
);

typedef _c___llround = ffi.Int64 Function(
  ffi.Double __x,
);

typedef _dart___llround = int Function(
  double __x,
);

typedef _c_fdim = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_fdim = double Function(
  double __x,
  double __y,
);

typedef _c___fdim = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___fdim = double Function(
  double __x,
  double __y,
);

typedef _c_fmax = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_fmax = double Function(
  double __x,
  double __y,
);

typedef _c___fmax = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___fmax = double Function(
  double __x,
  double __y,
);

typedef _c_fmin = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart_fmin = double Function(
  double __x,
  double __y,
);

typedef _c___fmin = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
);

typedef _dart___fmin = double Function(
  double __x,
  double __y,
);

typedef _c_fma = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
  ffi.Double __z,
);

typedef _dart_fma = double Function(
  double __x,
  double __y,
  double __z,
);

typedef _c___fma = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __y,
  ffi.Double __z,
);

typedef _dart___fma = double Function(
  double __x,
  double __y,
  double __z,
);

typedef _c_scalb = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __n,
);

typedef _dart_scalb = double Function(
  double __x,
  double __n,
);

typedef _c___scalb = ffi.Double Function(
  ffi.Double __x,
  ffi.Double __n,
);

typedef _dart___scalb = double Function(
  double __x,
  double __n,
);

typedef _c___fpclassifyf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___fpclassifyf = int Function(
  double __value,
);

typedef _c___signbitf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___signbitf = int Function(
  double __value,
);

typedef _c___isinff = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___isinff = int Function(
  double __value,
);

typedef _c___finitef = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___finitef = int Function(
  double __value,
);

typedef _c___isnanf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___isnanf = int Function(
  double __value,
);

typedef _c___iseqsigf = ffi.Int32 Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___iseqsigf = int Function(
  double __x,
  double __y,
);

typedef _c___issignalingf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart___issignalingf = int Function(
  double __value,
);

typedef _c_acosf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_acosf = double Function(
  double __x,
);

typedef _c___acosf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___acosf = double Function(
  double __x,
);

typedef _c_asinf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_asinf = double Function(
  double __x,
);

typedef _c___asinf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___asinf = double Function(
  double __x,
);

typedef _c_atanf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_atanf = double Function(
  double __x,
);

typedef _c___atanf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___atanf = double Function(
  double __x,
);

typedef _c_atan2f = ffi.Float Function(
  ffi.Float __y,
  ffi.Float __x,
);

typedef _dart_atan2f = double Function(
  double __y,
  double __x,
);

typedef _c___atan2f = ffi.Float Function(
  ffi.Float __y,
  ffi.Float __x,
);

typedef _dart___atan2f = double Function(
  double __y,
  double __x,
);

typedef _c_cosf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_cosf = double Function(
  double __x,
);

typedef _c___cosf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___cosf = double Function(
  double __x,
);

typedef _c_sinf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_sinf = double Function(
  double __x,
);

typedef _c___sinf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___sinf = double Function(
  double __x,
);

typedef _c_tanf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_tanf = double Function(
  double __x,
);

typedef _c___tanf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___tanf = double Function(
  double __x,
);

typedef _c_coshf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_coshf = double Function(
  double __x,
);

typedef _c___coshf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___coshf = double Function(
  double __x,
);

typedef _c_sinhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_sinhf = double Function(
  double __x,
);

typedef _c___sinhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___sinhf = double Function(
  double __x,
);

typedef _c_tanhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_tanhf = double Function(
  double __x,
);

typedef _c___tanhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___tanhf = double Function(
  double __x,
);

typedef _c_acoshf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_acoshf = double Function(
  double __x,
);

typedef _c___acoshf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___acoshf = double Function(
  double __x,
);

typedef _c_asinhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_asinhf = double Function(
  double __x,
);

typedef _c___asinhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___asinhf = double Function(
  double __x,
);

typedef _c_atanhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_atanhf = double Function(
  double __x,
);

typedef _c___atanhf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___atanhf = double Function(
  double __x,
);

typedef _c_expf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_expf = double Function(
  double __x,
);

typedef _c___expf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___expf = double Function(
  double __x,
);

typedef _c_frexpf = ffi.Float Function(
  ffi.Float __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _dart_frexpf = double Function(
  double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _c___frexpf = ffi.Float Function(
  ffi.Float __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _dart___frexpf = double Function(
  double __x,
  ffi.Pointer<ffi.Int32> __exponent,
);

typedef _c_ldexpf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int32 __exponent,
);

typedef _dart_ldexpf = double Function(
  double __x,
  int __exponent,
);

typedef _c___ldexpf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int32 __exponent,
);

typedef _dart___ldexpf = double Function(
  double __x,
  int __exponent,
);

typedef _c_logf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_logf = double Function(
  double __x,
);

typedef _c___logf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___logf = double Function(
  double __x,
);

typedef _c_log10f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_log10f = double Function(
  double __x,
);

typedef _c___log10f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___log10f = double Function(
  double __x,
);

typedef _c_modff = ffi.Float Function(
  ffi.Float __x,
  ffi.Pointer<ffi.Float> __iptr,
);

typedef _dart_modff = double Function(
  double __x,
  ffi.Pointer<ffi.Float> __iptr,
);

typedef _c___modff = ffi.Float Function(
  ffi.Float __x,
  ffi.Pointer<ffi.Float> __iptr,
);

typedef _dart___modff = double Function(
  double __x,
  ffi.Pointer<ffi.Float> __iptr,
);

typedef _c_expm1f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_expm1f = double Function(
  double __x,
);

typedef _c___expm1f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___expm1f = double Function(
  double __x,
);

typedef _c_log1pf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_log1pf = double Function(
  double __x,
);

typedef _c___log1pf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___log1pf = double Function(
  double __x,
);

typedef _c_logbf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_logbf = double Function(
  double __x,
);

typedef _c___logbf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___logbf = double Function(
  double __x,
);

typedef _c_exp2f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_exp2f = double Function(
  double __x,
);

typedef _c___exp2f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___exp2f = double Function(
  double __x,
);

typedef _c_log2f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_log2f = double Function(
  double __x,
);

typedef _c___log2f = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___log2f = double Function(
  double __x,
);

typedef _c_powf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_powf = double Function(
  double __x,
  double __y,
);

typedef _c___powf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___powf = double Function(
  double __x,
  double __y,
);

typedef _c_sqrtf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_sqrtf = double Function(
  double __x,
);

typedef _c___sqrtf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___sqrtf = double Function(
  double __x,
);

typedef _c_hypotf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_hypotf = double Function(
  double __x,
  double __y,
);

typedef _c___hypotf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___hypotf = double Function(
  double __x,
  double __y,
);

typedef _c_cbrtf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_cbrtf = double Function(
  double __x,
);

typedef _c___cbrtf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___cbrtf = double Function(
  double __x,
);

typedef _c_ceilf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_ceilf = double Function(
  double __x,
);

typedef _c___ceilf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___ceilf = double Function(
  double __x,
);

typedef _c_fabsf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_fabsf = double Function(
  double __x,
);

typedef _c___fabsf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___fabsf = double Function(
  double __x,
);

typedef _c_floorf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_floorf = double Function(
  double __x,
);

typedef _c___floorf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___floorf = double Function(
  double __x,
);

typedef _c_fmodf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_fmodf = double Function(
  double __x,
  double __y,
);

typedef _c___fmodf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___fmodf = double Function(
  double __x,
  double __y,
);

typedef _c_isinff = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart_isinff = int Function(
  double __value,
);

typedef _c_finitef = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart_finitef = int Function(
  double __value,
);

typedef _c_dremf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_dremf = double Function(
  double __x,
  double __y,
);

typedef _c___dremf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___dremf = double Function(
  double __x,
  double __y,
);

typedef _c_significandf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_significandf = double Function(
  double __x,
);

typedef _c___significandf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___significandf = double Function(
  double __x,
);

typedef _c_copysignf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_copysignf = double Function(
  double __x,
  double __y,
);

typedef _c___copysignf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___copysignf = double Function(
  double __x,
  double __y,
);

typedef _c_nanf = ffi.Float Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _dart_nanf = double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _c___nanf = ffi.Float Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _dart___nanf = double Function(
  ffi.Pointer<ffi.Int8> __tagb,
);

typedef _c_isnanf = ffi.Int32 Function(
  ffi.Float __value,
);

typedef _dart_isnanf = int Function(
  double __value,
);

typedef _c_j0f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_j0f = double Function(
  double arg0,
);

typedef _c___j0f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___j0f = double Function(
  double arg0,
);

typedef _c_j1f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_j1f = double Function(
  double arg0,
);

typedef _c___j1f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___j1f = double Function(
  double arg0,
);

typedef _c_jnf = ffi.Float Function(
  ffi.Int32 arg0,
  ffi.Float arg1,
);

typedef _dart_jnf = double Function(
  int arg0,
  double arg1,
);

typedef _c___jnf = ffi.Float Function(
  ffi.Int32 arg0,
  ffi.Float arg1,
);

typedef _dart___jnf = double Function(
  int arg0,
  double arg1,
);

typedef _c_y0f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_y0f = double Function(
  double arg0,
);

typedef _c___y0f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___y0f = double Function(
  double arg0,
);

typedef _c_y1f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_y1f = double Function(
  double arg0,
);

typedef _c___y1f = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___y1f = double Function(
  double arg0,
);

typedef _c_ynf = ffi.Float Function(
  ffi.Int32 arg0,
  ffi.Float arg1,
);

typedef _dart_ynf = double Function(
  int arg0,
  double arg1,
);

typedef _c___ynf = ffi.Float Function(
  ffi.Int32 arg0,
  ffi.Float arg1,
);

typedef _dart___ynf = double Function(
  int arg0,
  double arg1,
);

typedef _c_erff = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_erff = double Function(
  double arg0,
);

typedef _c___erff = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___erff = double Function(
  double arg0,
);

typedef _c_erfcf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_erfcf = double Function(
  double arg0,
);

typedef _c___erfcf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___erfcf = double Function(
  double arg0,
);

typedef _c_lgammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_lgammaf = double Function(
  double arg0,
);

typedef _c___lgammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___lgammaf = double Function(
  double arg0,
);

typedef _c_tgammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_tgammaf = double Function(
  double arg0,
);

typedef _c___tgammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___tgammaf = double Function(
  double arg0,
);

typedef _c_gammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart_gammaf = double Function(
  double arg0,
);

typedef _c___gammaf = ffi.Float Function(
  ffi.Float arg0,
);

typedef _dart___gammaf = double Function(
  double arg0,
);

typedef _c_lgammaf_r = ffi.Float Function(
  ffi.Float arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _dart_lgammaf_r = double Function(
  double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _c___lgammaf_r = ffi.Float Function(
  ffi.Float arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _dart___lgammaf_r = double Function(
  double arg0,
  ffi.Pointer<ffi.Int32> __signgamp,
);

typedef _c_rintf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_rintf = double Function(
  double __x,
);

typedef _c___rintf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___rintf = double Function(
  double __x,
);

typedef _c_nextafterf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_nextafterf = double Function(
  double __x,
  double __y,
);

typedef _c___nextafterf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___nextafterf = double Function(
  double __x,
  double __y,
);

typedef _c_remainderf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_remainderf = double Function(
  double __x,
  double __y,
);

typedef _c___remainderf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___remainderf = double Function(
  double __x,
  double __y,
);

typedef _c_scalbnf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int32 __n,
);

typedef _dart_scalbnf = double Function(
  double __x,
  int __n,
);

typedef _c___scalbnf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int32 __n,
);

typedef _dart___scalbnf = double Function(
  double __x,
  int __n,
);

typedef _c_ilogbf = ffi.Int32 Function(
  ffi.Float __x,
);

typedef _dart_ilogbf = int Function(
  double __x,
);

typedef _c___ilogbf = ffi.Int32 Function(
  ffi.Float __x,
);

typedef _dart___ilogbf = int Function(
  double __x,
);

typedef _c_scalblnf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int64 __n,
);

typedef _dart_scalblnf = double Function(
  double __x,
  int __n,
);

typedef _c___scalblnf = ffi.Float Function(
  ffi.Float __x,
  ffi.Int64 __n,
);

typedef _dart___scalblnf = double Function(
  double __x,
  int __n,
);

typedef _c_nearbyintf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_nearbyintf = double Function(
  double __x,
);

typedef _c___nearbyintf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___nearbyintf = double Function(
  double __x,
);

typedef _c_roundf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_roundf = double Function(
  double __x,
);

typedef _c___roundf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___roundf = double Function(
  double __x,
);

typedef _c_truncf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart_truncf = double Function(
  double __x,
);

typedef _c___truncf = ffi.Float Function(
  ffi.Float __x,
);

typedef _dart___truncf = double Function(
  double __x,
);

typedef _c_remquof = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _dart_remquof = double Function(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _c___remquof = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _dart___remquof = double Function(
  double __x,
  double __y,
  ffi.Pointer<ffi.Int32> __quo,
);

typedef _c_lrintf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart_lrintf = int Function(
  double __x,
);

typedef _c___lrintf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart___lrintf = int Function(
  double __x,
);

typedef _c_llrintf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart_llrintf = int Function(
  double __x,
);

typedef _c___llrintf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart___llrintf = int Function(
  double __x,
);

typedef _c_lroundf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart_lroundf = int Function(
  double __x,
);

typedef _c___lroundf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart___lroundf = int Function(
  double __x,
);

typedef _c_llroundf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart_llroundf = int Function(
  double __x,
);

typedef _c___llroundf = ffi.Int64 Function(
  ffi.Float __x,
);

typedef _dart___llroundf = int Function(
  double __x,
);

typedef _c_fdimf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_fdimf = double Function(
  double __x,
  double __y,
);

typedef _c___fdimf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___fdimf = double Function(
  double __x,
  double __y,
);

typedef _c_fmaxf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_fmaxf = double Function(
  double __x,
  double __y,
);

typedef _c___fmaxf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___fmaxf = double Function(
  double __x,
  double __y,
);

typedef _c_fminf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart_fminf = double Function(
  double __x,
  double __y,
);

typedef _c___fminf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
);

typedef _dart___fminf = double Function(
  double __x,
  double __y,
);

typedef _c_fmaf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
  ffi.Float __z,
);

typedef _dart_fmaf = double Function(
  double __x,
  double __y,
  double __z,
);

typedef _c___fmaf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __y,
  ffi.Float __z,
);

typedef _dart___fmaf = double Function(
  double __x,
  double __y,
  double __z,
);

typedef _c_scalbf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __n,
);

typedef _dart_scalbf = double Function(
  double __x,
  double __n,
);

typedef _c___scalbf = ffi.Float Function(
  ffi.Float __x,
  ffi.Float __n,
);

typedef _dart___scalbf = double Function(
  double __x,
  double __n,
);

typedef _c_TekHVC_ParseString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_TekHVC_ParseString = int Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_XcmsTekHVC_ValidSpec = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_XcmsTekHVC_ValidSpec = int Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_ThetaOffset = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> pWhitePt,
  ffi.Pointer<ffi.Double> pThetaOffset,
);

typedef _dart_ThetaOffset = int Function(
  ffi.Pointer<XcmsColor> pWhitePt,
  ffi.Pointer<ffi.Double> pThetaOffset,
);

typedef _c_CIELab_ParseString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_CIELab_ParseString = int Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_XcmsCIELab_ValidSpec = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_XcmsCIELab_ValidSpec = int Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_LINEAR_RGB_FreeSCCData = ffi.Void Function(
  ffi.Pointer<ffi.Int8> pScreenDataTemp,
);

typedef _dart_LINEAR_RGB_FreeSCCData = void Function(
  ffi.Pointer<ffi.Int8> pScreenDataTemp,
);

typedef _c_LINEAR_RGB_InitSCCData = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Int32 screenNumber,
  ffi.Pointer<XcmsPerScrnInfo> pPerScrnInfo,
);

typedef _dart_LINEAR_RGB_InitSCCData = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int screenNumber,
  ffi.Pointer<XcmsPerScrnInfo> pPerScrnInfo,
);

typedef _c_XcmsLRGB_RGB_ParseString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_XcmsLRGB_RGB_ParseString = int Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_XcmsLRGB_RGBi_ParseString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_XcmsLRGB_RGBi_ParseString = int Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c__XcmsGetTableType0 = ffi.Int32 Function(
  ffi.Pointer<IntensityTbl> pTbl,
  ffi.Int32 format,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pChar,
  ffi.Pointer<ffi.Uint64> pCount,
);

typedef _dart__XcmsGetTableType0 = int Function(
  ffi.Pointer<IntensityTbl> pTbl,
  int format,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pChar,
  ffi.Pointer<ffi.Uint64> pCount,
);

typedef _c__XcmsGetTableType1 = ffi.Int32 Function(
  ffi.Pointer<IntensityTbl> pTbl,
  ffi.Int32 format,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pChar,
  ffi.Pointer<ffi.Uint64> pCount,
);

typedef _dart__XcmsGetTableType1 = int Function(
  ffi.Pointer<IntensityTbl> pTbl,
  int format,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> pChar,
  ffi.Pointer<ffi.Uint64> pCount,
);

typedef _c__XcmsValueCmp = ffi.Int32 Function(
  ffi.Pointer<IntensityRec> p1,
  ffi.Pointer<IntensityRec> p2,
);

typedef _dart__XcmsValueCmp = int Function(
  ffi.Pointer<IntensityRec> p1,
  ffi.Pointer<IntensityRec> p2,
);

typedef _c__XcmsIntensityCmp = ffi.Int32 Function(
  ffi.Pointer<IntensityRec> p1,
  ffi.Pointer<IntensityRec> p2,
);

typedef _dart__XcmsIntensityCmp = int Function(
  ffi.Pointer<IntensityRec> p1,
  ffi.Pointer<IntensityRec> p2,
);

typedef _c__XcmsValueInterpolation = ffi.Int32 Function(
  ffi.Pointer<IntensityRec> key,
  ffi.Pointer<IntensityRec> lo,
  ffi.Pointer<IntensityRec> hi,
  ffi.Pointer<IntensityRec> answer,
  ffi.Int32 bitsPerRGB,
);

typedef _dart__XcmsValueInterpolation = int Function(
  ffi.Pointer<IntensityRec> key,
  ffi.Pointer<IntensityRec> lo,
  ffi.Pointer<IntensityRec> hi,
  ffi.Pointer<IntensityRec> answer,
  int bitsPerRGB,
);

typedef _c__XcmsIntensityInterpolation = ffi.Int32 Function(
  ffi.Pointer<IntensityRec> key,
  ffi.Pointer<IntensityRec> lo,
  ffi.Pointer<IntensityRec> hi,
  ffi.Pointer<IntensityRec> answer,
  ffi.Int32 bitsPerRGB,
);

typedef _dart__XcmsIntensityInterpolation = int Function(
  ffi.Pointer<IntensityRec> key,
  ffi.Pointer<IntensityRec> lo,
  ffi.Pointer<IntensityRec> hi,
  ffi.Pointer<IntensityRec> answer,
  int bitsPerRGB,
);

typedef _typedefC_98 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_99 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _c__XcmsTableSearch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> key,
  ffi.Int32 bitsPerRGB,
  ffi.Pointer<ffi.Int8> base,
  ffi.Uint32 nel,
  ffi.Uint32 nKeyPtrSize,
  ffi.Pointer<ffi.NativeFunction<_typedefC_98>> compar,
  ffi.Pointer<ffi.NativeFunction<_typedefC_99>> interpol,
  ffi.Pointer<ffi.Int8> answer,
);

typedef _dart__XcmsTableSearch = int Function(
  ffi.Pointer<ffi.Int8> key,
  int bitsPerRGB,
  ffi.Pointer<ffi.Int8> base,
  int nel,
  int nKeyPtrSize,
  ffi.Pointer<ffi.NativeFunction<_typedefC_98>> compar,
  ffi.Pointer<ffi.NativeFunction<_typedefC_99>> interpol,
  ffi.Pointer<ffi.Int8> answer,
);

typedef _c__XcmsMatVec = ffi.Void Function(
  ffi.Pointer<ffi.Double> pMat,
  ffi.Pointer<ffi.Double> pIn,
  ffi.Pointer<ffi.Double> pOut,
);

typedef _dart__XcmsMatVec = void Function(
  ffi.Pointer<ffi.Double> pMat,
  ffi.Pointer<ffi.Double> pIn,
  ffi.Pointer<ffi.Double> pOut,
);

typedef _c_CIELuv_ParseString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_CIELuv_ParseString = int Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_XcmsCIELuv_ValidSpec = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_XcmsCIELuv_ValidSpec = int Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_DummyParseStringProc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<XcmsColor> arg1,
);

typedef _dart_DummyParseStringProc = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<XcmsColor> arg1,
);

typedef _c_ReturnZero = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_ReturnZero = int Function(
  ffi.Pointer<XcmsCCCRec> arg0,
  ffi.Pointer<XcmsColor> arg1,
  ffi.Pointer<XcmsColor> arg2,
  int arg3,
);

typedef _c_CIEuvY_ParseString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_CIEuvY_ParseString = int Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_CIExyY_ParseString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_CIExyY_ParseString = int Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_XcmsCIExyY_ValidSpec = ffi.Int32 Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_XcmsCIExyY_ValidSpec = int Function(
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c_CIEXYZ_ParseString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _dart_CIEXYZ_ParseString = int Function(
  ffi.Pointer<ffi.Int8> spec,
  ffi.Pointer<XcmsColor> pColor,
);

typedef _c__XkbReloadDpy = ffi.Void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _dart__XkbReloadDpy = void Function(
  ffi.Pointer<_XDisplay> arg0,
);

typedef _c__XKeycodeToKeysym = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint8 arg1,
  ffi.Int32 arg2,
);

typedef _dart__XKeycodeToKeysym = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
  int arg2,
);

typedef _c__XKeysymToKeycode = ffi.Uint8 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Uint64 arg1,
);

typedef _dart__XKeysymToKeycode = int Function(
  ffi.Pointer<_XDisplay> arg0,
  int arg1,
);

typedef _c__XLookupKeysym = ffi.Uint64 Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XLookupKeysym = int Function(
  ffi.Pointer<XKeyEvent> arg0,
  int arg1,
);

typedef _c__XRefreshKeyboardMapping = ffi.Int32 Function(
  ffi.Pointer<XMappingEvent> arg0,
);

typedef _dart__XRefreshKeyboardMapping = int Function(
  ffi.Pointer<XMappingEvent> arg0,
);

typedef _c__XLookupString = ffi.Int32 Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<XComposeStatus> arg4,
);

typedef _dart__XLookupString = int Function(
  ffi.Pointer<XKeyEvent> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Uint64> arg3,
  ffi.Pointer<XComposeStatus> arg4,
);

typedef _c__XkbNoteCoreMapChanges = ffi.Void Function(
  ffi.Pointer<XkbMapChangesPtr> arg0,
  ffi.Pointer<XMappingEvent> arg1,
  ffi.Uint32 arg2,
);

typedef _dart__XkbNoteCoreMapChanges = void Function(
  ffi.Pointer<XkbMapChangesPtr> arg0,
  ffi.Pointer<XMappingEvent> arg1,
  int arg2,
);

typedef _c__XkbInitReadBuffer = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbReadBufferPtr> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XkbInitReadBuffer = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<XkbReadBufferPtr> arg1,
  int arg2,
);

typedef _c__XkbSkipReadBufferData = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XkbSkipReadBufferData = int Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  int arg1,
);

typedef _c__XkbCopyFromReadBuffer = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XkbCopyFromReadBuffer = int Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XkbReadCopyData32 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XkbReadCopyData32 = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
  int arg2,
);

typedef _c__XkbWriteCopyData32 = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XkbWriteCopyData32 = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  int arg2,
);

typedef _c__XkbReadBufferCopy32 = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Pointer<ffi.Int64> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XkbReadBufferCopy32 = int Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Pointer<ffi.Int64> arg1,
  int arg2,
);

typedef _c__XkbReadCopyKeySyms = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XkbReadCopyKeySyms = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
);

typedef _c__XkbWriteCopyKeySyms = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XkbWriteCopyKeySyms = int Function(
  ffi.Pointer<ffi.Uint64> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  int arg2,
);

typedef _c__XkbReadBufferCopyKeySyms = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XkbReadBufferCopyKeySyms = int Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  int arg2,
);

typedef _c__XkbPeekAtReadBuffer = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XkbPeekAtReadBuffer = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  int arg1,
);

typedef _c__XkbGetReadBufferPtr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XkbGetReadBufferPtr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  int arg1,
);

typedef _c__XkbFreeReadBuffer = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
);

typedef _dart__XkbFreeReadBuffer = int Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
);

typedef _c__XkbGetReadBufferCountedString = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart__XkbGetReadBufferCountedString = int Function(
  ffi.Pointer<XkbReadBufferPtr> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c__XkbGetCharset = ffi.Pointer<ffi.Int8> Function();

typedef _dart__XkbGetCharset = ffi.Pointer<ffi.Int8> Function();

typedef _c__XkbGetConverters = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<XkbConverters> arg1,
);

typedef _dart__XkbGetConverters = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<XkbConverters> arg1,
);

typedef _c_XkbAddGeomProperty = ffi.Pointer<XkbPropertyPtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_XkbAddGeomProperty = ffi.Pointer<XkbPropertyPtr> Function(
  ffi.Pointer<_XkbGeometry> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c__XkbLoadDpy = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XkbLoadDpy = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XkbComputeModmap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XkbComputeModmap = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_XkbTranslateKey = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint8 key,
  ffi.Uint32 mods,
  ffi.Pointer<ffi.Uint32> mods_rtrn,
  ffi.Pointer<ffi.Uint64> keysym_rtrn,
);

typedef _dart_XkbTranslateKey = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int key,
  int mods,
  ffi.Pointer<ffi.Uint32> mods_rtrn,
  ffi.Pointer<ffi.Uint64> keysym_rtrn,
);

typedef _c__XkbReadGetMapReply = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetMapReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__XkbReadGetMapReply = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetMapReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c__XkbReadGetCompatMapReply = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetCompatMapReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__XkbReadGetCompatMapReply = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetCompatMapReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c__XkbReadGetIndicatorMapReply = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetIndicatorMapReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__XkbReadGetIndicatorMapReply = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetIndicatorMapReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c__XkbReadGetNamesReply = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetNamesReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__XkbReadGetNamesReply = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetNamesReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c__XkbReadGetGeometryReply = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetGeometryReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart__XkbReadGetGeometryReply = int Function(
  ffi.Pointer<_XDisplay> arg0,
  ffi.Pointer<xkbGetGeometryReply> arg1,
  ffi.Pointer<XkbDescPtr> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c__XkbWriteSetCompatMap = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xkbSetCompatMapReq> req,
  ffi.Pointer<XkbDescPtr> xkb,
);

typedef _dart__XkbWriteSetCompatMap = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xkbSetCompatMapReq> req,
  ffi.Pointer<XkbDescPtr> xkb,
);

typedef _c__XkbGetSetControlsReq = ffi.Pointer<xkbSetControlsReq> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbInfoPtr> xkbi,
  ffi.Uint32 deviceSpec,
);

typedef _dart__XkbGetSetControlsReq = ffi.Pointer<xkbSetControlsReq> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbInfoPtr> xkbi,
  int deviceSpec,
);

typedef _c__XkbHandleSpecialSym = ffi.Int32 Function(
  ffi.Uint64 keysym,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 nbytes,
  ffi.Pointer<ffi.Int32> extra_rtrn,
);

typedef _dart__XkbHandleSpecialSym = int Function(
  int keysym,
  ffi.Pointer<ffi.Int8> buffer,
  int nbytes,
  ffi.Pointer<ffi.Int32> extra_rtrn,
);

typedef _c__XkbKSToKnownSet = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> priv,
  ffi.Uint64 keysym,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 nbytes,
  ffi.Pointer<ffi.Int32> extra_rtrn,
);

typedef _dart__XkbKSToKnownSet = int Function(
  ffi.Pointer<ffi.Int8> priv,
  int keysym,
  ffi.Pointer<ffi.Int8> buffer,
  int nbytes,
  ffi.Pointer<ffi.Int32> extra_rtrn,
);

typedef _c__XkbKnownSetToKS = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> priv,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Int32 nbytes,
  ffi.Pointer<ffi.Int32> status,
);

typedef _dart__XkbKnownSetToKS = int Function(
  ffi.Pointer<ffi.Int8> priv,
  ffi.Pointer<ffi.Int8> buffer,
  int nbytes,
  ffi.Pointer<ffi.Int32> status,
);

typedef _c___XkbDefaultToUpper = ffi.Uint64 Function(
  ffi.Uint64 sym,
);

typedef _dart___XkbDefaultToUpper = int Function(
  int sym,
);

typedef _c__XkbReadDeviceLedInfo = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Uint32 present,
  ffi.Pointer<XkbDeviceInfoPtr> devi,
);

typedef _dart__XkbReadDeviceLedInfo = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  int present,
  ffi.Pointer<XkbDeviceInfoPtr> devi,
);

typedef _c__XkbReadGetDeviceInfoReply = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xkbGetDeviceInfoReply> rep,
  ffi.Pointer<XkbDeviceInfoPtr> devi,
);

typedef _dart__XkbReadGetDeviceInfoReply = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<xkbGetDeviceInfoReply> rep,
  ffi.Pointer<XkbDeviceInfoPtr> devi,
);

typedef _c__InitLedStuff = ffi.Void Function(
  ffi.Pointer<SetLedStuff> stuff,
  ffi.Uint32 wanted,
  ffi.Pointer<XkbDeviceInfoPtr> devi,
);

typedef _dart__InitLedStuff = void Function(
  ffi.Pointer<SetLedStuff> stuff,
  int wanted,
  ffi.Pointer<XkbDeviceInfoPtr> devi,
);

typedef _c__FreeLedStuff = ffi.Void Function(
  ffi.Pointer<SetLedStuff> stuff,
);

typedef _dart__FreeLedStuff = void Function(
  ffi.Pointer<SetLedStuff> stuff,
);

typedef _c__XkbSizeLedInfo = ffi.Int32 Function(
  ffi.Uint32 changed,
  ffi.Pointer<XkbDeviceLedInfoPtr> devli,
);

typedef _dart__XkbSizeLedInfo = int Function(
  int changed,
  ffi.Pointer<XkbDeviceLedInfoPtr> devli,
);

typedef _c__SizeMatches = ffi.Int32 Function(
  ffi.Pointer<SetLedStuff> stuff,
  ffi.Pointer<XkbDeviceLedChangesPtr> changes,
  ffi.Pointer<ffi.Int32> sz_rtrn,
  ffi.Pointer<ffi.Int32> nleds_rtrn,
);

typedef _dart__SizeMatches = int Function(
  ffi.Pointer<SetLedStuff> stuff,
  ffi.Pointer<XkbDeviceLedChangesPtr> changes,
  ffi.Pointer<ffi.Int32> sz_rtrn,
  ffi.Pointer<ffi.Int32> nleds_rtrn,
);

typedef _c__XkbSetDeviceInfoSize = ffi.Int32 Function(
  ffi.Pointer<XkbDeviceInfoPtr> devi,
  ffi.Pointer<XkbDeviceChangesPtr> changes,
  ffi.Pointer<SetLedStuff> stuff,
  ffi.Pointer<ffi.Int32> sz_rtrn,
  ffi.Pointer<ffi.Int32> num_leds_rtrn,
);

typedef _dart__XkbSetDeviceInfoSize = int Function(
  ffi.Pointer<XkbDeviceInfoPtr> devi,
  ffi.Pointer<XkbDeviceChangesPtr> changes,
  ffi.Pointer<SetLedStuff> stuff,
  ffi.Pointer<ffi.Int32> sz_rtrn,
  ffi.Pointer<ffi.Int32> num_leds_rtrn,
);

typedef _c__XkbWriteLedInfo = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Uint32 changed,
  ffi.Pointer<XkbDeviceLedInfoPtr> devli,
);

typedef _dart__XkbWriteLedInfo = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  int changed,
  ffi.Pointer<XkbDeviceLedInfoPtr> devli,
);

typedef _c__XkbWriteSetDeviceInfo = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<XkbDeviceChangesPtr> changes,
  ffi.Pointer<SetLedStuff> stuff,
  ffi.Pointer<XkbDeviceInfoPtr> devi,
);

typedef _dart__XkbWriteSetDeviceInfo = int Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<XkbDeviceChangesPtr> changes,
  ffi.Pointer<SetLedStuff> stuff,
  ffi.Pointer<XkbDeviceInfoPtr> devi,
);

typedef _c__XkbFreeGeomLeafElems = ffi.Void Function(
  ffi.Int32 freeAll,
  ffi.Int32 first,
  ffi.Int32 count,
  ffi.Pointer<ffi.Uint16> num_inout,
  ffi.Pointer<ffi.Uint16> sz_inout,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> elems,
  ffi.Uint32 elem_sz,
);

typedef _dart__XkbFreeGeomLeafElems = void Function(
  int freeAll,
  int first,
  int count,
  ffi.Pointer<ffi.Uint16> num_inout,
  ffi.Pointer<ffi.Uint16> sz_inout,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> elems,
  int elem_sz,
);

typedef ContentsClearFunc = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c__XkbFreeGeomNonLeafElems = ffi.Void Function(
  ffi.Int32 freeAll,
  ffi.Int32 first,
  ffi.Int32 count,
  ffi.Pointer<ffi.Uint16> num_inout,
  ffi.Pointer<ffi.Uint16> sz_inout,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> elems,
  ffi.Uint32 elem_sz,
  ffi.Pointer<ffi.NativeFunction<ContentsClearFunc>> freeFunc,
);

typedef _dart__XkbFreeGeomNonLeafElems = void Function(
  int freeAll,
  int first,
  int count,
  ffi.Pointer<ffi.Uint16> num_inout,
  ffi.Pointer<ffi.Uint16> sz_inout,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> elems,
  int elem_sz,
  ffi.Pointer<ffi.NativeFunction<ContentsClearFunc>> freeFunc,
);

typedef _c__XkbClearProperty = ffi.Void Function(
  ffi.Pointer<ffi.Int8> prop_in,
);

typedef _dart__XkbClearProperty = void Function(
  ffi.Pointer<ffi.Int8> prop_in,
);

typedef _c__XkbClearColor = ffi.Void Function(
  ffi.Pointer<ffi.Int8> color_in,
);

typedef _dart__XkbClearColor = void Function(
  ffi.Pointer<ffi.Int8> color_in,
);

typedef _c__XkbClearOutline = ffi.Void Function(
  ffi.Pointer<ffi.Int8> outline_in,
);

typedef _dart__XkbClearOutline = void Function(
  ffi.Pointer<ffi.Int8> outline_in,
);

typedef _c__XkbClearShape = ffi.Void Function(
  ffi.Pointer<ffi.Int8> shape_in,
);

typedef _dart__XkbClearShape = void Function(
  ffi.Pointer<ffi.Int8> shape_in,
);

typedef _c__XkbClearOverlayRow = ffi.Void Function(
  ffi.Pointer<ffi.Int8> row_in,
);

typedef _dart__XkbClearOverlayRow = void Function(
  ffi.Pointer<ffi.Int8> row_in,
);

typedef _c__XkbClearOverlay = ffi.Void Function(
  ffi.Pointer<ffi.Int8> overlay_in,
);

typedef _dart__XkbClearOverlay = void Function(
  ffi.Pointer<ffi.Int8> overlay_in,
);

typedef _c__XkbClearRow = ffi.Void Function(
  ffi.Pointer<ffi.Int8> row_in,
);

typedef _dart__XkbClearRow = void Function(
  ffi.Pointer<ffi.Int8> row_in,
);

typedef _c__XkbClearSection = ffi.Void Function(
  ffi.Pointer<ffi.Int8> section_in,
);

typedef _dart__XkbClearSection = void Function(
  ffi.Pointer<ffi.Int8> section_in,
);

typedef _c__XkbClearDoodad = ffi.Void Function(
  ffi.Pointer<ffi.Int8> doodad_in,
);

typedef _dart__XkbClearDoodad = void Function(
  ffi.Pointer<ffi.Int8> doodad_in,
);

typedef _c__XkbGeomAlloc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> old,
  ffi.Pointer<ffi.Uint16> num,
  ffi.Pointer<ffi.Uint16> total,
  ffi.Int32 num_new,
  ffi.Uint64 sz_elem,
);

typedef _dart__XkbGeomAlloc = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> old,
  ffi.Pointer<ffi.Uint16> num,
  ffi.Pointer<ffi.Uint16> total,
  int num_new,
  int sz_elem,
);

typedef _c__XkbCheckBounds = ffi.Void Function(
  ffi.Pointer<XkbBoundsPtr> bounds,
  ffi.Int32 x,
  ffi.Int32 y,
);

typedef _dart__XkbCheckBounds = void Function(
  ffi.Pointer<XkbBoundsPtr> bounds,
  int x,
  int y,
);

typedef _c__XkbReadGeomProperties = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _dart__XkbReadGeomProperties = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _c__XkbReadGeomKeyAliases = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _dart__XkbReadGeomKeyAliases = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _c__XkbReadGeomColors = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _dart__XkbReadGeomColors = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _c__XkbReadGeomShapes = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _dart__XkbReadGeomShapes = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _c__XkbReadGeomDoodad = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<XkbSectionPtr> section,
);

typedef _dart__XkbReadGeomDoodad = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<XkbSectionPtr> section,
);

typedef _c__XkbReadGeomOverlay = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<XkbSectionPtr> section,
);

typedef _dart__XkbReadGeomOverlay = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<XkbSectionPtr> section,
);

typedef _c__XkbReadGeomSections = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _dart__XkbReadGeomSections = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _c__XkbReadGeomDoodads = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _dart__XkbReadGeomDoodads = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbGetGeometryReply> rep,
);

typedef _c__XkbReadKeyTypes = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _dart__XkbReadKeyTypes = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _c__XkbReadKeySyms = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _dart__XkbReadKeySyms = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _c__XkbReadKeyActions = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> info,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _dart__XkbReadKeyActions = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> info,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _c__XkbReadKeyBehaviors = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _dart__XkbReadKeyBehaviors = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _c__XkbReadVirtualMods = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _dart__XkbReadVirtualMods = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _c__XkbReadExplicitComponents = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _dart__XkbReadExplicitComponents = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _c__XkbReadModifierMap = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _dart__XkbReadModifierMap = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _c__XkbReadVirtualModMap = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _dart__XkbReadVirtualModMap = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbGetMapReply> rep,
);

typedef _c__XkbGetGetMapReq = ffi.Pointer<xkbGetMapReq> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
);

typedef _dart__XkbGetGetMapReq = ffi.Pointer<xkbGetMapReq> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
);

typedef _c__XkbHandleGetMapReply = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
);

typedef _dart__XkbHandleGetMapReply = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
);

typedef _c__FreeComponentNames = ffi.Void Function(
  ffi.Int32 num,
  ffi.Pointer<XkbComponentNamePtr> names,
);

typedef _dart__FreeComponentNames = void Function(
  int num,
  ffi.Pointer<XkbComponentNamePtr> names,
);

typedef _c__ReadListing = ffi.Pointer<XkbComponentNamePtr> Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Int32 count,
  ffi.Pointer<ffi.Int32> status_rtrn,
);

typedef _dart__ReadListing = ffi.Pointer<XkbComponentNamePtr> Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  int count,
  ffi.Pointer<ffi.Int32> status_rtrn,
);

typedef _c__ExtendRange = ffi.Uint32 Function(
  ffi.Uint32 old_flags,
  ffi.Uint32 flag,
  ffi.Uint8 newKC,
  ffi.Pointer<ffi.Uint8> old_min,
  ffi.Pointer<ffi.Uint8> old_num,
);

typedef _dart__ExtendRange = int Function(
  int old_flags,
  int flag,
  int newKC,
  ffi.Pointer<ffi.Uint8> old_min,
  ffi.Pointer<ffi.Uint8> old_num,
);

typedef _c__XkbFindMatchingInterp = ffi.Pointer<XkbSymInterpretPtr> Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Uint64 sym,
  ffi.Uint32 real_mods,
  ffi.Uint32 level,
);

typedef _dart__XkbFindMatchingInterp = ffi.Pointer<XkbSymInterpretPtr> Function(
  ffi.Pointer<XkbDescPtr> xkb,
  int sym,
  int real_mods,
  int level,
);

typedef _c__XkbAddKeyChange = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> pFirst,
  ffi.Pointer<ffi.Uint8> pNum,
  ffi.Uint8 newKey,
);

typedef _dart__XkbAddKeyChange = void Function(
  ffi.Pointer<ffi.Uint8> pFirst,
  ffi.Pointer<ffi.Uint8> pNum,
  int newKey,
);

typedef _c__XkbReadAtoms = ffi.Int32 Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<ffi.Uint64> atoms,
  ffi.Int32 maxAtoms,
  ffi.Uint32 present,
);

typedef _dart__XkbReadAtoms = int Function(
  ffi.Pointer<XkbReadBufferPtr> buf,
  ffi.Pointer<ffi.Uint64> atoms,
  int maxAtoms,
  int present,
);

typedef _c__XkbCountBits = ffi.Int32 Function(
  ffi.Int32 nBitsMax,
  ffi.Uint64 mask,
);

typedef _dart__XkbCountBits = int Function(
  int nBitsMax,
  int mask,
);

typedef _c__XkbCountAtoms = ffi.Uint32 Function(
  ffi.Pointer<ffi.Uint64> atoms,
  ffi.Int32 maxAtoms,
  ffi.Pointer<ffi.Int32> count,
);

typedef _dart__XkbCountAtoms = int Function(
  ffi.Pointer<ffi.Uint64> atoms,
  int maxAtoms,
  ffi.Pointer<ffi.Int32> count,
);

typedef _c__XkbCopyAtoms = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Uint64> atoms,
  ffi.Uint32 mask,
  ffi.Int32 maxAtoms,
);

typedef _dart__XkbCopyAtoms = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Uint64> atoms,
  int mask,
  int maxAtoms,
);

typedef _c__WriteCountedString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart__WriteCountedString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c__SizeGeomProperties = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__SizeGeomProperties = int Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__SizeGeomColors = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__SizeGeomColors = int Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__SizeGeomShapes = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__SizeGeomShapes = int Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__SizeGeomSections = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__SizeGeomSections = int Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__SizeGeomKeyAliases = ffi.Int32 Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__SizeGeomKeyAliases = int Function(
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__WriteGeomProperties = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__WriteGeomProperties = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__WriteGeomColors = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__WriteGeomColors = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__WriteGeomShapes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__WriteGeomShapes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__WriteGeomOverlay = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<XkbOverlayPtr> ol,
);

typedef _dart__WriteGeomOverlay = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<XkbOverlayPtr> ol,
);

typedef _c__WriteGeomSections = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__WriteGeomSections = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__WriteGeomKeyAliases = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _dart__WriteGeomKeyAliases = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> wire,
  ffi.Pointer<_XkbGeometry> geom,
);

typedef _c__SendSetGeometry = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbSetGeometryReq> req,
);

typedef _dart__SendSetGeometry = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XkbGeometry> geom,
  ffi.Pointer<xkbSetGeometryReq> req,
);

typedef _c__XkbSizeKeyTypes = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbSizeKeyTypes = int Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbWriteKeyTypes = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbWriteKeyTypes = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbSizeKeySyms = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbSizeKeySyms = int Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbWriteKeySyms = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbWriteKeySyms = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbSizeKeyActions = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbSizeKeyActions = int Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbWriteKeyActions = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbWriteKeyActions = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbSizeKeyBehaviors = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbSizeKeyBehaviors = int Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbWriteKeyBehaviors = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbWriteKeyBehaviors = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbSizeVirtualMods = ffi.Uint32 Function(
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbSizeVirtualMods = int Function(
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbWriteVirtualMods = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
  ffi.Uint32 size,
);

typedef _dart__XkbWriteVirtualMods = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
  int size,
);

typedef _c__XkbSizeKeyExplicit = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbSizeKeyExplicit = int Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbWriteKeyExplicit = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbWriteKeyExplicit = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbSizeModifierMap = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbSizeModifierMap = int Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbWriteModifierMap = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbWriteModifierMap = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbSizeVirtualModMap = ffi.Int32 Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbSizeVirtualModMap = int Function(
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbWriteVirtualModMap = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart__XkbWriteVirtualModMap = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c_SendSetMap = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _dart_SendSetMap = void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XkbDescPtr> xkb,
  ffi.Pointer<xkbSetMapReq> req,
);

typedef _c__XkbFreeInfo = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XkbFreeInfo = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XOpenLC = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XOpenLC = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XCloseLC = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XCloseLC = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XlcCurrentLC = ffi.Pointer<XLCdRec> Function();

typedef _dart__XlcCurrentLC = ffi.Pointer<XLCdRec> Function();

typedef _c__XlcValidModSyntax = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> mods,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> valid,
);

typedef _dart__XlcValidModSyntax = int Function(
  ffi.Pointer<ffi.Int8> mods,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> valid,
);

typedef _c__XlcDefaultMapModifiers = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> user_mods,
  ffi.Pointer<ffi.Int8> prog_mods,
);

typedef _dart__XlcDefaultMapModifiers = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> user_mods,
  ffi.Pointer<ffi.Int8> prog_mods,
);

typedef _c__XIMCompileResourceList = ffi.Void Function(
  ffi.Pointer<XIMResourceList> arg0,
  ffi.Uint32 arg1,
);

typedef _dart__XIMCompileResourceList = void Function(
  ffi.Pointer<XIMResourceList> arg0,
  int arg1,
);

typedef _c__XCopyToArg = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Uint32 arg2,
);

typedef _dart__XCopyToArg = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  int arg2,
);

typedef _c__XrmInitParseInfo = ffi.Pointer<XrmMethodsRec> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> statep,
);

typedef _dart__XrmInitParseInfo = ffi.Pointer<XrmMethodsRec> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> statep,
);

typedef _c__XlcCountVaList = ffi.Void Function(
  ffi.Pointer<__va_list_tag> var_1,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _dart__XlcCountVaList = void Function(
  ffi.Pointer<__va_list_tag> var_1,
  ffi.Pointer<ffi.Int32> count_return,
);

typedef _c__XlcVaToArgList = ffi.Void Function(
  ffi.Pointer<__va_list_tag> var_1,
  ffi.Int32 count,
  ffi.Pointer<ffi.Pointer<XlcArgList>> args_return,
);

typedef _dart__XlcVaToArgList = void Function(
  ffi.Pointer<__va_list_tag> var_1,
  int count,
  ffi.Pointer<ffi.Pointer<XlcArgList>> args_return,
);

typedef _c__XlcCopyFromArg = ffi.Void Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int8> dst,
  ffi.Int32 size,
);

typedef _dart__XlcCopyFromArg = void Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Int8> dst,
  int size,
);

typedef _c__XlcCopyToArg = ffi.Void Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> dst,
  ffi.Int32 size,
);

typedef _dart__XlcCopyToArg = void Function(
  ffi.Pointer<ffi.Int8> src,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> dst,
  int size,
);

typedef _c__XlcCompileResourceList = ffi.Void Function(
  ffi.Pointer<XlcResourceList> resources,
  ffi.Int32 num_resources,
);

typedef _dart__XlcCompileResourceList = void Function(
  ffi.Pointer<XlcResourceList> resources,
  int num_resources,
);

typedef _c__XlcGetValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> base,
  ffi.Pointer<XlcResourceList> resources,
  ffi.Int32 num_resources,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
  ffi.Uint64 mask,
);

typedef _dart__XlcGetValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> base,
  ffi.Pointer<XlcResourceList> resources,
  int num_resources,
  ffi.Pointer<XlcArgList> args,
  int num_args,
  int mask,
);

typedef _c__XlcSetValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> base,
  ffi.Pointer<XlcResourceList> resources,
  ffi.Int32 num_resources,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
  ffi.Uint64 mask,
);

typedef _dart__XlcSetValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> base,
  ffi.Pointer<XlcResourceList> resources,
  int num_resources,
  ffi.Pointer<XlcArgList> args,
  int num_args,
  int mask,
);

typedef _c__XlcInitLoader = ffi.Void Function();

typedef _dart__XlcInitLoader = void Function();

typedef _c__XlcDeInitLoader = ffi.Void Function();

typedef _dart__XlcDeInitLoader = void Function();

typedef XLCdLoadProc = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c__XlcAddLoader = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<XLCdLoadProc>> proc,
  ffi.Int32 position,
);

typedef _dart__XlcAddLoader = int Function(
  ffi.Pointer<ffi.NativeFunction<XLCdLoadProc>> proc,
  int position,
);

typedef _c__XlcRemoveLoader = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<XLCdLoadProc>> proc,
);

typedef _dart__XlcRemoveLoader = void Function(
  ffi.Pointer<ffi.NativeFunction<XLCdLoadProc>> proc,
);

typedef _c__XlcAddUtf8Converters = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XlcAddUtf8Converters = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XlcAddUtf8LocaleConverters = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XlcAddUtf8LocaleConverters = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XlcAddGB18030LocaleConverters = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XlcAddGB18030LocaleConverters = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XlcDynamicLoad = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XlcDynamicLoad = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XlcDynamicLoader = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XlcDynamicLoader = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XInitDefaultIM = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XInitDefaultIM = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XInitDefaultOM = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XInitDefaultOM = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XInitDynamicIM = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XInitDynamicIM = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XInitDynamicOM = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XInitDynamicOM = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XIMNestedListToNestedList = ffi.Int32 Function(
  ffi.Pointer<XIMArg> nlist,
  ffi.Pointer<XIMArg> list,
);

typedef _dart__XIMNestedListToNestedList = int Function(
  ffi.Pointer<XIMArg> nlist,
  ffi.Pointer<XIMArg> list,
);

typedef _c__XIMCountNestedList = ffi.Void Function(
  ffi.Pointer<XIMArg> args,
  ffi.Pointer<ffi.Int32> total_count,
);

typedef _dart__XIMCountNestedList = void Function(
  ffi.Pointer<XIMArg> args,
  ffi.Pointer<ffi.Int32> total_count,
);

typedef _c__XIMCountVaList = ffi.Void Function(
  ffi.Pointer<__va_list_tag> var_1,
  ffi.Pointer<ffi.Int32> total_count,
);

typedef _dart__XIMCountVaList = void Function(
  ffi.Pointer<__va_list_tag> var_1,
  ffi.Pointer<ffi.Int32> total_count,
);

typedef _c__XIMVaToNestedList = ffi.Void Function(
  ffi.Pointer<__va_list_tag> var_1,
  ffi.Int32 max_count,
  ffi.Pointer<ffi.Pointer<XIMArg>> args_return,
);

typedef _dart__XIMVaToNestedList = void Function(
  ffi.Pointer<__va_list_tag> var_1,
  int max_count,
  ffi.Pointer<ffi.Pointer<XIMArg>> args_return,
);

typedef _c__XlcGetCharSet = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__XlcGetCharSet = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XlcGetCharSetWithSide = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> encoding_name,
  ffi.Int32 side,
);

typedef _dart__XlcGetCharSetWithSide = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> encoding_name,
  int side,
);

typedef _c__XlcAddCharSet = ffi.Int32 Function(
  ffi.Pointer<XlcCharSet> charset,
);

typedef _dart__XlcAddCharSet = int Function(
  ffi.Pointer<XlcCharSet> charset,
);

typedef _c__XlcGetCSValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XlcCharSet> charset,
);

typedef _dart__XlcGetCSValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XlcCharSet> charset,
);

typedef _c__XGetLCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> arg0,
);

typedef _dart__XGetLCValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> arg0,
);

typedef _c__XlcOpenConverter = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart__XlcOpenConverter = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c__XlcCloseConverter = ffi.Void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _dart__XlcCloseConverter = void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _c__XlcConvert = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart__XlcConvert = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c__XlcResetConverter = ffi.Void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _dart__XlcResetConverter = void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef XlcOpenConverterProc = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<ffi.Int8>,
);

typedef _c__XlcSetConverter = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
  ffi.Pointer<ffi.NativeFunction<XlcOpenConverterProc>> open_converter,
);

typedef _dart__XlcSetConverter = int Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
  ffi.Pointer<ffi.NativeFunction<XlcOpenConverterProc>> open_converter,
);

typedef _c__XlcGetResource = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> category,
  ffi.Pointer<ffi.Int8> _class,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> value,
  ffi.Pointer<ffi.Int32> count,
);

typedef _dart__XlcGetResource = void Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> category,
  ffi.Pointer<ffi.Int8> _class,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> value,
  ffi.Pointer<ffi.Int32> count,
);

typedef _c__XlcFileName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> category,
);

typedef _dart__XlcFileName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> category,
);

typedef _c__Xwcslen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart__Xwcslen = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c__Xwcscpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart__Xwcscpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c__Xwcsncpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> wstr1,
  ffi.Pointer<ffi.Int32> wstr2,
  ffi.Int32 len,
);

typedef _dart__Xwcsncpy = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<ffi.Int32> wstr1,
  ffi.Pointer<ffi.Int32> wstr2,
  int len,
);

typedef _c__Xwcscmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> wstr1,
  ffi.Pointer<ffi.Int32> wstr2,
);

typedef _dart__Xwcscmp = int Function(
  ffi.Pointer<ffi.Int32> wstr1,
  ffi.Pointer<ffi.Int32> wstr2,
);

typedef _c__Xwcsncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> wstr1,
  ffi.Pointer<ffi.Int32> wstr2,
  ffi.Int32 len,
);

typedef _dart__Xwcsncmp = int Function(
  ffi.Pointer<ffi.Int32> wstr1,
  ffi.Pointer<ffi.Int32> wstr2,
  int len,
);

typedef _c__XlcCompareISOLatin1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
);

typedef _dart__XlcCompareISOLatin1 = int Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
);

typedef _c__XlcNCompareISOLatin1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
  ffi.Int32 len,
);

typedef _dart__XlcNCompareISOLatin1 = int Function(
  ffi.Pointer<ffi.Int8> str1,
  ffi.Pointer<ffi.Int8> str2,
  int len,
);

typedef _c__XDefaultOpenOM = ffi.Pointer<_XOM> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _dart__XDefaultOpenOM = ffi.Pointer<_XOM> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _c_KeySymToUcs4 = ffi.Uint32 Function(
  ffi.Uint64 keysym,
);

typedef _dart_KeySymToUcs4 = int Function(
  int keysym,
);

typedef _c__XimSendSetFocus = ffi.Void Function(
  ffi.Pointer<XimRec> im,
  ffi.Pointer<XicRec> ic,
);

typedef _dart__XimSendSetFocus = void Function(
  ffi.Pointer<XimRec> im,
  ffi.Pointer<XicRec> ic,
);

typedef _c__XimFreeRemakeArg = ffi.Void Function(
  ffi.Pointer<XIMArg> arg,
);

typedef _dart__XimFreeRemakeArg = void Function(
  ffi.Pointer<XIMArg> arg,
);

typedef _c__XimReconnectModeCreateIC = ffi.Int32 Function(
  ffi.Pointer<XicRec> ic,
);

typedef _dart__XimReconnectModeCreateIC = int Function(
  ffi.Pointer<XicRec> ic,
);

typedef _c__XlcCreateLC = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<XLCdMethods> methods,
);

typedef _dart__XlcCreateLC = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<XLCdMethods> methods,
);

typedef _c__XlcDestroyLC = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XlcDestroyLC = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XlcParseCharSet = ffi.Int32 Function(
  ffi.Pointer<XlcCharSet> charset,
);

typedef _dart__XlcParseCharSet = int Function(
  ffi.Pointer<XlcCharSet> charset,
);

typedef _c__XlcCreateDefaultCharSet = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> ct_sequence,
);

typedef _dart__XlcCreateDefaultCharSet = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> ct_sequence,
);

typedef _c__XlcAddCT = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> ct_sequence,
);

typedef _dart__XlcAddCT = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> ct_sequence,
);

typedef _c__XlcInitCTInfo = ffi.Int32 Function();

typedef _dart__XlcInitCTInfo = int Function();

typedef _c__XrmDefaultInitParseInfo = ffi.Pointer<XrmMethodsRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> state,
);

typedef _dart__XrmDefaultInitParseInfo = ffi.Pointer<XrmMethodsRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> state,
);

typedef _c__XmbTextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
  ffi.Pointer<ffi.Int32> count_ret,
);

typedef _dart__XmbTextPropertyToTextList = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
  ffi.Pointer<ffi.Int32> count_ret,
);

typedef _c__XwcTextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_ret,
  ffi.Pointer<ffi.Int32> count_ret,
);

typedef _dart__XwcTextPropertyToTextList = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> list_ret,
  ffi.Pointer<ffi.Int32> count_ret,
);

typedef _c__Xutf8TextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
  ffi.Pointer<ffi.Int32> count_ret,
);

typedef _dart__Xutf8TextPropertyToTextList = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
  ffi.Pointer<ffi.Int32> count_ret,
);

typedef _c__XmbTextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<_XDisplay> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XTextProperty> arg5,
);

typedef _dart__XmbTextListToTextProperty = int Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<_XDisplay> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XTextProperty> arg5,
);

typedef _c__XwcTextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<_XDisplay> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XTextProperty> arg5,
);

typedef _dart__XwcTextListToTextProperty = int Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<_XDisplay> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XTextProperty> arg5,
);

typedef _c__Xutf8TextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<_XDisplay> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ffi.Int32 arg3,
  ffi.Int32 arg4,
  ffi.Pointer<XTextProperty> arg5,
);

typedef _dart__Xutf8TextListToTextProperty = int Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<_XDisplay> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<XTextProperty> arg5,
);

typedef _c__XwcFreeStringList = ffi.Void Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
);

typedef _dart__XwcFreeStringList = void Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int32>> arg1,
);

typedef _c__XlcResolveLocaleName = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> lc_name,
  ffi.Pointer<XLCdPublicPart> pub,
);

typedef _dart__XlcResolveLocaleName = int Function(
  ffi.Pointer<ffi.Int8> lc_name,
  ffi.Pointer<XLCdPublicPart> pub,
);

typedef _c__XlcResolveI18NPath = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 buf_len,
);

typedef _dart__XlcResolveI18NPath = int Function(
  ffi.Pointer<ffi.Int8> buf,
  int buf_len,
);

typedef _c__XlcLocaleLibDirName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart__XlcLocaleLibDirName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c__XlcLocaleDirName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart__XlcLocaleDirName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c__XlcCreateLocaleDataBase = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XlcCreateLocaleDataBase = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XlcDestroyLocaleDataBase = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart__XlcDestroyLocaleDataBase = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c__XlcGetLocaleDataBase = ffi.Void Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _dart__XlcGetLocaleDataBase = void Function(
  ffi.Pointer<XLCdRec> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> arg3,
  ffi.Pointer<ffi.Int32> arg4,
);

typedef _c__Xlcmbstoutf8 = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> ustr,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 len,
);

typedef _dart__Xlcmbstoutf8 = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> ustr,
  ffi.Pointer<ffi.Int8> str,
  int len,
);

typedef _c__Xlcwcstombs = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> wstr,
  ffi.Int32 len,
);

typedef _dart__Xlcwcstombs = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> wstr,
  int len,
);

typedef _c__Xlcmbstowcs = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int32> wstr,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 len,
);

typedef _dart__Xlcmbstowcs = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int32> wstr,
  ffi.Pointer<ffi.Int8> str,
  int len,
);

typedef _c__Xwcstombs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> wstr,
  ffi.Int32 len,
);

typedef _dart__Xwcstombs = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> wstr,
  int len,
);

typedef _c__Xlcmbtowc = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int32> wstr,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 len,
);

typedef _dart__Xlcmbtowc = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int32> wstr,
  ffi.Pointer<ffi.Int8> str,
  int len,
);

typedef _c__Xlcwctomb = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 wc,
);

typedef _dart__Xlcwctomb = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<ffi.Int8> str,
  int wc,
);

typedef _c__Utf8GetConvByName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart__Utf8GetConvByName = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_get_values = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XlcCharSet> charset,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
);

typedef _dart_get_values = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XlcCharSet> charset,
  ffi.Pointer<XlcArgList> args,
  int num_args,
);

typedef _c_close_converter_2 = ffi.Void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _dart_close_converter_2 = void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _c_get_converter = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Int32 from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Int32 to_type,
);

typedef _dart_get_converter = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  int from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  int to_type,
);

typedef _c_indirect_convert = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> lc_conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_indirect_convert = int Function(
  ffi.Pointer<XlcConvRec> lc_conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_close_indirect_converter = ffi.Void Function(
  ffi.Pointer<XlcConvRec> lc_conv,
);

typedef _dart_close_indirect_converter = void Function(
  ffi.Pointer<XlcConvRec> lc_conv,
);

typedef _c_reset_indirect_converter = ffi.Void Function(
  ffi.Pointer<XlcConvRec> lc_conv,
);

typedef _dart_reset_indirect_converter = void Function(
  ffi.Pointer<XlcConvRec> lc_conv,
);

typedef _c_open_indirect_converter = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to,
);

typedef _dart_open_indirect_converter = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to,
);

typedef _c__XlcParseCT = ffi.Uint32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> text,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Uint8> final_byte,
);

typedef _dart__XlcParseCT = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> text,
  ffi.Pointer<ffi.Int32> length,
  ffi.Pointer<ffi.Uint8> final_byte,
);

typedef _c__XlcGetCTInfo = ffi.Pointer<CTInfo> Function(
  ffi.Uint32 type,
  ffi.Uint8 final_byte,
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 text_len,
);

typedef _dart__XlcGetCTInfo = ffi.Pointer<CTInfo> Function(
  int type,
  int final_byte,
  ffi.Pointer<ffi.Int8> text,
  int text_len,
);

typedef _c__XlcGetCTInfoFromCharSet = ffi.Pointer<CTInfo> Function(
  ffi.Pointer<XlcCharSet> charset,
);

typedef _dart__XlcGetCTInfoFromCharSet = ffi.Pointer<CTInfo> Function(
  ffi.Pointer<XlcCharSet> charset,
);

typedef _c__XlcCheckCTSequence = ffi.Int32 Function(
  ffi.Pointer<State> state,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ctext,
  ffi.Pointer<ffi.Int32> ctext_len,
);

typedef _dart__XlcCheckCTSequence = int Function(
  ffi.Pointer<State> state,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> ctext,
  ffi.Pointer<ffi.Int32> ctext_len,
);

typedef _c_init_state_1 = ffi.Void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _dart_init_state_1 = void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _c_cttocs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_cttocs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_cstoct = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_cstoct = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_strtocs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_strtocs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_cstostr = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_cstostr = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_create_conv_2 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _dart_create_conv_2 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _c_close_converter_3 = ffi.Void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _dart_close_converter_3 = void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _c_open_cttocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cttocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_cstoct = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cstoct = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_strtocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_strtocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_cstostr = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cstostr = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_f_newline = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_newline = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_comment = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_comment = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_semicolon = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_semicolon = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_double_quote = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_double_quote = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_left_brace = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_left_brace = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_right_brace = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_right_brace = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_white = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_white = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_backslash = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_backslash = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_numeric = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_numeric = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_f_default = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Int32 token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_f_default = int Function(
  ffi.Pointer<ffi.Int8> str,
  int token,
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_init_parse_info = ffi.Void Function();

typedef _dart_init_parse_info = void Function();

typedef _c_clear_parse_info = ffi.Void Function();

typedef _dart_clear_parse_info = void Function();

typedef _c_realloc_parse_info = ffi.Int32 Function(
  ffi.Int32 len,
);

typedef _dart_realloc_parse_info = int Function(
  int len,
);

typedef _c_free_line = ffi.Void Function(
  ffi.Pointer<Line> line,
);

typedef _dart_free_line = void Function(
  ffi.Pointer<Line> line,
);

typedef _c_realloc_line = ffi.Int32 Function(
  ffi.Pointer<Line> line,
  ffi.Int32 size,
);

typedef _dart_realloc_line = int Function(
  ffi.Pointer<Line> line,
  int size,
);

typedef _c_zap_comment = ffi.Void Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> quoted,
);

typedef _dart_zap_comment = void Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> quoted,
);

typedef _c_read_line = ffi.Int32 Function(
  ffi.Pointer<_IO_FILE> fd,
  ffi.Pointer<Line> line,
);

typedef _dart_read_line = int Function(
  ffi.Pointer<_IO_FILE> fd,
  ffi.Pointer<Line> line,
);

typedef _c_get_token = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_get_token = int Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_get_word = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> word,
);

typedef _dart_get_word = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> word,
);

typedef _c_get_quoted_word = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> word,
);

typedef _dart_get_quoted_word = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> word,
);

typedef _c_append_value_list = ffi.Int32 Function();

typedef _dart_append_value_list = int Function();

typedef _c_construct_name = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 size,
);

typedef _dart_construct_name = int Function(
  ffi.Pointer<ffi.Int8> name,
  int size,
);

typedef _c_store_to_database = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _dart_store_to_database = int Function(
  ffi.Pointer<ffi.Pointer<Database>> db,
);

typedef _c_check_category_end = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_check_category_end = int Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_DestroyDatabase = ffi.Void Function(
  ffi.Pointer<Database> db,
);

typedef _dart_DestroyDatabase = void Function(
  ffi.Pointer<Database> db,
);

typedef _c_CountDatabase = ffi.Int32 Function(
  ffi.Pointer<Database> db,
);

typedef _dart_CountDatabase = int Function(
  ffi.Pointer<Database> db,
);

typedef _c_CreateDatabase = ffi.Pointer<Database> Function(
  ffi.Pointer<ffi.Int8> dbfile,
);

typedef _dart_CreateDatabase = ffi.Pointer<Database> Function(
  ffi.Pointer<ffi.Int8> dbfile,
);

typedef _c_parse_line_1 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> line,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ffi.Int32 argsize,
);

typedef _dart_parse_line_1 = int Function(
  ffi.Pointer<ffi.Int8> line,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  int argsize,
);

typedef _c__XlcParsePath = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ffi.Int32 argsize,
);

typedef _dart__XlcParsePath = int Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  int argsize,
);

typedef _c_xlocalelibdir = ffi.Void Function(
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 buf_len,
);

typedef _dart_xlocalelibdir = void Function(
  ffi.Pointer<ffi.Int8> buf,
  int buf_len,
);

typedef _c_resolve_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lc_name,
  ffi.Pointer<ffi.Int8> file_name,
  ffi.Int32 direction,
);

typedef _dart_resolve_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> lc_name,
  ffi.Pointer<ffi.Int8> file_name,
  int direction,
);

typedef _c_lowercase = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
);

typedef _dart_lowercase = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> dst,
  ffi.Pointer<ffi.Int8> src,
);

typedef _c_normalize_lcname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_normalize_lcname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c__XlcParse_scopemaps = ffi.Pointer<FontScope> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> size,
);

typedef _dart__XlcParse_scopemaps = ffi.Pointer<FontScope> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> size,
);

typedef _c__XlcDbg_printValue = ffi.Void Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ffi.Int32 num,
);

typedef _dart__XlcDbg_printValue = void Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  int num,
);

typedef _c__XDefaultOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _dart__XDefaultOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _c_create = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<XLCdMethods> methods,
);

typedef _dart_create = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<XLCdMethods> methods,
);

typedef _c_initialize = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_initialize = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_destroy = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_destroy = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_string_to_encoding = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _dart_string_to_encoding = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> encoding,
);

typedef _c_string_to_ulong = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Uint64> value,
);

typedef _dart_string_to_ulong = int Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Uint64> value,
);

typedef _c_add_charset = ffi.Int32 Function(
  ffi.Pointer<CodeSet> codeset,
  ffi.Pointer<XlcCharSet> charset,
);

typedef _dart_add_charset = int Function(
  ffi.Pointer<CodeSet> codeset,
  ffi.Pointer<XlcCharSet> charset,
);

typedef _c_add_codeset = ffi.Pointer<CodeSet> Function(
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _dart_add_codeset = ffi.Pointer<CodeSet> Function(
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _c_add_parse_list = ffi.Int32 Function(
  ffi.Pointer<XLCdGenericPart> gen,
  ffi.Int32 type,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<CodeSet> codeset,
);

typedef _dart_add_parse_list = int Function(
  ffi.Pointer<XLCdGenericPart> gen,
  int type,
  ffi.Pointer<ffi.Int8> encoding,
  ffi.Pointer<CodeSet> codeset,
);

typedef _c_free_charset = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_free_charset = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_getscope = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<FontScope> scp,
);

typedef _dart_getscope = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<FontScope> scp,
);

typedef _c_count_scopemap = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_count_scopemap = int Function(
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_dmpscope = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<FontScope> sc,
  ffi.Int32 num,
);

typedef _dart_dmpscope = void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<FontScope> sc,
  int num,
);

typedef _c_srch_charset_define = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> new_1,
);

typedef _dart_srch_charset_define = ffi.Pointer<XlcCharSet> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int32> new_1,
);

typedef _c_read_charset_define = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _dart_read_charset_define = void Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _c_add_conversion = ffi.Pointer<SegConv> Function(
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _dart_add_conversion = ffi.Pointer<SegConv> Function(
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _c_read_segmentconversion = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _dart_read_segmentconversion = void Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _c_create_ctextseg = ffi.Pointer<ExtdSegment> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  ffi.Int32 num,
);

typedef _dart_create_ctextseg = ffi.Pointer<ExtdSegment> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> value,
  int num,
);

typedef _c_load_generic = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_load_generic = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_freeByteM = ffi.Void Function(
  ffi.Pointer<CodeSet> codeset,
);

typedef _dart_freeByteM = void Function(
  ffi.Pointer<CodeSet> codeset,
);

typedef _c_freeConversion = ffi.Void Function(
  ffi.Pointer<CodeSet> codeset,
);

typedef _dart_freeConversion = void Function(
  ffi.Pointer<CodeSet> codeset,
);

typedef _c_freeExtdSegment = ffi.Void Function(
  ffi.Pointer<CodeSet> codeset,
);

typedef _dart_freeExtdSegment = void Function(
  ffi.Pointer<CodeSet> codeset,
);

typedef _c_freeParseInfo = ffi.Void Function(
  ffi.Pointer<CodeSet> codeset,
);

typedef _dart_freeParseInfo = void Function(
  ffi.Pointer<CodeSet> codeset,
);

typedef _c_destroy_CodeSetList = ffi.Void Function(
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _dart_destroy_CodeSetList = void Function(
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _c_destroy_SegConv = ffi.Void Function(
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _dart_destroy_SegConv = void Function(
  ffi.Pointer<XLCdGenericPart> gen,
);

typedef _c_destroy_gen = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_destroy_gen = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_alloc_list = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  ffi.Int32 is_wide_char,
  ffi.Int32 count,
  ffi.Int32 nitems,
);

typedef _dart_alloc_list = ffi.Pointer<ffi.Pointer<ffi.Int8>> Function(
  int is_wide_char,
  int count,
  int nitems,
);

typedef _c_copy_list = ffi.Void Function(
  ffi.Int32 is_wide_char,
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  ffi.Int32 count,
);

typedef _dart_copy_list = void Function(
  int is_wide_char,
  ffi.Pointer<ffi.Int8> text,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> list,
  int count,
);

typedef _c__XTextPropertyToTextList = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Int8> to_type,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
  ffi.Pointer<ffi.Int32> count_ret,
);

typedef _dart__XTextPropertyToTextList = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XTextProperty> text_prop,
  ffi.Pointer<ffi.Int8> to_type,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> list_ret,
  ffi.Pointer<ffi.Int32> count_ret,
);

typedef _c_default_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_default_string = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_create_1 = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<XLCdMethods> methods,
);

typedef _dart_create_1 = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<XLCdMethods> methods,
);

typedef _c_initialize_1 = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_initialize_1 = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_destroy_1 = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_destroy_1 = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_get_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
);

typedef _dart_get_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcArgList> args,
  int num_args,
);

typedef _c_load_public = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_load_public = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_initialize_core = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_initialize_core = int Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_destroy_core = ffi.Void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _dart_destroy_core = void Function(
  ffi.Pointer<XLCdRec> lcd,
);

typedef _c_ub_mbinit = ffi.Void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_ub_mbinit = void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_ub_mbchar = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> state,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> lenp,
);

typedef _dart_ub_mbchar = int Function(
  ffi.Pointer<ffi.Int8> state,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> lenp,
);

typedef _c_ub_mbfinish = ffi.Void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_ub_mbfinish = void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_ub_lcname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_ub_lcname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_ub_destroy = ffi.Void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_ub_destroy = void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_mb_mbinit = ffi.Void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_mb_mbinit = void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_mb_mbchar = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> state,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> lenp,
);

typedef _dart_mb_mbchar = int Function(
  ffi.Pointer<ffi.Int8> state,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> lenp,
);

typedef _c_mb_mbfinish = ffi.Void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_mb_mbfinish = void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_mb_lcname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_mb_lcname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_mb_destroy = ffi.Void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_mb_destroy = void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_get_buf_size = ffi.Int32 Function(
  ffi.Int32 is_wide_char,
  ffi.Pointer<ffi.Int8> list,
  ffi.Int32 count,
);

typedef _dart_get_buf_size = int Function(
  int is_wide_char,
  ffi.Pointer<ffi.Int8> list,
  int count,
);

typedef _c__XTextListToTextProperty = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<ffi.Int8> list,
  ffi.Int32 count,
  ffi.Int32 style,
  ffi.Pointer<XTextProperty> text_prop,
);

typedef _dart__XTextListToTextProperty = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<ffi.Int8> list,
  int count,
  int style,
  ffi.Pointer<XTextProperty> text_prop,
);

typedef _c_armscii_8_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_armscii_8_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_armscii_8_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_armscii_8_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_ascii_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_ascii_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_ascii_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_ascii_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_big5_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_big5_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_big5_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_big5_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_big5hkscs_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_big5hkscs_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_big5hkscs_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_big5hkscs_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_big5_0_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_big5_0_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_big5_1_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_big5_1_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_big5_0_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_big5_0_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_big5_1_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_big5_1_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_output_title = ffi.Void Function(
  ffi.Pointer<ffi.Int8> charsetname,
);

typedef _dart_output_title = void Function(
  ffi.Pointer<ffi.Int8> charsetname,
);

typedef _c_read_table = ffi.Void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _dart_read_table = void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _c_find_charset2uni_pages = ffi.Void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _dart_find_charset2uni_pages = void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _c_find_charset2uni_blocks = ffi.Void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _dart_find_charset2uni_blocks = void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _c_output_charset2uni = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<Encoding> enc,
);

typedef _dart_output_charset2uni = void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<Encoding> enc,
);

typedef _c_invert = ffi.Void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _dart_invert = void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _c_output_uni2charset_dense = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<Encoding> enc,
);

typedef _dart_output_uni2charset_dense = void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<Encoding> enc,
);

typedef _c_output_uni2charset_sparse = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<Encoding> enc,
);

typedef _dart_output_uni2charset_sparse = void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<Encoding> enc,
);

typedef _c_row_byte_normal = ffi.Int32 Function(
  ffi.Int32 row,
);

typedef _dart_row_byte_normal = int Function(
  int row,
);

typedef _c_col_byte_normal = ffi.Int32 Function(
  ffi.Int32 col,
);

typedef _dart_col_byte_normal = int Function(
  int col,
);

typedef _c_byte_row_normal = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_row_normal = int Function(
  int byte,
);

typedef _c_byte_col_normal = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_col_normal = int Function(
  int byte,
);

typedef _c_do_normal = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_normal = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_do_normal_only_charset2uni = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_normal_only_charset2uni = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_row_byte_cns11643 = ffi.Int32 Function(
  ffi.Int32 row,
);

typedef _dart_row_byte_cns11643 = int Function(
  int row,
);

typedef _c_byte_row_cns11643 = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_row_cns11643 = int Function(
  int byte,
);

typedef _c_do_cns11643_only_uni2charset = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_cns11643_only_uni2charset = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_row_byte_gbk1 = ffi.Int32 Function(
  ffi.Int32 row,
);

typedef _dart_row_byte_gbk1 = int Function(
  int row,
);

typedef _c_col_byte_gbk1 = ffi.Int32 Function(
  ffi.Int32 col,
);

typedef _dart_col_byte_gbk1 = int Function(
  int col,
);

typedef _c_byte_row_gbk1 = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_row_gbk1 = int Function(
  int byte,
);

typedef _c_byte_col_gbk1 = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_col_gbk1 = int Function(
  int byte,
);

typedef _c_do_gbk1 = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_gbk1 = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_do_gbk1_only_charset2uni = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_gbk1_only_charset2uni = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_row_byte_gbk2 = ffi.Int32 Function(
  ffi.Int32 row,
);

typedef _dart_row_byte_gbk2 = int Function(
  int row,
);

typedef _c_col_byte_gbk2 = ffi.Int32 Function(
  ffi.Int32 col,
);

typedef _dart_col_byte_gbk2 = int Function(
  int col,
);

typedef _c_byte_row_gbk2 = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_row_gbk2 = int Function(
  int byte,
);

typedef _c_byte_col_gbk2 = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_col_gbk2 = int Function(
  int byte,
);

typedef _c_do_gbk2_only_charset2uni = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_gbk2_only_charset2uni = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_do_gbk1_only_uni2charset = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_gbk1_only_uni2charset = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_read_table_ksc5601 = ffi.Void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _dart_read_table_ksc5601 = void Function(
  ffi.Pointer<Encoding> enc,
);

typedef _c_do_ksc5601 = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_ksc5601 = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_row_byte_big5 = ffi.Int32 Function(
  ffi.Int32 row,
);

typedef _dart_row_byte_big5 = int Function(
  int row,
);

typedef _c_col_byte_big5 = ffi.Int32 Function(
  ffi.Int32 col,
);

typedef _dart_col_byte_big5 = int Function(
  int col,
);

typedef _c_byte_row_big5 = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_row_big5 = int Function(
  int byte,
);

typedef _c_byte_col_big5 = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_col_big5 = int Function(
  int byte,
);

typedef _c_do_big5 = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_big5 = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_row_byte_big5hkscs = ffi.Int32 Function(
  ffi.Int32 row,
);

typedef _dart_row_byte_big5hkscs = int Function(
  int row,
);

typedef _c_col_byte_big5hkscs = ffi.Int32 Function(
  ffi.Int32 col,
);

typedef _dart_col_byte_big5hkscs = int Function(
  int col,
);

typedef _c_byte_row_big5hkscs = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_row_big5hkscs = int Function(
  int byte,
);

typedef _c_byte_col_big5hkscs = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_col_big5hkscs = int Function(
  int byte,
);

typedef _c_do_big5hkscs = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_big5hkscs = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_row_byte_johab_hangul = ffi.Int32 Function(
  ffi.Int32 row,
);

typedef _dart_row_byte_johab_hangul = int Function(
  int row,
);

typedef _c_col_byte_johab_hangul = ffi.Int32 Function(
  ffi.Int32 col,
);

typedef _dart_col_byte_johab_hangul = int Function(
  int col,
);

typedef _c_byte_row_johab_hangul = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_row_johab_hangul = int Function(
  int byte,
);

typedef _c_byte_col_johab_hangul = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_col_johab_hangul = int Function(
  int byte,
);

typedef _c_do_johab_hangul = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_johab_hangul = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_row_byte_sjis = ffi.Int32 Function(
  ffi.Int32 row,
);

typedef _dart_row_byte_sjis = int Function(
  int row,
);

typedef _c_col_byte_sjis = ffi.Int32 Function(
  ffi.Int32 col,
);

typedef _dart_col_byte_sjis = int Function(
  int col,
);

typedef _c_byte_row_sjis = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_row_sjis = int Function(
  int byte,
);

typedef _c_byte_col_sjis = ffi.Int32 Function(
  ffi.Int32 byte,
);

typedef _dart_byte_col_sjis = int Function(
  int byte,
);

typedef _c_do_sjis = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_do_sjis = void Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_cp1133_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_cp1133_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_cp1133_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_cp1133_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_cp1251_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_cp1251_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_cp1251_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_cp1251_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_cp1255_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_cp1255_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_cp1255_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_cp1255_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_cp1256_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_cp1256_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_cp1256_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_cp1256_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_gb2312_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_gb2312_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_gb2312_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_gb2312_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_gbk_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_gbk_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_gbk_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_gbk_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_georgian_academy_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_georgian_academy_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_georgian_academy_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_georgian_academy_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_georgian_ps_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_georgian_ps_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_georgian_ps_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_georgian_ps_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_1_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_1_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_1_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_1_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_10_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_10_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_10_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_10_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_11_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_11_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_11_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_11_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_13_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_13_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_13_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_13_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_14_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_14_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_14_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_14_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_15_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_15_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_15_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_15_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_16_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_16_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_16_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_16_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_2_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_2_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_2_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_2_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_3_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_3_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_3_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_3_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_4_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_4_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_4_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_4_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_5_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_5_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_5_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_5_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_6_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_6_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_6_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_6_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_7_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_7_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_7_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_7_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_8_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_8_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_8_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_8_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_9_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_9_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_9_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_9_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_iso8859_9e_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_iso8859_9e_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_iso8859_9e_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_iso8859_9e_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_jisx0201_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_jisx0201_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_jisx0201_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_jisx0201_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_jisx0208_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_jisx0208_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_jisx0208_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_jisx0208_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_jisx0212_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_jisx0212_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_jisx0212_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_jisx0212_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_koi8_c_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_koi8_c_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_koi8_c_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_koi8_c_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_koi8_r_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_koi8_r_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_koi8_r_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_koi8_r_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_koi8_u_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_koi8_u_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_koi8_u_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_koi8_u_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_ksc5601_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_ksc5601_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_ksc5601_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_ksc5601_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_mulelao_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_mulelao_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_mulelao_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_mulelao_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_tatar_cyr_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_tatar_cyr_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_tatar_cyr_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_tatar_cyr_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_tcvn_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_tcvn_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_tcvn_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_tcvn_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_tis620_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_tis620_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_tis620_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_tis620_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_ucs2be_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_ucs2be_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_ucs2be_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_ucs2be_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_utf8_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_utf8_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_utf8_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_utf8_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_viscii_mbtowc = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  ffi.Int32 n,
);

typedef _dart_viscii_mbtowc = int Function(
  int conv,
  ffi.Pointer<ffi.Int32> pwc,
  ffi.Pointer<ffi.Uint8> s,
  int n,
);

typedef _c_viscii_wctomb = ffi.Int32 Function(
  ffi.Int32 conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Int32 wc,
  ffi.Int32 n,
);

typedef _dart_viscii_wctomb = int Function(
  int conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_create_conv_3 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _dart_create_conv_3 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _c_close_converter_4 = ffi.Void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _dart_close_converter_4 = void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _c_init_all_charsets = ffi.Void Function();

typedef _dart_init_all_charsets = void Function();

typedef _c_cstoutf8 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_cstoutf8 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_cstoutf8 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cstoutf8 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_create_tocs_conv = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _dart_create_tocs_conv = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _c_close_tocs_converter = ffi.Void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _dart_close_tocs_converter = void Function(
  ffi.Pointer<XlcConvRec> conv,
);

typedef _c_charset_wctocs = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<Utf8Conv>> preferred,
  ffi.Pointer<ffi.Pointer<Utf8Conv>> charsetp,
  ffi.Pointer<ffi.Int32> sidep,
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Uint32 wc,
  ffi.Int32 n,
);

typedef _dart_charset_wctocs = int Function(
  ffi.Pointer<ffi.Pointer<Utf8Conv>> preferred,
  ffi.Pointer<ffi.Pointer<Utf8Conv>> charsetp,
  ffi.Pointer<ffi.Int32> sidep,
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_utf8tocs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_utf8tocs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_utf8tocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_utf8tocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_utf8tocs1 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_utf8tocs1 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_utf8tocs1 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_utf8tocs1 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_utf8tostr = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_utf8tostr = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_utf8tostr = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_utf8tostr = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_strtoutf8 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_strtoutf8 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_strtoutf8 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_strtoutf8 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_create_ucstocs_conv = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _dart_create_ucstocs_conv = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _c_charset_wctocs_exactly = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<Utf8Conv>> preferred,
  ffi.Pointer<ffi.Pointer<Utf8Conv>> charsetp,
  ffi.Pointer<ffi.Int32> sidep,
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Uint8> r,
  ffi.Uint32 wc,
  ffi.Int32 n,
);

typedef _dart_charset_wctocs_exactly = int Function(
  ffi.Pointer<ffi.Pointer<Utf8Conv>> preferred,
  ffi.Pointer<ffi.Pointer<Utf8Conv>> charsetp,
  ffi.Pointer<ffi.Int32> sidep,
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Uint8> r,
  int wc,
  int n,
);

typedef _c_ucstocs1 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_ucstocs1 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_ucstocs1 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_ucstocs1 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_ucstoutf8 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_ucstoutf8 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_ucstoutf8 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_ucstoutf8 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_utf8towcs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_utf8towcs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_utf8towcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_utf8towcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_wcstoutf8 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstoutf8 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_wcstoutf8 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstoutf8 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_our_strtowcs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_our_strtowcs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_strtowcs_1 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_strtowcs_1 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_our_wcstostr = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_our_wcstostr = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_wcstostr_2 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstostr_2 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_cstowcs_2 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_cstowcs_2 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_cstowcs_2 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_cstowcs_2 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_wcstocs_2 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstocs_2 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_wcstocs_2 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstocs_2 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_wcstocs1 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_wcstocs1 = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_wcstocs1 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstocs1 = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_identity = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_identity = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_identity = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_identity = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_create_tofontcs_conv = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _dart_create_tofontcs_conv = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<XlcConvMethods> methods,
);

typedef _c_open_wcstofcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_wcstofcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_utf8tofcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_utf8tofcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_iconv_cstombs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_iconv_cstombs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_iconv_cstombs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_iconv_cstombs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_iconv_mbstocs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_iconv_mbstocs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_iconv_mbstocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_iconv_mbstocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_iconv_mbtocs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_iconv_mbtocs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_iconv_mbtocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_iconv_mbtocs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_iconv_mbstostr = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_iconv_mbstostr = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_iconv_mbstostr = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_iconv_mbstostr = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_iconv_strtombs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_iconv_strtombs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_iconv_strtombs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_iconv_strtombs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_iconv_mbstowcs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_iconv_mbstowcs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_iconv_mbstowcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_iconv_mbstowcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_iconv_wcstombs = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  ffi.Int32 num_args,
);

typedef _dart_iconv_wcstombs = int Function(
  ffi.Pointer<XlcConvRec> conv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> from,
  ffi.Pointer<ffi.Int32> from_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> to,
  ffi.Pointer<ffi.Int32> to_left,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> args,
  int num_args,
);

typedef _c_open_iconv_wcstombs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_iconv_wcstombs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c_open_iconv_mbstofcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _dart_open_iconv_mbstofcs = ffi.Pointer<XlcConvRec> Function(
  ffi.Pointer<XLCdRec> from_lcd,
  ffi.Pointer<ffi.Int8> from_type,
  ffi.Pointer<XLCdRec> to_lcd,
  ffi.Pointer<ffi.Int8> to_type,
);

typedef _c__CloseIM = ffi.Int32 Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _dart__CloseIM = int Function(
  ffi.Pointer<_XIM> arg0,
);

typedef _c__SetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _dart__SetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _c__GetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _dart__GetIMValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _c__CreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _dart__CreateIC = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _c__DestroyIC = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart__DestroyIC = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c__SetFocus = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart__SetFocus = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c__UnsetFocus = ffi.Void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart__UnsetFocus = void Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c__SetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _dart__SetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _c__GetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _dart__GetICValues = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XIMArg> arg1,
);

typedef _c__MbReset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart__MbReset = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c__WcReset = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _dart__WcReset = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC> arg0,
);

typedef _c__MbLookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart__MbLookupString = int Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c__WcLookupString = ffi.Int32 Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Int32 arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart__WcLookupString = int Function(
  ffi.Pointer<_XIC> arg0,
  ffi.Pointer<XKeyEvent> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint64> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c__SetICValueData = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> ic,
  ffi.Pointer<XIMArg> values,
  ffi.Int32 mode,
);

typedef _dart__SetICValueData = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> ic,
  ffi.Pointer<XIMArg> values,
  int mode,
);

typedef _c__GetICValueData = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> ic,
  ffi.Pointer<XIMArg> values,
  ffi.Int32 mode,
);

typedef _dart__GetICValueData = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC> ic,
  ffi.Pointer<XIMArg> values,
  int mode,
);

typedef _c_init_fontset_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
);

typedef _dart_init_fontset_1 = int Function(
  ffi.Pointer<_XOC> oc,
);

typedef _c_get_prop_name_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XFontStruct> fs,
);

typedef _dart_get_prop_name_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XFontStruct> fs,
);

typedef _c_check_charset = ffi.Pointer<FontData> Function(
  ffi.Pointer<FontSet> font_set,
  ffi.Pointer<ffi.Int8> font_name,
);

typedef _dart_check_charset = ffi.Pointer<FontData> Function(
  ffi.Pointer<FontSet> font_set,
  ffi.Pointer<ffi.Int8> font_name,
);

typedef _c_load_font_2 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
);

typedef _dart_load_font_2 = int Function(
  ffi.Pointer<_XOC> oc,
);

typedef _c_set_fontset_extents_1 = ffi.Void Function(
  ffi.Pointer<_XOC> oc,
);

typedef _dart_set_fontset_extents_1 = void Function(
  ffi.Pointer<_XOC> oc,
);

typedef _c_init_core_part_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
);

typedef _dart_init_core_part_1 = int Function(
  ffi.Pointer<_XOC> oc,
);

typedef _c_get_font_name_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> pattern,
);

typedef _dart_get_font_name_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> pattern,
);

typedef _c_parse_fontname_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
);

typedef _dart_parse_fontname_1 = int Function(
  ffi.Pointer<_XOC> oc,
);

typedef _c_set_missing_list_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
);

typedef _dart_set_missing_list_1 = int Function(
  ffi.Pointer<_XOC> oc,
);

typedef _c_create_fontset_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
);

typedef _dart_create_fontset_1 = int Function(
  ffi.Pointer<_XOC> oc,
);

typedef _c_destroy_oc_1 = ffi.Void Function(
  ffi.Pointer<_XOC> oc,
);

typedef _dart_destroy_oc_1 = void Function(
  ffi.Pointer<_XOC> oc,
);

typedef _c_set_oc_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
);

typedef _dart_set_oc_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<XlcArgList> args,
  int num_args,
);

typedef _c_get_oc_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
);

typedef _dart_get_oc_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<XlcArgList> args,
  int num_args,
);

typedef _c_wcs_to_mbs_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> to,
  ffi.Pointer<ffi.Int32> from,
  ffi.Int32 length,
);

typedef _dart_wcs_to_mbs_1 = int Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> to,
  ffi.Pointer<ffi.Int32> from,
  int length,
);

typedef _c__XmbDefaultTextEscapement_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 length,
);

typedef _dart__XmbDefaultTextEscapement_1 = int Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> text,
  int length,
);

typedef _c__XwcDefaultTextEscapement_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XwcDefaultTextEscapement_1 = int Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XmbDefaultTextExtents_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 length,
  ffi.Pointer<XRectangle> overall_ink,
  ffi.Pointer<XRectangle> overall_logical,
);

typedef _dart__XmbDefaultTextExtents_1 = int Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> text,
  int length,
  ffi.Pointer<XRectangle> overall_ink,
  ffi.Pointer<XRectangle> overall_logical,
);

typedef _c__XwcDefaultTextExtents_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<XRectangle> overall_ink,
  ffi.Pointer<XRectangle> overall_logical,
);

typedef _dart__XwcDefaultTextExtents_1 = int Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<XRectangle> overall_ink,
  ffi.Pointer<XRectangle> overall_logical,
);

typedef _c__XmbDefaultTextPerCharExtents_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 length,
  ffi.Pointer<XRectangle> ink_buf,
  ffi.Pointer<XRectangle> logical_buf,
  ffi.Int32 buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<XRectangle> overall_ink,
  ffi.Pointer<XRectangle> overall_logical,
);

typedef _dart__XmbDefaultTextPerCharExtents_1 = int Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int8> text,
  int length,
  ffi.Pointer<XRectangle> ink_buf,
  ffi.Pointer<XRectangle> logical_buf,
  int buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<XRectangle> overall_ink,
  ffi.Pointer<XRectangle> overall_logical,
);

typedef _c__XwcDefaultTextPerCharExtents_1 = ffi.Int32 Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
  ffi.Pointer<XRectangle> ink_buf,
  ffi.Pointer<XRectangle> logical_buf,
  ffi.Int32 buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<XRectangle> overall_ink,
  ffi.Pointer<XRectangle> overall_logical,
);

typedef _dart__XwcDefaultTextPerCharExtents_1 = int Function(
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<ffi.Int32> text,
  int length,
  ffi.Pointer<XRectangle> ink_buf,
  ffi.Pointer<XRectangle> logical_buf,
  int buf_size,
  ffi.Pointer<ffi.Int32> num_chars,
  ffi.Pointer<XRectangle> overall_ink,
  ffi.Pointer<XRectangle> overall_logical,
);

typedef _c__XmbDefaultDrawString_1 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 d,
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<_XGC> gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 length,
);

typedef _dart__XmbDefaultDrawString_1 = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int d,
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<_XGC> gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int8> text,
  int length,
);

typedef _c__XwcDefaultDrawString_1 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 d,
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<_XGC> gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XwcDefaultDrawString_1 = int Function(
  ffi.Pointer<_XDisplay> dpy,
  int d,
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<_XGC> gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c__XmbDefaultDrawImageString_1 = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 d,
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<_XGC> gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int8> text,
  ffi.Int32 length,
);

typedef _dart__XmbDefaultDrawImageString_1 = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int d,
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<_XGC> gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int8> text,
  int length,
);

typedef _c__XwcDefaultDrawImageString_1 = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Uint64 d,
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<_XGC> gc,
  ffi.Int32 x,
  ffi.Int32 y,
  ffi.Pointer<ffi.Int32> text,
  ffi.Int32 length,
);

typedef _dart__XwcDefaultDrawImageString_1 = void Function(
  ffi.Pointer<_XDisplay> dpy,
  int d,
  ffi.Pointer<_XOC> oc,
  ffi.Pointer<_XGC> gc,
  int x,
  int y,
  ffi.Pointer<ffi.Int32> text,
  int length,
);

typedef _c_create_oc_1 = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XOM> om,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
);

typedef _dart_create_oc_1 = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XOM> om,
  ffi.Pointer<XlcArgList> args,
  int num_args,
);

typedef _c_close_om_1 = ffi.Int32 Function(
  ffi.Pointer<_XOM> om,
);

typedef _dart_close_om_1 = int Function(
  ffi.Pointer<_XOM> om,
);

typedef _c_set_om_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> om,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
);

typedef _dart_set_om_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> om,
  ffi.Pointer<XlcArgList> args,
  int num_args,
);

typedef _c_get_om_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> om,
  ffi.Pointer<XlcArgList> args,
  ffi.Int32 num_args,
);

typedef _dart_get_om_values_1 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM> om,
  ffi.Pointer<XlcArgList> args,
  int num_args,
);

typedef _c_add_data_1 = ffi.Pointer<OMData> Function(
  ffi.Pointer<_XOM> om,
);

typedef _dart_add_data_1 = ffi.Pointer<OMData> Function(
  ffi.Pointer<_XOM> om,
);

typedef _c_init_om_1 = ffi.Int32 Function(
  ffi.Pointer<_XOM> om,
);

typedef _dart_init_om_1 = int Function(
  ffi.Pointer<_XOM> om,
);

typedef _typedefC_131 = ffi.NativeFunction<_typedefC_132> Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _c__XimTransIntrCallback = ffi.Int32 Function(
  ffi.Int32 im,
  ffi.Pointer<ffi.NativeFunction<_typedefC_131>> Bool,
  ffi.Int32 call_data,
);

typedef _dart__XimTransIntrCallback = int Function(
  int im,
  ffi.Pointer<ffi.NativeFunction<_typedefC_131>> Bool,
  int call_data,
);

typedef _c__XimXTransFreeConnInfo = ffi.Void Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XimXTransFreeConnInfo = void Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XimXTransOpenCOTSClient = ffi.Pointer<_XtransConnInfo> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart__XimXTransOpenCOTSClient = ffi.Pointer<_XtransConnInfo> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c__XimXTransSetOption = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart__XimXTransSetOption = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  int arg1,
  int arg2,
);

typedef _c__XimXTransConnect = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart__XimXTransConnect = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c__XimXTransBytesReadable = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart__XimXTransBytesReadable = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c__XimXTransRead = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XimXTransRead = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XimXTransWrite = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XimXTransWrite = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__XimXTransReadv = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<iovec> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XimXTransReadv = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<iovec> arg1,
  int arg2,
);

typedef _c__XimXTransWritev = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<iovec> arg1,
  ffi.Int32 arg2,
);

typedef _dart__XimXTransWritev = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<iovec> arg1,
  int arg2,
);

typedef _c__XimXTransSendFd = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> ciptr,
  ffi.Int32 fd,
  ffi.Int32 do_close,
);

typedef _dart__XimXTransSendFd = int Function(
  ffi.Pointer<_XtransConnInfo> ciptr,
  int fd,
  int do_close,
);

typedef _c__XimXTransRecvFd = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> ciptr,
);

typedef _dart__XimXTransRecvFd = int Function(
  ffi.Pointer<_XtransConnInfo> ciptr,
);

typedef _c__XimXTransDisconnect = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XimXTransDisconnect = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XimXTransClose = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XimXTransClose = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XimXTransCloseForCloning = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XimXTransCloseForCloning = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XimXTransIsLocal = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XimXTransIsLocal = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XimXTransGetPeerAddr = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Pointer<Xtransaddr>> arg3,
);

typedef _dart__XimXTransGetPeerAddr = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Pointer<Xtransaddr>> arg3,
);

typedef _c__XimXTransGetConnectionNumber = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _dart__XimXTransGetConnectionNumber = int Function(
  ffi.Pointer<_XtransConnInfo> arg0,
);

typedef _c__XimXTransGetHostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart__XimXTransGetHostname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_ntohl = ffi.Uint32 Function(
  ffi.Uint32 __netlong,
);

typedef _dart_ntohl = int Function(
  int __netlong,
);

typedef _c_ntohs = ffi.Uint16 Function(
  ffi.Uint16 __netshort,
);

typedef _dart_ntohs = int Function(
  int __netshort,
);

typedef _c_htonl = ffi.Uint32 Function(
  ffi.Uint32 __hostlong,
);

typedef _dart_htonl = int Function(
  int __hostlong,
);

typedef _c_htons = ffi.Uint16 Function(
  ffi.Uint16 __hostshort,
);

typedef _dart_htons = int Function(
  int __hostshort,
);

typedef _c_bindresvport = ffi.Int32 Function(
  ffi.Int32 __sockfd,
  ffi.Pointer<sockaddr_in> __sock_in,
);

typedef _dart_bindresvport = int Function(
  int __sockfd,
  ffi.Pointer<sockaddr_in> __sock_in,
);

typedef _c_bindresvport6 = ffi.Int32 Function(
  ffi.Int32 __sockfd,
  ffi.Pointer<sockaddr_in6> __sock_in,
);

typedef _dart_bindresvport6 = int Function(
  int __sockfd,
  ffi.Pointer<sockaddr_in6> __sock_in,
);

typedef _c_inet_addr = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> __cp,
);

typedef _dart_inet_addr = int Function(
  ffi.Pointer<ffi.Int8> __cp,
);

typedef _c_inet_network = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> __cp,
);

typedef _dart_inet_network = int Function(
  ffi.Pointer<ffi.Int8> __cp,
);

typedef _c_inet_pton = ffi.Int32 Function(
  ffi.Int32 __af,
  ffi.Pointer<ffi.Int8> __cp,
  ffi.Pointer<ffi.Void> __buf,
);

typedef _dart_inet_pton = int Function(
  int __af,
  ffi.Pointer<ffi.Int8> __cp,
  ffi.Pointer<ffi.Void> __buf,
);

typedef _c_inet_ntop = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __af,
  ffi.Pointer<ffi.Void> __cp,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint32 __len,
);

typedef _dart_inet_ntop = ffi.Pointer<ffi.Int8> Function(
  int __af,
  ffi.Pointer<ffi.Void> __cp,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_inet_aton = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __cp,
  ffi.Pointer<in_addr> __inp,
);

typedef _dart_inet_aton = int Function(
  ffi.Pointer<ffi.Int8> __cp,
  ffi.Pointer<in_addr> __inp,
);

typedef _c_inet_neta = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 __net,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_inet_neta = ffi.Pointer<ffi.Int8> Function(
  int __net,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_inet_net_ntop = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __af,
  ffi.Pointer<ffi.Void> __cp,
  ffi.Int32 __bits,
  ffi.Pointer<ffi.Int8> __buf,
  ffi.Uint64 __len,
);

typedef _dart_inet_net_ntop = ffi.Pointer<ffi.Int8> Function(
  int __af,
  ffi.Pointer<ffi.Void> __cp,
  int __bits,
  ffi.Pointer<ffi.Int8> __buf,
  int __len,
);

typedef _c_inet_net_pton = ffi.Int32 Function(
  ffi.Int32 __af,
  ffi.Pointer<ffi.Int8> __cp,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __len,
);

typedef _dart_inet_net_pton = int Function(
  int __af,
  ffi.Pointer<ffi.Int8> __cp,
  ffi.Pointer<ffi.Void> __buf,
  int __len,
);

typedef _c_inet_nsap_addr = ffi.Uint32 Function(
  ffi.Pointer<ffi.Int8> __cp,
  ffi.Pointer<ffi.Uint8> __buf,
  ffi.Int32 __len,
);

typedef _dart_inet_nsap_addr = int Function(
  ffi.Pointer<ffi.Int8> __cp,
  ffi.Pointer<ffi.Uint8> __buf,
  int __len,
);

typedef _c_inet_nsap_ntoa = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __len,
  ffi.Pointer<ffi.Uint8> __cp,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _dart_inet_nsap_ntoa = ffi.Pointer<ffi.Int8> Function(
  int __len,
  ffi.Pointer<ffi.Uint8> __cp,
  ffi.Pointer<ffi.Int8> __buf,
);

typedef _c_uname = ffi.Int32 Function(
  ffi.Pointer<utsname> __name,
);

typedef _dart_uname = int Function(
  ffi.Pointer<utsname> __name,
);

typedef _c_is_numeric = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_is_numeric = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_VErrorF = ffi.Void Function(
  ffi.Pointer<ffi.Int8> f,
  ffi.Pointer<__va_list_tag> args,
);

typedef _dart_VErrorF = void Function(
  ffi.Pointer<ffi.Int8> f,
  ffi.Pointer<__va_list_tag> args,
);

typedef _c_ErrorF = ffi.Void Function(
  ffi.Pointer<ffi.Int8> f,
);

typedef _dart_ErrorF = void Function(
  ffi.Pointer<ffi.Int8> f,
);

typedef _c_prmsg = ffi.Void Function(
  ffi.Int32 lvl,
  ffi.Pointer<ffi.Int8> f,
);

typedef _dart_prmsg = void Function(
  int lvl,
  ffi.Pointer<ffi.Int8> f,
);

typedef _c__XimXTransSelectTransport = ffi.Pointer<Xtransport> Function(
  ffi.Pointer<ffi.Int8> protocol,
);

typedef _dart__XimXTransSelectTransport = ffi.Pointer<Xtransport> Function(
  ffi.Pointer<ffi.Int8> protocol,
);

typedef _c__XimXTransParseAddress = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> address,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> protocol,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> host,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> port,
);

typedef _dart__XimXTransParseAddress = int Function(
  ffi.Pointer<ffi.Int8> address,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> protocol,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> host,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> port,
);

typedef _c__XimXTransOpen = ffi.Pointer<_XtransConnInfo> Function(
  ffi.Int32 type,
  ffi.Pointer<ffi.Int8> address,
);

typedef _dart__XimXTransOpen = ffi.Pointer<_XtransConnInfo> Function(
  int type,
  ffi.Pointer<ffi.Int8> address,
);

typedef _c_dlopen = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Int32 __mode,
);

typedef _dart_dlopen = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> __file,
  int __mode,
);

typedef _c_dlclose = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __handle,
);

typedef _dart_dlclose = int Function(
  ffi.Pointer<ffi.Void> __handle,
);

typedef _c_dlsym = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __handle,
  ffi.Pointer<ffi.Int8> __name,
);

typedef _dart_dlsym = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __handle,
  ffi.Pointer<ffi.Int8> __name,
);

typedef _c_dlerror = ffi.Pointer<ffi.Int8> Function();

typedef _dart_dlerror = ffi.Pointer<ffi.Int8> Function();

typedef _c_parse_line_2 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> line,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ffi.Int32 argsize,
);

typedef _dart_parse_line_2 = int Function(
  ffi.Pointer<ffi.Int8> line,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  int argsize,
);

typedef _c_strdup_with_underscore = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _dart_strdup_with_underscore = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _c_try_both_dlsym = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> handle,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_try_both_dlsym = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> handle,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_resolve_object = ffi.Void Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> lc_name,
);

typedef _dart_resolve_object = void Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> lc_name,
);

typedef _c___lc_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> dl_name,
  ffi.Pointer<ffi.Int8> lc_dir,
);

typedef _dart___lc_path = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> dl_name,
  ffi.Pointer<ffi.Int8> lc_dir,
);

typedef _c_open_object = ffi.Int32 Function(
  ffi.Pointer<XI18NObjectsList> object,
  ffi.Pointer<ffi.Int8> lc_dir,
);

typedef _dart_open_object = int Function(
  ffi.Pointer<XI18NObjectsList> object,
  ffi.Pointer<ffi.Int8> lc_dir,
);

typedef _c_fetch_symbol = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<XI18NObjectsList> object,
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _dart_fetch_symbol = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<XI18NObjectsList> object,
  ffi.Pointer<ffi.Int8> symbol,
);

typedef _c_close_object = ffi.Void Function(
  ffi.Pointer<XI18NObjectsList> object,
);

typedef _dart_close_object = void Function(
  ffi.Pointer<XI18NObjectsList> object,
);

typedef _c__XDynamicOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _dart__XDynamicOpenIM = ffi.Pointer<_XIM> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _c__XDynamicRegisterIMInstantiateCallback = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> callback,
  ffi.Pointer<ffi.Int8> client_data,
);

typedef _dart__XDynamicRegisterIMInstantiateCallback = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> callback,
  ffi.Pointer<ffi.Int8> client_data,
);

typedef _c__XDynamicUnRegisterIMInstantiateCallback = ffi.Int32 Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> callback,
  ffi.Pointer<ffi.Int8> client_data,
);

typedef _dart__XDynamicUnRegisterIMInstantiateCallback = int Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
  ffi.Pointer<ffi.NativeFunction<XIDProc>> callback,
  ffi.Pointer<ffi.Int8> client_data,
);

typedef _c__XDynamicOpenOM = ffi.Pointer<_XOM> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _dart__XDynamicOpenOM = ffi.Pointer<_XOM> Function(
  ffi.Pointer<XLCdRec> lcd,
  ffi.Pointer<_XDisplay> display,
  ffi.Pointer<_XrmHashBucketRec> rdb,
  ffi.Pointer<ffi.Int8> res_name,
  ffi.Pointer<ffi.Int8> res_class,
);

typedef _c_sync_hazard = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_sync_hazard = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_sync_while_locked = ffi.Void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_sync_while_locked = void Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XPrivSyncFunction = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart__XPrivSyncFunction = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c_SocketBytesReadable = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _dart_SocketBytesReadable = int Function(
  ffi.Pointer<_XDisplay> dpy,
);

typedef _c__XPrintDefaultError = ffi.Int32 Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XErrorEvent> event,
  ffi.Pointer<_IO_FILE> fp,
);

typedef _dart__XPrintDefaultError = int Function(
  ffi.Pointer<_XDisplay> dpy,
  ffi.Pointer<XErrorEvent> event,
  ffi.Pointer<_IO_FILE> fp,
);

typedef _c_c_mbnoop = ffi.Void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_c_mbnoop = void Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_c_mbchar = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8> state,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> lenp,
);

typedef _dart_c_mbchar = int Function(
  ffi.Pointer<ffi.Int8> state,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int32> lenp,
);

typedef _c_c_lcname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _dart_c_lcname = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> state,
);

typedef _c_NewDatabase = ffi.Pointer<_XrmHashBucketRec> Function();

typedef _dart_NewDatabase = ffi.Pointer<_XrmHashBucketRec> Function();

typedef _c_MoveValues = ffi.Void Function(
  ffi.Pointer<LTable> ftable,
  ffi.Pointer<LTable> ttable,
);

typedef _dart_MoveValues = void Function(
  ffi.Pointer<LTable> ftable,
  ffi.Pointer<LTable> ttable,
);

typedef _c_MoveTables = ffi.Void Function(
  ffi.Pointer<NTable> ftable,
  ffi.Pointer<NTable> ttable,
);

typedef _dart_MoveTables = void Function(
  ffi.Pointer<NTable> ftable,
  ffi.Pointer<NTable> ttable,
);

typedef _c_GrowTable = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<NTable>> prev,
);

typedef _dart_GrowTable = void Function(
  ffi.Pointer<ffi.Pointer<NTable>> prev,
);

typedef _c_MergeValues = ffi.Void Function(
  ffi.Pointer<LTable> ftable,
  ffi.Pointer<ffi.Pointer<NTable>> pprev,
  ffi.Int32 override,
);

typedef _dart_MergeValues = void Function(
  ffi.Pointer<LTable> ftable,
  ffi.Pointer<ffi.Pointer<NTable>> pprev,
  int override,
);

typedef _c_MergeTables = ffi.Void Function(
  ffi.Pointer<NTable> ftable,
  ffi.Pointer<ffi.Pointer<NTable>> pprev,
  ffi.Int32 override,
);

typedef _dart_MergeTables = void Function(
  ffi.Pointer<NTable> ftable,
  ffi.Pointer<ffi.Pointer<NTable>> pprev,
  int override,
);

typedef _c_PutEntry = ffi.Void Function(
  ffi.Pointer<_XrmHashBucketRec> db,
  ffi.Pointer<ffi.Int32> bindings,
  ffi.Pointer<ffi.Int32> quarks,
  ffi.Int32 type,
  ffi.Pointer<XrmValuePtr> value,
);

typedef _dart_PutEntry = void Function(
  ffi.Pointer<_XrmHashBucketRec> db,
  ffi.Pointer<ffi.Int32> bindings,
  ffi.Pointer<ffi.Int32> quarks,
  int type,
  ffi.Pointer<XrmValuePtr> value,
);

typedef _c_GetIncludeFile = ffi.Void Function(
  ffi.Pointer<_XrmHashBucketRec> db,
  ffi.Pointer<ffi.Int8> base,
  ffi.Pointer<ffi.Int8> fname,
  ffi.Int32 fnamelen,
  ffi.Int32 depth,
);

typedef _dart_GetIncludeFile = void Function(
  ffi.Pointer<_XrmHashBucketRec> db,
  ffi.Pointer<ffi.Int8> base,
  ffi.Pointer<ffi.Int8> fname,
  int fnamelen,
  int depth,
);

typedef _c_GetDatabase = ffi.Void Function(
  ffi.Pointer<_XrmHashBucketRec> db,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 doall,
  ffi.Int32 depth,
);

typedef _dart_GetDatabase = void Function(
  ffi.Pointer<_XrmHashBucketRec> db,
  ffi.Pointer<ffi.Int8> str,
  ffi.Pointer<ffi.Int8> filename,
  int doall,
  int depth,
);

typedef _c_ReadInFile = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_ReadInFile = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_EnumLTable = ffi.Int32 Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Int32 level,
  ffi.Pointer<EClosure> closure,
);

typedef _dart_EnumLTable = int Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  int level,
  ffi.Pointer<EClosure> closure,
);

typedef _c_EnumAllNTable = ffi.Int32 Function(
  ffi.Pointer<NTable> table,
  ffi.Int32 level,
  ffi.Pointer<EClosure> closure,
);

typedef _dart_EnumAllNTable = int Function(
  ffi.Pointer<NTable> table,
  int level,
  ffi.Pointer<EClosure> closure,
);

typedef _c_EnumNTable = ffi.Int32 Function(
  ffi.Pointer<NTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Int32 level,
  ffi.Pointer<EClosure> closure,
);

typedef _dart_EnumNTable = int Function(
  ffi.Pointer<NTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  int level,
  ffi.Pointer<EClosure> closure,
);

typedef _c_PrintBindingQuarkList = ffi.Void Function(
  ffi.Pointer<ffi.Int32> bindings,
  ffi.Pointer<ffi.Int32> quarks,
  ffi.Pointer<_IO_FILE> stream,
);

typedef _dart_PrintBindingQuarkList = void Function(
  ffi.Pointer<ffi.Int32> bindings,
  ffi.Pointer<ffi.Int32> quarks,
  ffi.Pointer<_IO_FILE> stream,
);

typedef _c_DumpEntry = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> db,
  ffi.Pointer<ffi.Int32> bindings,
  ffi.Pointer<ffi.Int32> quarks,
  ffi.Pointer<ffi.Int32> type,
  ffi.Pointer<XrmValuePtr> value,
  ffi.Pointer<ffi.Int8> data,
);

typedef _dart_DumpEntry = int Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>> db,
  ffi.Pointer<ffi.Int32> bindings,
  ffi.Pointer<ffi.Int32> quarks,
  ffi.Pointer<ffi.Int32> type,
  ffi.Pointer<XrmValuePtr> value,
  ffi.Pointer<ffi.Int8> data,
);

typedef _c_AppendLEntry = ffi.Int32 Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<SClosure> closure,
);

typedef _dart_AppendLEntry = int Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<SClosure> closure,
);

typedef _c_AppendLooseLEntry = ffi.Int32 Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<SClosure> closure,
);

typedef _dart_AppendLooseLEntry = int Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<SClosure> closure,
);

typedef _c_SearchNEntry = ffi.Int32 Function(
  ffi.Pointer<NTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<SClosure> closure,
);

typedef _dart_SearchNEntry = int Function(
  ffi.Pointer<NTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<SClosure> closure,
);

typedef _c_GetVEntry = ffi.Int32 Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<VClosure> closure,
);

typedef _dart_GetVEntry = int Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<VClosure> closure,
);

typedef _c_GetLooseVEntry = ffi.Int32 Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<VClosure> closure,
);

typedef _dart_GetLooseVEntry = int Function(
  ffi.Pointer<LTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<VClosure> closure,
);

typedef _c_GetNEntry = ffi.Int32 Function(
  ffi.Pointer<NTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<VClosure> closure,
);

typedef _dart_GetNEntry = int Function(
  ffi.Pointer<NTable> table,
  ffi.Pointer<ffi.Int32> names,
  ffi.Pointer<ffi.Int32> classes,
  ffi.Pointer<VClosure> closure,
);

typedef _c_DestroyLTable = ffi.Void Function(
  ffi.Pointer<LTable> table,
);

typedef _dart_DestroyLTable = void Function(
  ffi.Pointer<LTable> table,
);

typedef _c_DestroyNTable = ffi.Void Function(
  ffi.Pointer<NTable> table,
);

typedef _dart_DestroyNTable = void Function(
  ffi.Pointer<NTable> table,
);

typedef _typedefC_1 = ffi.Int32 Function(
  ffi.Pointer<XExtData>,
);

typedef _typedefC_2 = ffi.Pointer<XImage> Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<Visual>,
  ffi.Uint32,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint32,
  ffi.Uint32,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_3 = ffi.Int32 Function(
  ffi.Pointer<XImage>,
);

typedef _typedefC_4 = ffi.Uint64 Function(
  ffi.Pointer<XImage>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_5 = ffi.Int32 Function(
  ffi.Pointer<XImage>,
  ffi.Int32,
  ffi.Int32,
  ffi.Uint64,
);

typedef _typedefC_6 = ffi.Pointer<XImage> Function(
  ffi.Pointer<XImage>,
  ffi.Int32,
  ffi.Int32,
  ffi.Uint32,
  ffi.Uint32,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<XImage>,
  ffi.Int64,
);

typedef _typedefC_8 = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef XIMProc = ffi.Void Function(
  ffi.Pointer<_XIM>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XICProc = ffi.Int32 Function(
  ffi.Pointer<_XIC>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XcmsParseStringProc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<XcmsColor>,
);

typedef XcmsFuncListPtr = ffi.Int32 Function(
  ffi.Pointer<XcmsCCCRec>,
  ffi.Pointer<XcmsColor>,
  ffi.Pointer<XcmsColor>,
  ffi.Uint32,
);

typedef XcmsScreenInitProc = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Int32,
  ffi.Pointer<XcmsPerScrnInfo>,
);

typedef XcmsScreenFreeProc = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_13 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_16 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_21 = ffi.Uint64 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _typedefC_22 = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
);

typedef _typedefC_26 = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
);

typedef _typedefC_27 = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
);

typedef FreeFuncType = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
);

typedef FreeModmapType = ffi.Int32 Function(
  ffi.Pointer<XModifierKeymap>,
);

typedef _typedefC_59 = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
);

typedef _typedefC_60 = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_61 = ffi.Int32 Function(
  ffi.Pointer<XimValueOffsetInfo>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_95 = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef XkbKSToMBFunc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
);

typedef XkbMBToKSFunc = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
);

typedef XkbToUpperFunc = ffi.Uint64 Function(
  ffi.Uint64,
);

typedef XmbInitProc = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef XmbCharProc = ffi.Int8 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int32>,
);

typedef XmbFinishProc = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef XlcNameProc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8>,
);

typedef XrmDestroyProc = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef XCloseLCProc = ffi.Void Function(
  ffi.Pointer<XLCdRec>,
);

typedef XlcMapModifiersProc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XOpenOMProc = ffi.Pointer<_XOM> Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XrmHashBucketRec>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XOpenIMProc = ffi.Pointer<_XIM> Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XrmHashBucketRec>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XrmInitParseInfoProc = ffi.Pointer<XrmMethodsRec> Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef XmbTextPropertyToTextListProc = ffi.Int32 Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XTextProperty>,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
  ffi.Pointer<ffi.Int32>,
);

typedef XwcTextPropertyToTextListProc = ffi.Int32 Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<XTextProperty>,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>>,
  ffi.Pointer<ffi.Int32>,
);

typedef XmbTextListToTextPropertyProc = ffi.Int32 Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<XTextProperty>,
);

typedef XwcTextListToTextPropertyProc = ffi.Int32 Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Pointer<ffi.Int32>>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<XTextProperty>,
);

typedef XwcFreeStringListProc = ffi.Void Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<ffi.Pointer<ffi.Int32>>,
);

typedef XDefaultStringProc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec>,
);

typedef _typedefC_100 = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XRegisterIMInstantiateCBProc = ffi.Int32 Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XrmHashBucketRec>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_100>>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_101 = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XUnregisterIMInstantiateCBProc = ffi.Int32 Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<_XDisplay>,
  ffi.Pointer<_XrmHashBucketRec>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_101>>,
  ffi.Pointer<ffi.Int8>,
);

typedef XCloseOMProc = ffi.Int32 Function(
  ffi.Pointer<_XOM>,
);

typedef XSetOMValuesProc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM>,
  ffi.Pointer<XlcArgList>,
  ffi.Int32,
);

typedef XGetOMValuesProc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOM>,
  ffi.Pointer<XlcArgList>,
  ffi.Int32,
);

typedef XCreateOCProc = ffi.Pointer<_XOC> Function(
  ffi.Pointer<_XOM>,
  ffi.Pointer<XlcArgList>,
  ffi.Int32,
);

typedef XDestroyOCProc = ffi.Void Function(
  ffi.Pointer<_XOC>,
);

typedef XSetOCValuesProc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC>,
  ffi.Pointer<XlcArgList>,
  ffi.Int32,
);

typedef XGetOCValuesProc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XOC>,
  ffi.Pointer<XlcArgList>,
  ffi.Int32,
);

typedef XmbTextEscapementProc = ffi.Int32 Function(
  ffi.Pointer<_XOC>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef XmbTextExtentsProc = ffi.Int32 Function(
  ffi.Pointer<_XOC>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<XRectangle>,
  ffi.Pointer<XRectangle>,
);

typedef XmbTextPerCharExtentsProc = ffi.Int32 Function(
  ffi.Pointer<_XOC>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<XRectangle>,
  ffi.Pointer<XRectangle>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<XRectangle>,
  ffi.Pointer<XRectangle>,
);

typedef XmbDrawStringProc = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Uint64,
  ffi.Pointer<_XOC>,
  ffi.Pointer<_XGC>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef XmbDrawImageStringProc = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Uint64,
  ffi.Pointer<_XOC>,
  ffi.Pointer<_XGC>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef XwcTextEscapementProc = ffi.Int32 Function(
  ffi.Pointer<_XOC>,
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
);

typedef XwcTextExtentsProc = ffi.Int32 Function(
  ffi.Pointer<_XOC>,
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Pointer<XRectangle>,
  ffi.Pointer<XRectangle>,
);

typedef XwcTextPerCharExtentsProc = ffi.Int32 Function(
  ffi.Pointer<_XOC>,
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Pointer<XRectangle>,
  ffi.Pointer<XRectangle>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<XRectangle>,
  ffi.Pointer<XRectangle>,
);

typedef XwcDrawStringProc = ffi.Int32 Function(
  ffi.Pointer<_XDisplay>,
  ffi.Uint64,
  ffi.Pointer<_XOC>,
  ffi.Pointer<_XGC>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
);

typedef XwcDrawImageStringProc = ffi.Void Function(
  ffi.Pointer<_XDisplay>,
  ffi.Uint64,
  ffi.Pointer<_XOC>,
  ffi.Pointer<_XGC>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
);

typedef _typedefC_102 = ffi.Int32 Function(
  ffi.Pointer<_XIM>,
);

typedef _typedefC_103 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM>,
  ffi.Pointer<XIMArg>,
);

typedef _typedefC_104 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIM>,
  ffi.Pointer<XIMArg>,
);

typedef _typedefC_105 = ffi.Pointer<_XIC> Function(
  ffi.Pointer<_XIM>,
  ffi.Pointer<XIMArg>,
);

typedef _typedefC_106 = ffi.Int32 Function(
  ffi.Pointer<_XIM>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_107 = ffi.Int32 Function(
  ffi.Pointer<_XIM>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_108 = ffi.Int32 Function(
  ffi.Pointer<_XIM>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_109 = ffi.Void Function(
  ffi.Pointer<_XIC>,
);

typedef _typedefC_110 = ffi.Void Function(
  ffi.Pointer<_XIC>,
);

typedef _typedefC_111 = ffi.Void Function(
  ffi.Pointer<_XIC>,
);

typedef _typedefC_112 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC>,
  ffi.Pointer<XIMArg>,
);

typedef _typedefC_113 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC>,
  ffi.Pointer<XIMArg>,
);

typedef _typedefC_114 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC>,
);

typedef _typedefC_115 = ffi.Pointer<ffi.Int32> Function(
  ffi.Pointer<_XIC>,
);

typedef _typedefC_116 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<_XIC>,
);

typedef _typedefC_117 = ffi.Int32 Function(
  ffi.Pointer<_XIC>,
  ffi.Pointer<XKeyEvent>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint64>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_118 = ffi.Int32 Function(
  ffi.Pointer<_XIC>,
  ffi.Pointer<XKeyEvent>,
  ffi.Pointer<ffi.Int32>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint64>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_119 = ffi.Int32 Function(
  ffi.Pointer<_XIC>,
  ffi.Pointer<XKeyEvent>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint64>,
  ffi.Pointer<ffi.Int32>,
);

typedef XlcCloseConverterProc = ffi.Void Function(
  ffi.Pointer<XlcConvRec>,
);

typedef XlcConvertProc = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
  ffi.Int32,
);

typedef XlcResetConverterProc = ffi.Void Function(
  ffi.Pointer<XlcConvRec>,
);

typedef XimProtoIntrProc = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XimTransConnectProc = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
);

typedef XimTransShutdownProc = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
);

typedef XimTransWriteProc = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef XimTransReadProc = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<ffi.Int32>,
);

typedef XimTransFlushProc = ffi.Void Function(
  ffi.Pointer<XimRec>,
);

typedef _typedefC_120 = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef XimTransRegDispatcher = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
  ffi.Pointer<ffi.NativeFunction<_typedefC_120>>,
  ffi.Pointer<ffi.Int8>,
);

typedef XimTransCallDispatcher = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
);

typedef XlcPubCreateProc = ffi.Pointer<XLCdRec> Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<XLCdMethods>,
);

typedef XlcPubInitializeProc = ffi.Int32 Function(
  ffi.Pointer<XLCdRec>,
);

typedef XlcPubDestroyProc = ffi.Void Function(
  ffi.Pointer<XLCdRec>,
);

typedef XlcPubGetValuesProc = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<XlcArgList>,
  ffi.Int32,
);

typedef XlcPubGetResourceProc = ffi.Void Function(
  ffi.Pointer<XLCdRec>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_121 = ffi.Int32 Function(
  ffi.Int32,
);

typedef _typedefC_122 = ffi.Int32 Function(
  ffi.Int32,
);

typedef _typedefC_123 = ffi.Int32 Function(
  ffi.Int32,
);

typedef _typedefC_124 = ffi.Int32 Function(
  ffi.Int32,
);

typedef _typedefC_125 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec>,
  ffi.Pointer<ffi.Uint32>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Int32,
);

typedef _typedefC_126 = ffi.Int32 Function(
  ffi.Pointer<XlcConvRec>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Uint32,
  ffi.Int32,
);

typedef _typedefC_127 = ffi.Pointer<XLCdRec> Function();

typedef _typedefC_128 = ffi.NativeFunction<_typedefC_129> Function(
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_130 = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_133 = ffi.Int32 Function(
  ffi.Pointer<XimRec>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_134 = ffi.Pointer<_XtransConnInfo> Function(
  ffi.Pointer<Xtransport>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_135 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
  ffi.Int32,
  ffi.Int32,
);

typedef _typedefC_136 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_137 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
  ffi.Pointer<ffi.Int32>,
);

typedef _typedefC_138 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_139 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_140 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
  ffi.Pointer<iovec>,
  ffi.Int32,
);

typedef _typedefC_141 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
  ffi.Pointer<iovec>,
  ffi.Int32,
);

typedef _typedefC_142 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
);

typedef _typedefC_143 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
);

typedef _typedefC_144 = ffi.Int32 Function(
  ffi.Pointer<_XtransConnInfo>,
);

typedef DBEnumProc = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<_XrmHashBucketRec>>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<XrmValuePtr>,
  ffi.Pointer<ffi.Int8>,
);
